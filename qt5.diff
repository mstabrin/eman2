--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/breakbrick.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/breakbrick.py	2017-10-21 17:14:45.000000000 -0500
@@ -7,10 +7,10 @@
 from emimage2d import EMImage2DWidget
 from emshape import EMShape
 
-import PyQt4
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
-from PyQt4.QtCore import QTimer
+import PyQt5
+from PyQt5 import QtCore, QtOpenGL
+from PyQt5.QtCore import Qt
+from PyQt5.QtCore import QTimer
 
 def main():
 	
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/displaydemo.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/displaydemo.py	2017-10-21 17:14:45.000000000 -0500
@@ -37,7 +37,7 @@
 
 from EMAN2 import *
 from math import *
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from emapplication import EMApp
 from emimage2d import EMImage2DWidget
 from emshape import EMShape
@@ -57,9 +57,9 @@
 		self.im2d = EMImage2DWidget(application=app)
 	
 		# get some signals from the window.
-		QtCore.QObject.connect(self.im2d,QtCore.SIGNAL("mousedown"),self.down)
+		self.im2d.mousedown.connect(self.down)
 		QtCore.QObject.connedisplaydemo.pyct(self.im2d,QtCore.SIGNAL("mousedrag"),self.drag)
-		QtCore.QObject.connect(self.im2d,QtCore.SIGNAL("mouseup"),self.up)
+		self.im2d.mouseup.connect(self.up)
 	
 		#self explanatory
 		a=test_image(size=(512,512))
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/drawshape.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/drawshape.py	2017-10-21 17:14:45.000000000 -0500
@@ -4,8 +4,8 @@
 from EMAN2 import *
 import numpy as np
 import weakref
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import get_application, EMApp
 from emimage2d import EMImage2DWidget
 from emshape import EMShape
@@ -35,13 +35,13 @@
 	launch_childprocess(cmd)
 	
 	
-class EMDrawWindow(QtGui.QMainWindow):
+class EMDrawWindow(QtWidgets.QMainWindow):
 
 	def __init__(self,application,options,datafile=None):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.imgview = EMImage2DWidget()
-		self.setCentralWidget(QtGui.QWidget())
-		self.gbl = QtGui.QGridLayout(self.centralWidget())
+		self.setCentralWidget(QtWidgets.QWidget())
+		self.gbl = QtWidgets.QGridLayout(self.centralWidget())
 		
 		self.gbl.addWidget(self.imgview,0,0)
 		self.options=options
@@ -59,8 +59,8 @@
 
 		print("imgnum,x,y,major,minor,angle")
 		
-		QtCore.QObject.connect(self.imgview,QtCore.SIGNAL("mouseup"),self.mouseup  )
-		QtCore.QObject.connect(self.imgview,QtCore.SIGNAL("mousemove"),self.mousemv)
+		self.imgview.mouseup.connect(self.mouseup)
+		self.imgview.mousemove.connect(self.mousemv)
 		
 		
 	def update_view(self):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2fftsynth.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2fftsynth.py	2017-10-21 17:14:46.000000000 -0500
@@ -35,8 +35,8 @@
 from optparse import OptionParser
 
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
 	from emshape import *
 	from valslider import ValSlider,ValBox
 	from emimage import EMImageWidget
@@ -72,22 +72,22 @@
 	except: pass
 	app.exec_()
 	
-class GUIFourierSynth(QtGui.QWidget):
+class GUIFourierSynth(QtWidgets.QWidget):
 	"""This class represents an application for interactive Fourier synthesis"""
 	
 	def __init__(self,app):
 		self.app=app
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 
 		self.synthplot=EMPlot2DWidget(self.app)
 		self.synthplot.show()
 		
 		# overall layout
-		self.vbl1=QtGui.QVBoxLayout()
+		self.vbl1=QtWidgets.QVBoxLayout()
 		self.setLayout(self.vbl1)
 		
 		# First row contains general purpose controls
-		self.hbl1=QtGui.QHBoxLayout()
+		self.hbl1=QtWidgets.QHBoxLayout()
 		self.vbl1.addLayout(self.hbl1)
 		
 		self.vcell=ValBox(self,(0,128.0),"Cell:",64)
@@ -105,13 +105,13 @@
 		self.vnsin.intonly=1
 		self.hbl1.addWidget(self.vnsin)
 		
-		self.cbshowall=QtGui.QCheckBox("Show All")
+		self.cbshowall=QtWidgets.QCheckBox("Show All")
 		self.hbl1.addWidget(self.cbshowall)
 
-		self.cbshifted=QtGui.QCheckBox("Shifted")
+		self.cbshifted=QtWidgets.QCheckBox("Shifted")
 		self.hbl1.addWidget(self.cbshifted)
 
-		self.cbtargfn=QtGui.QComboBox(self)
+		self.cbtargfn=QtWidgets.QComboBox(self)
 		self.cbtargfn.addItem("None")
 		self.cbtargfn.addItem("triangle")
 		self.cbtargfn.addItem("square")
@@ -132,27 +132,27 @@
 		self.hbl1.addWidget(self.cbtargfn)
 		
 		# Widget containing valsliders
-		self.wapsliders=QtGui.QWidget(self)
+		self.wapsliders=QtWidgets.QWidget(self)
 #		self.wapsliders.setMinimumSize(800,640)
-		self.gblap=QtGui.QGridLayout()
-		self.gblap.setSizeConstraint(QtGui.QLayout.SetMinAndMaxSize)
+		self.gblap=QtWidgets.QGridLayout()
+		self.gblap.setSizeConstraint(QtWidgets.QLayout.SetMinAndMaxSize)
 		self.gblap.setColumnMinimumWidth(0,250)
 		self.gblap.setColumnMinimumWidth(1,250)
 		self.wapsliders.setLayout(self.gblap)
 		
 		# ScrollArea providing view on slider container widget
-		self.wapsarea=QtGui.QScrollArea(self)
+		self.wapsarea=QtWidgets.QScrollArea(self)
 		self.wapsarea.setWidgetResizable(True)
 		self.wapsarea.setWidget(self.wapsliders)
 		self.vbl1.addWidget(self.wapsarea)
 
-		QtCore.QObject.connect(self.vcell, QtCore.SIGNAL("valueChanged"), self.recompute)
-		QtCore.QObject.connect(self.vncells, QtCore.SIGNAL("valueChanged"), self.recompute)
-		QtCore.QObject.connect(self.voversamp, QtCore.SIGNAL("valueChanged"), self.recompute)
-		QtCore.QObject.connect(self.vnsin, QtCore.SIGNAL("valueChanged"), self.nsinchange)
-		QtCore.QObject.connect(self.cbshowall, QtCore.SIGNAL("stateChanged(int)"), self.recompute)
-		QtCore.QObject.connect(self.cbshifted, QtCore.SIGNAL("stateChanged(int)"), self.recompute)
-		QtCore.QObject.connect(self.cbtargfn,QtCore.SIGNAL("activated(int)"),self.newtargfn)
+		self.vcell.valueChanged.connect(self.recompute)
+		self.vncells.valueChanged.connect(self.recompute)
+		self.voversamp.valueChanged.connect(self.recompute)
+		self.vnsin.valueChanged.connect(self.nsinchange)
+		self.cbshowall.stateChanged[int].connect(self.recompute)
+		self.cbshifted.stateChanged[int].connect(self.recompute)
+		self.cbtargfn.activated[int].connect(self.newtargfn)
 
 
 		self.wamp=[]
@@ -162,11 +162,11 @@
 		for i in range(65):
 			self.wamp.append(ValSlider(self,(0.0,1.0),"%2d:"%i,0.0))
 			self.gblap.addWidget(self.wamp[-1],i,0)
-			QtCore.QObject.connect(self.wamp[-1], QtCore.SIGNAL("valueChanged"), self.recompute)
+			self.wamp[-1].valueChanged.connect(self.recompute)
 			
 			self.wpha.append(ValSlider(self,(-180.0,180.0),"%2d:"%i,0.0))
 			self.gblap.addWidget(self.wpha[-1],i,1)
-			QtCore.QObject.connect(self.wpha[-1], QtCore.SIGNAL("valueChanged"), self.recompute)
+			self.wpha[-1].valueChanged.connect(self.recompute)
 		
 			self.curves.append(EMData(64,1))
 		
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2spt_boxer22.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2spt_boxer22.py	2017-10-21 17:14:47.000000000 -0500
@@ -40,8 +40,8 @@
 import numpy as np
 
 import weakref
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import get_application, EMApp
 from emimage2d import EMImage2DWidget
 from emimagemx import EMImageMXWidget
@@ -95,11 +95,13 @@
 	E2end(logid)
 	return
 
-class EMTomoBoxer(QtGui.QMainWindow):
+class EMTomoBoxer(QtWidgets.QMainWindow):
 	"""This class represents the EMTomoBoxer application instance.  """
+	keypress = QtCore.pyqtSignal()
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self,application,options,datafile=None):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.initialized=False
 		self.app=weakref.ref(application)
 		self.options=options
@@ -130,8 +132,8 @@
 		self.mwin_average=self.mwin.addAction("Averaging")
 
 
-		self.setCentralWidget(QtGui.QWidget())
-		self.gbl = QtGui.QGridLayout(self.centralWidget())
+		self.setCentralWidget(QtWidgets.QWidget())
+		self.gbl = QtWidgets.QGridLayout(self.centralWidget())
 
 		# relative stretch factors
 		self.gbl.setColumnStretch(0,1)
@@ -151,11 +153,11 @@
 		self.gbl.addWidget(self.zyview,0,0)
 
 		# Select Z for xy view
-		self.wdepth = QtGui.QSlider()
+		self.wdepth = QtWidgets.QSlider()
 		self.gbl.addWidget(self.wdepth,1,2)
 
 		### Control panel area in upper left corner
-		self.gbl2 = QtGui.QGridLayout()
+		self.gbl2 = QtWidgets.QGridLayout()
 		self.gbl.addLayout(self.gbl2,1,0)
 
 		# box size
@@ -163,19 +165,19 @@
 		self.gbl2.addWidget(self.wboxsize,1,0,1,2)
 
 		# max or mean
-		self.wmaxmean=QtGui.QPushButton("MaxProj")
+		self.wmaxmean=QtWidgets.QPushButton("MaxProj")
 		self.wmaxmean.setCheckable(True)
 		self.gbl2.addWidget(self.wmaxmean,2,0)
 
 		# number slices
-		self.wnlayers=QtGui.QSpinBox()
+		self.wnlayers=QtWidgets.QSpinBox()
 		self.wnlayers.setMinimum(1)
 		self.wnlayers.setMaximum(256)
 		self.wnlayers.setValue(1)
 		self.gbl2.addWidget(self.wnlayers,2,1)
 
 		# Local boxes in side view
-		self.wlocalbox=QtGui.QCheckBox("Limit Side Boxes")
+		self.wlocalbox=QtWidgets.QCheckBox("Limit Side Boxes")
 		self.gbl2.addWidget(self.wlocalbox,3,0)
 
 		# scale factor
@@ -195,51 +197,51 @@
 		self.firsthbclick = None
 
 		# coordinate display
-		self.wcoords=QtGui.QLabel("X: " + str(self.get_x()) + "\t\t" + "Y: " + str(self.get_y()) + "\t\t" + "Z: " + str(self.get_z()))
+		self.wcoords=QtWidgets.QLabel("X: " + str(self.get_x()) + "\t\t" + "Y: " + str(self.get_y()) + "\t\t" + "Z: " + str(self.get_z()))
 		self.gbl2.addWidget(self.wcoords, 0, 0, 1, 2)
 
 		# file menu
-		QtCore.QObject.connect(self.mfile_open,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_open  )
-		QtCore.QObject.connect(self.mfile_read_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_read_boxloc  )
-		QtCore.QObject.connect(self.mfile_save_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxloc  )
-		QtCore.QObject.connect(self.mfile_save_boxes_stack,QtCore.SIGNAL("triggered(bool)")  ,self.save_boxes)
-		QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
+		self.mfile_open.triggered[bool].connect(self.menu_file_open)
+		self.mfile_read_boxloc.triggered[bool].connect(self.menu_file_read_boxloc)
+		self.mfile_save_boxloc.triggered[bool].connect(self.menu_file_save_boxloc)
+		self.mfile_save_boxes_stack.triggered[bool].connect(self.save_boxes)
+		self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
 
 		# window menu
-		QtCore.QObject.connect(self.mwin_boxes,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_boxes  )
-		QtCore.QObject.connect(self.mwin_single,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_single  )
+		self.mwin_boxes.triggered[bool].connect(self.menu_win_boxes)
+		self.mwin_single.triggered[bool].connect(self.menu_win_single)
 #		QtCore.QObject.connect(self.mwin_average,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_average  )
 
 		# all other widgets
-		QtCore.QObject.connect(self.wdepth,QtCore.SIGNAL("valueChanged(int)"),self.event_depth)
-		QtCore.QObject.connect(self.wnlayers,QtCore.SIGNAL("valueChanged(int)"),self.event_nlayers)
-		QtCore.QObject.connect(self.wboxsize,QtCore.SIGNAL("valueChanged"),self.event_boxsize)
-		QtCore.QObject.connect(self.wmaxmean,QtCore.SIGNAL("clicked(bool)"),self.event_projmode)
-		QtCore.QObject.connect(self.wscale,QtCore.SIGNAL("valueChanged")  ,self.event_scale  )
-		QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
-		QtCore.QObject.connect(self.wlocalbox,QtCore.SIGNAL("stateChanged(int)")  ,self.event_localbox  )
-
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousemove"),self.xy_move)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedown"),self.xy_down)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedrag"),self.xy_drag)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mouseup"),self.xy_up  )
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousewheel"),self.xy_wheel  )
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("set_scale"),self.xy_scale)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("origin_update"),self.xy_origin)
-
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedown"),self.xz_down)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedrag"),self.xz_drag)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mouseup")  ,self.xz_up  )
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("set_scale"),self.xz_scale)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("origin_update"),self.xz_origin)
-
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedown"),self.zy_down)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedrag"),self.zy_drag)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mouseup")  ,self.zy_up  )
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("set_scale"),self.zy_scale)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("origin_update"),self.zy_origin)
+		self.wdepth.valueChanged[int].connect(self.event_depth)
+		self.wnlayers.valueChanged[int].connect(self.event_nlayers)
+		self.wboxsize.valueChanged.connect(self.event_boxsize)
+		self.wmaxmean.clicked[bool].connect(self.event_projmode)
+		self.wscale.valueChanged.connect(self.event_scale)
+		self.wfilt.valueChanged.connect(self.event_filter)
+		self.wlocalbox.stateChanged[int].connect(self.event_localbox)
+
+		self.xyview.mousemove.connect(self.xy_move)
+		self.xyview.mousedown.connect(self.xy_down)
+		self.xyview.mousedrag.connect(self.xy_drag)
+		self.xyview.mouseup.connect(self.xy_up)
+		self.xyview.mousewheel.connect(self.xy_wheel)
+		self.xyview.set_scale.connect(self.xy_scale)
+		self.xyview.origin_update.connect(self.xy_origin)
+
+		self.xzview.mousedown.connect(self.xz_down)
+		self.xzview.mousedrag.connect(self.xz_drag)
+		self.xzview.mouseup.connect(self.xz_up)
+		self.xzview.set_scale.connect(self.xz_scale)
+		self.xzview.origin_update.connect(self.xz_origin)
+
+		self.zyview.mousedown.connect(self.zy_down)
+		self.zyview.mousedrag.connect(self.zy_drag)
+		self.zyview.mouseup.connect(self.zy_up)
+		self.zyview.set_scale.connect(self.zy_scale)
+		self.zyview.origin_update.connect(self.zy_origin)
 		
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("keypress"),self.key_press)
+		self.xyview.keypress.connect(self.key_press)
 		self.datafilename=datafile
 		self.basename=base_name(datafile)
 		p0=datafile.find('__')
@@ -282,7 +284,7 @@
 #		self.averageviewer=EMAverageViewer(self)
 		#self.averageviewer.show()
 
-		QtCore.QObject.connect(self.boxesviewer,QtCore.SIGNAL("mx_image_selected"),self.img_selected)
+		self.boxesviewer.mx_image_selected.connect(self.img_selected)
 		
 		self.jsonfile=info_name(datafile)
 		
@@ -581,7 +583,7 @@
 
 
 	def menu_file_open(self,tog):
-		QtGui.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
+		QtWidgets.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
 
 	def load_box_yshort(self, boxcoords):
 		if options.yshort:
@@ -590,7 +592,7 @@
 			return boxcoords
 
 	def menu_file_read_boxloc(self):
-		fsp=str(QtGui.QFileDialog.getOpenFileName(self, "Select output text file"))
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
 
 		f=open(fsp,"r")
 		for b in f:
@@ -605,7 +607,7 @@
 	def menu_file_save_boxloc(self):
 		shrinkf=self.shrink 								#jesus
 
-		fsp=str(QtGui.QFileDialog.getSaveFileName(self, "Select output text file"))
+		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
 
 		out=open(fsp,"w")
 		if self.helixboxer:
@@ -624,7 +626,7 @@
 		else:
 			defaultname="_".join([self.sets[i] for i in clsid])+".hdf"
 		
-		name,ok=QtGui.QInputDialog.getText( self, "Save particles", "Filename suffix:", text=defaultname)
+		name,ok=QtWidgets.QInputDialog.getText( self, "Save particles", "Filename suffix:", text=defaultname)
 		if not ok:
 			return
 		name=self.filetag+str(name)
@@ -644,7 +646,7 @@
 				print("{} exist. Overwritting...".format(f))
 				os.remove(f)
 		
-		progress = QtGui.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
+		progress = QtWidgets.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
 		
 		
 		boxsz=-1
@@ -1394,7 +1396,7 @@
 		elif event.key() == 49:
 			self.wdepth.setValue(self.wdepth.value()-1)
 		else:
-			self.emit(QtCore.SIGNAL("keypress"), event)
+			self.keypress.emit(event)
 
 	
 	def closeEvent(self,event):
@@ -1420,7 +1422,7 @@
 #		self.averageviewer.close()
 		#event.accept()
 		#self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+		self.module_closed.emit()
 
 	#def closeEvent(self,event):
 		#self.target().done()
@@ -1439,16 +1441,16 @@
 			
 	
 
-class EMBoxViewer(QtGui.QWidget):
+class EMBoxViewer(QtWidgets.QWidget):
 	"""This is a multi-paned view showing a single boxed out particle from a larger tomogram"""
 
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.setWindowTitle("Single Particle View")
 
 		self.resize(300,300)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 		self.xyview = EMImage2DWidget()
 		self.gbl.addWidget(self.xyview,0,1)
 
@@ -1473,7 +1475,7 @@
 		self.wfilt = ValSlider(rng=(0,50),label="Filter:",value=0.0)
 		self.gbl.addWidget(self.wfilt,2,0,1,2)
 
-		QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
+		self.wfilt.valueChanged.connect(self.event_filter)
 
 		self.gbl.setRowStretch(2,1)
 		self.gbl.setRowStretch(0,5)
@@ -1547,26 +1549,26 @@
 		self.zyview.close()
 
 
-class EMTomoBoxerOptions(QtGui.QWidget):
+class EMTomoBoxerOptions(QtWidgets.QWidget):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		#print "aaaaaaaa"
 		self.setWindowTitle("Options")
 		self.target=weakref.ref(target)
 		
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 		#self.gbl.setMargin(2)
 		#self.gbl.setSpacing(6)
 		self.gbl.setObjectName("gbl")
 		
 		
-		self.erasercheckbox=QtGui.QCheckBox("Eraser")
+		self.erasercheckbox=QtWidgets.QCheckBox("Eraser")
 		self.gbl.addWidget(self.erasercheckbox,0,0)
 		
 		self.eraser_radius=ValBox(label="Radius:",value=64)
 		self.gbl.addWidget(self.eraser_radius,0,1)
 
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.gbl.addWidget(self.tabwidget,1,0,1,2)
 		
 	def add_panel(self,widget,name):
@@ -1575,12 +1577,12 @@
 		return 
 
 #### Copied from emimagemx.py since some modification are needed...
-class EMTomoSetsPanel(QtGui.QWidget):
+class EMTomoSetsPanel(QtWidgets.QWidget):
 	'''
 	This is the set display panel
 	'''
 	def __init__(self,target):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 
 		self.target = weakref.ref(target) # this should be the EMImageMXWidget
 		self.busy = False
@@ -1590,30 +1592,30 @@
 		self.itemflags=	Qt.ItemFlags(Qt.ItemIsEditable)|Qt.ItemFlags(Qt.ItemIsSelectable)|Qt.ItemFlags(Qt.ItemIsEnabled)|Qt.ItemFlags(Qt.ItemIsUserCheckable)
 
 		# now build the interface
-		hbl = QtGui.QHBoxLayout(self)
-		self.setlist=QtGui.QListWidget()
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		hbl = QtWidgets.QHBoxLayout(self)
+		self.setlist=QtWidgets.QListWidget()
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		hbl.addWidget(self.setlist)
 
-		vbl = QtGui.QVBoxLayout()
+		vbl = QtWidgets.QVBoxLayout()
 
-		self.new_set_button = QtGui.QPushButton("New")
+		self.new_set_button = QtWidgets.QPushButton("New")
 		vbl.addWidget(self.new_set_button)
-		self.rename_set_button = QtGui.QPushButton("Rename")
+		self.rename_set_button = QtWidgets.QPushButton("Rename")
 		vbl.addWidget(self.rename_set_button)
-		self.save_set_button = QtGui.QPushButton("Save")
+		self.save_set_button = QtWidgets.QPushButton("Save")
 		vbl.addWidget(self.save_set_button)
-		self.delete_set_button = QtGui.QPushButton("Delete")
+		self.delete_set_button = QtWidgets.QPushButton("Delete")
 		vbl.addWidget(self.delete_set_button)
 
 		hbl.addLayout(vbl)
 
-		QtCore.QObject.connect(self.save_set_button, QtCore.SIGNAL("clicked(bool)"), self.save_set)
-		QtCore.QObject.connect(self.new_set_button, QtCore.SIGNAL("clicked(bool)"), self.new_set)
-		QtCore.QObject.connect(self.rename_set_button, QtCore.SIGNAL("clicked(bool)"), self.rename_set)
-		QtCore.QObject.connect(self.delete_set_button, QtCore.SIGNAL("clicked(bool)"), self.delete_set)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.set_list_item_changed)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.set_list_row_changed)
+		self.save_set_button.clicked[bool].connect(self.save_set)
+		self.new_set_button.clicked[bool].connect(self.new_set)
+		self.rename_set_button.clicked[bool].connect(self.rename_set)
+		self.delete_set_button.clicked[bool].connect(self.delete_set)
+		self.setlist.itemChanged[QListWidgetItem].connect(self.set_list_item_changed)
+		self.setlist.currentRowChanged[int].connect(self.set_list_row_changed)
 
 
 	def sets_changed(self):
@@ -1643,14 +1645,14 @@
 	def delete_set(self,unused):
 		selections = self.setlist.selectedItems()
 		names=[str(i.text()) for i in selections]
-		cancel=QtGui.QMessageBox.warning(self, "Delete set", "Are you sure to delete {}? This will remove all particles in that class".format(names[0]), "Yes", "No")
+		cancel=QtWidgets.QMessageBox.warning(self, "Delete set", "Are you sure to delete {}? This will remove all particles in that class".format(names[0]), "Yes", "No")
 		if not cancel:
 			self.target().delete_set(names[0])
 		self.update_sets()
 
 
 	def new_set(self,unused=None):
-		name,ok=QtGui.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
+		name,ok=QtWidgets.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
 		if not ok : return
 		name=str(name)
 		if name in self.target().sets :
@@ -1665,7 +1667,7 @@
 		sels=[str(i.text()) for i in selections]
 		if len(sels)==0:
 			return
-		name,ok=QtGui.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
+		name,ok=QtWidgets.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
 		if not ok : return
 		name=str(name)
 		
@@ -1688,7 +1690,7 @@
 		for i,k in enumerate(keys):
 			
 			kname="{:02d} :: {}".format(int(k), self.target().sets[k])
-			item=QtGui.QListWidgetItem(kname)
+			item=QtWidgets.QListWidgetItem(kname)
 			item.setFlags(self.itemflags)
 			item.setTextColor(self.target().setcolors[i%len(self.target().setcolors)])
 			self.setlist.addItem(item)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2spt_boxer_old.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2spt_boxer_old.py	2017-10-21 17:14:47.000000000 -0500
@@ -918,8 +918,8 @@
 
 def sptboxergui(options,args):
 
-	from PyQt4 import QtCore, QtGui
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtWidgets
+	from PyQt5.QtCore import Qt
 	from emapplication import get_application, EMApp
 	from emimage2d import EMImage2DWidget
 	from emimagemx import EMImageMXWidget
@@ -929,11 +929,11 @@
 	from emshape import EMShape
 	from valslider import ValSlider, ValBox
 
-	class EMAverageViewer(QtGui.QWidget):
+	class EMAverageViewer(QtWidgets.QWidget):
 		"""This is a multi-paned view showing a single boxed out particle from a larger tomogram"""
 
 		def __init__(self,parent):
-			QtGui.QWidget.__init__(self)
+			QtWidgets.QWidget.__init__(self)
 
 			self.setWindowTitle("Particle Average")
 
@@ -941,7 +941,7 @@
 
 			self.resize(300,500)
 
-			self.gbl = QtGui.QGridLayout(self)
+			self.gbl = QtWidgets.QGridLayout(self)
 			#self.xyview = EMImage2DWidget()
 			#self.gbl.addWidget(self.xyview,0,1)
 
@@ -961,7 +961,7 @@
 			self.d3view = EMImage2DWidget()
 			self.gbl.addWidget(self.d3view,0,0)
 
-			self.gbl2 = QtGui.QGridLayout()
+			self.gbl2 = QtWidgets.QGridLayout()
 			self.gbl.addLayout(self.gbl2,1,0)
 
 			self.wfilt = ValSlider(rng=(0,50),label="Filter:",value=0.0)
@@ -970,17 +970,17 @@
 			self.wmask = ValSlider(rng=(0,100),label="Mask:",value=0.0)
 			self.gbl2.addWidget(self.wmask,3,0,1,2)
 
-			self.wsymlbl=QtGui.QLabel("Symmetry:")
+			self.wsymlbl=QtWidgets.QLabel("Symmetry:")
 			self.gbl2.addWidget(self.wsymlbl,4,0)
 
-			self.wsym=QtGui.QLineEdit("C1")
+			self.wsym=QtWidgets.QLineEdit("C1")
 			self.gbl2.addWidget(self.wsym,4,1)
 
-			self.wprog=QtGui.QProgressBar()
+			self.wprog=QtWidgets.QProgressBar()
 			self.wprog.setRange(0,100)
 			self.gbl2.addWidget(self.wprog,5,0,1,2)
 
-			self.wrestart=QtGui.QPushButton("Restart")
+			self.wrestart=QtWidgets.QPushButton("Restart")
 			self.gbl2.addWidget(self.wrestart,6,1)
 
 			self.needupd=0					# Set by the second thread when a display update is ready, 1 means progress update, 2 means volume update
@@ -994,15 +994,15 @@
 			self.filt=0.0
 			self.mask=0.0
 
-			QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
-			QtCore.QObject.connect(self.wmask,QtCore.SIGNAL("valueChanged")  ,self.event_mask  )
-			QtCore.QObject.connect(self.wsym,QtCore.SIGNAL("editingFinished()")  ,self.event_symchange  )
-			QtCore.QObject.connect(self.wrestart,QtCore.SIGNAL("clicked(bool)")  ,self.event_restart  )
+			self.wfilt.valueChanged.connect(self.event_filter)
+			self.wmask.valueChanged.connect(self.event_mask)
+			self.wsym.editingFinished.connect(self.event_symchange)
+			self.wrestart.clicked[bool].connect(self.event_restart)
 
 
 			# The timer event handles displaying the results processed by the other thread
 			self.timer=QtCore.QTimer(self)
-			QtCore.QObject.connect(self.timer,QtCore.SIGNAL("timeout")  ,self.event_timer  )
+			self.timer.timeout.connect(self.event_timer)
 			self.timer.start(500)
 
 			# The processing is all done in the background by the other thread
@@ -1066,16 +1066,16 @@
 				time.sleep(5)
 
 
-	class EMBoxViewer(QtGui.QWidget):
+	class EMBoxViewer(QtWidgets.QWidget):
 		"""This is a multi-paned view showing a single boxed out particle from a larger tomogram"""
 
 		def __init__(self):
-			QtGui.QWidget.__init__(self)
+			QtWidgets.QWidget.__init__(self)
 			self.setWindowTitle("Single Particle View")
 
 			self.resize(300,300)
 
-			self.gbl = QtGui.QGridLayout(self)
+			self.gbl = QtWidgets.QGridLayout(self)
 			self.xyview = EMImage2DWidget()
 			self.gbl.addWidget(self.xyview,0,1)
 
@@ -1100,7 +1100,7 @@
 			self.wfilt = ValSlider(rng=(0,50),label="Filter:",value=0.0)
 			self.gbl.addWidget(self.wfilt,2,0,1,2)
 
-			QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
+			self.wfilt.valueChanged.connect(self.event_filter)
 
 			self.gbl.setRowStretch(2,1)
 			self.gbl.setRowStretch(0,5)
@@ -1171,11 +1171,12 @@
 			self.d3view.close()
 
 
-	class EMTomoBoxer(QtGui.QMainWindow):
+	class EMTomoBoxer(QtWidgets.QMainWindow):
 		"""This class represents the EMTomoBoxer application instance.  """
+		module_closed = QtCore.pyqtSignal()
 
 		def __init__(self,application,data=None,datafile=None,yshort=False,apix=0.0,boxsize=32,shrink=1,contrast=None,center=None,mod=False,normalize=False):
-			QtGui.QWidget.__init__(self)
+			QtWidgets.QWidget.__init__(self)
 
 			self.app=weakref.ref(application)
 			self.yshort=yshort
@@ -1205,8 +1206,8 @@
 			self.mwin_average=self.mwin.addAction("Averaging")
 
 
-			self.setCentralWidget(QtGui.QWidget())
-			self.gbl = QtGui.QGridLayout(self.centralWidget())
+			self.setCentralWidget(QtWidgets.QWidget())
+			self.gbl = QtWidgets.QGridLayout(self.centralWidget())
 
 			# relative stretch factors
 			self.gbl.setColumnStretch(0,1)
@@ -1226,11 +1227,11 @@
 			self.gbl.addWidget(self.zyview,0,0)
 
 			# Select Z for xy view
-			self.wdepth = QtGui.QSlider()
+			self.wdepth = QtWidgets.QSlider()
 			self.gbl.addWidget(self.wdepth,1,2)
 
 			### Control panel area in upper left corner
-			self.gbl2 = QtGui.QGridLayout()
+			self.gbl2 = QtWidgets.QGridLayout()
 			self.gbl.addLayout(self.gbl2,1,0)
 
 			# box size
@@ -1239,19 +1240,19 @@
 			self.oldboxsize=boxsize
 
 			# max or mean
-			self.wmaxmean=QtGui.QPushButton("MaxProj")
+			self.wmaxmean=QtWidgets.QPushButton("MaxProj")
 			self.wmaxmean.setCheckable(True)
 			self.gbl2.addWidget(self.wmaxmean,2,0)
 
 			# number slices
-			self.wnlayers=QtGui.QSpinBox()
+			self.wnlayers=QtWidgets.QSpinBox()
 			self.wnlayers.setMinimum(1)
 			self.wnlayers.setMaximum(256)
 			self.wnlayers.setValue(1)
 			self.gbl2.addWidget(self.wnlayers,2,1)
 
 			# Local boxes in side view
-			self.wlocalbox=QtGui.QCheckBox("Limit Side Boxes")
+			self.wlocalbox=QtWidgets.QCheckBox("Limit Side Boxes")
 			self.gbl2.addWidget(self.wlocalbox,3,0)
 
 			# scale factor
@@ -1270,49 +1271,49 @@
 			self.firsthbclick = None
 
 			# coordinate display
-			self.wcoords=QtGui.QLabel("X: " + str(self.get_x()) + "\t\t" + "Y: " + str(self.get_y()) + "\t\t" + "Z: " + str(self.get_z()))
+			self.wcoords=QtWidgets.QLabel("X: " + str(self.get_x()) + "\t\t" + "Y: " + str(self.get_y()) + "\t\t" + "Z: " + str(self.get_z()))
 			self.gbl2.addWidget(self.wcoords, 0, 0, 1, 2)
 
 			# file menu
-			QtCore.QObject.connect(self.mfile_open,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_open  )
-			QtCore.QObject.connect(self.mfile_read_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_read_boxloc  )
-			QtCore.QObject.connect(self.mfile_save_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxloc  )
-			QtCore.QObject.connect(self.mfile_save_boxes,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxes  )
-			QtCore.QObject.connect(self.mfile_save_boxes_stack,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxes_stack)
-			QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
+			self.mfile_open.triggered[bool].connect(self.menu_file_open)
+			self.mfile_read_boxloc.triggered[bool].connect(self.menu_file_read_boxloc)
+			self.mfile_save_boxloc.triggered[bool].connect(self.menu_file_save_boxloc)
+			self.mfile_save_boxes.triggered[bool].connect(self.menu_file_save_boxes)
+			self.mfile_save_boxes_stack.triggered[bool].connect(self.menu_file_save_boxes_stack)
+			self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
 
 			# window menu
-			QtCore.QObject.connect(self.mwin_boxes,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_boxes  )
-			QtCore.QObject.connect(self.mwin_single,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_single  )
+			self.mwin_boxes.triggered[bool].connect(self.menu_win_boxes)
+			self.mwin_single.triggered[bool].connect(self.menu_win_single)
 	#		QtCore.QObject.connect(self.mwin_average,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_average  )
 
 			# all other widgets
-			QtCore.QObject.connect(self.wdepth,QtCore.SIGNAL("valueChanged(int)"),self.event_depth)
-			QtCore.QObject.connect(self.wnlayers,QtCore.SIGNAL("valueChanged(int)"),self.event_nlayers)
-			QtCore.QObject.connect(self.wboxsize,QtCore.SIGNAL("valueChanged"),self.event_boxsize)
-			QtCore.QObject.connect(self.wmaxmean,QtCore.SIGNAL("clicked(bool)"),self.event_projmode)
-			QtCore.QObject.connect(self.wscale,QtCore.SIGNAL("valueChanged")  ,self.event_scale  )
-			QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
-			QtCore.QObject.connect(self.wlocalbox,QtCore.SIGNAL("stateChanged(int)")  ,self.event_localbox  )
-
-			QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedown"),self.xy_down)
-			QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedrag"),self.xy_drag)
-			QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mouseup"),self.xy_up  )
-			QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousewheel"),self.xy_wheel  )
-			QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("set_scale"),self.xy_scale)
-			QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("origin_update"),self.xy_origin)
-
-			QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedown"),self.xz_down)
-			QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedrag"),self.xz_drag)
-			QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mouseup")  ,self.xz_up  )
-			QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("set_scale"),self.xz_scale)
-			QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("origin_update"),self.xz_origin)
-
-			QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedown"),self.zy_down)
-			QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedrag"),self.zy_drag)
-			QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mouseup")  ,self.zy_up  )
-			QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("set_scale"),self.zy_scale)
-			QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("origin_update"),self.zy_origin)
+			self.wdepth.valueChanged[int].connect(self.event_depth)
+			self.wnlayers.valueChanged[int].connect(self.event_nlayers)
+			self.wboxsize.valueChanged.connect(self.event_boxsize)
+			self.wmaxmean.clicked[bool].connect(self.event_projmode)
+			self.wscale.valueChanged.connect(self.event_scale)
+			self.wfilt.valueChanged.connect(self.event_filter)
+			self.wlocalbox.stateChanged[int].connect(self.event_localbox)
+
+			self.xyview.mousedown.connect(self.xy_down)
+			self.xyview.mousedrag.connect(self.xy_drag)
+			self.xyview.mouseup.connect(self.xy_up)
+			self.xyview.mousewheel.connect(self.xy_wheel)
+			self.xyview.set_scale.connect(self.xy_scale)
+			self.xyview.origin_update.connect(self.xy_origin)
+
+			self.xzview.mousedown.connect(self.xz_down)
+			self.xzview.mousedrag.connect(self.xz_drag)
+			self.xzview.mouseup.connect(self.xz_up)
+			self.xzview.set_scale.connect(self.xz_scale)
+			self.xzview.origin_update.connect(self.xz_origin)
+
+			self.zyview.mousedown.connect(self.zy_down)
+			self.zyview.mousedrag.connect(self.zy_drag)
+			self.zyview.mouseup.connect(self.zy_up)
+			self.zyview.set_scale.connect(self.zy_scale)
+			self.zyview.origin_update.connect(self.zy_origin)
 
 			if datafile!=None:
 				print("\nIn ETomoBoxer, datafile is", datafile)
@@ -1336,7 +1337,7 @@
 	#		self.averageviewer=EMAverageViewer(self)
 			#self.averageviewer.show()
 
-			QtCore.QObject.connect(self.boxesviewer,QtCore.SIGNAL("mx_image_selected"),self.img_selected)
+			self.boxesviewer.mx_image_selected.connect(self.img_selected)
 			self.e = None
 
 		def menu_win_boxes(self) : self.boxesviewer.show()
@@ -1557,7 +1558,7 @@
 
 
 		def menu_file_open(self,tog):
-			QtGui.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
+			QtWidgets.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
 
 		def load_box_yshort(self, boxcoords):
 			if options.yshort:
@@ -1566,7 +1567,7 @@
 				return boxcoords
 
 		def menu_file_read_boxloc(self):
-			fsp=str(QtGui.QFileDialog.getOpenFileName(self, "Select output text file"))
+			fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
 
 			f=open(fsp,"r")
 			if options.helixboxer:
@@ -1588,7 +1589,7 @@
 		def menu_file_save_boxloc(self):
 			shrinkf=self.shrink 								#jesus
 
-			fsp=str(QtGui.QFileDialog.getSaveFileName(self, "Select output text file"))
+			fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
 
 			out=open(fsp,"w")
 			if options.helixboxer:
@@ -1600,14 +1601,14 @@
 			out.close()
 
 		def menu_file_save_boxes(self):
-			fsp=os.path.basename(str(QtGui.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))
+			fsp=os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))[0]
 			if ".hdf" not in fsp[-4:]:
 				fsp += '.hdf'
 			
 			fspprjs=fsp.replace('.hdf','_prjs.hdf')
 			prj=EMData() #Dummy
 
-			progress = QtGui.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
+			progress = QtWidgets.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
 			if options.helixboxer:
 				for i,b in enumerate(self.helixboxes):
 					img = self.extract_subtomo_box(self.get_extended_a_vector(b), cshrink=self.shrink)
@@ -1670,7 +1671,7 @@
 
 		def menu_file_save_boxes_stack(self):
 
-			fsp=os.path.join(options.path,os.path.basename(str(QtGui.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))
+			fsp=os.path.join(options.path,os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))[0]
 			#if fsp[:4].lower()!="bdb:" and fsp[-4:].lower()!=".hdf" :
 
 
@@ -1682,7 +1683,7 @@
 			fspprjs=fsp.replace('.hdf','_prjs.hdf')
 			prj=EMData() #Dummy
 
-			progress = QtGui.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
+			progress = QtWidgets.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
 			if options.helixboxer:
 				for i,b in enumerate(self.helixboxes):
 					img = self.extract_subtomo_box(self.get_extended_a_vector(b), cshrink=self.shrink)
@@ -2477,7 +2478,7 @@
 	#		self.averageviewer.close()
 			event.accept()
 			#self.app().close_specific(self)
-			self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+			self.module_closed.emit()
 
 		#def closeEvent(self,event):
 			#self.target().done()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2tomoseg.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2tomoseg.py	2017-10-21 17:14:49.000000000 -0500
@@ -41,10 +41,12 @@
 from valslider import ValSlider, EMANToolButton, EMSpinWidget, EMQTColorWidget
 import weakref
 
-from PyQt4 import QtCore
-from PyQt4 import QtGui
+from PyQt5 import QtCore, QtWidgets
+from PyQt5 import QtGui, QtWidgets
 
 
+QStringList = list
+
 def main():
 	progname = os.path.basename(sys.argv[0])
 	usage = """prog [options] <image file> ...
@@ -82,10 +84,11 @@
 		
 		self.setWindowTitle("TomoSeg Subvolume Viewer")
 
-class TomoSegSliceViewer(QtGui.QMainWindow):
+class TomoSegSliceViewer(QtWidgets.QMainWindow):
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self,data=None,datafile=None,yshort=False,apix=0.0,boxsize=32,shrink=1,contrast=None,center=None,mod=False,normalize=False):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		
 		self.yshort=yshort
 		self.apix=apix
@@ -113,8 +116,8 @@
 		self.mwin_single=self.mwin.addAction("Single Particle")
 		self.mwin_average=self.mwin.addAction("Averaging")
 
-		self.setCentralWidget(QtGui.QWidget())
-		self.gbl = QtGui.QGridLayout(self.centralWidget())
+		self.setCentralWidget(QtWidgets.QWidget())
+		self.gbl = QtWidgets.QGridLayout(self.centralWidget())
 
 		# relative stretch factors
 		self.gbl.setColumnStretch(0,1)
@@ -134,11 +137,11 @@
 		self.gbl.addWidget(self.zyview,0,0)
 
 		# Select Z for xy view
-		self.wdepth = QtGui.QSlider()
+		self.wdepth = QtWidgets.QSlider()
 		self.gbl.addWidget(self.wdepth,1,2)
 
 		### Control panel area in upper left corner
-		self.gbl2 = QtGui.QGridLayout()
+		self.gbl2 = QtWidgets.QGridLayout()
 		self.gbl.addLayout(self.gbl2,1,0)
 
 		# box size
@@ -147,19 +150,19 @@
 		self.oldboxsize=boxsize
 
 		# max or mean
-		self.wmaxmean=QtGui.QPushButton("MaxProj")
+		self.wmaxmean=QtWidgets.QPushButton("MaxProj")
 		self.wmaxmean.setCheckable(True)
 		self.gbl2.addWidget(self.wmaxmean,1,0)
 
 		# number slices
-		self.wnlayers=QtGui.QSpinBox()
+		self.wnlayers=QtWidgets.QSpinBox()
 		self.wnlayers.setMinimum(1)
 		self.wnlayers.setMaximum(256)
 		self.wnlayers.setValue(1)
 		self.gbl2.addWidget(self.wnlayers,1,1)
 
 		# Local boxes in side view
-		self.wlocalbox=QtGui.QCheckBox("Limit Side Boxes")
+		self.wlocalbox=QtWidgets.QCheckBox("Limit Side Boxes")
 		self.gbl2.addWidget(self.wlocalbox,2,0)
 
 		# scale factor
@@ -178,45 +181,45 @@
 		self.firsthbclick = None
 
 		# file menu
-		QtCore.QObject.connect(self.mfile_open,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_open  )
-		QtCore.QObject.connect(self.mfile_read_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_read_boxloc  )
-		QtCore.QObject.connect(self.mfile_save_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxloc  )
-		QtCore.QObject.connect(self.mfile_save_boxes,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxes  )
-		QtCore.QObject.connect(self.mfile_save_boxes_stack,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxes_stack)
-		QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
+		self.mfile_open.triggered[bool].connect(self.menu_file_open)
+		self.mfile_read_boxloc.triggered[bool].connect(self.menu_file_read_boxloc)
+		self.mfile_save_boxloc.triggered[bool].connect(self.menu_file_save_boxloc)
+		self.mfile_save_boxes.triggered[bool].connect(self.menu_file_save_boxes)
+		self.mfile_save_boxes_stack.triggered[bool].connect(self.menu_file_save_boxes_stack)
+		self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
 
 		# window menu
-		QtCore.QObject.connect(self.mwin_boxes,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_boxes  )
-		QtCore.QObject.connect(self.mwin_single,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_single  )
+		self.mwin_boxes.triggered[bool].connect(self.menu_win_boxes)
+		self.mwin_single.triggered[bool].connect(self.menu_win_single)
 #		QtCore.QObject.connect(self.mwin_average,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_average  )
 
 		# all other widgets
-		QtCore.QObject.connect(self.wdepth,QtCore.SIGNAL("valueChanged(int)"),self.event_depth)
-		QtCore.QObject.connect(self.wnlayers,QtCore.SIGNAL("valueChanged(int)"),self.event_nlayers)
+		self.wdepth.valueChanged[int].connect(self.event_depth)
+		self.wnlayers.valueChanged[int].connect(self.event_nlayers)
 		#QtCore.QObject.connect(self.wboxsize,QtCore.SIGNAL("valueChanged"),self.event_boxsize)
-		QtCore.QObject.connect(self.wmaxmean,QtCore.SIGNAL("clicked(bool)"),self.event_projmode)
-		QtCore.QObject.connect(self.wscale,QtCore.SIGNAL("valueChanged")  ,self.event_scale  )
-		QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
-		QtCore.QObject.connect(self.wlocalbox,QtCore.SIGNAL("stateChanged(int)")  ,self.event_localbox  )
-
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedown"),self.xy_down)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedrag"),self.xy_drag)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mouseup"),self.xy_up  )
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousewheel"),self.xy_wheel  )
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("set_scale"),self.xy_scale)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("origin_update"),self.xy_origin)
-
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedown"),self.xz_down)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedrag"),self.xz_drag)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mouseup")  ,self.xz_up  )
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("set_scale"),self.xz_scale)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("origin_update"),self.xz_origin)
-
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedown"),self.zy_down)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedrag"),self.zy_drag)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mouseup")  ,self.zy_up  )
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("set_scale"),self.zy_scale)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("origin_update"),self.zy_origin)
+		self.wmaxmean.clicked[bool].connect(self.event_projmode)
+		self.wscale.valueChanged.connect(self.event_scale)
+		self.wfilt.valueChanged.connect(self.event_filter)
+		self.wlocalbox.stateChanged[int].connect(self.event_localbox)
+
+		self.xyview.mousedown.connect(self.xy_down)
+		self.xyview.mousedrag.connect(self.xy_drag)
+		self.xyview.mouseup.connect(self.xy_up)
+		self.xyview.mousewheel.connect(self.xy_wheel)
+		self.xyview.set_scale.connect(self.xy_scale)
+		self.xyview.origin_update.connect(self.xy_origin)
+
+		self.xzview.mousedown.connect(self.xz_down)
+		self.xzview.mousedrag.connect(self.xz_drag)
+		self.xzview.mouseup.connect(self.xz_up)
+		self.xzview.set_scale.connect(self.xz_scale)
+		self.xzview.origin_update.connect(self.xz_origin)
+
+		self.zyview.mousedown.connect(self.zy_down)
+		self.zyview.mousedrag.connect(self.zy_drag)
+		self.zyview.mouseup.connect(self.zy_up)
+		self.zyview.set_scale.connect(self.zy_scale)
+		self.zyview.origin_update.connect(self.zy_origin)
 
 		if datafile!=None:
 			print("\nIn ETomoBoxer, datafile is", datafile)
@@ -240,7 +243,7 @@
 #		self.averageviewer=EMAverageViewer(self)
 		#self.averageviewer.show()
 
-		QtCore.QObject.connect(self.boxesviewer,QtCore.SIGNAL("mx_image_selected"),self.img_selected)
+		self.boxesviewer.mx_image_selected.connect(self.img_selected)
 		self.e = None
 
 	def menu_win_boxes(self) : self.boxesviewer.show()
@@ -442,7 +445,7 @@
 		return self.wscale.getValue()
 
 	def menu_file_open(self,tog):
-		QtGui.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
+		QtWidgets.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
 
 	def load_box_yshort(self, boxcoords):
 		if options.yshort:
@@ -451,7 +454,7 @@
 			return boxcoords
 
 	def menu_file_read_boxloc(self):
-		fsp=str(QtGui.QFileDialog.getOpenFileName(self, "Select output text file"))
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
 
 		f=open(fsp,"r")
 		if options.helixboxer:
@@ -473,7 +476,7 @@
 	def menu_file_save_boxloc(self):
 		shrinkf=self.shrink 								#jesus
 
-		fsp=str(QtGui.QFileDialog.getSaveFileName(self, "Select output text file"))
+		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
 
 		out=open(fsp,"w")
 		if options.helixboxer:
@@ -485,12 +488,12 @@
 		out.close()
 
 	def menu_file_save_boxes(self):
-		fsp=os.path.basename(str(QtGui.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))
+		fsp=os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))[0]
 
 		fspprjs=fsp.replace('.','_prjs.hdf')
 		prj=EMData() #Dummy
 
-		progress = QtGui.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
+		progress = QtWidgets.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
 		if options.helixboxer:
 			for i,b in enumerate(self.helixboxes):
 				img = self.extract_subtomo_box(self.get_extended_a_vector(b), cshrink=self.shrink)
@@ -509,7 +512,7 @@
 				if "." in fsp:
 					img.write_image(os.path.join(options.path,"%s_%03d.%s"%(fsp.rsplit(".",1)[0],i,fsp.rsplit(".",1)[1])))
 				else:
-					QtGui.QMessageBox.warning(None,"Error","Please provide a valid image file extension. The numerical sequence will be inserted before the extension.")
+					QtWidgets.QMessageBox.warning(None,"Error","Please provide a valid image file extension. The numerical sequence will be inserted before the extension.")
 					return
 
 				progress.setValue(i+1)
@@ -539,7 +542,7 @@
 					prj.write_image(fspprjs,-1)
 
 				else:
-					QtGui.QMessageBox.warning(None,"Error","Please provide a valid image file extension. The numerical sequence will be inserted before the extension.")
+					QtWidgets.QMessageBox.warning(None,"Error","Please provide a valid image file extension. The numerical sequence will be inserted before the extension.")
 					return
 
 				progress.setValue(i+1)
@@ -547,18 +550,18 @@
 
 	def menu_file_save_boxes_stack(self):
 
-		fsp=os.path.join(options.path,os.path.basename(str(QtGui.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))
+		fsp=os.path.join(options.path,os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))[0]
 		#if fsp[:4].lower()!="bdb:" and fsp[-4:].lower()!=".hdf" :
 
 
 		if fsp[-4:].lower()!=".hdf" :
-			QtGui.QMessageBox.warning(None,"Error","3-D stacks supported only for .hdf files")
+			QtWidgets.QMessageBox.warning(None,"Error","3-D stacks supported only for .hdf files")
 			return
 
 		fspprjs=fsp.replace('.hdf','_prjs.hdf')
 		prj=EMData() #Dummy
 
-		progress = QtGui.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
+		progress = QtWidgets.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
 		if options.helixboxer:
 			for i,b in enumerate(self.helixboxes):
 				img = self.extract_subtomo_box(self.get_extended_a_vector(b), cshrink=self.shrink)
@@ -1343,12 +1346,12 @@
 #		self.averageviewer.close()
 		event.accept()
 		#self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+		self.module_closed.emit()
 
 	#def closeEvent(self,event):
 		#self.target().done()
 
-class TomoSegInspector(QtGui.QWidget):
+class TomoSegInspector(QtWidgets.QWidget):
 	
 	def __init__(self):
 		super(TomoSegInspector,self).__init__()
@@ -1358,8 +1361,8 @@
 		self.mintreewidth = 250		# minimum width of the tree
 		self.mincontrolwidth = 0
 		
-		vbox = QtGui.QVBoxLayout(self)
-		self.inspectortab = QtGui.QTabWidget()
+		vbox = QtWidgets.QVBoxLayout(self)
+		self.inspectortab = QtWidgets.QTabWidget()
 		self.inspectortab.addTab(self.getToolsWidget(), "Tools")
 		self.inspectortab.addTab(self.getTreeWidget(), "Annotations")
 		self.inspectortab.addTab(self.getUtilsWidget(), "Utils")
@@ -1369,94 +1372,94 @@
 		self.updateGeometry()
 
 	def getToolsWidget(self):
-		tooltabs = QtGui.QTabWidget()
+		tooltabs = QtWidgets.QTabWidget()
 		tooltabs.addTab(self.getAutomaticTools(), "Automatic")
 		tooltabs.addTab(self.getSemiAutomaticTools(), "Interactive")
 		tooltabs.addTab(self.getManualTools(), "Manual")
 		return tooltabs
 	
 	def getAutomaticTools(self):
-		widget = QtGui.QWidget()
+		widget = QtWidgets.QWidget()
 		
-		hbox = QtGui.QHBoxLayout()
+		hbox = QtWidgets.QHBoxLayout()
 		
-		frame = QtGui.QFrame()
-		grid = QtGui.QGridLayout(widget)
+		frame = QtWidgets.QFrame()
+		grid = QtWidgets.QGridLayout(widget)
 		
 		self.rotatetool = EMANToolButton()
 # 		self.rotatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(rotateicon)))
 		self.rotatetool.setToolTip("Description")
-		self.rotatetool_label = QtGui.QLabel("Name")
+		self.rotatetool_label = QtWidgets.QLabel("Name")
 		
 		self.translatetool =EMANToolButton()
 # 		self.translatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(crosshairsicon)))
 		self.translatetool.setToolTip("Description")
-		self.translatetool_label = QtGui.QLabel("Name")
+		self.translatetool_label = QtWidgets.QLabel("Name")
 		
 		self.ztranslate = EMANToolButton()
 # 		self.ztranslate.setIcon(QtGui.QIcon(QtGui.QPixmap(ztransicon)))
 		self.ztranslate.setToolTip("Description")
-		self.ztranslatetool_label = QtGui.QLabel("Name")
+		self.ztranslatetool_label = QtWidgets.QLabel("Name")
 		
 		self.scaletool = EMANToolButton()
 # 		self.scaletool.setIcon(QtGui.QIcon(QtGui.QPixmap(scaleicon)))
 		self.scaletool.setToolTip("Description")
-		self.scaletool_label = QtGui.QLabel("Name")
+		self.scaletool_label = QtWidgets.QLabel("Name")
 		
 		self.rulertool = EMANToolButton()
 # 		self.rulertool.setIcon(QtGui.QIcon(QtGui.QPixmap(rulericon)))
 		self.rulertool.setToolTip("Description")
-		self.rulertool_label = QtGui.QLabel("Name")
+		self.rulertool_label = QtWidgets.QLabel("Name")
 		
 		self.selectiontool = EMANToolButton()
 # 		self.selectiontool.setIcon(QtGui.QIcon(QtGui.QPixmap(selectionicon)))
 		self.selectiontool.setToolTip("Description")
-		self.selectiontool_label = QtGui.QLabel("Name")
+		self.selectiontool_label = QtWidgets.QLabel("Name")
 		
 		self.multiselectiontool = EMANToolButton()
 # 		self.multiselectiontool.setIcon(QtGui.QIcon(QtGui.QPixmap(multiselectoricon)))
 		self.multiselectiontool.setToolTip("Description")
-		self.multiselectiontool_label = QtGui.QLabel("Name")
+		self.multiselectiontool_label = QtWidgets.QLabel("Name")
 		
 		self.linetool = EMANToolButton()
 # 		self.linetool.setIcon(QtGui.QIcon(QtGui.QPixmap(lineicon)))
 		self.linetool.setToolTip("Description")
-		self.linetool_label = QtGui.QLabel("Name")
+		self.linetool_label = QtWidgets.QLabel("Name")
 		
 		self.cubetool = EMANToolButton()
 # 		self.cubetool.setIcon(QtGui.QIcon(QtGui.QPixmap(cubeicon)))
 		self.cubetool.setToolTip("Description")
-		self.cubetool_label = QtGui.QLabel("Name")
+		self.cubetool_label = QtWidgets.QLabel("Name")
 		
 		self.spheretool = EMANToolButton()
 # 		self.spheretool.setIcon(QtGui.QIcon(QtGui.QPixmap(sphereicon)))
 		self.spheretool.setToolTip("Description")
-		self.spheretool_label = QtGui.QLabel("Name")
+		self.spheretool_label = QtWidgets.QLabel("Name")
 		
 		self.cylindertool = EMANToolButton()
 # 		self.cylindertool.setIcon(QtGui.QIcon(QtGui.QPixmap(cylindericon)))
 		self.cylindertool.setToolTip("Description")
-		self.cylindertool_label = QtGui.QLabel("Name")
+		self.cylindertool_label = QtWidgets.QLabel("Name")
 		
 		self.conetool = EMANToolButton()
 # 		self.conetool.setIcon(QtGui.QIcon(QtGui.QPixmap(coneicon)))
 		self.conetool.setToolTip("Description")
-		self.conetool_label = QtGui.QLabel("Name")
+		self.conetool_label = QtWidgets.QLabel("Name")
 		
 		self.texttool = EMANToolButton()
 # 		self.texttool.setIcon(QtGui.QIcon(QtGui.QPixmap(texticon)))
 		self.texttool.setToolTip("Description")
-		self.texttool_label = QtGui.QLabel("Name")
+		self.texttool_label = QtWidgets.QLabel("Name")
  		
 		self.datatool = EMANToolButton()
 # 		self.datatool.setIcon(QtGui.QIcon(QtGui.QPixmap(dataicon)))
 		self.datatool.setToolTip("Description")
-		self.datatool_label = QtGui.QLabel("Name")
+		self.datatool_label = QtWidgets.QLabel("Name")
 		
 		self.apptool = EMANToolButton()
 #		self.apptool.setIcon(QtGui.QIcon(QtGui.QPixmap(appicon)))
 		self.apptool.setToolTip("Description")
-		self.apptool_label = QtGui.QLabel("Name")
+		self.apptool_label = QtWidgets.QLabel("Name")
 
 		# buttons
 		grid.addWidget(self.selectiontool,1,0)
@@ -1497,8 +1500,8 @@
 		frame.setLayout(grid)
 		hbox.addWidget(frame)
 		
-		self.stacked_widget = QtGui.QStackedWidget()
-		self.stacked_widget.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.stacked_widget = QtWidgets.QStackedWidget()
+		self.stacked_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		hbox.addWidget(self.stacked_widget)
 		
 		widget.setLayout(hbox) #grid
@@ -1506,87 +1509,87 @@
 		return widget
 
 	def getSemiAutomaticTools(self):
-		widget = QtGui.QWidget()
+		widget = QtWidgets.QWidget()
 		
-		hbox = QtGui.QHBoxLayout()
+		hbox = QtWidgets.QHBoxLayout()
 		
-		frame = QtGui.QFrame()
-		grid = QtGui.QGridLayout(widget)
+		frame = QtWidgets.QFrame()
+		grid = QtWidgets.QGridLayout(widget)
 		
 		self.rotatetool = EMANToolButton()
 # 		self.rotatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(rotateicon)))
 		self.rotatetool.setToolTip("Description")
-		self.rotatetool_label = QtGui.QLabel("Name")
+		self.rotatetool_label = QtWidgets.QLabel("Name")
 		
 		self.translatetool =EMANToolButton()
 # 		self.translatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(crosshairsicon)))
 		self.translatetool.setToolTip("Description")
-		self.translatetool_label = QtGui.QLabel("Name")
+		self.translatetool_label = QtWidgets.QLabel("Name")
 		
 		self.ztranslate = EMANToolButton()
 # 		self.ztranslate.setIcon(QtGui.QIcon(QtGui.QPixmap(ztransicon)))
 		self.ztranslate.setToolTip("Description")
-		self.ztranslatetool_label = QtGui.QLabel("Name")
+		self.ztranslatetool_label = QtWidgets.QLabel("Name")
 		
 		self.scaletool = EMANToolButton()
 # 		self.scaletool.setIcon(QtGui.QIcon(QtGui.QPixmap(scaleicon)))
 		self.scaletool.setToolTip("Description")
-		self.scaletool_label = QtGui.QLabel("Name")
+		self.scaletool_label = QtWidgets.QLabel("Name")
 		
 		self.rulertool = EMANToolButton()
 # 		self.rulertool.setIcon(QtGui.QIcon(QtGui.QPixmap(rulericon)))
 		self.rulertool.setToolTip("Description")
-		self.rulertool_label = QtGui.QLabel("Name")
+		self.rulertool_label = QtWidgets.QLabel("Name")
 		
 		self.selectiontool = EMANToolButton()
 # 		self.selectiontool.setIcon(QtGui.QIcon(QtGui.QPixmap(selectionicon)))
 		self.selectiontool.setToolTip("Description")
-		self.selectiontool_label = QtGui.QLabel("Name")
+		self.selectiontool_label = QtWidgets.QLabel("Name")
 		
 		self.multiselectiontool = EMANToolButton()
 # 		self.multiselectiontool.setIcon(QtGui.QIcon(QtGui.QPixmap(multiselectoricon)))
 		self.multiselectiontool.setToolTip("Description")
-		self.multiselectiontool_label = QtGui.QLabel("Name")
+		self.multiselectiontool_label = QtWidgets.QLabel("Name")
 		
 		self.linetool = EMANToolButton()
 # 		self.linetool.setIcon(QtGui.QIcon(QtGui.QPixmap(lineicon)))
 		self.linetool.setToolTip("Description")
-		self.linetool_label = QtGui.QLabel("Name")
+		self.linetool_label = QtWidgets.QLabel("Name")
 		
 		self.cubetool = EMANToolButton()
 # 		self.cubetool.setIcon(QtGui.QIcon(QtGui.QPixmap(cubeicon)))
 		self.cubetool.setToolTip("Description")
-		self.cubetool_label = QtGui.QLabel("Name")
+		self.cubetool_label = QtWidgets.QLabel("Name")
 		
 		self.spheretool = EMANToolButton()
 # 		self.spheretool.setIcon(QtGui.QIcon(QtGui.QPixmap(sphereicon)))
 		self.spheretool.setToolTip("Description")
-		self.spheretool_label = QtGui.QLabel("Name")
+		self.spheretool_label = QtWidgets.QLabel("Name")
 		
 		self.cylindertool = EMANToolButton()
 # 		self.cylindertool.setIcon(QtGui.QIcon(QtGui.QPixmap(cylindericon)))
 		self.cylindertool.setToolTip("Description")
-		self.cylindertool_label = QtGui.QLabel("Name")
+		self.cylindertool_label = QtWidgets.QLabel("Name")
 		
 		self.conetool = EMANToolButton()
 # 		self.conetool.setIcon(QtGui.QIcon(QtGui.QPixmap(coneicon)))
 		self.conetool.setToolTip("Description")
-		self.conetool_label = QtGui.QLabel("Name")
+		self.conetool_label = QtWidgets.QLabel("Name")
 		
 		self.texttool = EMANToolButton()
 # 		self.texttool.setIcon(QtGui.QIcon(QtGui.QPixmap(texticon)))
 		self.texttool.setToolTip("Description")
-		self.texttool_label = QtGui.QLabel("Name")
+		self.texttool_label = QtWidgets.QLabel("Name")
  		
 		self.datatool = EMANToolButton()
 # 		self.datatool.setIcon(QtGui.QIcon(QtGui.QPixmap(dataicon)))
 		self.datatool.setToolTip("Description")
-		self.datatool_label = QtGui.QLabel("Name")
+		self.datatool_label = QtWidgets.QLabel("Name")
 		
 		self.apptool = EMANToolButton()
 #		self.apptool.setIcon(QtGui.QIcon(QtGui.QPixmap(appicon)))
 		self.apptool.setToolTip("Description")
-		self.apptool_label = QtGui.QLabel("Name")
+		self.apptool_label = QtWidgets.QLabel("Name")
 
 		# buttons
 		grid.addWidget(self.selectiontool,1,0)
@@ -1627,8 +1630,8 @@
 		frame.setLayout(grid)
 		hbox.addWidget(frame)
 		
-		self.stacked_widget = QtGui.QStackedWidget()
-		self.stacked_widget.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.stacked_widget = QtWidgets.QStackedWidget()
+		self.stacked_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		hbox.addWidget(self.stacked_widget)
 		
 		widget.setLayout(hbox) #grid
@@ -1637,87 +1640,87 @@
 
 	def getManualTools(self):
 		
-		widget = QtGui.QWidget()
+		widget = QtWidgets.QWidget()
 		
-		hbox = QtGui.QHBoxLayout()
+		hbox = QtWidgets.QHBoxLayout()
 		
-		frame = QtGui.QFrame()
-		grid = QtGui.QGridLayout(widget)
+		frame = QtWidgets.QFrame()
+		grid = QtWidgets.QGridLayout(widget)
 		
 		self.rotatetool = EMANToolButton()
 # 		self.rotatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(rotateicon)))
 		self.rotatetool.setToolTip("Description")
-		self.rotatetool_label = QtGui.QLabel("Name")
+		self.rotatetool_label = QtWidgets.QLabel("Name")
 		
 		self.translatetool =EMANToolButton()
 # 		self.translatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(crosshairsicon)))
 		self.translatetool.setToolTip("Description")
-		self.translatetool_label = QtGui.QLabel("Name")
+		self.translatetool_label = QtWidgets.QLabel("Name")
 		
 		self.ztranslate = EMANToolButton()
 # 		self.ztranslate.setIcon(QtGui.QIcon(QtGui.QPixmap(ztransicon)))
 		self.ztranslate.setToolTip("Description")
-		self.ztranslatetool_label = QtGui.QLabel("Name")
+		self.ztranslatetool_label = QtWidgets.QLabel("Name")
 		
 		self.scaletool = EMANToolButton()
 # 		self.scaletool.setIcon(QtGui.QIcon(QtGui.QPixmap(scaleicon)))
 		self.scaletool.setToolTip("Description")
-		self.scaletool_label = QtGui.QLabel("Name")
+		self.scaletool_label = QtWidgets.QLabel("Name")
 		
 		self.rulertool = EMANToolButton()
 # 		self.rulertool.setIcon(QtGui.QIcon(QtGui.QPixmap(rulericon)))
 		self.rulertool.setToolTip("Description")
-		self.rulertool_label = QtGui.QLabel("Name")
+		self.rulertool_label = QtWidgets.QLabel("Name")
 		
 		self.selectiontool = EMANToolButton()
 # 		self.selectiontool.setIcon(QtGui.QIcon(QtGui.QPixmap(selectionicon)))
 		self.selectiontool.setToolTip("Description")
-		self.selectiontool_label = QtGui.QLabel("Name")
+		self.selectiontool_label = QtWidgets.QLabel("Name")
 		
 		self.multiselectiontool = EMANToolButton()
 # 		self.multiselectiontool.setIcon(QtGui.QIcon(QtGui.QPixmap(multiselectoricon)))
 		self.multiselectiontool.setToolTip("Description")
-		self.multiselectiontool_label = QtGui.QLabel("Name")
+		self.multiselectiontool_label = QtWidgets.QLabel("Name")
 		
 		self.linetool = EMANToolButton()
 # 		self.linetool.setIcon(QtGui.QIcon(QtGui.QPixmap(lineicon)))
 		self.linetool.setToolTip("Description")
-		self.linetool_label = QtGui.QLabel("Name")
+		self.linetool_label = QtWidgets.QLabel("Name")
 		
 		self.cubetool = EMANToolButton()
 # 		self.cubetool.setIcon(QtGui.QIcon(QtGui.QPixmap(cubeicon)))
 		self.cubetool.setToolTip("Description")
-		self.cubetool_label = QtGui.QLabel("Name")
+		self.cubetool_label = QtWidgets.QLabel("Name")
 		
 		self.spheretool = EMANToolButton()
 # 		self.spheretool.setIcon(QtGui.QIcon(QtGui.QPixmap(sphereicon)))
 		self.spheretool.setToolTip("Description")
-		self.spheretool_label = QtGui.QLabel("Name")
+		self.spheretool_label = QtWidgets.QLabel("Name")
 		
 		self.cylindertool = EMANToolButton()
 # 		self.cylindertool.setIcon(QtGui.QIcon(QtGui.QPixmap(cylindericon)))
 		self.cylindertool.setToolTip("Description")
-		self.cylindertool_label = QtGui.QLabel("Name")
+		self.cylindertool_label = QtWidgets.QLabel("Name")
 		
 		self.conetool = EMANToolButton()
 # 		self.conetool.setIcon(QtGui.QIcon(QtGui.QPixmap(coneicon)))
 		self.conetool.setToolTip("Description")
-		self.conetool_label = QtGui.QLabel("Name")
+		self.conetool_label = QtWidgets.QLabel("Name")
 		
 		self.texttool = EMANToolButton()
 # 		self.texttool.setIcon(QtGui.QIcon(QtGui.QPixmap(texticon)))
 		self.texttool.setToolTip("Description")
-		self.texttool_label = QtGui.QLabel("Name")
+		self.texttool_label = QtWidgets.QLabel("Name")
  		
 		self.datatool = EMANToolButton()
 # 		self.datatool.setIcon(QtGui.QIcon(QtGui.QPixmap(dataicon)))
 		self.datatool.setToolTip("Description")
-		self.datatool_label = QtGui.QLabel("Name")
+		self.datatool_label = QtWidgets.QLabel("Name")
 		
 		self.apptool = EMANToolButton()
 #		self.apptool.setIcon(QtGui.QIcon(QtGui.QPixmap(appicon)))
 		self.apptool.setToolTip("Description")
-		self.apptool_label = QtGui.QLabel("Name")
+		self.apptool_label = QtWidgets.QLabel("Name")
 
 		# buttons
 		grid.addWidget(self.selectiontool,1,0)
@@ -1758,8 +1761,8 @@
 		frame.setLayout(grid)
 		hbox.addWidget(frame)
 		
-		self.stacked_widget = QtGui.QStackedWidget()
-		self.stacked_widget.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.stacked_widget = QtWidgets.QStackedWidget()
+		self.stacked_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		hbox.addWidget(self.stacked_widget)
 		
 		widget.setLayout(hbox) #grid
@@ -1770,15 +1773,15 @@
 		"""
 		This returns the treeview-control panel widget
 		"""
-		widget = QtGui.QWidget()
-		hbox = QtGui.QHBoxLayout(widget)
-		treeframe = QtGui.QFrame()
-		treeframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		widget = QtWidgets.QWidget()
+		hbox = QtWidgets.QHBoxLayout(widget)
+		treeframe = QtWidgets.QFrame()
+		treeframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		treeframe.setLayout(self._get_tree_layout(widget))
 		treeframe.setMinimumWidth(self.mintreewidth)
 		hbox.addWidget(treeframe)
-		self.stacked_widget = QtGui.QStackedWidget()
-		self.stacked_widget.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.stacked_widget = QtWidgets.QStackedWidget()
+		self.stacked_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		hbox.addWidget(self.stacked_widget)
 		widget.setLayout(hbox)
 		
@@ -1788,12 +1791,12 @@
 		"""
 		Returns the tree layout
 		"""
-		tvbox = QtGui.QVBoxLayout()
+		tvbox = QtWidgets.QVBoxLayout()
 		self.tree_widget = EMQTreeWidget(parent)
 		self.tree_widget.setHeaderLabel("Choose a item")
 		tvbox.addWidget(self.tree_widget)
-		self.tree_node_button_add = QtGui.QPushButton("Add Object")
-		self.tree_node_button_remove = QtGui.QPushButton("Remove Object")
+		self.tree_node_button_add = QtWidgets.QPushButton("Add Object")
+		self.tree_node_button_remove = QtWidgets.QPushButton("Remove Object")
 		self.tree_node_slider = ValSlider(label="Seq:")
 		self.tree_node_slider.setIntonly(True)
 		self.tree_node_slider.setRange(0,1)
@@ -1881,7 +1884,7 @@
 		The Treeitem also needs to know the node, so it can talk to the node.
 		You can think of this as a three way conversation (the alterative it to use a mediator, but that is not worth it w/ only three players)
 		"""
-		tree_item = EMQTreeWidgetItem(QtCore.QStringList(name), item3d, parentitem)	# Make a QTreeItem widget, and let the TreeItem talk to the scenegraph node and its GUI
+		tree_item = EMQTreeWidgetItem(QStringList(name), item3d, parentitem)	# Make a QTreeItem widget, and let the TreeItem talk to the scenegraph node and its GUI
 		item3d.setEMQTreeWidgetItem(tree_item)				# Reference to the EMQTreeWidgetItem
 		item_inspector = item3d.getItemInspector()				# Get the node GUI controls 
 		#return tree_item
@@ -1965,18 +1968,18 @@
 		"""
 		Return the utilites widget
 		"""
-		uwidget = QtGui.QWidget()
-		uvbox = QtGui.QVBoxLayout()
+		uwidget = QtWidgets.QWidget()
+		uvbox = QtWidgets.QVBoxLayout()
 		font = QtGui.QFont()
 		font.setBold(True)
 		
-		self.opensession_button = QtGui.QPushButton("Open Session")
-		self.savesession_button = QtGui.QPushButton("Save Session")
-		self.savebutton = QtGui.QPushButton("Save Image Snapshot")
-		
-		self.open_tomogram_button = QtGui.QPushButton("Open Tomogram")
-		self.open_segmentation_button = QtGui.QPushButton("Open Segmentation")
-		self.save_segmentation_button = QtGui.QPushButton("Save Segmentation")
+		self.opensession_button = QtWidgets.QPushButton("Open Session")
+		self.savesession_button = QtWidgets.QPushButton("Save Session")
+		self.savebutton = QtWidgets.QPushButton("Save Image Snapshot")
+		
+		self.open_tomogram_button = QtWidgets.QPushButton("Open Tomogram")
+		self.open_segmentation_button = QtWidgets.QPushButton("Open Segmentation")
+		self.save_segmentation_button = QtWidgets.QPushButton("Save Segmentation")
 		
 		uvbox.addWidget(self.opensession_button)
 		uvbox.addWidget(self.savesession_button)
@@ -1987,13 +1990,13 @@
 		uvbox.addWidget(self.save_segmentation_button)
 		uwidget.setLayout(uvbox)
 		
-		QtCore.QObject.connect(self.savebutton, QtCore.SIGNAL("clicked()"),self._on_save)
-		QtCore.QObject.connect(self.savesession_button, QtCore.SIGNAL("clicked()"),self._on_save_session)
-		QtCore.QObject.connect(self.opensession_button, QtCore.SIGNAL("clicked()"),self._on_open_session)
-		
-		QtCore.QObject.connect(self.open_tomogram_button, QtCore.SIGNAL("clicked()"),self._on_open_tomogram)
-		QtCore.QObject.connect(self.open_segmentation_button, QtCore.SIGNAL("clicked()"),self._on_open_segmentation)
-		QtCore.QObject.connect(self.save_segmentation_button, QtCore.SIGNAL("clicked()"),self._on_save_segmentation)
+		self.savebutton.clicked.connect(self._on_save)
+		self.savesession_button.clicked.connect(self._on_save_session)
+		self.opensession_button.clicked.connect(self._on_open_session)
+		
+		self.open_tomogram_button.clicked.connect(self._on_open_tomogram)
+		self.open_segmentation_button.clicked.connect(self._on_open_segmentation)
+		self.save_segmentation_button.clicked.connect(self._on_save_segmentation)
 		
 		return uwidget
 
@@ -2001,25 +2004,25 @@
 		"""
 		Open a session... (might want to add a warning dialog that this will close the current session)
 		"""
-		filename = QtGui.QFileDialog.getOpenFileName(self, 'Open Session', os.getcwd(), "*.eman")
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Session', os.getcwd(), "*.eman")[0]
 		
 	def _on_save_session(self):
 		"""
 		Return a list of all the child items (actually a tree of sorts)
 		"""
-		filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Session', os.getcwd(), "*.eman")
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Session', os.getcwd(), "*.eman")[0]
 
 	def _on_save(self):
 		"""
 		Save a snapshot of the scene
 		"""
-		filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.tiff *.jpeg *.png)")
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.tiff *.jpeg *.png)")[0]
 
 	def _on_open_tomogram(self):
 		"""
 		Open a session
 		"""
-		filename = QtGui.QFileDialog.getOpenFileName(self, 'Open Tomogram', os.getcwd(), "*.hdf,*.mrc")
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Tomogram', os.getcwd(), "*.hdf,*.mrc")[0]
 		#if filename:
 		#	self.scenegraph().loadSession(filename)
 		
@@ -2028,7 +2031,7 @@
 		Open a session
 		"""
 		# Open the file
-		filename = QtGui.QFileDialog.getOpenFileName(self, 'Open Segmentation', os.getcwd(), "*.hdf,*.xml")
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Segmentation', os.getcwd(), "*.hdf,*.xml")[0]
 		#if filename:
 		#	self.scenegraph().loadSession(filename)
 		
@@ -2036,7 +2039,7 @@
 		"""
 		Save a snapshot of the scene
 		"""
-		filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Segmentation', os.getcwd(), "(*.hdf,*.xml)")
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Segmentation', os.getcwd(), "(*.hdf,*.xml)")[0]
 		#if filename: # if we cancel
 		#	self.scenegraph().saveSnapShot(filename)
 		
@@ -2070,16 +2073,16 @@
 		"""
 		pass
 
-class EMBoxViewer(QtGui.QWidget):
+class EMBoxViewer(QtWidgets.QWidget):
 	"""This is a multi-paned view showing a single boxed out particle from a larger tomogram"""
 
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.setWindowTitle("Single Particle View")
 
 		self.resize(300,300)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 		self.xyview = EMImage2DWidget()
 		self.gbl.addWidget(self.xyview,0,1)
 
@@ -2102,7 +2105,7 @@
 		self.wfilt = ValSlider(rng=(0,50),label="Filter:",value=0.0)
 		self.gbl.addWidget(self.wfilt,2,0,1,2)
 
-		QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
+		self.wfilt.valueChanged.connect(self.event_filter)
 
 		self.gbl.setRowStretch(2,1)
 		self.gbl.setRowStretch(0,5)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/em_sim.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/em_sim.py	2017-10-21 17:14:49.000000000 -0500
@@ -5,8 +5,8 @@
 
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtGui, QtCore, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from emimage2d import EMImage2DWidget
 from EMAN2 import *
 from emapplication import EMApp
@@ -806,7 +806,7 @@
 	def mousePressEvent(self, QMouseEvent):
 		p=self.scr_to_img(QMouseEvent.pos())
 		self.startpy=p[1]
-		modifiers = QtGui.QApplication.keyboardModifiers()
+		modifiers = QtWidgets.QApplication.keyboardModifiers()
 		if modifiers == QtCore.Qt.ShiftModifier:
 			self.hold_shift=True
 		else:
@@ -907,10 +907,10 @@
 		print("Exit..")
 		exit()
 
-class MainWindow(QtGui.QMainWindow):
+class MainWindow(QtWidgets.QMainWindow):
 	
 	def __init__(self, mode=0, cs=0., twod=False):
-		QtGui.QMainWindow.__init__(self)
+		QtWidgets.QMainWindow.__init__(self)
 		
 		if twod:
 			self.twodview = EMImage2DWidget()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/morphboxer.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/morphboxer.py	2017-10-21 17:14:50.000000000 -0500
@@ -172,7 +172,7 @@
 		return self.panel_object.get_widget()
 
 	def icon(self):
-		from PyQt4 import QtGui
+		from PyQt5 import QtGui, QtWidgets
 		return QtGui.QIcon(get_image_directory() + "white_box.png")
 
 	def set_panel_object(self,panel): self.panel_object = panel
@@ -189,7 +189,7 @@
 	def mouse_down(self,event) :
 		m = self.get_2d_window().scr_to_img((event.x(),event.y()))
 		box_num = self.target().detect_box_collision(m)
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if box_num == -1:
 			if event.modifiers()&Qt.ShiftModifier : return # the user tried to delete nothing
 			box_num = self.target().add_box(m[0],m[1],MorphBoxingTool.BOX_TYPE)
@@ -208,7 +208,7 @@
 
 	def mouse_drag(self,event) :
 		m=self.get_2d_window().scr_to_img((event.x(),event.y()))
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if event.modifiers()&Qt.ShiftModifier:
 			box_num = self.target().detect_box_collision(m)
 			if ( box_num != -1):
@@ -306,17 +306,17 @@
 	
 	def get_widget(self):
 		if self.widget == None:
-			from PyQt4 import QtCore, QtGui, Qt
-			self.widget = QtGui.QWidget()
-			vbl = QtGui.QVBoxLayout(self.widget)
-			vbl.setMargin(0)
+			from PyQt5 import Qt, QtCore, QtGui, QtWidgets
+			self.widget = QtWidgets.QWidget()
+			vbl = QtWidgets.QVBoxLayout(self.widget)
+			vbl.setContentsMargins(0, 0, 0, 0)
 			vbl.setSpacing(6)
 			vbl.setObjectName("vbl")
-			self.auto_center_checkbox = QtGui.QCheckBox("Auto-center")
-			self.clear=QtGui.QPushButton("Clear")
+			self.auto_center_checkbox = QtWidgets.QCheckBox("Auto-center")
+			self.clear=QtWidgets.QPushButton("Clear")
 			vbl.addWidget(self.auto_center_checkbox)
 			vbl.addWidget(self.clear)
-			QtCore.QObject.connect(self.clear, QtCore.SIGNAL("clicked(bool)"), self.clear_clicked)
+			self.clear.clicked[bool].connect(self.clear_clicked)
 		return self.widget
 	
 	def clear_clicked(self,val):
@@ -341,28 +341,28 @@
 
 	def get_widget(self):
 		if self.widget == None:
-			from PyQt4 import QtCore, QtGui, Qt
-			self.widget = QtGui.QWidget()
-			vbl = QtGui.QVBoxLayout(self.widget)
-			vbl.setMargin(0)
+			from PyQt5 import Qt, QtCore, QtGui, QtWidgets
+			self.widget = QtWidgets.QWidget()
+			vbl = QtWidgets.QVBoxLayout(self.widget)
+			vbl.setContentsMargins(0, 0, 0, 0)
 			vbl.setSpacing(6)
 			vbl.setObjectName("vbl")
 
-			hbl = QtGui.QHBoxLayout()
-			hbl.addWidget(QtGui.QLabel("Erase Radius:"))
+			hbl = QtWidgets.QHBoxLayout()
+			hbl.addWidget(QtWidgets.QLabel("Erase Radius:"))
 			from valslider import ValSlider
 			self.erase_rad_edit = ValSlider(None,(0.0,1000.0),"")
 			self.erase_rad_edit.setValue(int(self.erase_radius))
 			self.erase_rad_edit.setEnabled(True)
 			hbl.addWidget(self.erase_rad_edit)
 
-			self.unerase = QtGui.QCheckBox("Unerase")
+			self.unerase = QtWidgets.QCheckBox("Unerase")
 			self.unerase.setChecked(False)
 
 			vbl.addLayout(hbl)
 			vbl.addWidget(self.unerase)
-			QtCore.QObject.connect(self.erase_rad_edit,QtCore.SIGNAL("sliderReleased"),self.new_erase_radius)
-			QtCore.QObject.connect(self.unerase,QtCore.SIGNAL("clicked(bool)"),self.unerase_checked)
+			self.erase_rad_edit.sliderReleased.connect(self.new_erase_radius)
+			self.unerase.clicked[bool].connect(self.unerase_checked)
 
 		return self.widget
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/mouse_and_key_modifiers.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/mouse_and_key_modifiers.py	2017-10-21 17:14:50.000000000 -0500
@@ -1,13 +1,13 @@
 from __future__ import print_function
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtGui, QtWidgets
 
-class MouseAndKeyModifiers(QtGui.QWidget):
+class MouseAndKeyModifiers(QtWidgets.QWidget):
 	def __init__(self, parent = None):
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 		
-		layout = QtGui.QVBoxLayout()
-		label = QtGui.QLabel("Click here to test mouse buttons: Left, Right, Middle\nand keyboard modifiers: Ctrl, Alt, Shift, and Command (a Mac key)")
-		self.text_browser = QtGui.QTextBrowser()
+		layout = QtWidgets.QVBoxLayout()
+		label = QtWidgets.QLabel("Click here to test mouse buttons: Left, Right, Middle\nand keyboard modifiers: Ctrl, Alt, Shift, and Command (a Mac key)")
+		self.text_browser = QtWidgets.QTextBrowser()
 		layout.addWidget(label)
 		layout.addWidget(self.text_browser)
 		
@@ -37,7 +37,7 @@
 
 if __name__ == "__main__":
 	import sys
-	app = QtGui.QApplication(sys.argv)
+	app = QtWidgets.QApplication(sys.argv)
 	window = MouseAndKeyModifiers()
 	window.show()
 	sys.exit(app.exec_())
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/timerdemo.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/timerdemo.py	2017-10-21 17:14:50.000000000 -0500
@@ -33,7 +33,7 @@
 #
 
 from EMAN2 import *
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from emapplication import EMApp
 from emimage2d import EMImage2DWidget
 
@@ -58,7 +58,7 @@
 		self.set_data(self.datatodisp[0])
 	
 		timer = QtCore.QTimer(self)
-		self.connect(timer,QtCore.SIGNAL("timeout()"),self.mytimeout)
+		timer.timeout.connect(self.mytimeout)
 		timer.start(1000)
 
 	def mytimeout(self):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/tomotrackbox.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/tomotrackbox.py	2017-10-21 17:14:51.000000000 -0500
@@ -41,8 +41,8 @@
 from valslider import ValSlider
 import weakref
 from emshape import EMShape
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 #import EMAN2db
 
 reconmodes=["gauss_2","gauss_3","gauss_5"]
@@ -85,7 +85,7 @@
 	
 	E2end(logid)
 	
-class TrackerControl(QtGui.QWidget):
+class TrackerControl(QtWidgets.QWidget):
 	def __init__(self,app,maxshift,invert=False,seqali=False,tiltstep=2.0):
 		self.app=app
 		self.maxshift=maxshift
@@ -94,26 +94,26 @@
 		self.tiltstep=tiltstep
 		
 		# the control panel
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 
-		self.gbl = QtGui.QGridLayout(self)
-		self.gbl.setMargin(0)
+		self.gbl = QtWidgets.QGridLayout(self)
+		self.gbl.setContentsMargins(0, 0, 0, 0)
 		self.gbl.setSpacing(6)
 		self.gbl.setObjectName("hbl")
 		
 		# action buttons
-		self.bcenalign=QtGui.QPushButton("Center Align")
-		self.bprojalign=QtGui.QPushButton("Proj. Realign")
-		self.btiltaxis=QtGui.QPushButton("Tilt Axis")
-		self.btiltaxisval=QtGui.QLineEdit("90.0")
-		self.bsavedata=QtGui.QPushButton("Save Data")
-		self.breconst=QtGui.QPushButton("3D Normal")
-		self.sbmode=QtGui.QSpinBox(self)
+		self.bcenalign=QtWidgets.QPushButton("Center Align")
+		self.bprojalign=QtWidgets.QPushButton("Proj. Realign")
+		self.btiltaxis=QtWidgets.QPushButton("Tilt Axis")
+		self.btiltaxisval=QtWidgets.QLineEdit("90.0")
+		self.bsavedata=QtWidgets.QPushButton("Save Data")
+		self.breconst=QtWidgets.QPushButton("3D Normal")
+		self.sbmode=QtWidgets.QSpinBox(self)
 		self.sbmode.setRange(0,2)
 		self.sbmode.setValue(0)
-		self.bmagict=QtGui.QPushButton("3D Tomofill")
-		self.bmagics=QtGui.QPushButton("3D Sph")
-		self.bmagicc=QtGui.QPushButton("3D Cyl")
+		self.bmagict=QtWidgets.QPushButton("3D Tomofill")
+		self.bmagics=QtWidgets.QPushButton("3D Sph")
+		self.bmagicc=QtWidgets.QPushButton("3D Cyl")
 		self.vslpfilt=ValSlider(self,(0,.5),"Filter",0.5,50)
 		
 		self.gbl.addWidget(self.bcenalign,0,0)
@@ -128,15 +128,15 @@
 		self.gbl.addWidget(self.bmagics,1,2)
 		self.gbl.addWidget(self.bmagicc,1,3)
 		
-		QtCore.QObject.connect(self.bcenalign,QtCore.SIGNAL("clicked(bool)"),self.do_cenalign)
-		QtCore.QObject.connect(self.bprojalign,QtCore.SIGNAL("clicked(bool)"),self.do_projalign)
-		QtCore.QObject.connect(self.btiltaxis,QtCore.SIGNAL("clicked(bool)"),self.do_tiltaxis)
-		QtCore.QObject.connect(self.bsavedata,QtCore.SIGNAL("clicked(bool)"),self.do_savedata)
-		QtCore.QObject.connect(self.breconst,QtCore.SIGNAL("clicked(bool)"),self.do_reconst)
-		QtCore.QObject.connect(self.bmagict,QtCore.SIGNAL("clicked(bool)"),self.do_magict)
-		QtCore.QObject.connect(self.bmagics,QtCore.SIGNAL("clicked(bool)"),self.do_magics)
-		QtCore.QObject.connect(self.bmagicc,QtCore.SIGNAL("clicked(bool)"),self.do_magicc)
-		QtCore.QObject.connect(self.vslpfilt,QtCore.SIGNAL("valueChanged"),self.do_filter)
+		self.bcenalign.clicked[bool].connect(self.do_cenalign)
+		self.bprojalign.clicked[bool].connect(self.do_projalign)
+		self.btiltaxis.clicked[bool].connect(self.do_tiltaxis)
+		self.bsavedata.clicked[bool].connect(self.do_savedata)
+		self.breconst.clicked[bool].connect(self.do_reconst)
+		self.bmagict.clicked[bool].connect(self.do_magict)
+		self.bmagics.clicked[bool].connect(self.do_magics)
+		self.bmagicc.clicked[bool].connect(self.do_magicc)
+		self.vslpfilt.valueChanged.connect(self.do_filter)
 
 		# the single image display widget
 		self.im2d =    EMImage2DWidget(application=app,winid="tomotrackbox.big")
@@ -146,10 +146,10 @@
 		self.imvol =   EMImage3DModule(application=app,winid="tomotrackbox.3d")
 	
 		# get some signals from the window. 
-		QtCore.QObject.connect(self.im2d,QtCore.SIGNAL("mousedown"),self.down)
-		QtCore.QObject.connect(self.im2d,QtCore.SIGNAL("mousedrag"),self.drag)
-		QtCore.QObject.connect(self.im2d,QtCore.SIGNAL("mouseup"),self.up)
-		QtCore.QObject.connect(self.im2d,QtCore.SIGNAL("increment_list_data"),self.change_tilt)
+		self.im2d.mousedown.connect(self.down)
+		self.im2d.mousedrag.connect(self.drag)
+		self.im2d.mouseup.connect(self.up)
+		self.im2d.increment_list_data.connect(self.change_tilt)
 	
 		self.imagefile=None
 		self.imageparm=None
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/EMAN2.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/EMAN2.py	2017-10-21 17:14:51.000000000 -0500
@@ -32,6 +32,7 @@
 #
 
 import sys
+from PyQt5.QtWidgets import *
 from math import *
 from sys import exit
 import os
@@ -95,8 +96,8 @@
 
 try:
 	if __IPYTHON__ : GUIMode=True
-	import PyQt4
-	app=PyQt4.QtGui.qApp
+	import PyQt5
+	app=PyQt5.QtGui.qApp
 except:
 	GUIMode=False
 	app = 0
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/em3Dfonts.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/em3Dfonts.py	2017-10-21 17:14:52.000000000 -0500
@@ -32,8 +32,8 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston MA 02111-1307 USA
 #
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
@@ -277,41 +277,41 @@
 		return "EM3DFontModel"
 
 
-class EMFontInspector(QtGui.QWidget, EMLightsInspectorBase):
+class EMFontInspector(QtWidgets.QWidget, EMLightsInspectorBase):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		EMLightsInspectorBase.__init__(self)
 		self.target=weakref.ref(target)
 		self.transform_panel = EMTransformPanel(target,self)
 		self.transform_vbl = None # This will eventually be a vertical box layout for the transform panel
 		self.init_fonts()
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
 
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 
-		self.wiretog = QtGui.QPushButton("Wire")
+		self.wiretog = QtWidgets.QPushButton("Wire")
 		self.wiretog.setCheckable(1)
 		self.vbl2.addWidget(self.wiretog)
 
-		self.lighttog = QtGui.QPushButton("Light")
+		self.lighttog = QtWidgets.QPushButton("Light")
 		self.lighttog.setCheckable(1)
 		self.vbl2.addWidget(self.lighttog)
 
-		self.tabwidget2 = QtGui.QTabWidget()
+		self.tabwidget2 = QtWidgets.QTabWidget()
 		self.maintab = None
 		self.tabwidget2.addTab(self.get_main_tab(), "Main")
 		#self.tabwidget2.addTab(self.get_GL_tab(),"GL")
@@ -320,21 +320,21 @@
 		self.vbl.addWidget(self.tabwidget2)
 		self.n3_showing = False
 
-		QtCore.QObject.connect(self.cbb, QtCore.SIGNAL("currentIndexChanged(QString)"), target.setColor)
-		QtCore.QObject.connect(self.wiretog, QtCore.SIGNAL("toggled(bool)"), target.toggle_wire)
-		QtCore.QObject.connect(self.lighttog, QtCore.SIGNAL("toggled(bool)"), target.toggle_light)
-		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), target.set_GL_contrast)
-		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), target.set_GL_brightness)
-		QtCore.QObject.connect(self.combo, QtCore.SIGNAL("currentIndexChanged (const QString&)"), self.on_combo_change)
-		QtCore.QObject.connect(self.text, QtCore.SIGNAL("textChanged(const QString&)"), self.on_text_change)
-		QtCore.QObject.connect(self.lspacing, QtCore.SIGNAL("valueChanged"), self.set_GL_lspacing)
-		QtCore.QObject.connect(self.length, QtCore.SIGNAL("valueChanged"), self.set_GL_length)
-		QtCore.QObject.connect(self.tsize, QtCore.SIGNAL("valueChanged(int)"), self.set_GL_tsize)
-		QtCore.QObject.connect(self.Dfont, QtCore.SIGNAL("currentIndexChanged (const QString&)"), self.on_Dfont_change)
-		QtCore.QObject.connect(self.bgR, QtCore.SIGNAL("valueChanged"), self.set_GL_bgR)
-		QtCore.QObject.connect(self.bgG, QtCore.SIGNAL("valueChanged"), self.set_GL_bgG)
-		QtCore.QObject.connect(self.bgB, QtCore.SIGNAL("valueChanged"), self.set_GL_bgB)
-		QtCore.QObject.connect(self.bg_a, QtCore.SIGNAL("valueChanged"), self.set_GL_bg_a)
+		self.cbb.currentIndexChanged['QString'].connect(target.setColor)
+		self.wiretog.toggled[bool].connect(target.toggle_wire)
+		self.lighttog.toggled[bool].connect(target.toggle_light)
+		self.glcontrast.valueChanged.connect(target.set_GL_contrast)
+		self.glbrightness.valueChanged.connect(target.set_GL_brightness)
+		self.combo.currentIndexChanged ['QString'].connect(self.on_combo_change)
+		self.text.textChanged['QString'].connect(self.on_text_change)
+		self.lspacing.valueChanged.connect(self.set_GL_lspacing)
+		self.length.valueChanged.connect(self.set_GL_length)
+		self.tsize.valueChanged[int].connect(self.set_GL_tsize)
+		self.Dfont.currentIndexChanged ['QString'].connect(self.on_Dfont_change)
+		self.bgR.valueChanged.connect(self.set_GL_bgR)
+		self.bgG.valueChanged.connect(self.set_GL_bgG)
+		self.bgB.valueChanged.connect(self.set_GL_bgB)
+		self.bg_a.valueChanged.connect(self.set_GL_bg_a)
 	
 	def get_transform_layout(self):
 		return self.transform_vbl
@@ -438,11 +438,11 @@
 		self.transform_panel.set_xyz_trans(x,y,z)	
 
 	def get_GL_tab(self):
-		self.gltab = QtGui.QWidget()
+		self.gltab = QtWidgets.QWidget()
 		gltab = self.gltab
 
-		gltab.vbl = QtGui.QVBoxLayout(self.gltab)
-		gltab.vbl.setMargin(0)
+		gltab.vbl = QtWidgets.QVBoxLayout(self.gltab)
+		gltab.vbl.setContentsMargins(0, 0, 0, 0)
 		gltab.vbl.setSpacing(6)
 		gltab.vbl.setObjectName("Main")
 
@@ -461,60 +461,60 @@
 
 	def get_main_tab(self):
 		if ( self.maintab == None ):
-			self.maintab = QtGui.QWidget()
+			self.maintab = QtWidgets.QWidget()
 			maintab = self.maintab
-			maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-			maintab.vbl.setMargin(0)
+			maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+			maintab.vbl.setContentsMargins(0, 0, 0, 0)
 			maintab.vbl.setSpacing(6)
 			maintab.vbl.setObjectName("Main")
 			
-			self.transform_vbl = QtGui.QVBoxLayout()
+			self.transform_vbl = QtWidgets.QVBoxLayout()
 			self.transform_panel.addWidgets(self.transform_vbl)
 			maintab.vbl.addLayout(self.transform_vbl)
-			self.glwidget = QtGui.QTabWidget()
+			self.glwidget = QtWidgets.QTabWidget()
 			self.glwidget.addTab(self.get_GL_tab(),"GL")
 			maintab.vbl.addWidget(self.glwidget)
 
 		return maintab
 
 	def get_format_tab(self):
-		self.formattab = QtGui.QWidget()
+		self.formattab = QtWidgets.QWidget()
 		formattab = self.formattab
-		formattab.vbl = QtGui.QVBoxLayout(self.formattab)
-		formattab.vbl.setMargin(0)
+		formattab.vbl = QtWidgets.QVBoxLayout(self.formattab)
+		formattab.vbl.setContentsMargins(0, 0, 0, 0)
 		formattab.vbl.setSpacing(6)
 		formattab.vbl.setObjectName("Format")
 
-		self.hbl1 = QtGui.QHBoxLayout()
-		self.text = QtGui.QLineEdit()
+		self.hbl1 = QtWidgets.QHBoxLayout()
+		self.text = QtWidgets.QLineEdit()
 		self.text.setText("hello world")
-		text_label = QtGui.QLabel("Enter Text:",self)
+		text_label = QtWidgets.QLabel("Enter Text:",self)
 		text_label.setToolTip("Enters quotes to evaluate new line e.g. \"hello\\nworld\". Evaluates numerical expressions e.g. 9*9 (with out quotes)")
 		self.hbl1.addWidget(text_label)
 		self.hbl1.addWidget(self.text)
 		formattab.vbl.addLayout(self.hbl1)
 
-		self.hbl1 = QtGui.QHBoxLayout()
-		self.Dfont = QtGui.QComboBox()
+		self.hbl1 = QtWidgets.QHBoxLayout()
+		self.Dfont = QtWidgets.QComboBox()
 		for k in self.l: self.Dfont.addItem(k)
-		self.hbl1.addWidget(QtGui.QLabel("Fonts:",self))
+		self.hbl1.addWidget(QtWidgets.QLabel("Fonts:",self))
 		self.hbl1.addWidget(self.Dfont)
 		formattab.vbl.addLayout(self.hbl1)
 
-		self.hbl1 = QtGui.QHBoxLayout()
-		self.tsize = QtGui.QSpinBox()
+		self.hbl1 = QtWidgets.QHBoxLayout()
+		self.tsize = QtWidgets.QSpinBox()
 		self.tsize.setRange(0,500)
 		self.tsize.setValue(32)
-		self.hbl1.addWidget(QtGui.QLabel("Size:",self),Qt.AlignLeft)
+		self.hbl1.addWidget(QtWidgets.QLabel("Size:",self),Qt.AlignLeft)
 		self.hbl1.addWidget(self.tsize,Qt.AlignRight)
-		self.combo = QtGui.QComboBox()
+		self.combo = QtWidgets.QComboBox()
 		self.items = ["Extrude","Pixmap","Bitmap","Polygon","Outline","Texture"]
 		for k in self.items: self.combo.addItem(k)
-		self.hbl1.addWidget(QtGui.QLabel("Style:",self),Qt.AlignLeft)
+		self.hbl1.addWidget(QtWidgets.QLabel("Style:",self),Qt.AlignLeft)
 		self.hbl1.addWidget(self.combo,Qt.AlignRight)
 		formattab.vbl.addLayout(self.hbl1)
 
-		self.hbl1 = QtGui.QHBoxLayout()
+		self.hbl1 = QtWidgets.QHBoxLayout()
 		self.lspacing = ValSlider(self,(-100.0,100.0),"Line Spacing:")
 		self.lspacing.setObjectName("Length")
 		self.lspacing.setValue(75.0)
@@ -522,21 +522,21 @@
 		self.hbl1.addWidget(self.lspacing)
 		formattab.vbl.addLayout(self.hbl1)
 
-		self.hbl1 = QtGui.QHBoxLayout()
+		self.hbl1 = QtWidgets.QHBoxLayout()
 		self.length = ValSlider(self,(0.0,500.0),"Length:")
 		self.length.setObjectName("Length")
 		self.length.setValue(75.0)
 		self.hbl1.addWidget(self.length)
 		formattab.vbl.addLayout(self.hbl1)
 
-		self.hbl1 = QtGui.QHBoxLayout()
-		self.cbb = QtGui.QComboBox()
-		self.hbl1.addWidget(QtGui.QLabel("Material:",self))
+		self.hbl1 = QtWidgets.QHBoxLayout()
+		self.cbb = QtWidgets.QComboBox()
+		self.hbl1.addWidget(QtWidgets.QLabel("Material:",self))
 		self.hbl1.addWidget(self.cbb)
 		formattab.vbl.addLayout(self.hbl1)
 
-		self.hbl1 = QtGui.QHBoxLayout()
-		self.bgtabwidget = QtGui.QTabWidget()
+		self.hbl1 = QtWidgets.QHBoxLayout()
+		self.bgtabwidget = QtWidgets.QTabWidget()
 		self.maintab = None
 		self.bgtabwidget.addTab(self.get_bgRGB_tab(), "BG RGB")
 		self.hbl1.addWidget(self.bgtabwidget)
@@ -546,35 +546,35 @@
 		return formattab
 
 	def get_bgRGB_tab(self):
-		self.bgRGBtab = QtGui.QWidget()
+		self.bgRGBtab = QtWidgets.QWidget()
 		bgRGBtab = self.bgRGBtab
-		bgRGBtab.vbl2 = QtGui.QVBoxLayout(self.bgRGBtab)
-		bgRGBtab.vbl2.setMargin(0)
+		bgRGBtab.vbl2 = QtWidgets.QVBoxLayout(self.bgRGBtab)
+		bgRGBtab.vbl2.setContentsMargins(0, 0, 0, 0)
 		bgRGBtab.vbl2.setSpacing(6)
 		bgRGBtab.vbl2.setObjectName("BG RGB")
 
-		self.hbl2 = QtGui.QHBoxLayout()
+		self.hbl2 = QtWidgets.QHBoxLayout()
 		self.bgR = ValSlider(self,(0,1),"R:")
 		self.bgR.setObjectName("R")
 		self.bgR.setValue(0.5)
 		self.hbl2.addWidget(self.bgR)
 		bgRGBtab.vbl2.addLayout(self.hbl2)
 
-		self.hbl2 = QtGui.QHBoxLayout()
+		self.hbl2 = QtWidgets.QHBoxLayout()
 		self.bgG = ValSlider(self,(0,1),"G:")
 		self.bgG.setObjectName("G")
 		self.bgG.setValue(0.5)
 		self.hbl2.addWidget(self.bgG)
 		bgRGBtab.vbl2.addLayout(self.hbl2)
 
-		self.hbl2 = QtGui.QHBoxLayout()
+		self.hbl2 = QtWidgets.QHBoxLayout()
 		self.bgB = ValSlider(self,(0,1),"B:")
 		self.bgB.setObjectName("B")
 		self.bgB.setValue(0.5)
 		self.hbl2.addWidget(self.bgB)
 		bgRGBtab.vbl2.addLayout(self.hbl2)		
 
-		self.hbl2 = QtGui.QHBoxLayout()
+		self.hbl2 = QtWidgets.QHBoxLayout()
 		self.bg_a = ValSlider(self,(0,1),"Alpha:")
 		self.bg_a.setObjectName("Alpha")
 		self.bg_a.setValue(1.0)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/em3Dhelloworld.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/em3Dhelloworld.py	2017-10-21 17:14:52.000000000 -0500
@@ -33,8 +33,8 @@
 #
 #
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
@@ -204,63 +204,63 @@
 		return self.inspector
 		
 
-class EMHelloWorldInspector(QtGui.QWidget):
+class EMHelloWorldInspector(QtWidgets.QWidget):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=target
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
 		
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 		
-		self.wiretog = QtGui.QPushButton("Wire")
+		self.wiretog = QtWidgets.QPushButton("Wire")
 		self.wiretog.setCheckable(1)
 		self.vbl2.addWidget(self.wiretog)
 		
-		self.lighttog = QtGui.QPushButton("Light")
+		self.lighttog = QtWidgets.QPushButton("Light")
 		self.lighttog.setCheckable(1)
 		self.vbl2.addWidget(self.lighttog)
 		
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.maintab = None
 		self.tabwidget.addTab(self.get_main_tab(), "Main")
 		self.tabwidget.addTab(self.get_GL_tab(),"GL")
 		self.vbl.addWidget(self.tabwidget)
 		self.n3_showing = False
 		
-		QtCore.QObject.connect(self.scale, QtCore.SIGNAL("valueChanged"), target.set_scale)
-		QtCore.QObject.connect(self.az, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
-		QtCore.QObject.connect(self.alt, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
-		QtCore.QObject.connect(self.phi, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
-		QtCore.QObject.connect(self.cbb, QtCore.SIGNAL("currentIndexChanged(QString)"), target.setColor)
-		QtCore.QObject.connect(self.src, QtCore.SIGNAL("currentIndexChanged(QString)"), self.set_src)
-		QtCore.QObject.connect(self.x_trans, QtCore.SIGNAL("valueChanged(double)"), target.set_cam_x)
-		QtCore.QObject.connect(self.y_trans, QtCore.SIGNAL("valueChanged(double)"), target.set_cam_y)
-		QtCore.QObject.connect(self.z_trans, QtCore.SIGNAL("valueChanged(double)"), target.set_cam_z)
-		QtCore.QObject.connect(self.wiretog, QtCore.SIGNAL("toggled(bool)"), target.toggle_wire)
-		QtCore.QObject.connect(self.lighttog, QtCore.SIGNAL("toggled(bool)"), target.toggle_light)
-		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), target.set_GL_contrast)
-		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), target.set_GL_brightness)
+		self.scale.valueChanged.connect(target.set_scale)
+		self.az.valueChanged.connect(self.slider_rotate)
+		self.alt.valueChanged.connect(self.slider_rotate)
+		self.phi.valueChanged.connect(self.slider_rotate)
+		self.cbb.currentIndexChanged['QString'].connect(target.setColor)
+		self.src.currentIndexChanged['QString'].connect(self.set_src)
+		self.x_trans.valueChanged[double].connect(target.set_cam_x)
+		self.y_trans.valueChanged[double].connect(target.set_cam_y)
+		self.z_trans.valueChanged[double].connect(target.set_cam_z)
+		self.wiretog.toggled[bool].connect(target.toggle_wire)
+		self.lighttog.toggled[bool].connect(target.toggle_light)
+		self.glcontrast.valueChanged.connect(target.set_GL_contrast)
+		self.glbrightness.valueChanged.connect(target.set_GL_brightness)
 	
 	def get_GL_tab(self):
-		self.gltab = QtGui.QWidget()
+		self.gltab = QtWidgets.QWidget()
 		gltab = self.gltab
 		
-		gltab.vbl = QtGui.QVBoxLayout(self.gltab )
-		gltab.vbl.setMargin(0)
+		gltab.vbl = QtWidgets.QVBoxLayout(self.gltab )
+		gltab.vbl.setContentsMargins(0, 0, 0, 0)
 		gltab.vbl.setSpacing(6)
 		gltab.vbl.setObjectName("Main")
 		
@@ -279,10 +279,10 @@
 	
 	def get_main_tab(self):
 		if ( self.maintab == None ):
-			self.maintab = QtGui.QWidget()
+			self.maintab = QtWidgets.QWidget()
 			maintab = self.maintab
-			maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-			maintab.vbl.setMargin(0)
+			maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+			maintab.vbl.setContentsMargins(0, 0, 0, 0)
 			maintab.vbl.setSpacing(6)
 			maintab.vbl.setObjectName("Main")
 			
@@ -291,67 +291,67 @@
 			self.scale.setValue(1.0)
 			maintab.vbl.addWidget(self.scale)
 			
-			self.hbl_color = QtGui.QHBoxLayout()
-			self.hbl_color.setMargin(0)
+			self.hbl_color = QtWidgets.QHBoxLayout()
+			self.hbl_color.setContentsMargins(0, 0, 0, 0)
 			self.hbl_color.setSpacing(6)
 			self.hbl_color.setObjectName("Material")
 			maintab.vbl.addLayout(self.hbl_color)
 			
-			self.color_label = QtGui.QLabel()
+			self.color_label = QtWidgets.QLabel()
 			self.color_label.setText('Material')
 			self.hbl_color.addWidget(self.color_label)
 			
-			self.cbb = QtGui.QComboBox(maintab)
+			self.cbb = QtWidgets.QComboBox(maintab)
 			self.hbl_color.addWidget(self.cbb)
 	
-			self.hbl_trans = QtGui.QHBoxLayout()
-			self.hbl_trans.setMargin(0)
+			self.hbl_trans = QtWidgets.QHBoxLayout()
+			self.hbl_trans.setContentsMargins(0, 0, 0, 0)
 			self.hbl_trans.setSpacing(6)
 			self.hbl_trans.setObjectName("Trans")
 			maintab.vbl.addLayout(self.hbl_trans)
 			
-			self.x_label = QtGui.QLabel()
+			self.x_label = QtWidgets.QLabel()
 			self.x_label.setText('x')
 			self.hbl_trans.addWidget(self.x_label)
 			
-			self.x_trans = QtGui.QDoubleSpinBox(self)
+			self.x_trans = QtWidgets.QDoubleSpinBox(self)
 			self.x_trans.setMinimum(-10000)
 			self.x_trans.setMaximum(10000)
 			self.x_trans.setValue(0.0)
 			self.hbl_trans.addWidget(self.x_trans)
 			
-			self.y_label = QtGui.QLabel()
+			self.y_label = QtWidgets.QLabel()
 			self.y_label.setText('y')
 			self.hbl_trans.addWidget(self.y_label)
 			
-			self.y_trans = QtGui.QDoubleSpinBox(maintab)
+			self.y_trans = QtWidgets.QDoubleSpinBox(maintab)
 			self.y_trans.setMinimum(-10000)
 			self.y_trans.setMaximum(10000)
 			self.y_trans.setValue(0.0)
 			self.hbl_trans.addWidget(self.y_trans)
 			
 			
-			self.z_label = QtGui.QLabel()
+			self.z_label = QtWidgets.QLabel()
 			self.z_label.setText('z')
 			self.hbl_trans.addWidget(self.z_label)
 			
-			self.z_trans = QtGui.QDoubleSpinBox(maintab)
+			self.z_trans = QtWidgets.QDoubleSpinBox(maintab)
 			self.z_trans.setMinimum(-10000)
 			self.z_trans.setMaximum(10000)
 			self.z_trans.setValue(0.0)
 			self.hbl_trans.addWidget(self.z_trans)
 			
-			self.hbl_src = QtGui.QHBoxLayout()
-			self.hbl_src.setMargin(0)
+			self.hbl_src = QtWidgets.QHBoxLayout()
+			self.hbl_src.setContentsMargins(0, 0, 0, 0)
 			self.hbl_src.setSpacing(6)
 			self.hbl_src.setObjectName("hbl")
 			maintab.vbl.addLayout(self.hbl_src)
 			
-			self.label_src = QtGui.QLabel()
+			self.label_src = QtWidgets.QLabel()
 			self.label_src.setText('Rotation Convention')
 			self.hbl_src.addWidget(self.label_src)
 			
-			self.src = QtGui.QComboBox(maintab)
+			self.src = QtWidgets.QComboBox(maintab)
 			self.load_src_options(self.src)
 			self.hbl_src.addWidget(self.src)
 			
@@ -476,7 +476,7 @@
 			self.n3.setRange(-1,1)
 			self.n3.setObjectName("n3")
 			self.vbl.addWidget(self.n3)
-			QtCore.QObject.connect(self.n3, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
+			self.n3.valueChanged.connect(self.slider_rotate)
 			self.n3_showing = True
 		
 		self.current_src = self.src_map[str(val)]
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emanimationutil.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emanimationutil.py	2017-10-21 17:14:52.000000000 -0500
@@ -33,7 +33,7 @@
 
 from time import time
 
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from math import sin,acos
 from EMAN2 import Vec3f, Transform
 
@@ -63,7 +63,7 @@
 		
 			self.update()
 		else:
-			if not QtCore.QObject.disconnect(self.timer, QtCore.SIGNAL("timeout()"), self.time_out):
+			self.timer.timeout.disconnect(self.time_out)
 				print("failed to disconnect timer")
 			
 			self.timer_enabled = False
@@ -82,7 +82,7 @@
 	def __enable_timer(self):
 		if self.timer_enabled == False:
 			self.timer = QtCore.QTimer()
-			QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.time_out)
+			self.timer.timeout.connect(self.time_out)
 			
 			self.timer.start(self.timer_interval)
 			self.timer_enabled = True
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emapplication.py	2017-10-21 17:05:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emapplication.py	2017-10-21 17:14:52.000000000 -0500
@@ -32,8 +32,8 @@
 #
 #
 
-from PyQt4 import QtGui, QtCore, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWebKitWidgets, QtWidgets
+from PyQt5.QtCore import Qt
 import sys
 from emimageutil import EMParentWin
 from EMAN2 import remove_directories_from_name, get_image_directory,get_3d_font_renderer, E2end,get_platform
@@ -41,7 +41,7 @@
 import weakref
 from libpyGLUtils2 import *
 
-try: from PyQt4 import QtWebKit
+try: from PyQt5 import QtWebKit
 except: pass
 
 class ModuleEventsManager: 
@@ -58,11 +58,11 @@
 		except AttributeError:
 			emitter = self.module() #Ross's hack to get this to work with QWidget's as well
 			
-		QtCore.QObject.connect(emitter, QtCore.SIGNAL("module_closed"), self.module_closed)
-		QtCore.QObject.connect(emitter, QtCore.SIGNAL("module_idle"), self.module_idle)
+		emitter.module_closed.connect(self.module_closed)
+		emitter.module_idle.connect(self.module_idle)
 	
-		QtCore.QObject.connect(emitter, QtCore.SIGNAL("ok"), self.module_ok) # yes, redundant, but time is short
-		QtCore.QObject.connect(emitter, QtCore.SIGNAL("cancel"), self.module_cancel)# yes, redundant, but time is short
+		emitter.ok.connect(self.module_ok)
+		emitter.cancel.connect(self.module_cancel)
 		
 	
 	def module_closed(self):
@@ -88,11 +88,11 @@
 		except AttributeError:
 			emitter = self.module() #Ross's hack to get this to work with QWidget's as well
 			
-		QtCore.QObject.disconnect(emitter, QtCore.SIGNAL("module_closed"), self.module_closed)
-		QtCore.QObject.disconnect(emitter, QtCore.SIGNAL("module_idle"), self.module_idle)
+		emitter.module_closed.disconnect(self.module_closed)
+		emitter.module_idle.disconnect(self.module_idle)
 	
-		QtCore.QObject.disconnect(emitter, QtCore.SIGNAL("ok"), self.module_ok) # yes, redundant, but time is short
-		QtCore.QObject.disconnect(emitter, QtCore.SIGNAL("cancel"), self.module_cancel)# yes, redundant, but time is short
+		emitter.ok.disconnect(self.module_ok)
+		emitter.cancel.disconnect(self.module_cancel)
 
 class EMGLWidget(QtOpenGL.QGLWidget):
 	"""
@@ -101,6 +101,9 @@
 	a self.busy attribute to prevent updateGL() from redrawing before all changes to display parameters are in place. 
 	"""
 	
+	module_closed = QtCore.pyqtSignal()
+	inspector_shown = QtCore.pyqtSignal()
+
 	def hide(self):
 		if self.qt_parent:
 			self.qt_parent.hide()
@@ -159,7 +162,7 @@
 			self.inspector.close()
 		QtOpenGL.QGLWidget.closeEvent(self, event)
 		if self.myparent : self.qt_parent.close()
-		self.emit(QtCore.SIGNAL("module_closed")) # this could be a useful signal, especially for something like the selector module, which can potentially show a lot of images but might want to close them all when it is closed
+		self.module_closed.emit()
 		event.accept()
 		
 	def display_web_help(self,url="http://blake.bcm.edu/emanwiki/e2display"):
@@ -171,7 +174,7 @@
 				try:
 					test = self.browser
 				except: 
-					self.browser = QtWebKit.QWebView()
+					self.browser = QtWebKitWidgets.QWebView()
 					self.browser.load(QtCore.QUrl())
 					self.browser.resize(800,800)
 				
@@ -187,7 +190,7 @@
 		if self.disable_inspector: 
 			return
 		
-		self.emit(QtCore.SIGNAL("inspector_shown")) # debug only
+		self.inspector_shown.emit()
 		app = get_application()
 		if app == None:
 			print("can't show an inspector with having an associated application")
@@ -231,7 +234,7 @@
 #def get_application() : return QtGui.qApp
 
 
-class EMApp(QtGui.QApplication):
+class EMApp(QtWidgets.QApplication):
 	def __init__(self):
 		self.children = []
 		
@@ -239,16 +242,16 @@
 		self.timer_function = None
 		self.tmr = None
 		
-		QtGui.QApplication.__init__(self, sys.argv)
+		QtWidgets.QApplication.__init__(self, sys.argv)
 		
-		style=QtGui.QStyleFactory.create("Plastique")
+		style=QtWidgets.QStyleFactory.create("Plastique")
 		
 		if style==None:
 			print("Note: standard Plastique style not available, controls may be distorted. Using ", end=' ')
 			
 			# the first one should work, but we have the loop, just in case
-			for s in list(QtGui.QStyleFactory.keys()):
-				style=QtGui.QStyleFactory.create(s)
+			for s in list(QtWidgets.QStyleFactory.keys()):
+				style=QtWidgets.QStyleFactory.create(s)
 				if style!=None: 
 					print(s)
 					break
@@ -345,7 +348,7 @@
 	
 		self.tmr=QtCore.QTimer()
 		self.tmr.setInterval(interval)
-		QtCore.QObject.connect(self.tmr,QtCore.SIGNAL("timeout()"), function)
+		self.tmr.timeout.connect(function)
 		self.tmr.start()
 		
 		self.timer_function = function
@@ -354,7 +357,7 @@
 	def stop_timer(self):
 		print("STOP APP TIMER")
 		if self.tmr != None:
-			QtCore.QObject.disconnect(self.tmr, QtCore.SIGNAL("timeout()"), self.timer_function)
+			self.tmr.timeout.disconnect(self.timer_function)
 			self.tmr = None
 			self.timer_function = None
 		else:
@@ -362,9 +365,9 @@
 
 		
 	
-class EMProgressDialog(QtGui.QProgressDialog):
+class EMProgressDialog(QtWidgets.QProgressDialog):
 	def __init__(self,label_text,cancel_button_text, minimum, maximum, parent = None):
-		QtGui.QProgressDialog.__init__(self,label_text,cancel_button_text, minimum, maximum, parent)
+		QtWidgets.QProgressDialog.__init__(self,label_text,cancel_button_text, minimum, maximum, parent)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "/eman.png"))
 
 
@@ -380,7 +383,7 @@
 		'''
 		error_message is a list of error messages
 		'''
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 		msg.setWindowTitle(title)
 		msg.setWindowIcon(QtGui.QIcon(get_image_directory() + "/eman.png"))
 		mes = ""
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/embrowse.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/embrowse.py	2017-10-21 17:14:52.000000000 -0500
@@ -32,8 +32,8 @@
 #
 #
 
-import PyQt4
-from PyQt4 import QtCore, QtGui
+import PyQt5
+from PyQt5 import QtCore
 from emapplication import EMApp
 from emselector import EMBrowser
 
@@ -54,7 +54,7 @@
 	em_app = EMApp()
 	app = em_app
 	browser = EMBrowser()
-	QtCore.QObject.connect(browser,QtCore.SIGNAL("done"),on_done)
+	browser.done.connect(on_done)
 	em_app.show()
 	em_app.execute()
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/embrowser.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/embrowser.py	2017-10-21 17:14:53.000000000 -0500
@@ -33,8 +33,8 @@
 
 from EMAN2 import *
 from EMAN2jsondb import js_open_dict
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import EMApp
 from emimage2d import *
 from emimagemx import *
@@ -55,13 +55,24 @@
 
 
 try:
-	from PyQt4.QtCore import QString
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+QStringList = list
+
+try:
+    QChar = unichr
+except NameError:
+    # Python 3
+    QChar = chr
+
+try:
 except ImportError:
 	# we are using Python3 so QString is not defined
 	QString = str
 
 try:
-	from PyQt4.QtCore import QChar
 except ImportError:
 	# we are using Python3 so QString is not defined
 	QChar = str
@@ -72,7 +83,7 @@
 
 	print(msg)
 	sys.stdout.flush()
-	QtGui.QMessageBox.warning(None, "Error", msg)
+	QtWidgets.QMessageBox.warning(None, "Error", msg)
 
 # This is a floating point number-finding regular expression
 
@@ -115,10 +126,10 @@
 def askFileExists() :
 	"""Opens a dialog and asks the user what to do if a file to be written to already exists"""
 
-	box = QtGui.QMessageBox(4, "File Exists", "File already exists. What would you like to do ?")	# 4 means we're asking a question
-	b1 = box.addButton("Append", QtGui.QMessageBox.AcceptRole)
-	b2 = box.addButton("Overwrite", QtGui.QMessageBox.AcceptRole)
-	b3 = box.addButton("Cancel", QtGui.QMessageBox.AcceptRole)
+	box = QtWidgets.QMessageBox(4, "File Exists", "File already exists. What would you like to do ?")	# 4 means we're asking a question
+	b1 = box.addButton("Append", QtWidgets.QMessageBox.AcceptRole)
+	b2 = box.addButton("Overwrite", QtWidgets.QMessageBox.AcceptRole)
+	b3 = box.addButton("Cancel", QtWidgets.QMessageBox.AcceptRole)
 
 	box.exec_()
 
@@ -200,7 +211,7 @@
 	def saveAs(self, brws) :
 		"""Save an image file/stack to a new file"""
 
-		outpath = QtGui.QInputDialog.getText(None, "Save Filename", "Filename to save to (type determined by extension)", 0, self.path)
+		outpath = QtWidgets.QInputDialog.getText(None, "Save Filename", "Filename to save to (type determined by extension)", 0, self.path)
 
 		if outpath[1] != True : return
 
@@ -373,7 +384,7 @@
 		except :
 			target = EMImageMXWidget()
 			target.set_data(self.path, self.path)
-			QtCore.QObject.connect(target, QtCore.SIGNAL("mx_image_double"), target.mouse_double_click)		# this makes class average viewing work in app mode
+			target.mx_image_double.connect(target.mouse_double_click)
 			# if self.getSetsDB() : target.set_single_active_set(self.getSetsDB())
 			brws.view2ds.append(target)
 
@@ -396,7 +407,7 @@
 
 		target = EMImageMXWidget()
 		target.set_data(self.path, self.path)
-		QtCore.QObject.connect(target, QtCore.SIGNAL("mx_image_double"), target.mouse_double_click)
+		target.mx_image_double.connect(target.mouse_double_click)
 		# if self.getSetsDB() : target.set_single_active_set(self.getSetsDB())
 		brws.view2ds.append(target)
 
@@ -1014,6 +1025,7 @@
 
 class EMImageFileType(EMFileType) :
 	"""FileType for files containing a single 2-D image"""
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self, path) :
 		if path[:2] == "./" : path = path[2:]
@@ -1036,7 +1048,7 @@
 
 		event.accept()
 		# self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 	@staticmethod
 	def name() :
@@ -1922,16 +1934,16 @@
 
 #---------------------------------------------------------------------------
 
-class myQItemSelection(QtGui.QItemSelectionModel) :
+class myQItemSelection(QtCore.QItemSelectionModel) :
 	"""For debugging"""
 
 	def select(self, tl, br) :
 		print(tl.indexes()[0].row(), tl.indexes()[0].column(), int(br))
-		QtGui.QItemSelectionModel.select(self, tl, QtGui.QItemSelectionModel.SelectionFlags(QtGui.QItemSelectionModel.ClearAndSelect+QtGui.QItemSelectionModel.Rows))
+		QtCore.QItemSelectionModel.select(self, tl, QtCore.QItemSelectionModel.SelectionFlags(QtCore.QItemSelectionModel.ClearAndSelect+QtCore.QItemSelectionModel.Rows))
 
 #---------------------------------------------------------------------------
 
-class EMInfoPane(QtGui.QWidget) :
+class EMInfoPane(QtWidgets.QWidget) :
 	"""Subclasses of this class will be used to display information about specific files. Each EMFileType class will return the
 	pointer to the appropriate infoPane subclass for displaying information about the file it represents. The subclass instances
 	are allocated by the infoWin class"""
@@ -1939,7 +1951,7 @@
 	def __init__(self, parent = None) :
 		"""Set our GUI up"""
 
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		# self.setTitle("e2dispaly.py Information Pane")
 
@@ -1947,8 +1959,8 @@
 
 		# Root class represents no target
 
-		self.hbl = QtGui.QHBoxLayout(self)
-		self.lbl = QtGui.QLabel("No Information Available")
+		self.hbl = QtWidgets.QHBoxLayout(self)
+		self.lbl = QtWidgets.QLabel("No Information Available")
 		self.hbl.addWidget(self.lbl)
 
 	def display(self, target) :
@@ -1969,13 +1981,13 @@
 
 class EMTextInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 		# text editing widget
 
-		self.text = QtGui.QTextEdit()
+		self.text = QtWidgets.QTextEdit()
 		self.text.setAcceptRichText(False)
 		self.text.setReadOnly(True)
 		self.vbl.addWidget(self.text)
@@ -1987,25 +1999,25 @@
 
 		# Buttons
 
-		self.hbl = QtGui.QHBoxLayout()
+		self.hbl = QtWidgets.QHBoxLayout()
 
-		self.wbutedit = QtGui.QPushButton("Edit")
+		self.wbutedit = QtWidgets.QPushButton("Edit")
 		self.hbl.addWidget(self.wbutedit)
 
-		self.wbutcancel = QtGui.QPushButton("Revert")
+		self.wbutcancel = QtWidgets.QPushButton("Revert")
 		self.wbutcancel.setEnabled(False)
 		self.hbl.addWidget(self.wbutcancel)
 
-		self.wbutok = QtGui.QPushButton("Save")
+		self.wbutok = QtWidgets.QPushButton("Save")
 		self.wbutok.setEnabled(False)
 		self.hbl.addWidget(self.wbutok)
 
 		self.vbl.addLayout(self.hbl)
 
-		QtCore.QObject.connect(self.wfind, QtCore.SIGNAL("valueChanged"), self.find)
-		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
-		QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-		QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+		self.wfind.valueChanged.connect(self.find)
+		self.wbutedit.clicked[bool].connect(self.buttonEdit)
+		self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+		self.wbutok.clicked[bool].connect(self.buttonOk)
 
 	def display(self, data) :
 		"""display information for the target EMDirEntry"""
@@ -2038,19 +2050,19 @@
 
 	def buttonOk(self, tog) :
 		try : open(self.target.path(), "w").write(str(self.text.toPlainText()))
-		except : QtGui.QMessageBox.warning(self, "Error !", "File write failed")
+		except : QtWidgets.QMessageBox.warning(self, "Error !", "File write failed")
 
 #---------------------------------------------------------------------------
 
 class EMHTMLInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 		# text editing widget
 
-		self.text = QtGui.QTextEdit()
+		self.text = QtWidgets.QTextEdit()
 		self.text.setAcceptRichText(True)
 		self.text.setReadOnly(True)
 		self.vbl.addWidget(self.text)
@@ -2062,25 +2074,25 @@
 
 		# Buttons
 
-		self.hbl = QtGui.QHBoxLayout()
+		self.hbl = QtWidgets.QHBoxLayout()
 
-		self.wbutedit = QtGui.QPushButton("Edit")
+		self.wbutedit = QtWidgets.QPushButton("Edit")
 		self.hbl.addWidget(self.wbutedit)
 
-		self.wbutcancel = QtGui.QPushButton("Revert")
+		self.wbutcancel = QtWidgets.QPushButton("Revert")
 		self.wbutcancel.setEnabled(False)
 		self.hbl.addWidget(self.wbutcancel)
 
-		self.wbutok = QtGui.QPushButton("Save")
+		self.wbutok = QtWidgets.QPushButton("Save")
 		self.wbutok.setEnabled(False)
 		self.hbl.addWidget(self.wbutok)
 
 		self.vbl.addLayout(self.hbl)
 
-		QtCore.QObject.connect(self.wfind, QtCore.SIGNAL("valueChanged"), self.find)
-		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
-		QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-		QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+		self.wfind.valueChanged.connect(self.find)
+		self.wbutedit.clicked[bool].connect(self.buttonEdit)
+		self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+		self.wbutok.clicked[bool].connect(self.buttonOk)
 
 	def display(self, data) :
 		"""display information for the target EMDirEntry"""
@@ -2111,16 +2123,16 @@
 
 	def buttonOk(self, tog) :
 		try : open(self.target.path(), "w").write(str(self.text.toHtml()))
-		except : QtGui.QMessageBox.warning(self, "Error !", "File write failed")
+		except : QtWidgets.QMessageBox.warning(self, "Error !", "File write failed")
 
 #---------------------------------------------------------------------------
 
 class EMPDBInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
-		self.vbl = QtGui.QVBoxLayout(self)
+		QtWidgets.QWidget.__init__(self, parent)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 		# text editing widget
-		self.text = QtGui.QTextEdit()
+		self.text = QtWidgets.QTextEdit()
 		self.text.setAcceptRichText(False)
 		self.text.setReadOnly(True)
 		self.vbl.addWidget(self.text)
@@ -2128,20 +2140,20 @@
 		self.wfind = StringBox(label = "Find:")
 		self.vbl.addWidget(self.wfind)
 		# Buttons
-		self.hbl = QtGui.QHBoxLayout()
-		self.wbutedit = QtGui.QPushButton("Edit")
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.wbutedit = QtWidgets.QPushButton("Edit")
 		self.hbl.addWidget(self.wbutedit)
-		self.wbutcancel = QtGui.QPushButton("Revert")
+		self.wbutcancel = QtWidgets.QPushButton("Revert")
 		self.wbutcancel.setEnabled(False)
 		self.hbl.addWidget(self.wbutcancel)
-		self.wbutok = QtGui.QPushButton("Save")
+		self.wbutok = QtWidgets.QPushButton("Save")
 		self.wbutok.setEnabled(False)
 		self.hbl.addWidget(self.wbutok)
 		self.vbl.addLayout(self.hbl)
-		QtCore.QObject.connect(self.wfind, QtCore.SIGNAL("valueChanged"), self.find)
-		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
-		QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-		QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+		self.wfind.valueChanged.connect(self.find)
+		self.wbutedit.clicked[bool].connect(self.buttonEdit)
+		self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+		self.wbutok.clicked[bool].connect(self.buttonOk)
 
 	def display(self, data) :
 		"""display information for the target EMDirEntry"""
@@ -2170,19 +2182,19 @@
 
 	def buttonOk(self, tog) :
 		try : open(self.target.path(), "w").write(str(self.text.toPlainText()))
-		except : QtGui.QMessageBox.warning(self, "Error !", "File write failed")
+		except : QtWidgets.QMessageBox.warning(self, "Error !", "File write failed")
 
 #---------------------------------------------------------------------------
 
 class EMPlotInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# List as alternate mechanism for selecting image number(s)
 
-		self.plotdata = QtGui.QTableWidget()
+		self.plotdata = QtWidgets.QTableWidget()
 		self.gbl.addWidget(self.plotdata, 0, 0)
 
 	def display(self, target) :
@@ -2218,18 +2230,18 @@
 
 		for r in range(len(data)) :
 			for c in range(numc) :
-				self.plotdata.setItem(r, c, QtGui.QTableWidgetItem("%1.4g"%data[r][c]))
+				self.plotdata.setItem(r, c, QtWidgets.QTableWidgetItem("%1.4g"%data[r][c]))
 
 		if len(data) == 2500 :
-			self.plotdata.setVerticalHeaderItem(2500, QtGui.QTableWidgetItem("..."))
+			self.plotdata.setVerticalHeaderItem(2500, QtWidgets.QTableWidgetItem("..."))
 
 #---------------------------------------------------------------------------
 
 class EMFolderInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 	def display(self, target) :
 		"""display information for the target EMDirEntry"""
@@ -2242,24 +2254,24 @@
 	maxim = 500
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# Spinbox for selecting image number
 
-		self.wimnum = QtGui.QSpinBox()
+		self.wimnum = QtWidgets.QSpinBox()
 		self.wimnum.setRange(0, 0)
 		self.gbl.addWidget(self.wimnum, 0, 0)
 
 		# List as alternate mechanism for selecting image number(s)
 
-		self.wimlist = QtGui.QListWidget()
+		self.wimlist = QtWidgets.QListWidget()
 		self.gbl.addWidget(self.wimlist, 1, 0)
 
 		# Actual header contents
 
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 		self.wheadtree.setColumnCount(2)
 		self.wheadtree.setHeaderLabels(["Item", "Value"])
 		self.gbl.addWidget(self.wheadtree, 0, 1, 2, 1)
@@ -2269,7 +2281,7 @@
 
 		# Lower region has buttons for actions
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -2282,24 +2294,24 @@
 			self.hbl2.setColumnStretch(i, 2)
 	
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
 		# These just clean up the layout a bit
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutxx, 0, 6)
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutyy, 1, 6)
 
 		self.gbl.addLayout(self.hbl2, 2, 0, 1, 2)
 
-		QtCore.QObject.connect(self.wimnum, QtCore.SIGNAL("valueChanged(int)"), self.imNumChange)
-		QtCore.QObject.connect(self.wimlist, QtCore.SIGNAL("itemSelectionChanged()"), self.imSelChange)
+		self.wimnum.valueChanged[int].connect(self.imNumChange)
+		self.wimlist.itemSelectionChanged.connect(self.imSelChange)
 ##		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
 
 		self.view2d = []
@@ -2323,7 +2335,7 @@
 		try :
 			val = int(val)
 		except :
-			QtGui.QMessageBox.warning(self, "Error", "Sorry, cannot display string-keyed images")
+			QtWidgets.QMessageBox.warning(self, "Error", "Sorry, cannot display string-keyed images")
 			return
 
 		self.curft.setN(val)
@@ -2417,19 +2429,19 @@
 
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
-				itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 				if isinstance(trg[k], list) or isinstance(trg[k], tuple) or isinstance(trg[k], set) or isinstance(trg[k], dict) :
 					self.addTreeItem(trg[k], itms[-1])
 		elif isinstance(trg, list) or isinstance(trg, tuple) or isinstance(trg, set) :
 			for k in trg :
 				if isinstance(k, list) or isinstance(k, tuple) or isinstance(k, set) or isinstance(k, dict) :
-					try : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((k.__class__.__name__, ""))))
-					except : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("??", ""))))
+					try : itms.append(QtWidgets.QTreeWidgetItem(QStringList((k.__class__.__name__, ""))))
+					except : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("??", ""))))
 					self.addTreeItem(k, itms[-1])
 				else :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2440,18 +2452,18 @@
 
 class EMJSONInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# List of keys
 
-		self.wkeylist = QtGui.QListWidget()
+		self.wkeylist = QtWidgets.QListWidget()
 		self.gbl.addWidget(self.wkeylist, 1, 0)
 
 		# contents of a single key
 
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 		self.wheadtree.setColumnCount(2)
 		self.wheadtree.setHeaderLabels(["Key/#", "Value"])
 		self.gbl.addWidget(self.wheadtree, 0, 1, 2, 1)
@@ -2461,7 +2473,7 @@
 
 		# Lower region has buttons for actions
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -2474,27 +2486,27 @@
 			self.hbl2.setColumnStretch(i, 2)
 
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
 		# These just clean up the layout a bit
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutxx, 0, 6)
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutyy, 1, 6)
 
 		self.gbl.addLayout(self.hbl2, 2, 0, 1, 2)
 
-		QtCore.QObject.connect(self.wkeylist, QtCore.SIGNAL("itemSelectionChanged()"), self.imSelChange)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemExpanded(QTreeWidgetItem*)"), self.treeExp)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemCollapsed(QTreeWidgetItem*)"), self.treeExp)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemSelectionChanged()"), self.treeSel)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemActivated(QTreeWidgetItem*, int)"), self.treeAct)
+		self.wkeylist.itemSelectionChanged.connect(self.imSelChange)
+		self.wheadtree.itemExpanded[QTreeWidgetItem].connect(self.treeExp)
+		self.wheadtree.itemCollapsed[QTreeWidgetItem].connect(self.treeExp)
+		self.wheadtree.itemSelectionChanged.connect(self.treeSel)
+		self.wheadtree.itemActivated[QTreeWidgetItem, int].connect(self.treeAct)
 ##		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
 		self.view2d = []
 		self.view3d = []
@@ -2583,34 +2595,34 @@
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
 				if isinstance(trg[k], (list, tuple, set, dict, EMAN2Ctf)) :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 					self.addTreeItem(trg[k], itms[-1])
-				else : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				else : itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 		elif isinstance(trg, (list, tuple, set)) :
 			if isinstance(trg, set) : trg = sorted(trg)		# make a list temporarily
 			if len(trg) > 120 : vals = list(range(0, 50))+[-1]+list(range(len(trg)-50, len(trg)))
 			else : vals = range(len(trg))
 			for k in vals :
-				if k == -1 : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("...", "..."))))
+				if k == -1 : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("...", "..."))))
 				else :
 					v = trg[k]
 					if isinstance(v, (list, tuple, set, dict, EMAN2Ctf)) :
-						itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+						itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 						self.addTreeItem(v, itms[-1])
-					else : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(v)))))
+					else : itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(v)))))
 		elif isinstance(trg, EMAN2Ctf) :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("EMAN2Ctf", ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList(("EMAN2Ctf", ""))))
 			subitms = []
 			for k, v in trg.to_dict().items() :
 				if isinstance(v, (list, tuple)) :
 					v = ["%1.3g"%i for i in v]
-					subitms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ", ".join(v)))))
-				else : subitms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(v)))))
+					subitms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ", ".join(v)))))
+				else : subitms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(v)))))
 			itms[-1].addChildren(subitms)
 		elif isinstance(trg, EMData) :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("EMData", ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList(("EMData", ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2623,13 +2635,13 @@
 	maxim = 500
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# Actual header contents
 
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 		self.wheadtree.setColumnCount(2)
 		self.wheadtree.setHeaderLabels(["Item", "Value"])
 		self.gbl.addWidget(self.wheadtree, 0, 0)
@@ -2664,19 +2676,19 @@
 
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
-				itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 				if isinstance(trg[k], list) or isinstance(trg[k], tuple) or isinstance(trg[k], set) or isinstance(trg[k], dict) :
 					self.addTreeItem(trg[k], itms[-1])
 		elif isinstance(trg, list) or isinstance(trg, tuple) or isinstance(trg, set) :
 			for k in trg :
 				if isinstance(k, list) or isinstance(k, tuple) or isinstance(k, set) or isinstance(k, dict) :
-					try : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((k.__class__.__name__, ""))))
-					except : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("??", ""))))
+					try : itms.append(QtWidgets.QTreeWidgetItem(QStringList((k.__class__.__name__, ""))))
+					except : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("??", ""))))
 					self.addTreeItem(k, itms[-1])
 				else :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2686,25 +2698,26 @@
 #---------------------------------------------------------------------------
 
 class EMStackInfoPane(EMInfoPane) :
+	module_closed = QtCore.pyqtSignal()
 	maxim = 500
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		# self.setWindowTitle("e2display.py Information Pane") # Jesus
 		# self.setTitle("e2dispaly.py Information Pane")
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
-		self.gbl.label1 = QtGui.QLabel("Images") # Jesus
+		self.gbl.label1 = QtWidgets.QLabel("Images") # Jesus
 		self.gbl.addWidget(self.gbl.label1, 0, 0) # Jesus
 
-		self.gbl.label2 = QtGui.QLabel("Header Info") # Jesus
+		self.gbl.label2 = QtWidgets.QLabel("Header Info") # Jesus
 		self.gbl.addWidget(self.gbl.label2, 0, 1) # Jesus
 
 		'''Spinbox for selecting image number'''
 
-		self.wimnum = QtGui.QSpinBox()
+		self.wimnum = QtWidgets.QSpinBox()
 
 		# self.wimnum.setRange(0, 0) # JOHN
 		# self.gbl.addWidget(self.wimnum, 0, 0) # JOHN
@@ -2714,14 +2727,14 @@
 
 		'''List as alternate mechanism for selecting image number(s)'''
 
-		self.wimlist = QtGui.QListWidget()
+		self.wimlist = QtWidgets.QListWidget()
 
 		# self.gbl.addWidget(self.wimlist, 1, 0) # JOHN
 
 		self.gbl.addWidget(self.wimlist, 2, 0) # Jesus
 
 		'''Actual header contents'''
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 
 		# self.wheadtree.setColumnCount(2) #
 		self.wheadtree.setHeaderLabels(["Item", "Value"])
@@ -2733,7 +2746,7 @@
 
 		'''Lower region has buttons for actions'''
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -2749,19 +2762,19 @@
 			self.hbl2.setColumnStretch(i, 2)
 	
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
 		# These just clean up the layout a bit
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		# self.hbl2.addWidget(self.wbutxx, 0, 6) # JOHN
 		self.hbl2.addWidget(self.wbutxx, 1, 6) # Jesus
 
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 
 		# self.hbl2.addWidget(self.wbutyy, 1, 6) # JOHN
@@ -2770,8 +2783,8 @@
 		# self.gbl.addLayout(self.hbl2, 2, 0, 1, 2) # JOHN
 		self.gbl.addLayout(self.hbl2, 3, 0, 1, 2) # Jesus
 
-		QtCore.QObject.connect(self.wimnum, QtCore.SIGNAL("valueChanged(int)"), self.imNumChange)
-		QtCore.QObject.connect(self.wimlist, QtCore.SIGNAL("itemSelectionChanged()"), self.imSelChange)
+		self.wimnum.valueChanged[int].connect(self.imNumChange)
+		self.wimlist.itemSelectionChanged.connect(self.imSelChange)
 #		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
 		self.view2d = []
 		self.view3d = []
@@ -2793,7 +2806,7 @@
 		event.accept()
 
 		# self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 	def hideEvent(self, event) :
 		"""If this pane is no longer visible close any child views"""
@@ -2889,19 +2902,19 @@
 
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
-				itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 				if isinstance(trg[k], list) or isinstance(trg[k], tuple) or isinstance(trg[k], set) or isinstance(trg[k], dict) :
 					self.addTreeItem(trg[k], itms[-1])
 		elif isinstance(trg, list) or isinstance(trg, tuple) or isinstance(trg, set) :
 			for k in trg :
 				if isinstance(k, list) or isinstance(k, tuple) or isinstance(k, set) or isinstance(k, dict) :
-					try : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((k.__class__.__name__, ""))))
-					except : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("??", ""))))
+					try : itms.append(QtWidgets.QTreeWidgetItem(QStringList((k.__class__.__name__, ""))))
+					except : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("??", ""))))
 					self.addTreeItem(k, itms[-1])
 				else :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2910,14 +2923,14 @@
 
 #---------------------------------------------------------------------------
 
-class EMInfoWin(QtGui.QWidget) :
+class EMInfoWin(QtWidgets.QWidget) :
 	"""The info window"""
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		self.target = None
-		self.stack = QtGui.QStackedLayout(self)
+		self.stack = QtWidgets.QStackedLayout(self)
 
 		# We add one instance of 'infoPane' parent class to represent nothing
 
@@ -2945,23 +2958,24 @@
 			# If we got here, then we need to make a new instance of the appropriate pane
 
 			if cls == None : print("No class ! (%s)"%str(ftype))
+			winclosed = QtCore.pyqtSignal()
 			pane = cls()
 			i = self.stack.addWidget(pane)		# add the new pane and get its index
 			pane.display(target)
 			self.stack.setCurrentIndex(i)		# put the new pane on top
 
 	def closeEvent(self, event) :
-		QtGui.QWidget.closeEvent(self, event)
-		self.emit(QtCore.SIGNAL("winclosed()"))
+		QtWidgets.QWidget.closeEvent(self, event)
+		self.winclosed.emit()
 
-class SortSelTree(QtGui.QTreeView) :
+class SortSelTree(QtWidgets.QTreeView) :
 	"""This is a subclass of QtGui.QTreeView. It is almost identical but implements selection processing with sorting.
 	The correct way of doing this in QT4.2 is to use a QSortFilterProxy object, but that won't work properly in this case."""
 
 	def __init__(self, parent = None) :
-		QtGui.QTreeView.__init__(self, parent)
+		QtWidgets.QTreeView.__init__(self, parent)
 		self.header().setClickable(True)
-		self.connect(self.header(), QtCore.SIGNAL("sectionClicked(int)"), self.colclick)
+		self.header().sectionClicked[int].connect(self.colclick)
 		self.scol = -1
 		self.sdir = 1
 
@@ -2997,28 +3011,31 @@
 
 		# then do the actual sort
 
-		QtGui.QTreeView.sortByColumn(self, col, ascend)
+		QtWidgets.QTreeView.sortByColumn(self, col, ascend)
 
 		# then set a new selection list
 
 		sel = self.model().findSelected()
 		if len(sel) == 0 :return
 
-		qis = QtGui.QItemSelection()
+		qis = QtCore.QItemSelection()
 		for i in sel : qis.select(i, i)
-		self.selectionModel().select(qis, QtGui.QItemSelectionModel.ClearAndSelect|QtGui.QItemSelectionModel.Rows)
+		self.selectionModel().select(qis, QtCore.QItemSelectionModel.ClearAndSelect|QtCore.QItemSelectionModel.Rows)
 
 #		for i in sel : self.selectionModel().select(i, QtGui.QItemSelectionModel.ClearAndSelect)
 #		self.update()
 
 #---------------------------------------------------------------------------
 
-class EMBrowserWidget(QtGui.QWidget) :
+class EMBrowserWidget(QtWidgets.QWidget) :
 	"""This widget is a file browser for EMAN2. In addition to being a regular file browser, it supports:
 	- getting information about recognized data types
 	- embedding BDB: databases into the observed filesystem
 	- remote database access (EMEN2)*
 	"""
+	ok = QtCore.pyqtSignal()
+	cancel = QtCore.pyqtSignal()
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self, parent = None, withmodal = False, multiselect = False, startpath = ".", setsmode = None) :
 		"""withmodal - if specified will have ok/cancel buttons, and provide a mechanism for a return value (not truly modal)
@@ -3034,7 +3051,7 @@
 		import emscene3d
 		import emdataitem3d
 
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		self.setWindowTitle("e2display.py Browser") # Jesus
 
@@ -3046,35 +3063,35 @@
 		self.multiselect = multiselect
 
 		self.resize(780, 580)
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# Top Toolbar area
 
-		self.wtoolhbl = QtGui.QHBoxLayout()
+		self.wtoolhbl = QtWidgets.QHBoxLayout()
 		self.wtoolhbl.setContentsMargins(0, 0, 0, 0)
 
-		self.wbutback = QtGui.QPushButton(QString(QChar(0x2190)))
+		self.wbutback = QtWidgets.QPushButton(QString(QChar(0x2190)))
 		self.wbutback.setMaximumWidth(36)
 		self.wbutback.setEnabled(False)
 		self.wtoolhbl.addWidget(self.wbutback, 0)
 
-		self.wbutfwd = QtGui.QPushButton(QString(QChar(0x2192)))
+		self.wbutfwd = QtWidgets.QPushButton(QString(QChar(0x2192)))
 		self.wbutfwd.setMaximumWidth(36)
 		self.wbutfwd.setEnabled(False)
 		self.wtoolhbl.addWidget(self.wbutfwd, 0)
 
 		# Text line for showing (or editing) full path
 
-		self.lpath = QtGui.QLabel("  Path:")
+		self.lpath = QtWidgets.QLabel("  Path:")
 		self.wtoolhbl.addWidget(self.lpath)
 
-		self.wpath = QtGui.QLineEdit()
+		self.wpath = QtWidgets.QLineEdit()
 		self.wtoolhbl.addWidget(self.wpath, 5)
 
 		# self.wspacet1 = QtGui.QSpacerItem(100, 10, QtGui.QSizePolicy.MinimumExpanding)
 		# self.wtoolhbl.addSpacerItem(self.wspacet1)
 
-		self.wbutinfo = QtGui.QPushButton("Info")
+		self.wbutinfo = QtWidgets.QPushButton("Info")
 		self.wbutinfo.setCheckable(True)
 		self.wtoolhbl.addWidget(self.wbutinfo, 1)
 
@@ -3082,25 +3099,25 @@
 
 		# 2nd Top Toolbar area
 
-		self.wtoolhbl2 = QtGui.QHBoxLayout()
+		self.wtoolhbl2 = QtWidgets.QHBoxLayout()
 		self.wtoolhbl2.setContentsMargins(0, 0, 0, 0)
 
-		self.wbutup = QtGui.QPushButton(QString(QChar(0x2191)))
+		self.wbutup = QtWidgets.QPushButton(QString(QChar(0x2191)))
 		self.wbutup.setMaximumWidth(36)
 		self.wtoolhbl2.addWidget(self.wbutup, 0)
 
-		self.wbutrefresh = QtGui.QPushButton(QString(QChar(0x21ba)))
+		self.wbutrefresh = QtWidgets.QPushButton(QString(QChar(0x21ba)))
 		self.wbutrefresh.setMaximumWidth(36)
 		self.wtoolhbl2.addWidget(self.wbutrefresh, 0)
 
 		# Text line for showing (or editing) full path
 
-		self.lfilter = QtGui.QLabel("Filter:")
+		self.lfilter = QtWidgets.QLabel("Filter:")
 		self.wtoolhbl2.addWidget(self.lfilter)
 
-		self.wfilter = QtGui.QComboBox()
+		self.wfilter = QtWidgets.QComboBox()
 		self.wfilter.setEditable(True)
-		self.wfilter.setInsertPolicy(QtGui.QComboBox.InsertAtBottom)
+		self.wfilter.setInsertPolicy(QtWidgets.QComboBox.InsertAtBottom)
 		self.wfilter.addItem("")
 		self.wfilter.addItem("(.(?!_ctf))*$")
 		self.wfilter.addItem(".*\.img")
@@ -3116,7 +3133,7 @@
 		# self.wspacet1 = QtGui.QSpacerItem(100, 10, QtGui.QSizePolicy.MinimumExpanding)
 		# self.wtoolhbl.addSpacerItem(self.wspacet1)
 
-		self.selectall = QtGui.QPushButton("Sel All")
+		self.selectall = QtWidgets.QPushButton("Sel All")
 		self.wtoolhbl2.addWidget(self.selectall, 1)
 		self.selectall.setEnabled(withmodal)
 
@@ -3125,11 +3142,11 @@
 		### Central verticalregion has bookmarks and tree
 		# Bookmarks implemented with a toolbar in a frame
 
-		self.wbookmarkfr = QtGui.QFrame()
-		self.wbookmarkfr.setFrameStyle(QtGui.QFrame.StyledPanel|QtGui.QFrame.Raised)
-		self.wbmfrbl = QtGui.QVBoxLayout(self.wbookmarkfr)
+		self.wbookmarkfr = QtWidgets.QFrame()
+		self.wbookmarkfr.setFrameStyle(QtWidgets.QFrame.StyledPanel|QtWidgets.QFrame.Raised)
+		self.wbmfrbl = QtWidgets.QVBoxLayout(self.wbookmarkfr)
 
-		self.wbookmarks = QtGui.QToolBar()
+		self.wbookmarks = QtWidgets.QToolBar()
 		# self.wbookmarks.setAutoFillBackground(True)
 		# self.wbookmarks.setBackgroundRole(QtGui.QPalette.Dark)
 		self.wbookmarks.setOrientation(2)
@@ -3158,7 +3175,7 @@
 
 		# Lower region has buttons for actions
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -3171,16 +3188,16 @@
 			self.hbl2.setColumnStretch(i, 2)
 	
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
 #				self.wbutmisc[-1].setEnabled(False)
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutxx, 0, 6)
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutyy, 1, 6)
 
@@ -3190,34 +3207,34 @@
 #			self.wspace1 = QtGui.QSpacerItem(100, 10, QtGui.QSizePolicy.MinimumExpanding)
 #			self.hbl2.addSpacerItem(self.wspace1)
 
-			self.wbutcancel = QtGui.QPushButton("Cancel")
+			self.wbutcancel = QtWidgets.QPushButton("Cancel")
 			self.hbl2.addWidget(self.wbutcancel, 1, 7)
 
-			self.wbutok = QtGui.QPushButton("OK")
+			self.wbutok = QtWidgets.QPushButton("OK")
 			self.hbl2.addWidget(self.wbutok, 1, 8)
 
 			self.hbl2.setColumnStretch(6, 1)
 			self.hbl2.setColumnStretch(7, 1)
 			self.hbl2.setColumnStretch(8, 1)
 
-			QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-			QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+			self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+			self.wbutok.clicked[bool].connect(self.buttonOk)
 
 		self.gbl.addLayout(self.hbl2, 4, 1)
 
-		QtCore.QObject.connect(self.wbutback, QtCore.SIGNAL('clicked(bool)'), self.buttonBack)
-		QtCore.QObject.connect(self.wbutfwd, QtCore.SIGNAL('clicked(bool)'), self.buttonFwd)
-		QtCore.QObject.connect(self.wbutup, QtCore.SIGNAL('clicked(bool)'), self.buttonUp)
-		QtCore.QObject.connect(self.wbutrefresh, QtCore.SIGNAL('clicked(bool)'), self.buttonRefresh)
-		QtCore.QObject.connect(self.wbutinfo, QtCore.SIGNAL('clicked(bool)'), self.buttonInfo)
-		QtCore.QObject.connect(self.selectall, QtCore.SIGNAL('clicked(bool)'), self.selectAll)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('clicked(const QModelIndex)'), self.itemSel)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('activated(const QModelIndex)'), self.itemActivate)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('doubleClicked(const QModelIndex)'), self.itemDoubleClick)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('expanded(const QModelIndex)'), self.itemExpand)
-		QtCore.QObject.connect(self.wpath, QtCore.SIGNAL('returnPressed()'), self.editPath)
-		QtCore.QObject.connect(self.wbookmarks, QtCore.SIGNAL('actionTriggered(QAction*)'), self.bookmarkPress)
-		QtCore.QObject.connect(self.wfilter, QtCore.SIGNAL('currentIndexChanged(int)'), self.editFilter)
+		self.wbutback.clicked[bool].connect(self.buttonBack)
+		self.wbutfwd.clicked[bool].connect(self.buttonFwd)
+		self.wbutup.clicked[bool].connect(self.buttonUp)
+		self.wbutrefresh.clicked[bool].connect(self.buttonRefresh)
+		self.wbutinfo.clicked[bool].connect(self.buttonInfo)
+		self.selectall.clicked[bool].connect(self.selectAll)
+		self.wtree.clicked[QModelIndex].connect(self.itemSel)
+		self.wtree.activated[QModelIndex].connect(self.itemActivate)
+		self.wtree.doubleClicked[QModelIndex].connect(self.itemDoubleClick)
+		self.wtree.expanded[QModelIndex].connect(self.itemExpand)
+		self.wpath.returnPressed.connect(self.editPath)
+		self.wbookmarks.actionTriggered[QAction].connect(self.bookmarkPress)
+		self.wfilter.currentIndexChanged[int].connect(self.editFilter)
 
 		self.setsmode = setsmode	# The sets mode is used when selecting bad particles
 		self.curmodel = None	# The current data model displayed in the tree
@@ -3241,7 +3258,7 @@
 		# These items are used to do gradually filling in of file details for better interactivity
 
 		self.updtimer = QTimer()		# This causes the actual display updates, which can't be done from a python thread
-		QtCore.QObject.connect(self.updtimer, QtCore.SIGNAL('timeout()'), self.updateDetailsDisplay)
+		self.updtimer.timeout.connect(self.updateDetailsDisplay)
 		self.updthreadexit = False		# when set, this triggers the update thread to exit
 		self.updthread = threading.Thread(target = self.updateDetails)	# The actual thread
 		self.updlist = []				# List of QModelIndex items in need of updating
@@ -3260,12 +3277,12 @@
 	def busy(self) :
 		"""display a busy cursor"""
 
-		QtGui.qApp.setOverrideCursor(Qt.BusyCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.BusyCursor)
 
 	def notbusy(self) :
 		"""normal arrow cursor"""
 
-		QtGui.qApp.setOverrideCursor(Qt.ArrowCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.ArrowCursor)
 
 	def updateDetails(self) :
 		"""This is spawned as a thread to gradually fill in file details in the background"""
@@ -3445,14 +3462,14 @@
 		qism = self.wtree.selectionModel().selectedRows()
 		self.result = [i.internalPointer().path().replace(os.getcwd(), ".") for i in qism]
 		self.updtimer.stop()
-		self.emit(QtCore.SIGNAL("ok")) # this signal is important when e2ctf is being used by a program running its own eve
+		self.ok.emit()
 
 	def buttonCancel(self, tog) :
 		"""When the Cancel button is pressed, a signal is emitted, but getResult should not be called."""
 
 		self.result = []
 		self.updtimer.stop()
-		self.emit(QtCore.SIGNAL("cancel")) # this signal is important when e2ctf is being used by a program running its own eve
+		self.cancel.emit()
 		self.close()
 
 	def selectAll(self) :
@@ -3513,7 +3530,7 @@
 			if len(qism) == 1 :
 				self.infowin.set_target(qism[0].internalPointer(), self.curft)
 			else : self.infowin.set_target(None, None)
-			QtCore.QObject.connect(self.infowin, QtCore.SIGNAL('winclosed()'), self.infowinClosed)
+			self.infowin.winclosed.connect(self.infowinClosed)
 		else :
 			if self.infowin != None :
 				self.infowin.hide()
@@ -3612,7 +3629,7 @@
 			"3. *.txt *.tiff  - find all text files or tiff files\n" + \
 			"4. *             - find all files"
 
-			QtGui.QMessageBox.warning(None, "Info", hlp)
+			QtWidgets.QMessageBox.warning(None, "Info", hlp)
 		else :
 			try :
 				flt = re.compile(filt)
@@ -3684,7 +3701,7 @@
 		event.accept()
 		self.updtimer.stop()
 		# self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 # This is just for testing, of course
 
@@ -3696,8 +3713,8 @@
 if __name__ == '__main__' :
 	em_app = EMApp()
 	window = EMBrowserWidget(withmodal = True, multiselect = True)
-	QtCore.QObject.connect(window, QtCore.SIGNAL("ok"), test_result)
-	QtCore.QObject.connect(window, QtCore.SIGNAL("cancel"), test_result)
+	window.ok.connect(test_result)
+	window.cancel.connect(test_result)
 
 	window.show()
 	ret = em_app.exec_()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emdataitem3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emdataitem3d.py	2017-10-21 17:14:53.000000000 -0500
@@ -48,7 +48,7 @@
 from OpenGL import GL
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtGui, QtWidgets
 
 import numpy as np
 
@@ -64,13 +64,13 @@
 		"""
 		Get Data Widget
 		"""
-		datawidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_data_label = QtGui.QLabel("Data Label")
-		attribdict["node_name"] = QtGui.QLineEdit()
-		data_path_label = QtGui.QLabel("Data Path")
-		attribdict["data_path"] = QtGui.QLineEdit()
-		browse_button = QtGui.QPushButton("Browse")
+		datawidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_data_label = QtWidgets.QLabel("Data Label")
+		attribdict["node_name"] = QtWidgets.QLineEdit()
+		data_path_label = QtWidgets.QLabel("Data Path")
+		attribdict["data_path"] = QtWidgets.QLineEdit()
+		browse_button = QtWidgets.QPushButton("Browse")
 		grid.addWidget(node_name_data_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		grid.addWidget(data_path_label, 1, 0, 1, 2)
@@ -80,13 +80,13 @@
 		datawidget.setLayout(grid)
 
 		EMDataItem3D.attribdict = attribdict
-		QtCore.QObject.connect(browse_button, QtCore.SIGNAL('clicked()'), EMDataItem3D._on_browse)
+		browse_button.clicked.connect(EMDataItem3D._on_browse)
 
 		return datawidget
 
 	@staticmethod
 	def _on_browse():
-		filename = QtGui.QFileDialog.getOpenFileName(None, 'Get file', os.getcwd())
+		filename = QtWidgets.QFileDialog.getOpenFileName(None, 'Get file', os.getcwd())[0]
 		if filename:
 			EMDataItem3D.attribdict["data_path"].setText(filename)
 			name = os.path.basename(str(filename))
@@ -188,8 +188,8 @@
 	def addTabs(self):
 		""" Add a tab for each 'column' """
 
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		tabwidget.setLayout(gridbox)
 		self.addTab(tabwidget, "data")
 		# add data tab first, then basic
@@ -198,33 +198,33 @@
 
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
-		dataframe = QtGui.QFrame()
-		dataframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		dataframe = QtWidgets.QFrame()
+		dataframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		lfont = QtGui.QFont()
 		lfont.setBold(True)
-		datagridbox = QtGui.QGridLayout()
+		datagridbox = QtWidgets.QGridLayout()
 
-		self.data_checkbox= QtGui.QCheckBox("Display Bounding Box")
+		self.data_checkbox= QtWidgets.QCheckBox("Display Bounding Box")
 		datagridbox.addWidget(self.data_checkbox, 0, 0)
-		self.file_browse_button = QtGui.QPushButton("Set Data Source")
+		self.file_browse_button = QtWidgets.QPushButton("Set Data Source")
 		datagridbox.addWidget(self.file_browse_button, 1, 0)
 		dataframe.setLayout(datagridbox)
 		gridbox.addWidget(dataframe, 2, 0)
 
-		self.file_path_label = QtGui.QLabel()
+		self.file_path_label = QtWidgets.QLabel()
 		self.file_path_label.setAlignment(QtCore.Qt.AlignCenter)
 		self.file_path_label.setFont(lfont)
 		gridbox.addWidget(self.file_path_label, 3, 0)
 
 		self.file_browse_button.clicked.connect(self.onFileBrowse)
-		QtCore.QObject.connect(self.data_checkbox, QtCore.SIGNAL("stateChanged(int)"), self.onBBoxChange)
+		self.data_checkbox.stateChanged[int].connect(self.onBBoxChange)
 
 		# Set to default, but run only once and not in each base class
 		if type(self) == EMDataItem3DInspector: self.updateItemControls()
 
 	def onFileBrowse(self):
 		#TODO: replace this with an EMAN2 browser window once we re-write it
-		file_path = QtGui.QFileDialog.getOpenFileName(self, "Open 3D Volume Map")
+		file_path = QtWidgets.QFileDialog.getOpenFileName(self, "Open 3D Volume Map")[0]
 		if file_path:
 			self.file_path_label.setText(file_path)
 			self.item3d().setData(file_path)
@@ -247,10 +247,10 @@
 		"""
 		Get Slice Widget
 		"""
-		slicewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_slice_label = QtGui.QLabel("Slice Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMSliceItem3D.name))
+		slicewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_slice_label = QtWidgets.QLabel("Slice Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMSliceItem3D.name))
 		grid.addWidget(node_name_slice_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 2, attribdict)
@@ -495,9 +495,9 @@
 
 		self.constrained_plane_combobox.currentIndexChanged.connect(self.onConstrainedOrientationChanged)
 		self.use_3d_texture_checkbox.clicked.connect(self.on3DTextureCheckbox)
-		QtCore.QObject.connect(self.constrained_slider, QtCore.SIGNAL("valueChanged"), self.onConstraintSlider)
-		QtCore.QObject.connect(self.brightness_slider, QtCore.SIGNAL("valueChanged"), self.onBrightnessSlider)
-		QtCore.QObject.connect(self.contrast_slider, QtCore.SIGNAL("valueChanged"), self.onContrastSlider)
+		self.constrained_slider.valueChanged.connect(self.onConstraintSlider)
+		self.brightness_slider.valueChanged.connect(self.onBrightnessSlider)
+		self.contrast_slider.valueChanged.connect(self.onContrastSlider)
 
 		self.updateItemControls()
 
@@ -520,8 +520,8 @@
 
 	def addTabs(self):
 		""" Add a tab for each 'column' """
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		tabwidget.setLayout(gridbox)
 		self.addTab(tabwidget, "slices")
 		# add slices tab first then basic tab
@@ -530,25 +530,25 @@
 
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
-		sliceframe = QtGui.QFrame()
-		sliceframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		slice_grid_layout = QtGui.QGridLayout()
+		sliceframe = QtWidgets.QFrame()
+		sliceframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		slice_grid_layout = QtWidgets.QGridLayout()
 
-		self.constrained_group_box = QtGui.QGroupBox("Constrained Slices")
+		self.constrained_group_box = QtWidgets.QGroupBox("Constrained Slices")
 		self.constrained_group_box.setCheckable(True)
 		self.constrained_group_box.setChecked(False)
 
-		self.constrained_plane_combobox = QtGui.QComboBox()
+		self.constrained_plane_combobox = QtWidgets.QComboBox()
 		self.constrained_plane_combobox.addItems(["XY", "YZ", "ZX"])
 		self.constrained_slider = ValSlider(label="Trans:")
 
-		constrained_layout = QtGui.QVBoxLayout()
+		constrained_layout = QtWidgets.QVBoxLayout()
 		constrained_layout.addWidget(self.constrained_plane_combobox)
 		constrained_layout.addWidget(self.constrained_slider)
 		constrained_layout.addStretch()
 		self.constrained_group_box.setLayout(constrained_layout)
 
-		self.use_3d_texture_checkbox = QtGui.QCheckBox("Use 3D Texture")
+		self.use_3d_texture_checkbox = QtWidgets.QCheckBox("Use 3D Texture")
 		self.use_3d_texture_checkbox.setChecked(self.item3d().use_3d_texture)
 
 		self.brightness_slider = ValSlider(label="Bright:")
@@ -621,10 +621,10 @@
 		"""
 		Get Volume Widget
 		"""
-		volumewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_volume_label = QtGui.QLabel("Volume Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMVolumeItem3D.name))
+		volumewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_volume_label = QtWidgets.QLabel("Volume Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMVolumeItem3D.name))
 		grid.addWidget(node_name_volume_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 2, attribdict)
@@ -849,8 +849,8 @@
 
 		EMInspectorControlShape.__init__(self, name, item3d)
 
-		QtCore.QObject.connect(self.brightness_slider, QtCore.SIGNAL("valueChanged"), self.onBrightnessSlider)
-		QtCore.QObject.connect(self.contrast_slider, QtCore.SIGNAL("valueChanged"), self.onContrastSlider)
+		self.brightness_slider.valueChanged.connect(self.onBrightnessSlider)
+		self.contrast_slider.valueChanged.connect(self.onContrastSlider)
 
 	def updateItemControls(self):
 		""" Updates this item inspector. Function is called by the item it observes"""
@@ -877,8 +877,8 @@
 
 	def addTabs(self):
 		""" Add a tab for each 'column' """
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		tabwidget.setLayout(gridbox)
 		self.addTab(tabwidget, "volume")
 		# add volume tab then basic tab
@@ -890,18 +890,18 @@
 		self.histogram_widget = ImgHistogram(self)
 		self.histogram_widget.setObjectName("hist")
 
-		volframe = QtGui.QFrame()
-		volframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		vol_grid_layout = QtGui.QGridLayout()
-
-		probeframe = QtGui.QFrame()
-		probeframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		probelayout = QtGui.QGridLayout()
+		volframe = QtWidgets.QFrame()
+		volframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		vol_grid_layout = QtWidgets.QGridLayout()
+
+		probeframe = QtWidgets.QFrame()
+		probeframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		probelayout = QtWidgets.QGridLayout()
 		probelayout.setAlignment(QtCore.Qt.AlignTop)
-		self.range = QtGui.QLabel("Range: %1.3f, %1.3f"%(self.item3d().minden,self.item3d().maxden))
-		self.level = QtGui.QLabel("Level: %1.3f"%self.item3d().isothr)
+		self.range = QtWidgets.QLabel("Range: %1.3f, %1.3f"%(self.item3d().minden,self.item3d().maxden))
+		self.level = QtWidgets.QLabel("Level: %1.3f"%self.item3d().isothr)
 		self.level.setFixedSize(100,40)
-		self.color = QtGui.QLabel("Color:")
+		self.color = QtWidgets.QLabel("Color:")
 		self.cappingcolor = EMQTColorWidget(parent=self)
 
 		probelayout.addWidget(self.range, 0, 0, 1, 1)
@@ -947,7 +947,7 @@
 
 		self.histogram_widget.setDynamicProbe(self.probeposition, self.probecolor, self.probepresent,levelvalue) # The needs to be node AFTER the data is set
 
-		QtCore.QObject.connect(self.cappingcolor,QtCore.SIGNAL("newcolor(QColor)"),self._on_cap_color)
+		self.cappingcolor.newcolor[QColor].connect(self._on_cap_color)
 
 	def _on_cap_color(self, color):
 		rgb = color.getRgb()
@@ -977,18 +977,18 @@
 
 		EMInspectorControlShape.__init__(self, name, item3d)	# for the iso inspector we need two grid cols for extra space....
 
-		QtCore.QObject.connect(self.thr, QtCore.SIGNAL("valueChanged"), self.onThresholdSlider)
-		QtCore.QObject.connect(self.histogram_widget, QtCore.SIGNAL("thresholdChanged(float)"), self.onHistogram)
+		self.thr.valueChanged.connect(self.onThresholdSlider)
+		self.histogram_widget.thresholdChanged[float].connect(self.onHistogram)
 		self.cullbackface.toggled.connect(self.onCullFaces)
 		self.wireframe.toggled.connect(self.onWireframe)
 		self.colorbyradius.toggled.connect(self.onColorByRadius)
 		self.colorbymap.toggled.connect(self.onColorByMap)
 		self.cmapbrowse.clicked.connect(self.onFileBrowse)
 		self.sampling_spinbox.valueChanged[int].connect(self.onSampling)
-		QtCore.QObject.connect(self.innercolorscaling, QtCore.SIGNAL("valueChanged(int)"), self.reColorScale)
-		QtCore.QObject.connect(self.outercolorscaling, QtCore.SIGNAL("valueChanged(int)"), self.reColorScale)
-		QtCore.QObject.connect(self.cmapmin, QtCore.SIGNAL("valueChanged(int)"), self.reColorMapMinMax)
-		QtCore.QObject.connect(self.cmapmax, QtCore.SIGNAL("valueChanged(int)"), self.reColorMapMinMax)
+		self.innercolorscaling.valueChanged[int].connect(self.reColorScale)
+		self.outercolorscaling.valueChanged[int].connect(self.reColorScale)
+		self.cmapmin.valueChanged[int].connect(self.reColorMapMinMax)
+		self.cmapmax.valueChanged[int].connect(self.reColorMapMinMax)
 
 	def updateItemControls(self):
 		""" Updates this item inspector. Function is called by the item it observes"""
@@ -1034,8 +1034,8 @@
 
 	def addTabs(self):
 		""" Add a tab for each 'column' """
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		tabwidget.setLayout(gridbox)
 		self.addTab(tabwidget, "isosurface")
 		# add isosurface tab first, then basic tab
@@ -1048,40 +1048,40 @@
 		self.histogram_widget.setObjectName("hist")
 
 		# Perhaps we should allow the inspector control this?
-		isoframe = QtGui.QFrame()
-		isoframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		isogridbox = QtGui.QGridLayout()
+		isoframe = QtWidgets.QFrame()
+		isoframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		isogridbox = QtWidgets.QGridLayout()
 
-		self.cullbackface = QtGui.QCheckBox("Cull Back Face Polygons")
+		self.cullbackface = QtWidgets.QCheckBox("Cull Back Face Polygons")
 		self.cullbackface.setChecked(True)
-		self.wireframe = QtGui.QCheckBox("Wireframe mode")
+		self.wireframe = QtWidgets.QCheckBox("Wireframe mode")
 		self.wireframe.setChecked(False)
 		self.thr = ValSlider(self,(0.0,4.0),"Threshold:")
 		self.thr.setObjectName("thr")
 		self.thr.setValue(self.item3d().isothr)
-		self.sampling_label = QtGui.QLabel("Sample Level:")
-		self.sampling_spinbox = QtGui.QSpinBox()
+		self.sampling_label = QtWidgets.QLabel("Sample Level:")
+		self.sampling_spinbox = QtWidgets.QSpinBox()
 		self.sampling_spinbox.setValue(1)
 
-		sampling_hbox_layout = QtGui.QHBoxLayout()
+		sampling_hbox_layout = QtWidgets.QHBoxLayout()
 		sampling_hbox_layout.addWidget(self.sampling_label)
 		sampling_hbox_layout.addWidget(self.sampling_spinbox)
 
 		# Color by radius frame
-		cbrframe = QtGui.QFrame()
-		cbrframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		cbrlayout = QtGui.QGridLayout()
+		cbrframe = QtWidgets.QFrame()
+		cbrframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		cbrlayout = QtWidgets.QGridLayout()
 		cbrlayout.setAlignment(QtCore.Qt.AlignTop)
-		self.colorbyradius = QtGui.QCheckBox("Color By Radius")
+		self.colorbyradius = QtWidgets.QCheckBox("Color By Radius")
 		self.colorbyradius.setChecked(False)
 		self.innercolorscaling = EMSpinWidget(0.0, 1.0, rounding=0)
 		self.innercolorscaling.setMinimumWidth(120)
 		self.outercolorscaling = EMSpinWidget(0.0, 1.0, rounding=0)
 		self.outercolorscaling.setMinimumWidth(120)
 		cbrlayout.addWidget(self.colorbyradius, 0, 0, 1, 2)
-		cbrlabelinner = QtGui.QLabel("Inner Shell")
+		cbrlabelinner = QtWidgets.QLabel("Inner Shell")
 		cbrlabelinner.setAlignment(QtCore.Qt.AlignCenter)
-		cbrlabelouter = QtGui.QLabel("Outer Shell")
+		cbrlabelouter = QtWidgets.QLabel("Outer Shell")
 		cbrlabelouter.setAlignment(QtCore.Qt.AlignCenter)
 		cbrlayout.addWidget(cbrlabelinner, 1, 0, 1, 1)
 		cbrlayout.addWidget(cbrlabelouter, 1, 1, 1, 1)
@@ -1090,14 +1090,14 @@
 		cbrframe.setLayout(cbrlayout)
 
 		# Color by map frame
-		cbmframe = QtGui.QFrame()
-		cbmframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		cbmlayout = QtGui.QGridLayout()
+		cbmframe = QtWidgets.QFrame()
+		cbmframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		cbmlayout = QtWidgets.QGridLayout()
 		cbmlayout.setAlignment(QtCore.Qt.AlignTop)
-		self.colorbymap = QtGui.QCheckBox("Color By Map")
+		self.colorbymap = QtWidgets.QCheckBox("Color By Map")
 		self.colorbymap.setEnabled(False)
-		self.colormap = QtGui.QLineEdit("")
-		self.cmapbrowse = QtGui.QPushButton("Browse")
+		self.colormap = QtWidgets.QLineEdit("")
+		self.cmapbrowse = QtWidgets.QPushButton("Browse")
 		self.cmapmin = EMSpinWidget(0.0, 0.1, rounding=2)
 		self.cmapmax = EMSpinWidget(0.0, 0.1, rounding=2)
 		cbmlayout.addWidget(self.colorbymap, 0, 0, 1, 2)
@@ -1127,8 +1127,8 @@
 	def onFileBrowse(self):
 		""" Find a color map file """
 		self.openbrowser = EMBrowserWidget(withmodal=True,multiselect=False)
-		QtCore.QObject.connect(self.openbrowser, QtCore.SIGNAL("ok"),self._onopen_ok)
-		QtCore.QObject.connect(self.openbrowser, QtCore.SIGNAL("cancel"),self._onopen_cancel)
+		self.openbrowser.ok.connect(self._onopen_ok)
+		self.openbrowser.cancel.connect(self._onopen_cancel)
 		self.openbrowser.show()
 
 	def _onopen_ok(self):
@@ -1208,10 +1208,10 @@
 		"""
 		Get Isosurface Widget
 		"""
-		isosurfacewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_data_label = QtGui.QLabel("Isosurface Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMIsosurface.name))
+		isosurfacewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_data_label = QtWidgets.QLabel("Isosurface Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMIsosurface.name))
 		grid.addWidget(node_name_data_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 2, attribdict)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emform.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emform.py	2017-10-21 17:14:54.000000000 -0500
@@ -33,8 +33,8 @@
 
 
 from emdatastorage import ParamDef
-from PyQt4 import QtGui,QtCore
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 import os
 from emselector import EMSelectorDialog
 from emapplication import get_application
@@ -72,11 +72,11 @@
 		Add the button to the given layout
 		@param layout a QtGui.QLayout object
 		'''
-		if self.icon != None: self.button = QtGui.QPushButton(self.icon,self.desc_short)
-		else: self.button = QtGui.QPushButton(self.desc_short)
+		if self.icon != None: self.button = QtWidgets.QPushButton(self.icon,self.desc_short)
+		else: self.button = QtWidgets.QPushButton(self.desc_short)
 		self.button.setToolTip(self.desc_long)
 		layout.addWidget(self.button)
-		QtCore.QObject.connect(self.button, QtCore.SIGNAL("clicked(bool)"), self.on_button)
+		self.button.clicked[bool].connect(self.on_button)
 	
 	def on_button(self,unused=None): 
 		'''
@@ -215,8 +215,8 @@
 		selected_items = []
 		for i,param in enumerate(self):
 			for j,choice in enumerate(param.choices):
-				if i == 0 and icon != None: item = QtGui.QTableWidgetItem(icon,str(choice))
-				else: item = QtGui.QTableWidgetItem(str(choice))
+				if i == 0 and icon != None: item = QtWidgets.QTableWidgetItem(icon,str(choice))
+				else: item = QtWidgets.QTableWidgetItem(str(choice))
 				if i == 0:
 					if str(choice) not in exclusions:
 						item.setFlags(flag2|flag3)
@@ -235,7 +235,7 @@
 				
 				table_widget.setItem(j, i, item)
 				
-			item = QtGui.QTableWidgetItem(param.desc_short)
+			item = QtWidgets.QTableWidgetItem(param.desc_short)
 			item.setTextAlignment(QtCore.Qt.AlignHCenter)
 			item.setToolTip(param.desc_long)
 			table_widget.setHorizontalHeaderItem(i,item)
@@ -243,14 +243,16 @@
 		for item in selected_items: 
 			item.setSelected(True)
 
-class EMFileTable(QtGui.QTableWidget):
+class EMFileTable(QtWidgets.QTableWidget):
+	updateform = QtCore.pyqtSignal()
+
 	def __init__(self,listed_names=[],name="filenames",desc_short="File Names",desc_long="A list of file names",single_selection=False,enable_save=True):
 		'''
 		@param listed_names The names that will be listed in the first column of the table
 		@param column_data A list of EMFileTable.EMContextMenuData objects
 		'''
 		
-		QtGui.QTableWidget.__init__(self)
+		QtWidgets.QTableWidget.__init__(self)
 		self.name = name # the name of the parameter ultimately return form the form
 		self.listed_names = listed_names # listed names in first column
 		self.column_data = [] # list of EMColumnData objects
@@ -264,16 +266,16 @@
 		self.vartype = "file_table" # This is used by the EMFormWidget to insert this object correctly into a widget
 		self.name_conversions = {} # This is used to convert the displayed name to the real name of the file on the operating system
 		self.context_menu_data = {} # see self.get_context_menu_dict help
-		QtCore.QObject.connect(self, QtCore.SIGNAL("itemDoubleClicked(QTableWidgetItem*)"),self.table_item_double_clicked)
+		self.itemDoubleClicked[QTableWidgetItem].connect(self.table_item_double_clicked)
 
 		if enable_save: self.context_menu_data["Save As"] = EMFileTable.save_as
 		self.context_menu_refs = [] # to keep a reference to context menus related objects - somebody has to
 
 		self.single_selection = single_selection
 		if self.single_selection:
-			self.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
+			self.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
 		else:
-			self.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
+			self.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
 		
 		self.timer = None
 		self.timer_interval = 5000
@@ -287,7 +289,7 @@
 	def register_animated_column(self,column_title):
 		if self.timer == None:
 			self.timer = QtCore.QTimer()
-			QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.time_out)
+			self.timer.timeout.connect(self.time_out)
 			self.timer.start(self.timer_interval)
 			
 		self.animated_columns[column_title] = -1 # -1 is a flag
@@ -448,8 +450,8 @@
 
 		# first step is to insert the first column, which is the file names
 		for i,name in enumerate(self.listed_names):
-			if self.icon != None: item = QtGui.QTableWidgetItem(self.icon,self.display_name(name))
-			else: item = QtGui.QTableWidgetItem(self.display_name(name))
+			if self.icon != None: item = QtWidgets.QTableWidgetItem(self.icon,self.display_name(name))
+			else: item = QtWidgets.QTableWidgetItem(self.display_name(name))
 
 			if not file_exists(name):item.setTextColor(QtGui.QColor(0,128,0))
 				
@@ -470,7 +472,7 @@
 				
 			self.setItem(i, 0, item)
 				
-		item = QtGui.QTableWidgetItem(self.desc_short)
+		item = QtWidgets.QTableWidgetItem(self.desc_short)
 		item.setTextAlignment(QtCore.Qt.AlignHCenter)
 		item.setToolTip(self.desc_long)
 		self.setHorizontalHeaderItem(0,item)
@@ -478,19 +480,19 @@
 		# second step is to add the columns
 		col = 1
 		for cd in self.column_data:
-			item = QtGui.QTableWidgetItem(cd.name)
+			item = QtWidgets.QTableWidgetItem(cd.name)
 			item.setTextAlignment(QtCore.Qt.AlignHCenter)
 			item.setToolTip(cd.tooltip)
 			
 			self.setHorizontalHeaderItem(col,item)
 			for i in range(0,len(self.listed_names)):
-				try : item = QtGui.QTableWidgetItem(cd.function(self.listed_names[i]))
-				except : item = QtGui.QTableWidgetItem("-")
+				try : item = QtWidgets.QTableWidgetItem(cd.function(self.listed_names[i]))
+				except : item = QtWidgets.QTableWidgetItem("-")
 				item.setTextAlignment(QtCore.Qt.AlignHCenter)
 				item.setFlags(flag3)
 				if cd.lt_function: # This is how sort gets customized
-					import new 
-					item.__lt__ = new.instancemethod(cd.lt_function,item,QtGui.QTableWidgetItem)
+					import new
+					item.__lt__ = new.instancemethod(cd.lt_function,item,QtWidgets.QTableWidgetItem)
 				self.setItem(i, col, item)
 			col += 1
 
@@ -513,8 +515,8 @@
 		flag4 = Qt.ItemFlags(Qt.ItemIsEditable)
 		new_items = []
 		for i in range(0,len(list_of_names)):
-			if self.icon != None: item = QtGui.QTableWidgetItem(self.icon,self.display_name(list_of_names[i]))
-			else: item = QtGui.QTableWidgetItem(self.display_name(list_of_names[i]))
+			if self.icon != None: item = QtWidgets.QTableWidgetItem(self.icon,self.display_name(list_of_names[i]))
+			else: item = QtWidgets.QTableWidgetItem(self.display_name(list_of_names[i]))
 			item.setFlags(flag2|flag3)
 			item.setTextAlignment(QtCore.Qt.AlignHCenter)
 			self.setItem(r+i, 0, item)
@@ -523,12 +525,12 @@
 				item.setSelected(True)
 			
 			for j, cd in enumerate(self.column_data):
-				item = QtGui.QTableWidgetItem(cd.function(list_of_names[i]))
+				item = QtWidgets.QTableWidgetItem(cd.function(list_of_names[i]))
 				item.setTextAlignment(QtCore.Qt.AlignHCenter)
 				item.setFlags(flag3)
 				if cd.lt_function: # This is how sort gets customized
-					import new 
-					item.__lt__ = new.instancemethod(cd.lt_function,item,QtGui.QTableWidgetItem)
+					import new
+					item.__lt__ = new.instancemethod(cd.lt_function,item,QtWidgets.QTableWidgetItem)
 				self.setItem(r+i,j+1, item)
 			
 		self.setSortingEnabled(sorting)
@@ -546,11 +548,11 @@
 		Creates a context menu using self.context_menu_data, which is a dictionary
 		@param event a QtGui.QContextMenuEvent - it is accepted
 		'''
-		menu = QtGui.QMenu()
+		menu = QtWidgets.QMenu()
 		cmenu = self.context_menu_data
 		for k in cmenu.keys():
 			menu.addAction(k)
-		QtCore.QObject.connect(menu,QtCore.SIGNAL("triggered(QAction*)"),self.menu_action_triggered)
+		menu.triggered[QAction].connect(self.menu_action_triggered)
 		menu.exec_(event.globalPos())
 		event.accept()
 	
@@ -593,12 +595,12 @@
 		@param layout a Qt Layout (e.g. QVBoxLayout, QHBoxLayout - objects that support the 'addWidget' and 'addLayout' syntax
 		'''
 		for button_data in self.button_data:
-			button = QtGui.QPushButton(button_data.name,None)
+			button = QtWidgets.QPushButton(button_data.name,None)
 			layout.addWidget(button,0)
-			QtCore.QObject.connect(button,QtCore.SIGNAL("clicked(bool)"),button_data.function)
-			QtCore.QObject.connect(button,QtCore.SIGNAL("clicked(bool)"),self.sendupdate)
+			button.clicked[bool].connect(button_data.function)
+			button.clicked[bool].connect(self.sendupdate)
 	def sendupdate(self):
-		self.emit(QtCore.SIGNAL("updateform"))
+		self.updateform.emit()
 		
 	class EMColumnData:
 		'''
@@ -678,7 +680,7 @@
 		else:
 			from EMAN2 import EMData
 			import emscene3d
-			import emdataitem3d 
+			import emdataitem3d
 			
 			data=emdataitem3d.EMDataItem3D(filename)
 			self.display_module.insertNewNode(os.path.basename(filename), data, parentnode=self.display_module)
@@ -894,15 +896,15 @@
 		warnings.warn("EMBrowseEventHandler.__init__()", DeprecationWarning)
 		self.browser = None
 		self.browser_title = "Set this to be clear"
-		QtCore.QObject.connect(browse_button,QtCore.SIGNAL("clicked(bool)"),self.browse_pressed)
+		browse_button.clicked[bool].connect(self.browse_pressed)
 		
 	def browse_pressed(self,bool):
 		if self.browser == None:
 			self.browser = EMSelectorDialog(False, False)
 			self.browser.setWindowTitle(self.browser_title)
 			self.browser.exec_()
-			QtCore.QObject.connect(self.browser,QtCore.SIGNAL("ok"),self.on_browser_ok)
-			QtCore.QObject.connect(self.browser,QtCore.SIGNAL("cancel"),self.on_browser_cancel)
+			self.browser.ok.connect(self.on_browser_ok)
+			self.browser.cancel.connect(self.on_browser_cancel)
 		else:
 			self.browser.exec_()
 
@@ -930,13 +932,13 @@
 		
 	return entries
 	
-class EMEmanStrategyWidget(QtGui.QWidget):
+class EMEmanStrategyWidget(QtWidgets.QWidget):
 	'''
 	Something that knows how to automatically display and build parameters strings for 
 	Eman strategy types, such as aligners, cmps, etc	
 	'''
 	def __init__(self,dumped_dict={},name="strategy",desc_short="Strategy",desc_long="Choose a strategy",defaultunits=None):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.name = name
 		self.output_writers = [] # used to register output write objects, for the purpose of returning the results
 		self.name_widget_map = {} # used to map parameter names to qt widgets - used by booleans to automatically disable and enable widgets
@@ -963,12 +965,12 @@
 		
 	def build_widgets(self):
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.dynamic_layout = QtGui.QVBoxLayout()
-		groupbox = QtGui.QGroupBox(self.desc_short)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.dynamic_layout = QtWidgets.QVBoxLayout()
+		groupbox = QtWidgets.QGroupBox(self.desc_short)
 		groupbox.setToolTip(self.desc_long)
 		
-		self.main_combo = QtGui.QComboBox()
+		self.main_combo = QtWidgets.QComboBox()
 		start_idx = None
 		dumped_dict_keys = self.dumped_dict.keys()
 		dumped_dict_keys.sort()
@@ -986,7 +988,7 @@
 		
 		self.vbl.addWidget(groupbox)
 		
-		QtCore.QObject.connect(self.main_combo, QtCore.SIGNAL("currentIndexChanged(QString)"), self.selection_changed)
+		self.main_combo.currentIndexChanged['QString'].connect(self.selection_changed)
 		
 		if start_idx != None:
 			if start_idx != 0:
@@ -1018,8 +1020,8 @@
 		data = self.dumped_dict[strategy]
 		if (len(data) -1) % 3 != 0: raise RuntimeError("The format of the data is unknown") # first entry is descriptive text, then they should be in groups of threes, see dump_aligners_list, for example
 		
-		widget = QtGui.QWidget()
-		vbl = QtGui.QVBoxLayout(widget)
+		widget = QtWidgets.QWidget()
+		vbl = QtWidgets.QVBoxLayout(widget)
 		widget.setToolTip(data[0])
 		params = []
 		tmp_params = []
@@ -1044,7 +1046,7 @@
 		
 		for param in params:
 			if isinstance(param,list):
-				hbl=QtGui.QHBoxLayout()
+				hbl=QtWidgets.QHBoxLayout()
 				for iparam in param:
 					self.auto_incorporate[iparam.vartype](iparam,hbl,self)
 				vbl.addLayout(hbl)
@@ -1078,14 +1080,19 @@
 		dict[self.name] = result
 
 
-class EMFormWidget(QtGui.QWidget):
+class EMFormWidget(QtWidgets.QWidget):
 	'''
 	See the example in __main__ below
 	If ok is clicked the "emform_ok" signal is emitted along with a dictionary containing all of the form entries
 	If cancel is clicked the "emform_cancel" signal is emmitted. No extra information is sent in this case
 	'''
+	emform_close = QtCore.pyqtSignal()
+	emform_ok = QtCore.pyqtSignal()
+	emform_cancel = QtCore.pyqtSignal()
+	display_file = QtCore.pyqtSignal()
+
 	def __init__(self,params=None,disable_ok_cancel=False):
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.params = params
 		self.event_handlers = [] # used to keep event handlers in memory
 		self.resize_event_handlers = [] # used to keep resize event handlers in memory
@@ -1111,7 +1118,7 @@
 		self.auto_incorporate["EMButtonDialog"]= IncorpButtonDialog()
 		self.auto_incorporate["strategy"]= IncorpStrategy()
 		
-		vbl = QtGui.QVBoxLayout()
+		vbl = QtWidgets.QVBoxLayout()
 		self.incorporate_params(self.params,vbl)
 		if not disable_ok_cancel: self.__add_ok_cancel_buttons(vbl)
 		self.setLayout(vbl)
@@ -1129,8 +1136,8 @@
 		self.plot_icon = QtGui.QIcon(get_image_directory() + "/plot.png")
 	
 	def closeEvent(self, event):
-		self.emit(QtCore.SIGNAL("emform_close"))
-		QtGui.QWidget.closeEvent(self, event)
+		self.emform_close.emit()
+		QtWidgets.QWidget.closeEvent(self, event)
 	
 	def incorporate_params(self,params,layout):
 		for param in params:
@@ -1145,7 +1152,7 @@
 					self.incorporate_ftable_list(param,layout)
 					act = False
 				elif not isinstance(param,EMParamTable):
-					hbl=QtGui.QHBoxLayout()
+					hbl=QtWidgets.QHBoxLayout()
 					for iparam in param:
 #						if iparam.vartype == "EMButtonDialog": print "it was a button"
 						self.auto_incorporate[iparam.vartype](iparam,hbl,self)
@@ -1158,22 +1165,22 @@
 		self.enable_boolean_dependents()
 		
 	def incorporate_list(self,param,layout,target,type_of):
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
-		list_widget = QtGui.QListWidget(None)
+		list_widget = QtWidgets.QListWidget(None)
 		
-		list_widget.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
+		list_widget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
 		list_widget.setMouseTracking(True)	
 	
 		for choice in param.choices:
-			a = QtGui.QListWidgetItem(str(choice),list_widget)
+			a = QtWidgets.QListWidgetItem(str(choice),list_widget)
 			if choice in param.defaultunits:
 				list_widget.setItemSelected(a,True)
 			
 		hbl.addWidget(list_widget)
-		groupbox = QtGui.QGroupBox(param.desc_short)
+		groupbox = QtWidgets.QGroupBox(param.desc_short)
 		groupbox.setToolTip(param.desc_long)
 		groupbox.setLayout(hbl)
 		
@@ -1203,14 +1210,14 @@
 	
 	def incorporate_ftable_list(self,file_table_list,layout):
 		
-		table = QtGui.QTabWidget()
+		table = QtWidgets.QTabWidget()
 		
 		for paramtable in file_table_list:
 			
 		
-			vbl=QtGui.QVBoxLayout()
-			hbl=QtGui.QHBoxLayout()
-			hbl.setMargin(0)
+			vbl=QtWidgets.QVBoxLayout()
+			hbl=QtWidgets.QHBoxLayout()
+			hbl.setContentsMargins(0, 0, 0, 0)
 			hbl.setSpacing(2)
 			
 			paramtable.build_table()
@@ -1221,7 +1228,7 @@
 			
 #			groupbox = QtGui.QGroupBox(paramtable.desc_short)
 #			groupbox.setToolTip(paramtable.desc_long)
-			page = QtGui.QWidget()
+			page = QtWidgets.QWidget()
 			page.setLayout(vbl)
 			if hasattr(paramtable,"icon"):
 				table.addTab(page,paramtable.icon,paramtable.desc_short)
@@ -1235,16 +1242,16 @@
 	
 	
 	def incorporate_float_with_choices(self,param,layout,target):
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
-		hbl=QtGui.QHBoxLayout()
-		label = QtGui.QLabel(param.desc_short,target)
+		hbl=QtWidgets.QHBoxLayout()
+		label = QtWidgets.QLabel(param.desc_short,target)
 		label.setToolTip(param.desc_long)
 		hbl.addWidget(label)
 				
-		combo = QtGui.QComboBox(target)
+		combo = QtWidgets.QComboBox(target)
 		idx_default = 0
 		for i,float_p in enumerate(param.choices):
 			combo.addItem(str(float_p))
@@ -1260,16 +1267,16 @@
 		target.name_widget_map[param.name] = [combo,label]
 	
 	def incorporate_int_with_choices(self,param,layout,target):
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
-		hbl=QtGui.QHBoxLayout()
-		label = QtGui.QLabel(param.desc_short,target)
+		hbl=QtWidgets.QHBoxLayout()
+		label = QtWidgets.QLabel(param.desc_short,target)
 		label.setToolTip(param.desc_long)
 		hbl.addWidget(label)
 				
-		combo = QtGui.QComboBox(target)
+		combo = QtWidgets.QComboBox(target)
 		idx_default = 0
 		for i,integer in enumerate(param.choices):
 			combo.addItem(str(integer))
@@ -1284,16 +1291,16 @@
 		target.name_widget_map[param.name] = [combo,label]
 	
 	def incorporate_string_with_choices(self,param,layout,target):
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
-		hbl=QtGui.QHBoxLayout()
-		label = QtGui.QLabel(param.desc_short,target)
+		hbl=QtWidgets.QHBoxLayout()
+		label = QtWidgets.QLabel(param.desc_short,target)
 		label.setToolTip(param.desc_long)
 		hbl.addWidget(label,0)
 				
-		combo = QtGui.QComboBox(target)
+		combo = QtWidgets.QComboBox(target)
 		idx_default = 0
 		for i,string in enumerate(param.choices):
 			combo.addItem(string)
@@ -1308,26 +1315,26 @@
 		target.name_widget_map[param.name] = [combo,label]
 	
 	def __add_ok_cancel_buttons(self,layout):
-		hbl=QtGui.QHBoxLayout()
-		label = QtGui.QLabel("Form commands:")
+		hbl=QtWidgets.QHBoxLayout()
+		label = QtWidgets.QLabel("Form commands:")
 		hbl.addWidget(label)
 		
-		ok_button = QtGui.QPushButton("Ok")
+		ok_button = QtWidgets.QPushButton("Ok")
 		ok_button.setToolTip("When you click ok the values in the form are sent to the calling program")
 		hbl.addWidget(ok_button)
-		cancel_button = QtGui.QPushButton("Cancel")
+		cancel_button = QtWidgets.QPushButton("Cancel")
 		hbl.addWidget(cancel_button,0)
 		layout.addLayout(hbl)
-		QtCore.QObject.connect(ok_button,QtCore.SIGNAL("clicked(bool)"),self.ok_pressed)
-		QtCore.QObject.connect(cancel_button,QtCore.SIGNAL("clicked(bool)"),self.cancel_pressed)
+		ok_button.clicked[bool].connect(self.ok_pressed)
+		cancel_button.clicked[bool].connect(self.cancel_pressed)
 		
 	def ok_pressed(self,bool):
 		ret = {}
 		for output in self.output_writers: output.write_data(ret)
-		self.emit(QtCore.SIGNAL("emform_ok"),ret)
+		self.emform_ok.emit(ret)
 		
 	def cancel_pressed(self,bool):
-		self.emit(QtCore.SIGNAL("emform_cancel"))
+		self.emform_cancel.emit()
 
 
 	def update_texture(self):
@@ -1335,7 +1342,7 @@
 
 
 	def display_file(self,filename):
-		self.emit(QtCore.SIGNAL("display_file"),filename)
+		self.display_file.emit(filename)
 
 
 class IncorpStrategy:
@@ -1360,9 +1367,9 @@
 		num_choices = None
 		# first check that there are no inconsistencies in the number of parameter choices
 		
-		vbl=QtGui.QVBoxLayout()
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		vbl=QtWidgets.QVBoxLayout()
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
 		paramtable.build_table()
@@ -1371,7 +1378,7 @@
 		
 		paramtable.custom_addition(vbl)
 		
-		groupbox = QtGui.QGroupBox(paramtable.desc_short)
+		groupbox = QtWidgets.QGroupBox(paramtable.desc_short)
 		groupbox.setToolTip(paramtable.desc_long)
 		
 		#if hasattr(paramtable,"icon"):groupbox.setWindowIcon(paramtable.icon) #it would be nice if this worked
@@ -1395,18 +1402,18 @@
 					print("error, the number of choices is not consistent in __incorporate_paramtable")
 					return
 		
-		vbl=QtGui.QVBoxLayout()
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		vbl=QtWidgets.QVBoxLayout()
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
 		vbl.addLayout(hbl)
 		
-		table_widget = QtGui.QTableWidget(num_choices, len(paramtable), None)
+		table_widget = QtWidgets.QTableWidget(num_choices, len(paramtable), None)
 		icon = target.get_ptable_icon(paramtable)
 		
 		if not paramtable.enable_multiple_selection:
-			table_widget.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
+			table_widget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
 			
 		selected_items = [] # used to ensure default selection is correct
 		
@@ -1418,7 +1425,7 @@
 		table_widget.setToolTip(paramtable.desc_long)
 		hbl.addWidget(table_widget,1)
 		
-		groupbox = QtGui.QGroupBox(paramtable.desc_short)
+		groupbox = QtWidgets.QGroupBox(paramtable.desc_short)
 		groupbox.setToolTip(paramtable.desc_long)
 		groupbox.setLayout(vbl)
 		layout.addWidget(groupbox,10)
@@ -1461,10 +1468,10 @@
 class IncorpBool:
 	def __init__(self): pass
 	def __call__(self,param,layout,target):
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
-		check_box = QtGui.QCheckBox(str(param.desc_short),target)
+		check_box = QtWidgets.QCheckBox(str(param.desc_short),target)
 		check_box.setChecked(bool(param.defaultunits))
 		check_box.setToolTip(param.desc_long)
 		hbl.addWidget(check_box,0)
@@ -1481,13 +1488,13 @@
 		if param.choices != None and len(param.choices) > 1:
 			target.incorporate_string_with_choices(param,layout,target)
 		else:
-			hbl=QtGui.QHBoxLayout()
-			hbl.setMargin(0)
+			hbl=QtWidgets.QHBoxLayout()
+			hbl.setContentsMargins(0, 0, 0, 0)
 			hbl.setSpacing(2)
-			label = QtGui.QLabel(param.desc_short+":",target)
+			label = QtWidgets.QLabel(param.desc_short+":",target)
 			label.setToolTip(param.desc_long)
 			hbl.addWidget(label)
-			line_edit = QtGui.QLineEdit(str(param.defaultunits),target)
+			line_edit = QtWidgets.QLineEdit(str(param.defaultunits),target)
 			hbl.addWidget(line_edit,0)
 			hbl.name = param.name
 			layout.addLayout(hbl)
@@ -1500,14 +1507,14 @@
 		if param.choices != None and len(param.choices) > 1:
 			target.incorporate_float_with_choices(param,layout,target)
 		else:
-			hbl=QtGui.QHBoxLayout()
-			hbl.setMargin(0)
+			hbl=QtWidgets.QHBoxLayout()
+			hbl.setContentsMargins(0, 0, 0, 0)
 			hbl.setSpacing(2)
-			label = QtGui.QLabel(param.desc_short+":",target)
+			label = QtWidgets.QLabel(param.desc_short+":",target)
 			label.setToolTip(param.desc_long)
 			hbl.addWidget(label)
 			double_validator = QtGui.QDoubleValidator(target)
-			line_edit = QtGui.QLineEdit(str(param.defaultunits),target)
+			line_edit = QtWidgets.QLineEdit(str(param.defaultunits),target)
 			line_edit.setValidator(double_validator)
 			hbl.addWidget(line_edit,0)
 			hbl.name = param.name
@@ -1521,14 +1528,14 @@
 		if param.choices != None and len(param.choices) > 1:
 			target.incorporate_int_with_choices(param,layout,target)
 		else:
-			hbl=QtGui.QHBoxLayout()
-			hbl.setMargin(0)
+			hbl=QtWidgets.QHBoxLayout()
+			hbl.setContentsMargins(0, 0, 0, 0)
 			hbl.setSpacing(2)
-			label = QtGui.QLabel(param.desc_short+":",target)
+			label = QtWidgets.QLabel(param.desc_short+":",target)
 			label.setToolTip(param.desc_long)
 			hbl.addWidget(label)
 			pos_int_validator = QtGui.QIntValidator(target)
-			line_edit = QtGui.QLineEdit("",target)
+			line_edit = QtWidgets.QLineEdit("",target)
 			line_edit.setValidator(pos_int_validator)
 			line_edit.setText(str(param.defaultunits))
 			hbl.addWidget(line_edit,0)
@@ -1544,7 +1551,7 @@
 #			hbl.setMargin(0)
 #			hbl.setSpacing(2)
 				
-		text_edit = QtGui.QTextEdit("",target)
+		text_edit = QtWidgets.QTextEdit("",target)
 		text_edit.setReadOnly(True)
 		text_edit.setWordWrapMode(QtGui.QTextOption.WordWrap)
 		text_edit.setText(param.defaultunits)
@@ -1564,9 +1571,9 @@
 class IncorpUrl:
 	def __init__(self): pass
 	def __call__(self,param,layout,target):
-		vbl=QtGui.QVBoxLayout()
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		vbl=QtWidgets.QVBoxLayout()
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		defaults = ""
 		if param.defaultunits != None:
@@ -1575,23 +1582,23 @@
 				if i != (len(param.defaultunits)-1): 
 					defaults += '\n'
 				
-		text_edit = QtGui.QTextEdit("",target)
+		text_edit = QtWidgets.QTextEdit("",target)
 		text_edit.setWordWrapMode(QtGui.QTextOption.NoWrap)
 		text_edit.setText(defaults)
 		hbl.addWidget(text_edit,0)
 		vbl.addLayout(hbl)
 		
-		hbl2=QtGui.QHBoxLayout()
-		hbl2.setMargin(0)
+		hbl2=QtWidgets.QHBoxLayout()
+		hbl2.setContentsMargins(0, 0, 0, 0)
 		hbl2.setSpacing(2)
 		
-		browse_button = QtGui.QPushButton("Browse",target)
+		browse_button = QtWidgets.QPushButton("Browse",target)
 		hbl2.addWidget(browse_button)
-		clear_button = QtGui.QPushButton("Clear",target)
+		clear_button = QtWidgets.QPushButton("Clear",target)
 		hbl2.addWidget(clear_button,0)
 		vbl.addLayout(hbl2)
 		
-		groupbox = QtGui.QGroupBox(param.desc_short)
+		groupbox = QtWidgets.QGroupBox(param.desc_short)
 		groupbox.setToolTip(param.desc_long)
 		groupbox.setLayout(vbl)
 		
@@ -1609,8 +1616,8 @@
 		changes the entries in the second combo to values in the dictionary corresponding to the keys
 		'''
 		# hbl - tht
-		hbl=QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl=QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(2)
 		
 		keys = param.choices.keys()
@@ -1619,7 +1626,7 @@
 #		label.setToolTip(param.desc_long)
 #		hbl.addWidget(label)
 		
-		combo = QtGui.QComboBox(target)
+		combo = QtWidgets.QComboBox(target)
 		idx_default = 0
 		for i,k in enumerate(keys):
 			combo.addItem(str(k))
@@ -1632,13 +1639,13 @@
 		hbl.addWidget(combo)
 		
 		
-		combo2 = QtGui.QComboBox(target)
+		combo2 = QtWidgets.QComboBox(target)
 		for v in param.choices[combo_default]:
 			combo2.addItem(str(v))
 			
 		hbl.addWidget(combo2)
 		
-		groupbox = QtGui.QGroupBox(param.desc_short)
+		groupbox = QtWidgets.QGroupBox(param.desc_short)
 		groupbox.setToolTip(param.desc_long)
 		groupbox.setLayout(hbl)
 		
@@ -1653,15 +1660,15 @@
 	def __init__(self): pass
 	def __call__(self,param,layout,target):
 	
-		hbl = QtGui.QHBoxLayout()
+		hbl = QtWidgets.QHBoxLayout()
 		buttons = []
 		for choice in param.choices:
-			button = QtGui.QRadioButton(str(choice))
+			button = QtWidgets.QRadioButton(str(choice))
 			if choice == param.defaultunits: button.setChecked(True)
 			hbl.addWidget( button)
 			buttons.append(button)
 		
-		groupbox = QtGui.QGroupBox(param.desc_short)
+		groupbox = QtWidgets.QGroupBox(param.desc_short)
 		groupbox.setToolTip(param.desc_long)
 		groupbox.setLayout(hbl)
 		layout.addWidget(groupbox,0)
@@ -1855,7 +1862,7 @@
 		self.table_widget = table_widget
 		table_widget.contextMenuEvent = self.contextMenuEvent
 				
-		QtCore.QObject.connect(table_widget, QtCore.SIGNAL("itemDoubleClicked(QTableWidgetItem*)"),self.table_item_double_clicked)
+		table_widget.itemDoubleClicked[QTableWidgetItem].connect(self.table_item_double_clicked)
 		
 	def table_item_double_clicked(self,item):
 		if hasattr(self.table_widget,"convert_text"):
@@ -1864,10 +1871,10 @@
 	
 	def contextMenuEvent(self,event):
 		if hasattr(self.table_widget,"context_menu"):
-			menu = QtGui.QMenu()
+			menu = QtWidgets.QMenu()
 			for k in self.table_widget.context_menu.keys():
 				menu.addAction(k)
-			QtCore.QObject.connect(menu,QtCore.SIGNAL("triggered(QAction*)"),self.menu_action_triggered)
+			menu.triggered[QAction].connect(self.menu_action_triggered)
 			menu.exec_(event.globalPos())
 	
 	def menu_action_triggered(self,action):
@@ -1908,7 +1915,7 @@
 		EMBrowseEventHandler.__init__(self,browse_button)
 		self.browser_title = title
 		
-		QtCore.QObject.connect(clear_button,QtCore.SIGNAL("clicked(bool)"),self.clear_pressed)
+		clear_button.clicked[bool].connect(self.clear_pressed)
 		
 	def on_browser_ok(self,stringlist):
 		new_string = str(self.text_edit.toPlainText())
@@ -1936,7 +1943,7 @@
 		self.combo1 = combo1
 		self.combo2 = combo2
 		
-		QtCore.QObject.connect(self.combo1, QtCore.SIGNAL("currentIndexChanged(int)"),self.combo1_index_changed)
+		self.combo1.currentIndexChanged[int].connect(self.combo1_index_changed)
 	
 	def combo1_index_changed(self,i):
 		
@@ -1962,7 +1969,7 @@
 		self.checkbox = checkbox
 		self.dependents = dependents # a list of depent names (ParamDef.name)
 		self.invert_logic = invert_logic
-		QtCore.QObject.connect(self.checkbox, QtCore.SIGNAL("stateChanged(int)"),self.checkbox_state_changed)
+		self.checkbox.stateChanged[int].connect(self.checkbox_state_changed)
 		
 	def checkbox_state_changed(self,integer=0):
 		name_map = self.target().name_widget_map
@@ -1991,12 +1998,12 @@
 #	def __del__(self): print "del table form widget"
 		
 	def incorporate_params(self,params,layout):
-		tabwidget = QtGui.QTabWidget(self)
+		tabwidget = QtWidgets.QTabWidget(self)
 		
 		for title,paramlist in params:
 			
-			widget = QtGui.QWidget(None)
-			vbl =  QtGui.QVBoxLayout(widget)
+			widget = QtWidgets.QWidget(None)
+			vbl =  QtWidgets.QVBoxLayout(widget)
 			#print paramlist
 			EMFormWidget.incorporate_params(self,paramlist,vbl)
 #			for param in paramlist:
@@ -2120,13 +2127,13 @@
 	em_app = EMApp()
 	window = EMFormWidget(params=get_example_form_params())
 	window.setWindowTitle("A test form")
-	QtCore.QObject.connect(window,QtCore.SIGNAL("emform_ok"),on_ok)
-	QtCore.QObject.connect(window,QtCore.SIGNAL("emform_cancel"),on_cancel)
+	window.emform_ok.connect(on_ok)
+	window.emform_cancel.connect(on_cancel)
 	
 	window2= EMTableFormWidget(params=get_example_table_form_params())
 	window2.setWindowTitle("A test form")
-	QtCore.QObject.connect(window2,QtCore.SIGNAL("emform_ok"),on_ok)
-	QtCore.QObject.connect(window2,QtCore.SIGNAL("emform_cancel"),on_cancel)
+	window2.emform_ok.connect(on_ok)
+	window2.emform_cancel.connect(on_cancel)
 	
 	em_app.show()
 	em_app.execute()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emglobjects.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emglobjects.py	2017-10-21 17:14:54.000000000 -0500
@@ -35,8 +35,8 @@
 from OpenGL import GL, GLU, GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import EMGLWidget, get_application
 from libpyGLUtils2 import GLUtil
 from math import *
@@ -1161,6 +1161,10 @@
 	Then call 'position' in your main OpenGL draw function before drawing anything.
 	
 	"""
+	scale_delta = QtCore.pyqtSignal()
+	apply_rotation = QtCore.pyqtSignal()
+	apply_translation = QtCore.pyqtSignal()
+
 	def __init__(self,parent):
 		self.emit_events = False
 		# The magnification factor influences how the scale (zoom) is altered when a zoom event is received.
@@ -1263,7 +1267,7 @@
 		
 	def scale_event(self,delta):
 		self.scale_delta(delta)
-		if self.emit_events:self.parent().emit(QtCore.SIGNAL("scale_delta"),delta)
+		if self.emit_events:self.parent().scale_delta.emit(delta)
 		
 	def scale_delta(self,delta):
 		if delta > 0:
@@ -1348,7 +1352,7 @@
 			quaternion["type"] = "spin"
 			t3d.set_params(quaternion)
 			if self.emit_events: 
-				self.parent().emit(QtCore.SIGNAL("apply_rotation"),t3d)
+				self.parent().apply_rotation.emit(t3d)
 			
 			self.t3d_stack[-1] = t3d*self.t3d_stack[-1]
 		else :
@@ -1446,7 +1450,7 @@
 				return False
 			
 	def wheelEvent(self, event):
-		self.scale_event(event.delta())
+		self.scale_event(event.angleDelta().y())
 		return True
 	
 	def motion_translate_z_only(self,prev_x,prev_y,event):
@@ -1463,7 +1467,7 @@
 			
 		if self.emit_events: 
 			#print "emitting applyt translation"
-			self.parent().emit(QtCore.SIGNAL("apply_translation"),v)
+			self.parent().apply_translation.emit(v)
 	
 	def motion_translateLA(self,prev_x,prev_y,event):
 		if (self.basicmapping == False):
@@ -1508,7 +1512,7 @@
 			
 		if self.emit_events: 
 			#print "emitting applyt translation"
-			self.parent().emit(QtCore.SIGNAL("apply_translation"),v)
+			self.parent().apply_translation.emit(v)
 	
 	def explicit_translate(self,x,y,z):
 		
@@ -1516,7 +1520,7 @@
 		self.cam_y += y
 		self.cam_z += z
 		
-		if self.emit_events: self.parent().emit(QtCore.SIGNAL("apply_translation"),(x,y,z))
+		if self.emit_events: self.parent().apply_translation.emit((x,y,z))
 			
 	def apply_translation(self,v):
 		self.cam_x += v[0]
@@ -1812,9 +1816,9 @@
 
 
 def get_RGB_tab(parent, name=""):
-	rgbtab = QtGui.QWidget(parent)
-	rgbtab.vbl = QtGui.QVBoxLayout(rgbtab)
-	rgbtab.vbl.setMargin(0)
+	rgbtab = QtWidgets.QWidget(parent)
+	rgbtab.vbl = QtWidgets.QVBoxLayout(rgbtab)
+	rgbtab.vbl.setContentsMargins(0, 0, 0, 0)
 	rgbtab.vbl.setSpacing(6)
 	rgbtab.vbl.setObjectName(name)
 	
@@ -2018,6 +2022,7 @@
 	return colors
 
 class EM3DModel(QtCore.QObject):
+	inspector_shown = QtCore.pyqtSignal()
 	FTGL = "ftgl"
 	GLUT = "glut"
 	def __init__(self, gl_widget):
@@ -2212,7 +2217,7 @@
 	def show(self): self.gl_widget().show()
 	def show_inspector(self,force=0): #Copied from EMGLWidget
 		if self.disable_inspector: return
-		self.emit(QtCore.SIGNAL("inspector_shown")) # debug only
+		self.inspector_shown.emit()
 		app = get_application()
 		if app == None:
 			print("can't show an inspector with having an associated application")
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emhist.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emhist.py	2017-10-21 17:14:54.000000000 -0500
@@ -52,10 +52,10 @@
     'ccccccccccccccc'
 ]
 
-import PyQt4
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtOpenGL import QGLWidget
-from PyQt4.QtCore import Qt
+import PyQt5
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWebKitWidgets, QtWidgets
+from PyQt5.QtOpenGL import QGLWidget
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU
 from OpenGL.GL import *
 import OpenGL.GL as gl
@@ -179,12 +179,12 @@
 		if event.key() == Qt.Key_C:
 			self.show_inspector(1)
 		elif event.key() == Qt.Key_F1:
-			try: from PyQt4 import QtWebKit
+			try: from PyQt5 import QtWebKit
 			except: return
 			try:
 				try: test = self.browser
 				except:
-					self.browser = QtWebKit.QWebView()
+					self.browser = QtWebKitWidgets.QWebView()
 					self.browser.load(QtCore.QUrl("http://blake.bcm.edu/emanwiki/e2display"))
 					self.browser.resize(800,800)
 				if not self.browser.isVisible(): self.browser.show()
@@ -827,24 +827,24 @@
 		pass
 
 
-class EMHistogramInspector(QtGui.QWidget):
+class EMHistogramInspector(QtWidgets.QWidget):
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"plot.png"))
 		self.target=weakref.ref(target)
 
-		vbl0=QtGui.QVBoxLayout(self)
+		vbl0=QtWidgets.QVBoxLayout(self)
 
-		hbl = QtGui.QHBoxLayout()
-		hbl.setMargin(2)
+		hbl = QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(2, 2, 2, 2)
 		hbl.setSpacing(6)
 		hbl.setObjectName("hbl")
 
-		gbx = QtGui.QGroupBox("Data sets")
+		gbx = QtWidgets.QGroupBox("Data sets")
 
-		vbl3 = QtGui.QVBoxLayout()
-		vbl3.setMargin(4)
+		vbl3 = QtWidgets.QVBoxLayout()
+		vbl3.setContentsMargins(4, 4, 4, 4)
 		vbl3.setSpacing(6)
 		vbl3.setObjectName("vbl3")
 		gbx.setLayout(vbl3)
@@ -854,21 +854,21 @@
 		self.setlist=DragListWidget(self)
 		self.setlist.setDataSource(self)
 		self.setlist.setSelectionMode(3)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 		vbl3.addWidget(self.setlist)
 
 		# none and all buttons for turning plot display on and off
-		hbl6 = QtGui.QHBoxLayout()
+		hbl6 = QtWidgets.QHBoxLayout()
 		hbl.setObjectName("hbl6")
 		vbl3.addLayout(hbl6)
 
-		self.nonebut=QtGui.QPushButton(self)
+		self.nonebut=QtWidgets.QPushButton(self)
 		self.nonebut.setText("None")
 		hbl6.addWidget(self.nonebut)
 
-		self.allbut=QtGui.QPushButton(self)
+		self.allbut=QtWidgets.QPushButton(self)
 		self.allbut.setText("All")
 		hbl6.addWidget(self.allbut)
 
@@ -878,7 +878,7 @@
 		vbl3.addWidget(self.showslide)
 
 		# number and step for the slider
-		hbl7 = QtGui.QHBoxLayout()
+		hbl7 = QtWidgets.QHBoxLayout()
 		hbl.setObjectName("hbl7")
 		vbl3.addLayout(hbl7)
 
@@ -888,57 +888,57 @@
 		self.stepbox=ValBox(label="stp:",value=1)
 		hbl7.addWidget(self.stepbox)
 
-		vbl = QtGui.QVBoxLayout()
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout()
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.setObjectName("vbl")
 		hbl.addLayout(vbl)
 
-		hbl0=QtGui.QHBoxLayout()
-		hbl0.setMargin(0)
+		hbl0=QtWidgets.QHBoxLayout()
+		hbl0.setContentsMargins(0, 0, 0, 0)
 		hbl0.setSpacing(6)
 		vbl.addLayout(hbl0)
 
-		self.saveb=QtGui.QPushButton(self)
+		self.saveb=QtWidgets.QPushButton(self)
 		self.saveb.setText("Save")
 		hbl0.addWidget(self.saveb)
 
-		self.concatb=QtGui.QPushButton(self)
+		self.concatb=QtWidgets.QPushButton(self)
 		self.concatb.setText("Concat")
 		hbl0.addWidget(self.concatb)
 
-		self.pdfb=QtGui.QPushButton(self)
+		self.pdfb=QtWidgets.QPushButton(self)
 		self.pdfb.setText("PDF")
 		hbl0.addWidget(self.pdfb)
 
-		hbl01=QtGui.QHBoxLayout()
-		hbl01.setMargin(0)
+		hbl01=QtWidgets.QHBoxLayout()
+		hbl01.setContentsMargins(0, 0, 0, 0)
 		hbl01.setSpacing(6)
 		vbl.addLayout(hbl01)
 
-		self.histtype=QtGui.QComboBox(self)
+		self.histtype=QtWidgets.QComboBox(self)
 		self.histtype.addItem("bar")
 		#self.histtype.addItem("barstacked")
 		#self.histtype.addItem("step")
 		#self.histtype.addItem("stepfilled")
 		hbl01.addWidget(self.histtype)
 
-		self.orient=QtGui.QComboBox(self)
+		self.orient=QtWidgets.QComboBox(self)
 		self.orient.addItem("vertical")
 		#self.orient.addItem("horizontal")
 		hbl01.addWidget(self.orient)
 
-		self.align=QtGui.QComboBox(self)
+		self.align=QtWidgets.QComboBox(self)
 		self.align.addItem("center")
 		self.align.addItem("edge")
 		#self.align.addItem("right")
 		hbl01.addWidget(self.align)
 
-		hbl1 = QtGui.QHBoxLayout()
-		hbl1.setMargin(0)
+		hbl1 = QtWidgets.QHBoxLayout()
+		hbl1.setContentsMargins(0, 0, 0, 0)
 		hbl1.setSpacing(6)
 
-		self.color=QtGui.QComboBox(self)
+		self.color=QtWidgets.QComboBox(self)
 		self.color.addItem("black")
 		self.color.addItem("blue")
 		self.color.addItem("red")
@@ -951,8 +951,8 @@
 
 		vbl.addLayout(hbl1)
 
-		hbl000 = QtGui.QHBoxLayout()
-		hbl000.setMargin(0)
+		hbl000 = QtWidgets.QHBoxLayout()
+		hbl000.setContentsMargins(0, 0, 0, 0)
 		hbl000.setSpacing(6)
 
 		self.alpha=ValSlider(self,(0,1),"Alpha:",0,25)
@@ -960,8 +960,8 @@
 		hbl000.addWidget(self.alpha)
 		vbl.addLayout(hbl000)
 
-		hbl001 = QtGui.QHBoxLayout()
-		hbl001.setMargin(0)
+		hbl001 = QtWidgets.QHBoxLayout()
+		hbl001.setContentsMargins(0, 0, 0, 0)
 		hbl001.setSpacing(6)
 
 		self.rwidth=ValSlider(self,(0,1),"Width:",0,25)
@@ -970,82 +970,82 @@
 
 		vbl.addLayout(hbl001)
 
-		hbl2 = QtGui.QHBoxLayout()
-		hbl2.setMargin(0)
+		hbl2 = QtWidgets.QHBoxLayout()
+		hbl2.setContentsMargins(0, 0, 0, 0)
 		hbl2.setSpacing(6)
 
 		vbl.addLayout(hbl2)
 
-		hbl2 = QtGui.QHBoxLayout()
-		hbl2.setMargin(0)
+		hbl2 = QtWidgets.QHBoxLayout()
+		hbl2.setContentsMargins(0, 0, 0, 0)
 		hbl2.setSpacing(6)
 		vbl.addLayout(hbl2)
 
 		# per plot column selectors
-		gl=QtGui.QGridLayout()
-		gl.addWidget(QtGui.QLabel("Column:",self),0,0,Qt.AlignRight)
-		self.slidecol=QtGui.QSpinBox(self)
+		gl=QtWidgets.QGridLayout()
+		gl.addWidget(QtWidgets.QLabel("Column:",self),0,0,Qt.AlignRight)
+		self.slidecol=QtWidgets.QSpinBox(self)
 		self.slidecol.setRange(0,1)
 		self.slidecol.setValue(1)
 		gl.addWidget(self.slidecol,0,1,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("N Bins:",self),0,2,Qt.AlignRight)
-		self.slidenbs=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("N Bins:",self),0,2,Qt.AlignRight)
+		self.slidenbs=QtWidgets.QSpinBox(self)
 		self.slidenbs.setRange(1,10000)
 		self.slidenbs.setValue(10)
 		gl.addWidget(self.slidenbs,0,3,Qt.AlignLeft)
 
 		vbl.addLayout(gl)
 
-		hbl02=QtGui.QHBoxLayout()
-		hbl02.setMargin(0)
+		hbl02=QtWidgets.QHBoxLayout()
+		hbl02.setContentsMargins(0, 0, 0, 0)
 		hbl02.setSpacing(6)
 		vbl.addLayout(hbl02)
 
-		self.normed=QtGui.QCheckBox(self)
+		self.normed=QtWidgets.QCheckBox(self)
 		self.normed.setText("Norm")
 		hbl02.addWidget(self.normed)
 
-		self.cumulative=QtGui.QCheckBox(self)
+		self.cumulative=QtWidgets.QCheckBox(self)
 		self.cumulative.setText("Cumulative")
 		hbl02.addWidget(self.cumulative)
 
-		hbl03=QtGui.QHBoxLayout()
-		hbl03.setMargin(0)
+		hbl03=QtWidgets.QHBoxLayout()
+		hbl03.setContentsMargins(0, 0, 0, 0)
 		hbl03.setSpacing(6)
 		vbl.addLayout(hbl03)
 
-		self.logtogy=QtGui.QCheckBox(self)
+		self.logtogy=QtWidgets.QCheckBox(self)
 		self.logtogy.setText("Log Y")
 		hbl03.addWidget(self.logtogy)
 
-		self.stacked=QtGui.QCheckBox(self)
+		self.stacked=QtWidgets.QCheckBox(self)
 		self.stacked.setText("Stacked")
 		hbl03.addWidget(self.stacked)
 
-		self.wrescale=QtGui.QPushButton(self)
+		self.wrescale=QtWidgets.QPushButton(self)
 		self.wrescale.setText("Rescale")
 		vbl.addWidget(self.wrescale)
 
 		vbl0.addLayout(hbl)
 
-		hbl2a=QtGui.QHBoxLayout()
+		hbl2a=QtWidgets.QHBoxLayout()
 
-		self.wl1=QtGui.QLabel("Min")
+		self.wl1=QtWidgets.QLabel("Min")
 		self.wl1.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl1)
-		self.wl2=QtGui.QLabel("Max")
+		self.wl2=QtWidgets.QLabel("Max")
 		self.wl2.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl2)
-		self.wl3=QtGui.QLabel("Min")
+		self.wl3=QtWidgets.QLabel("Min")
 		self.wl3.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl3)
-		self.wl4=QtGui.QLabel("Max")
+		self.wl4=QtWidgets.QLabel("Max")
 		self.wl4.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl4)
 		vbl0.addLayout(hbl2a)
 
-		hbl2=QtGui.QHBoxLayout()
+		hbl2=QtWidgets.QHBoxLayout()
 
 		self.wxmin=ValBox(label="X:")
 		hbl2.addWidget(self.wxmin)
@@ -1074,33 +1074,33 @@
 		self.quiet=0
 		self.busy=0
 
-		QtCore.QObject.connect(self.showslide, QtCore.SIGNAL("valueChanged"), self.selSlide)
-		QtCore.QObject.connect(self.allbut, QtCore.SIGNAL("clicked()"), self.selAll)
-		QtCore.QObject.connect(self.nonebut, QtCore.SIGNAL("clicked()"), self.selNone)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.list_item_changed)
-		QtCore.QObject.connect(self.saveb,QtCore.SIGNAL("clicked()"),self.savePlot)
-		QtCore.QObject.connect(self.pdfb,QtCore.SIGNAL("clicked()"),self.savePdf)
-		QtCore.QObject.connect(self.concatb,QtCore.SIGNAL("clicked()"),self.saveConcatPlot)
-		QtCore.QObject.connect(self.normed,QtCore.SIGNAL("stateChanged(int)"),self.updPlotRepr)
-		QtCore.QObject.connect(self.logtogy,QtCore.SIGNAL("stateChanged(int)"),self.updPlotRepr)
-		QtCore.QObject.connect(self.cumulative,QtCore.SIGNAL("stateChanged(int)"),self.updPlotRepr)
-		QtCore.QObject.connect(self.stacked,QtCore.SIGNAL("stateChanged(int)"),self.updPlotRepr)
-		QtCore.QObject.connect(self.slidecol, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slidenbs, QtCore.SIGNAL("valueChanged(int)"), self.newNBins)
-		QtCore.QObject.connect(self.rwidth,QtCore.SIGNAL("valueChanged"),self.updPlot)
-		QtCore.QObject.connect(self.alpha,QtCore.SIGNAL("valueChanged"),self.updPlot)
-		QtCore.QObject.connect(self.color,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.histtype,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotRepr)
-		QtCore.QObject.connect(self.orient,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotRepr)
-		QtCore.QObject.connect(self.align,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotRepr)
+		self.showslide.valueChanged.connect(self.selSlide)
+		self.allbut.clicked.connect(self.selAll)
+		self.nonebut.clicked.connect(self.selNone)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.itemChanged[QListWidgetItem].connect(self.list_item_changed)
+		self.saveb.clicked.connect(self.savePlot)
+		self.pdfb.clicked.connect(self.savePdf)
+		self.concatb.clicked.connect(self.saveConcatPlot)
+		self.normed.stateChanged[int].connect(self.updPlotRepr)
+		self.logtogy.stateChanged[int].connect(self.updPlotRepr)
+		self.cumulative.stateChanged[int].connect(self.updPlotRepr)
+		self.stacked.stateChanged[int].connect(self.updPlotRepr)
+		self.slidecol.valueChanged[int].connect(self.newCols)
+		self.slidenbs.valueChanged[int].connect(self.newNBins)
+		self.rwidth.valueChanged.connect(self.updPlot)
+		self.alpha.valueChanged.connect(self.updPlot)
+		self.color.currentIndexChanged['QString'].connect(self.updPlot)
+		self.histtype.currentIndexChanged['QString'].connect(self.updPlotRepr)
+		self.orient.currentIndexChanged['QString'].connect(self.updPlotRepr)
+		self.align.currentIndexChanged['QString'].connect(self.updPlotRepr)
 		#QtCore.QObject.connect(self.xlabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
 		#QtCore.QObject.connect(self.ylabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.wxmin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wxmax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wymin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wymax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wrescale,QtCore.SIGNAL("clicked()"),self.autoScale)
+		self.wxmin.valueChanged.connect(self.newLimits)
+		self.wxmax.valueChanged.connect(self.newLimits)
+		self.wymin.valueChanged.connect(self.newLimits)
+		self.wymax.valueChanged.connect(self.newLimits)
+		self.wrescale.clicked.connect(self.autoScale)
 
 		self.newSet(0)
 		self.datachange()
@@ -1308,7 +1308,7 @@
 		keys.sort()
 		parms = self.target().pparm # get the colors from this
 		for i,j in enumerate(keys) :
-			a = QtGui.QListWidgetItem(j)
+			a = QtWidgets.QListWidgetItem(j)
 			a.setFlags(flags)
 			try: a.setTextColor(qt_color_map[colortypes[parms[j][0]]])
 			except:
@@ -1335,7 +1335,7 @@
 	def closeEvent(self, event):
 		pass
 
-class DragListWidget(QtGui.QListWidget):
+class DragListWidget(QtWidgets.QListWidget):
 	"This is a minor modification of the QListWidget to support drag-drop of data sets"
 	def setDataSource(self,trg):
 		"""We keep a weak reference to our data source so we can pull the data only when dragging actually starts"""
@@ -1346,7 +1346,7 @@
 			name=str(self.currentItem().text())		# currently hilighted item
 			nbins=len(self.datasource().target().hist_edges)
 			self.datasource().target().set_data(None,key=name,alpha=0.8,width=0.8,nbins=nbins)
-		else: QtGui.QListWidget.keyPressEvent(self,event)
+		else: QtWidgets.QListWidget.keyPressEvent(self,event)
 
 	def dragEnterEvent(self,e):
 		if e.mimeData().hasText() : e.acceptProposedAction()
@@ -1385,13 +1385,13 @@
 
 	def setMovement(self,x):
 		"""The ListView and ListWidget unfortunately make use of drag-drop for internal rearrangement, but we need to use it for widget->widget copy. This prevents the parent from disabling drag/drop."""
-		QtGui.QListWidget.setMovement(self,x)
+		QtWidgets.QListWidget.setMovement(self,x)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 
 	def setViewMode(self,x):
 		"""The ListView and ListWidget unfortunately make use of drag-drop for internal rearrangement, but we need to use it for widget->widget copy. This prevents the parent from disabling drag/drop."""
-		QtGui.QListWidget.setViewMode(self,x)
+		QtWidgets.QListWidget.setViewMode(self,x)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage.py	2017-10-21 17:14:54.000000000 -0500
@@ -32,8 +32,8 @@
 #
 #
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from EMAN2 import Util,EMUtil,file_exists,IMAGE_UNKNOWN,gimme_image_dimensions3D,EMData
 import os
@@ -72,15 +72,15 @@
 	Deprecated
 	But being replaced by emapplication.get_application (in progress, April 15th 2009)
 	'''
-	app=QtGui.QApplication.instance()
-	if not app : app = QtGui.QApplication([])
+	app=QtWidgets.QApplication.instance()
+	if not app : app = QtWidgets.QApplication([])
 	
 	try: 
 		if app.updtimer : pass
 	except:
 		tmr=QtCore.QTimer()
 		tmr.setInterval(250)
-		tmr.connect(tmr,QtCore.SIGNAL("timeout()"), image_update)
+		tmr.timeout.connect(image_update)
 		tmr.start()
 	
 		app.updtimer=tmr
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage2d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage2d.py	2017-10-21 17:14:55.000000000 -0500
@@ -32,9 +32,9 @@
 #
 #
 
-import PyQt4
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+import PyQt5
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from valslider import ValSlider,ValBox,StringBox
@@ -61,6 +61,12 @@
 
 import platform
 
+try:
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+
 MAG_INC = 1.1
 
 from emglobjects import EMOpenGLFlagsAndTools
@@ -68,6 +74,15 @@
 class EMImage2DWidget(EMGLWidget):
 	"""
 	"""
+	origin_update = QtCore.pyqtSignal()
+	set_scale = QtCore.pyqtSignal()
+	mousedown = QtCore.pyqtSignal()
+	mousedrag = QtCore.pyqtSignal()
+	mousemove = QtCore.pyqtSignal()
+	mouseup = QtCore.pyqtSignal()
+	mousewheel = QtCore.pyqtSignal()
+	increment_list_data = QtCore.pyqtSignal()
+	keypress = QtCore.pyqtSignal()
 
 	allim=WeakKeyDictionary()
 
@@ -469,7 +484,7 @@
 			if needresize:
 				x=self.data["nx"]
 				y=self.data["ny"]
-				xys=QtGui.QApplication.desktop().availableGeometry()
+				xys=QtWidgets.QApplication.desktop().availableGeometry()
 				mx=xys.width()*2/3
 				my=xys.height()*2/3
 
@@ -649,7 +664,7 @@
 		"""Set the display origin within the image"""
 		if self.origin==(x,y) : return
 		self.origin=(x,y)
-		if not quiet : self.emit(QtCore.SIGNAL("origin_update"),(x,y))
+		if not quiet : self.origin_update.emit((x,y))
 		self.updateGL()
 
 	def get_origin(self) : return self.origin
@@ -685,7 +700,7 @@
 		try:
 			self.origin=(newscale/self.scale*(self.width()/2.0+self.origin[0])-self.width()/2.0,newscale/self.scale*(self.height()/2.0+self.origin[1])-self.height()/2.0)
 			self.scale=newscale
-			if not quiet : self.emit(QtCore.SIGNAL("set_scale"),newscale)
+			if not quiet : self.set_scale.emit(newscale)
 			self.updateGL()
 		except: pass
 
@@ -1615,7 +1630,7 @@
 		else:
 			if self.mouse_mode_dict[self.mouse_mode] == "emit":
 				lc=self.scr_to_img(event.x(),event.y())
-				self.emit(QtCore.SIGNAL("mousedown"), event,lc)
+				self.mousedown.emit(event, lc)
 			elif self.mouse_mode_dict[self.mouse_mode] == "probe":
 				if event.buttons()&Qt.LeftButton:
 					lc=self.scr_to_img(event.x(),event.y())
@@ -1652,9 +1667,9 @@
 			if self.mouse_mode_dict[self.mouse_mode] == "emit":
 				lc=self.scr_to_img(event.x(),event.y())
 				if event.buttons()&Qt.LeftButton:
-					self.emit(QtCore.SIGNAL("mousedrag"), event,lc)
+					self.mousedrag.emit(event, lc)
 				else:
-					self.emit(QtCore.SIGNAL("mousemove"), event,lc)
+					self.mousemove.emit(event, lc)
 			elif self.mouse_mode_dict[self.mouse_mode] == "probe":
 				if event.buttons()&Qt.LeftButton:
 					lc=self.scr_to_img(event.x(),event.y())
@@ -1717,7 +1732,7 @@
 		else:
 			if self.mouse_mode_dict[self.mouse_mode] == "emit":
 				lc=self.scr_to_img(event.x(),event.y())
-				self.emit(QtCore.SIGNAL("mouseup"), event,lc)
+				self.mouseup.emit(event, lc)
 			elif self.mouse_mode_dict[self.mouse_mode] == "measure":
 				if event.buttons()&Qt.LeftButton:
 					self.add_shape("MEAS",EMShape(("line",.5,.1,.5,current_shapes["MEAS"].shape[4],current_shapes["MEAS"].shape[5],lc[0],lc[1],2)))
@@ -1731,17 +1746,17 @@
 		if not self.wheel_navigate:
 			if event.orientation() & Qt.Vertical:
 				if self.mouse_mode==0 and event.modifiers()&Qt.ShiftModifier:
-					self.emit(QtCore.SIGNAL("mousewheel"), event)
+					self.mousewheel.emit(event)
 					return
-				if event.delta() > 0:
+				if event.angleDelta().y() > 0:
 					self.set_scale( self.scale * self.mag )
-				elif event.delta() < 0:
+				elif event.angleDelta().y() < 0:
 					self.set_scale(self.scale * self.invmag )
 				# The self.scale variable is updated now, so just update with that
 				if self.inspector: self.inspector.set_scale(self.scale)
 		else:
 			move_fac = 1.0/20.0
-			delta = event.delta()/120.0
+			delta = event.angleDelta().y()/120.0
 
 #			print self.origin, self.data.get_xsize(),self.data.get_ysize(),self.scale,self.width(),self.height()
 
@@ -1790,7 +1805,7 @@
 				self.updateGL()
 #			else:
 #				self.__key_mvt_animation(0,self.height()*.1)
-			self.emit(QtCore.SIGNAL("increment_list_data"),1)
+			self.increment_list_data.emit(1)
 
 		elif event.key() == Qt.Key_Down:
 			if self.list_data != None:
@@ -1798,7 +1813,7 @@
 				self.updateGL()
 #			else:
 #				self.__key_mvt_animation(0,-self.height()*.1)
-			self.emit(QtCore.SIGNAL("increment_list_data"),-1)
+			self.increment_list_data.emit(-1)
 
 		elif event.key() == Qt.Key_Right:
 			self.__key_mvt_animation(self.width()*.1,0)
@@ -1817,7 +1832,7 @@
 			self.updateGL()
 
 		else:
-			self.emit(QtCore.SIGNAL("keypress"), event)
+			self.keypress.emit(event)
 
 
 
@@ -1903,36 +1918,36 @@
 		glDisable(GL_TEXTURE_2D)
 
 
-class EMImageInspector2D(QtGui.QWidget):
+class EMImageInspector2D(QtWidgets.QWidget):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(2)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(2, 2, 2, 2)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 
 		# This is the tab-bar for mouse mode selection
-		self.mmtab = QtGui.QTabWidget()
+		self.mmtab = QtWidgets.QTabWidget()
 
 		# App tab
-		self.apptab = QtGui.QWidget()
-		self.apptablab = QtGui.QLabel("Application specific mouse functions",self.apptab)
+		self.apptab = QtWidgets.QWidget()
+		self.apptablab = QtWidgets.QLabel("Application specific mouse functions",self.apptab)
 		self.mmtab.addTab(self.apptab,"App")
 
 		# Save tab
-		self.savetab = QtGui.QWidget()
-		self.stlay = QtGui.QGridLayout(self.savetab)
+		self.savetab = QtWidgets.QWidget()
+		self.stlay = QtWidgets.QGridLayout(self.savetab)
 
-		self.stsnapbut = QtGui.QPushButton("Snapshot")
+		self.stsnapbut = QtWidgets.QPushButton("Snapshot")
 		self.stsnapbut.setToolTip(".pgm, .ppm, .jpeg, .png, or .tiff format only")
-		self.stwholebut = QtGui.QPushButton("Save Img")
+		self.stwholebut = QtWidgets.QPushButton("Save Img")
 		self.stwholebut.setToolTip("save EMData in any EMAN2 format")
-		self.ststackbut = QtGui.QPushButton("Save Stack")
+		self.ststackbut = QtWidgets.QPushButton("Save Stack")
 		self.ststackbut.setToolTip("save EMData objects as stack in any EMAN2 format")
-		self.stmoviebut = QtGui.QPushButton("Movie")
-		self.stanimgif = QtGui.QPushButton("GIF Anim")
+		self.stmoviebut = QtWidgets.QPushButton("Movie")
+		self.stanimgif = QtWidgets.QPushButton("GIF Anim")
 
 		self.stlay.addWidget(self.stsnapbut,0,0)
 		self.stlay.addWidget(self.stwholebut,1,0)
@@ -1942,13 +1957,13 @@
 		self.stmoviebut.setEnabled(False)
 		self.stanimgif.setEnabled(False)
 
-		self.rngbl = QtGui.QHBoxLayout()
+		self.rngbl = QtWidgets.QHBoxLayout()
 		self.stlay.addLayout(self.rngbl,2,0,1,3)
-		self.stmmlbl = QtGui.QLabel("Img Range :")
-		self.stminsb = QtGui.QSpinBox()
+		self.stmmlbl = QtWidgets.QLabel("Img Range :")
+		self.stminsb = QtWidgets.QSpinBox()
 		self.stminsb.setRange(0,0)
 		self.stminsb.setValue(0)
-		self.stmaxsb = QtGui.QSpinBox()
+		self.stmaxsb = QtWidgets.QSpinBox()
 		self.stmaxsb.setRange(0,0)
 		self.stmaxsb.setValue(0)
 
@@ -1958,15 +1973,15 @@
 
 		self.mmtab.addTab(self.savetab,"Save")
 
-		QtCore.QObject.connect(self.stsnapbut,QtCore.SIGNAL("clicked(bool)"),self.do_snapshot)
-		QtCore.QObject.connect(self.stwholebut,QtCore.SIGNAL("clicked(bool)"),self.do_saveimg)
-		QtCore.QObject.connect(self.ststackbut,QtCore.SIGNAL("clicked(bool)"),self.do_savestack)
-		QtCore.QObject.connect(self.stmoviebut,QtCore.SIGNAL("clicked(bool)"),self.do_makemovie)
-		QtCore.QObject.connect(self.stanimgif,QtCore.SIGNAL("clicked(bool)"),self.do_makegifanim)
+		self.stsnapbut.clicked[bool].connect(self.do_snapshot)
+		self.stwholebut.clicked[bool].connect(self.do_saveimg)
+		self.ststackbut.clicked[bool].connect(self.do_savestack)
+		self.stmoviebut.clicked[bool].connect(self.do_makemovie)
+		self.stanimgif.clicked[bool].connect(self.do_makegifanim)
 
 		# Filter tab
-		self.filttab = QtGui.QWidget()
-		self.ftlay=QtGui.QGridLayout(self.filttab)
+		self.filttab = QtWidgets.QWidget()
+		self.ftlay=QtWidgets.QGridLayout(self.filttab)
 
 		self.procbox1=StringBox(label="Process1:",value="filter.lowpass.gauss:cutoff_abs=0.125",showenable=0)
 		self.ftlay.addWidget(self.procbox1,2,0)
@@ -1977,51 +1992,51 @@
 		self.procbox3=StringBox(label="Process3:",value="math.linear:scale=5:shift=0",showenable=0)
 		self.ftlay.addWidget(self.procbox3,10,0)
 
-		self.proclbl1=QtGui.QLabel("Image unchanged, display only!")
+		self.proclbl1=QtWidgets.QLabel("Image unchanged, display only!")
 		self.ftlay.addWidget(self.proclbl1,12,0)
 
 		self.mmtab.addTab(self.filttab,"Filt")
 
-		self.procbox1.connect(self.procbox1,QtCore.SIGNAL("enableChanged"),self.do_filters)
-		self.procbox1.connect(self.procbox1,QtCore.SIGNAL("textChanged"),self.do_filters)
-		self.procbox2.connect(self.procbox2,QtCore.SIGNAL("enableChanged"),self.do_filters)
-		self.procbox2.connect(self.procbox2,QtCore.SIGNAL("textChanged"),self.do_filters)
-		self.procbox3.connect(self.procbox3,QtCore.SIGNAL("enableChanged"),self.do_filters)
-		self.procbox3.connect(self.procbox3,QtCore.SIGNAL("textChanged"),self.do_filters)
+		self.procbox1.enableChanged.connect(self.do_filters)
+		self.procbox1.textChanged.connect(self.do_filters)
+		self.procbox2.enableChanged.connect(self.do_filters)
+		self.procbox2.textChanged.connect(self.do_filters)
+		self.procbox3.enableChanged.connect(self.do_filters)
+		self.procbox3.textChanged.connect(self.do_filters)
 
 		# Probe tab
-		self.probetab = QtGui.QWidget()
-		self.ptlay=QtGui.QGridLayout(self.probetab)
+		self.probetab = QtWidgets.QWidget()
+		self.ptlay=QtWidgets.QGridLayout(self.probetab)
 
 		self.ptareasize= ValBox(label="Probe Size:",value=32)
 		self.ptareasize.setIntonly(True)
 		self.ptlay.addWidget(self.ptareasize,0,0,1,2)
 
-		self.ptpointval= QtGui.QLabel("Point Value (ctr pix): ")
+		self.ptpointval= QtWidgets.QLabel("Point Value (ctr pix): ")
 		self.ptlay.addWidget(self.ptpointval,1,0,1,2,Qt.AlignLeft)
 
-		self.ptareaavg= QtGui.QLabel("Area Avg: ")
+		self.ptareaavg= QtWidgets.QLabel("Area Avg: ")
 		self.ptlay.addWidget(self.ptareaavg,2,0,Qt.AlignLeft)
 
-		self.ptareaavgnz= QtGui.QLabel("Area Avg (!=0): ")
+		self.ptareaavgnz= QtWidgets.QLabel("Area Avg (!=0): ")
 		self.ptlay.addWidget(self.ptareaavgnz,2,1,Qt.AlignLeft)
 
-		self.ptareasig= QtGui.QLabel("Area Sig: ")
+		self.ptareasig= QtWidgets.QLabel("Area Sig: ")
 		self.ptlay.addWidget(self.ptareasig,3,0,Qt.AlignLeft)
 
-		self.ptareasignz= QtGui.QLabel("Area Sig (!=0): ")
+		self.ptareasignz= QtWidgets.QLabel("Area Sig (!=0): ")
 		self.ptlay.addWidget(self.ptareasignz,3,1,Qt.AlignLeft)
 
-		self.ptareaskew= QtGui.QLabel("Skewness: ")
+		self.ptareaskew= QtWidgets.QLabel("Skewness: ")
 		self.ptlay.addWidget(self.ptareaskew,4,0,Qt.AlignLeft)
 
-		self.ptcoord= QtGui.QLabel("Center Coord: ")
+		self.ptcoord= QtWidgets.QLabel("Center Coord: ")
 		self.ptlay.addWidget(self.ptcoord,4,1,Qt.AlignLeft)
 
-		self.ptareakurt= QtGui.QLabel("Kurtosis: ")
+		self.ptareakurt= QtWidgets.QLabel("Kurtosis: ")
 		self.ptlay.addWidget(self.ptareakurt,5,0,Qt.AlignLeft)
 
-		self.ptcoord2= QtGui.QLabel("( ) ")
+		self.ptcoord2= QtWidgets.QLabel("( ) ")
 		self.ptlay.addWidget(self.ptcoord2,5,1,Qt.AlignLeft)
 
 		# not really necessary since the pointbox accurately labels the pixel when zoomed in
@@ -2031,8 +2046,8 @@
 		self.mmtab.addTab(self.probetab,"Probe")
 
 		# Measure tab
-		self.meastab = QtGui.QWidget()
-		self.mtlay = QtGui.QGridLayout(self.meastab)
+		self.meastab = QtWidgets.QWidget()
+		self.mtlay = QtWidgets.QGridLayout(self.meastab)
 
 		#self.mtl1= QtGui.QLabel("A/Pix")
 		#self.mtl1.setAlignment(Qt.AlignRight)
@@ -2047,82 +2062,82 @@
 #		print self.mtapix.sizeHint().width(),self.mtapix.sizeHint().height()
 
 
-		self.mtshoworigin= QtGui.QLabel("Origin: 0,0")
+		self.mtshoworigin= QtWidgets.QLabel("Origin: 0,0")
 		self.mtlay.addWidget(self.mtshoworigin,1,0,Qt.AlignLeft)
 
-		self.mtshowend= QtGui.QLabel("End: 0,0")
+		self.mtshowend= QtWidgets.QLabel("End: 0,0")
 		self.mtlay.addWidget(self.mtshowend,1,1,Qt.AlignLeft)
 
-		self.mtshowlen= QtGui.QLabel("dx,dy: 0")
+		self.mtshowlen= QtWidgets.QLabel("dx,dy: 0")
 		self.mtlay.addWidget(self.mtshowlen,2,0,Qt.AlignLeft)
 
-		self.mtshowlen2= QtGui.QLabel("Length: 0")
+		self.mtshowlen2= QtWidgets.QLabel("Length: 0")
 		self.mtlay.addWidget(self.mtshowlen2,2,1,Qt.AlignLeft)
 
-		self.mtshowval= QtGui.QLabel("Value: ?")
+		self.mtshowval= QtWidgets.QLabel("Value: ?")
 		self.mtlay.addWidget(self.mtshowval,3,0,1,2,Qt.AlignLeft)
 
-		self.mtshowval2= QtGui.QLabel(" ")
+		self.mtshowval2= QtWidgets.QLabel(" ")
 		self.mtlay.addWidget(self.mtshowval2,4,0,1,2,Qt.AlignLeft)
 
 
 		self.mmtab.addTab(self.meastab,"Meas")
 
 		# Draw tab
-		self.drawtab = QtGui.QWidget()
-		self.drawlay = QtGui.QGridLayout(self.drawtab)
+		self.drawtab = QtWidgets.QWidget()
+		self.drawlay = QtWidgets.QGridLayout(self.drawtab)
 
-		self.dtl1 = QtGui.QLabel("Pen Size:")
+		self.dtl1 = QtWidgets.QLabel("Pen Size:")
 		self.dtl1.setAlignment(Qt.AlignRight)
 		self.drawlay.addWidget(self.dtl1,0,0)
 
-		self.dtpen = QtGui.QLineEdit("5")
+		self.dtpen = QtWidgets.QLineEdit("5")
 		self.drawlay.addWidget(self.dtpen,0,1)
 
-		self.dtl2 = QtGui.QLabel("Pen Val:")
+		self.dtl2 = QtWidgets.QLabel("Pen Val:")
 		self.dtl2.setAlignment(Qt.AlignRight)
 		self.drawlay.addWidget(self.dtl2,1,0)
 
-		self.dtpenv = QtGui.QLineEdit("1.0")
+		self.dtpenv = QtWidgets.QLineEdit("1.0")
 		self.drawlay.addWidget(self.dtpenv,1,1)
 
-		self.dtl3 = QtGui.QLabel("Pen Size2:")
+		self.dtl3 = QtWidgets.QLabel("Pen Size2:")
 		self.dtl3.setAlignment(Qt.AlignRight)
 		self.drawlay.addWidget(self.dtl3,0,2)
 
-		self.dtpen2 = QtGui.QLineEdit("5")
+		self.dtpen2 = QtWidgets.QLineEdit("5")
 		self.drawlay.addWidget(self.dtpen2,0,3)
 
-		self.dtl4 = QtGui.QLabel("Pen Val2:")
+		self.dtl4 = QtWidgets.QLabel("Pen Val2:")
 		self.dtl4.setAlignment(Qt.AlignRight)
 		self.drawlay.addWidget(self.dtl4,1,2)
 
-		self.dtpenv2 = QtGui.QLineEdit("0")
+		self.dtpenv2 = QtWidgets.QLineEdit("0")
 		self.drawlay.addWidget(self.dtpenv2,1,3)
 
 		self.mmtab.addTab(self.drawtab,"Draw")
 
 		# PSpec tab
-		self.pstab = QtGui.QWidget()
-		self.pstlay = QtGui.QGridLayout(self.pstab)
+		self.pstab = QtWidgets.QWidget()
+		self.pstlay = QtWidgets.QGridLayout(self.pstab)
 
-		self.psbsing = QtGui.QPushButton("Single")
+		self.psbsing = QtWidgets.QPushButton("Single")
 		self.pstlay.addWidget(self.psbsing,0,0)
 
-		self.psbstack = QtGui.QPushButton("Stack")
+		self.psbstack = QtWidgets.QPushButton("Stack")
 		self.pstlay.addWidget(self.psbstack,0,1)
 
 		self.mmtab.addTab(self.pstab,"PSpec")
 		self.pspecwins=[]
 
 		# Python tab
-		self.pytab = QtGui.QWidget()
-		self.pytlay = QtGui.QGridLayout(self.pytab)
+		self.pytab = QtWidgets.QWidget()
+		self.pytlay = QtWidgets.QGridLayout(self.pytab)
 
-		self.pyinp = QtGui.QLineEdit()
+		self.pyinp = QtWidgets.QLineEdit()
 		self.pytlay.addWidget(self.pyinp,0,0)
 
-		self.pyout = QtGui.QTextEdit()
+		self.pyout = QtWidgets.QTextEdit()
 		self.pyout.setText("The displayed image is 'img'.\nEnter an expression above, like img['sigma']")
 		self.pyout.setReadOnly(True)
 		self.pytlay.addWidget(self.pyout,1,0,4,1)
@@ -2143,8 +2158,8 @@
 		self.vbl.addWidget(self.mmtab)
 
 		# histogram level horiz layout
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
@@ -2154,47 +2169,47 @@
 		self.hbl.addWidget(self.hist)
 
 		# Buttons next to the histogram
-		self.vbl2 = QtGui.QGridLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QGridLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 
-		self.invtog = QtGui.QPushButton("Invert")
+		self.invtog = QtWidgets.QPushButton("Invert")
 		self.invtog.setCheckable(1)
 		self.vbl2.addWidget(self.invtog,0,0,1,1)#0012
 
 
-		self.histoequal = QtGui.QComboBox(self)
+		self.histoequal = QtWidgets.QComboBox(self)
 		self.histoequal.addItem("Normal")
 		self.histoequal.addItem("Hist Flat")
 		self.histoequal.addItem("Hist Gauss")
 		self.vbl2.addWidget(self.histoequal,0,1,1,1)
 
-		self.auto_contrast_button = QtGui.QPushButton("Auto contrast")
+		self.auto_contrast_button = QtWidgets.QPushButton("Auto contrast")
 		self.vbl2.addWidget(self.auto_contrast_button,1,0,1,2)
 
 		# FFT Buttons
-		self.fftg=QtGui.QButtonGroup()
+		self.fftg=QtWidgets.QButtonGroup()
 		self.fftg.setExclusive(1)
 
-		self.ffttog0 = QtGui.QPushButton("Real")
+		self.ffttog0 = QtWidgets.QPushButton("Real")
 		self.ffttog0.setCheckable(1)
 		self.ffttog0.setChecked(1)
 		self.vbl2.addWidget(self.ffttog0,2,0)
 		self.fftg.addButton(self.ffttog0,0)
 
-		self.ffttog1 = QtGui.QPushButton("FFT")
+		self.ffttog1 = QtWidgets.QPushButton("FFT")
 		self.ffttog1.setCheckable(1)
 		self.vbl2.addWidget(self.ffttog1,2,1)
 		self.fftg.addButton(self.ffttog1,1)
 
-		self.ffttog2 = QtGui.QPushButton("Amp")
+		self.ffttog2 = QtWidgets.QPushButton("Amp")
 		self.ffttog2.setCheckable(1)
 		self.vbl2.addWidget(self.ffttog2,3,0)
 		self.fftg.addButton(self.ffttog2,2)
 
-		self.ffttog3 = QtGui.QPushButton("Pha")
+		self.ffttog3 = QtWidgets.QPushButton("Pha")
 		self.ffttog3.setCheckable(1)
 		self.vbl2.addWidget(self.ffttog3,3,1)
 		self.fftg.addButton(self.ffttog3,3)
@@ -2239,20 +2254,20 @@
 		#self.update_brightness_contrast()
 		self.busy=0
 
-		QtCore.QObject.connect(self.psbsing,QtCore.SIGNAL("clicked(bool)"),self.do_pspec_single)
-		QtCore.QObject.connect(self.psbstack,QtCore.SIGNAL("clicked(bool)"),self.do_pspec_stack)
-		QtCore.QObject.connect(self.scale, QtCore.SIGNAL("valueChanged"), target.set_scale)
-		QtCore.QObject.connect(self.mins, QtCore.SIGNAL("valueChanged"), self.new_min)
-		QtCore.QObject.connect(self.maxs, QtCore.SIGNAL("valueChanged"), self.new_max)
-		QtCore.QObject.connect(self.brts, QtCore.SIGNAL("valueChanged"), self.new_brt)
-		QtCore.QObject.connect(self.conts, QtCore.SIGNAL("valueChanged"), self.new_cont)
-		QtCore.QObject.connect(self.gammas, QtCore.SIGNAL("valueChanged"), self.new_gamma)
-		QtCore.QObject.connect(self.pyinp, QtCore.SIGNAL("returnPressed()"),self.do_python)
-		QtCore.QObject.connect(self.invtog, QtCore.SIGNAL("toggled(bool)"), target.set_invert)
-		QtCore.QObject.connect(self.histoequal, QtCore.SIGNAL("currentIndexChanged(int)"), target.set_histogram)
-		QtCore.QObject.connect(self.fftg, QtCore.SIGNAL("buttonClicked(int)"), target.set_FFT)
-		QtCore.QObject.connect(self.mmtab, QtCore.SIGNAL("currentChanged(int)"), target.set_mouse_mode)
-		QtCore.QObject.connect(self.auto_contrast_button, QtCore.SIGNAL("clicked(bool)"), target.auto_contrast)
+		self.psbsing.clicked[bool].connect(self.do_pspec_single)
+		self.psbstack.clicked[bool].connect(self.do_pspec_stack)
+		self.scale.valueChanged.connect(target.set_scale)
+		self.mins.valueChanged.connect(self.new_min)
+		self.maxs.valueChanged.connect(self.new_max)
+		self.brts.valueChanged.connect(self.new_brt)
+		self.conts.valueChanged.connect(self.new_cont)
+		self.gammas.valueChanged.connect(self.new_gamma)
+		self.pyinp.returnPressed.connect(self.do_python)
+		self.invtog.toggled[bool].connect(target.set_invert)
+		self.histoequal.currentIndexChanged[int].connect(target.set_histogram)
+		self.fftg.buttonClicked[int].connect(target.set_FFT)
+		self.mmtab.currentChanged[int].connect(target.set_mouse_mode)
+		self.auto_contrast_button.clicked[bool].connect(target.auto_contrast)
 
 		self.resize(400,440) # d.woolford thinks this is a good starting size as of Nov 2008 (especially on MAC)
 
@@ -2322,7 +2337,7 @@
 
 	def do_snapshot(self,du) :
 		if self.target().data==None or self.target() == None: return
-		fsp=QtGui.QFileDialog.getSaveFileName(self, "Select output file, .pgm, .ppm, .jpeg, .png or .tiff only")
+		fsp=QtWidgets.QFileDialog.getSaveFileName(self, "Select output file, .pgm, .ppm, .jpeg, .png or .tiff only")[0]
 		fsp=str(fsp)
 		# Just grab the framebuffer, as a QTImage, and save as tiff
 		self.target().update()
@@ -2350,13 +2365,13 @@
 
 	def do_saveimg(self,du) :
 		if self.target().data==None : return
-		fsp=QtGui.QFileDialog.getSaveFileName(self, "Select output file, format extrapolated from file extenstion")
+		fsp=QtWidgets.QFileDialog.getSaveFileName(self, "Select output file, format extrapolated from file extenstion")[0]
 		fsp=str(fsp)
 		self.target().data.write_image(fsp,-1)
 
 	def do_savestack(self,du) :
 		if self.target().list_data==None : return
-		fsp=str(QtGui.QFileDialog.getSaveFileName(self, "Select root output file, format extrapolated from file extenstion"))
+		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select root output file, format extrapolated from file extenstion"))[0]
 		#fsp=str(fsp).split(".")
 		#if len(fsp)==1 :
 			#fsp1=fsp[0]
@@ -2370,7 +2385,7 @@
 			im.write_image(fsp,-1)
 
 	def do_makemovie(self,du) :
-		fsp=QtGui.QFileDialog.getSaveFileName(self, "Select output file, format extrapolated from file extenstion. ffmpeg must be installed")
+		fsp=QtWidgets.QFileDialog.getSaveFileName(self, "Select output file, format extrapolated from file extenstion. ffmpeg must be installed")[0]
 		if self.target().list_data==None : return
 
 		for i in range(self.stminsb.value()-1,self.stmaxsb.value()):
@@ -2381,7 +2396,7 @@
 
 		ret= os.system("ffmpeg -i tmp.%%03d.png %s"%fsp)
 		if ret!=0 :
-			QtGui.QMessageBox.warning(None,"Error","Movie conversion (ffmpeg) failed. Please make sure ffmpeg is in your path. Frames not deleted.")
+			QtWidgets.QMessageBox.warning(None,"Error","Movie conversion (ffmpeg) failed. Please make sure ffmpeg is in your path. Frames not deleted.")
 			return
 
 		for i in range(self.stminsb.value()-1,self.stmaxsb.value()):
@@ -2389,7 +2404,7 @@
 
 
 	def do_makegifanim(self,du) :
-		fsp=QtGui.QFileDialog.getSaveFileName(self, "Select output gif file")
+		fsp=QtWidgets.QFileDialog.getSaveFileName(self, "Select output gif file")[0]
 		if self.target().list_data==None : return
 
 		for i in range(self.stminsb.value()-1,self.stmaxsb.value()):
@@ -2398,7 +2413,7 @@
 
 		ret= os.system("convert tmp.???.png %s"%fsp)
 		if ret!=0 :
-			QtGui.QMessageBox.warning(None,"Error","GIF conversion failed. Please make sure ImageMagick (convert program) is installed and in your path. Frames not deleted.")
+			QtWidgets.QMessageBox.warning(None,"Error","GIF conversion failed. Please make sure ImageMagick (convert program) is installed and in your path. Frames not deleted.")
 			return
 
 		for i in range(self.stminsb.value()-1,self.stmaxsb.value()):
@@ -2415,7 +2430,7 @@
 			r="Error executing. Access the image as 'img', for example \nimg['mean'] will yield the mean image value"
 #		print r
 
-		self.pyout.setText(QtCore.QString(r))
+		self.pyout.setText(QString(r))
 
 	def disable_image_range(self):
 		self.stminsb.setRange(0,0)
@@ -2447,7 +2462,7 @@
 		self.stmaxsb.setRange(minimum,maximum)
 		self.stmaxsb.setValue(maximum)
 
-		QtCore.QObject.connect(self.image_range, QtCore.SIGNAL("valueChanged"), self.target().image_range_changed)
+		self.image_range.valueChanged.connect(self.target().image_range_changed)
 
 	def set_image_idx(self,val):
 		self.image_range.setValue(val)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage3d.py	2017-10-21 17:14:55.000000000 -0500
@@ -36,8 +36,8 @@
 from OpenGL import GL, GLU, GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import QTimer, Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import QTimer, Qt
 from e2eulerxplor import EMEulerExplorer
 from emglobjects import Camera, Camera2, EMGLWidget, EMViewportDepthTools, EMGLProjectionViewMatrices, EMOpenGLFlagsAndTools
 from emimage3diso import EMIsosurfaceModel
@@ -59,6 +59,7 @@
 	""" 
 	A QT widget for rendering 3D EMData objects
 	"""
+	set_perspective = QtCore.pyqtSignal()
 	allim=weakref.WeakKeyDictionary()
 	def add_model(self,model,num=0):
 		model.set_gl_widget(self)
@@ -571,7 +572,7 @@
 			self.qt_parent.setWindowTitle(remove_directories_from_name(self.file_name))
 	def set_perspective(self,bool):
 		self.perspective = bool
-		if self.emit_events: self.emit(QtCore.SIGNAL("set_perspective"),bool)
+		if self.emit_events: self.set_perspective.emit(bool)
 		self.updateGL()
 		#self.set_perspective(bool)
 	def set_scale(self,val):
@@ -594,7 +595,7 @@
 				pass
 		self.updateGL()
 
-class EMImageInspector3D(QtGui.QWidget):
+class EMImageInspector3D(QtWidgets.QWidget):
 	def set_directional_light_dir(self,d):
 		self.advanced_tab.set_directional_light_dir(d)
 	
@@ -605,63 +606,63 @@
 		self.advanced_tab.set_positional_light_dir(d)
 	
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"desktop.png"))
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(2)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(2, 2, 2, 2)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		
 		#self.listwidget = QtGui.QListWidget(self)
 		#self.vbl.addWidget(self.listwidget)
 		
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		
-		self.hbl_check = QtGui.QHBoxLayout()
-		self.hbl_check.setMargin(0)
+		self.hbl_check = QtWidgets.QHBoxLayout()
+		self.hbl_check.setContentsMargins(0, 0, 0, 0)
 		self.hbl_check.setSpacing(6)
 		self.hbl_check.setObjectName("hbl_check")
 		
 		#self.advancedcheck = QtGui.QCheckBox("Advanced",self)
 		#self.hbl_check.addWidget(self.advancedcheck)
 		
-		self.hbl_buttons = QtGui.QHBoxLayout()
-		self.hbl_buttons.setMargin(0)
+		self.hbl_buttons = QtWidgets.QHBoxLayout()
+		self.hbl_buttons.setContentsMargins(0, 0, 0, 0)
 		self.hbl_buttons.setSpacing(6)
 		self.hbl_buttons.setObjectName("hbl_buttons")
 		
-		self.hbl_buttons2 = QtGui.QHBoxLayout()
-		self.hbl_buttons2.setMargin(0)
+		self.hbl_buttons2 = QtWidgets.QHBoxLayout()
+		self.hbl_buttons2.setContentsMargins(0, 0, 0, 0)
 		self.hbl_buttons2.setSpacing(6)
 		self.hbl_buttons2.setObjectName("hbl_buttons2")
 		
-		self.addIso = QtGui.QPushButton("Isosurface")
+		self.addIso = QtWidgets.QPushButton("Isosurface")
 		self.hbl_buttons.addWidget(self.addIso)
 		
-		self.addVol = QtGui.QPushButton("Volume")
+		self.addVol = QtWidgets.QPushButton("Volume")
 		self.hbl_buttons.addWidget(self.addVol)
 		
 		glflags = EMOpenGLFlagsAndTools()
 		if glflags.npt_textures_unsupported(): self.addVol.setEnabled(False)
 		
-		self.addSli = QtGui.QPushButton("Slices")
+		self.addSli = QtWidgets.QPushButton("Slices")
 		self.hbl_buttons2.addWidget(self.addSli)
 		
-		self.add_sym = QtGui.QPushButton("Sym")
+		self.add_sym = QtWidgets.QPushButton("Sym")
 		self.hbl_buttons2.addWidget(self.add_sym)
 
 		self.vbl.addLayout(self.hbl_buttons)
 		self.vbl.addLayout(self.hbl_buttons2)
 		
-		self.hbl_buttons3 = QtGui.QHBoxLayout()
-		self.delete = QtGui.QPushButton("Delete")
+		self.hbl_buttons3 = QtWidgets.QHBoxLayout()
+		self.delete = QtWidgets.QPushButton("Delete")
 		self.hbl_buttons3.addWidget(self.delete)
 		self.vbl.addLayout(self.hbl_buttons3)
 		
@@ -676,11 +677,11 @@
 
 		self.insert_advance_tab()
 		
-		QtCore.QObject.connect(self.addIso, QtCore.SIGNAL("clicked()"), self.add_isosurface)
-		QtCore.QObject.connect(self.addVol, QtCore.SIGNAL("clicked()"), self.add_volume)
-		QtCore.QObject.connect(self.addSli, QtCore.SIGNAL("clicked()"), self.add_slices)
-		QtCore.QObject.connect(self.add_sym, QtCore.SIGNAL("clicked()"), self.add_symmetry)
-		QtCore.QObject.connect(self.delete, QtCore.SIGNAL("clicked()"), self.delete_selection)
+		self.addIso.clicked.connect(self.add_isosurface)
+		self.addVol.clicked.connect(self.add_volume)
+		self.addSli.clicked.connect(self.add_slices)
+		self.add_sym.clicked.connect(self.add_symmetry)
+		self.delete.clicked.connect(self.delete_selection)
 		
 	def update_rotations(self,t3d):
 		self.advanced_tab.update_rotations(t3d)
@@ -755,21 +756,21 @@
 	
 
 
-class EM3DAdvancedInspector(QtGui.QWidget,EMLightsInspectorBase):
+class EM3DAdvancedInspector(QtWidgets.QWidget,EMLightsInspectorBase):
 	
 	
 	def __init__(self,target,parent=None):
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		EMLightsInspectorBase.__init__(self)
 		self.target=weakref.ref(target)
 		self.parent=weakref.ref(parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.tabwidget.addTab(self.get_main_tab(), "Transform")
 		self.tabwidget.addTab(self.get_light_tab(), "Lights")
 		
@@ -778,31 +779,31 @@
 		self.vbl.addWidget(self.tabwidget)
 		
 
-		QtCore.QObject.connect(self.persbut, QtCore.SIGNAL("pressed()"), self.perspective_clicked)
-		QtCore.QObject.connect(self.orthbut, QtCore.SIGNAL("pressed()"), self.ortho_clicked)
+		self.persbut.pressed.connect(self.perspective_clicked)
+		self.orthbut.pressed.connect(self.ortho_clicked)
 	
 	
 	def get_main_tab(self):
-		self.maintab = QtGui.QWidget()
+		self.maintab = QtWidgets.QWidget()
 		maintab = self.maintab
-		maintab.vbl = QtGui.QVBoxLayout(self.maintab)
+		maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
 		
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(2)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(2, 2, 2, 2)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		
-		self.persbut = QtGui.QRadioButton("Perspective")
+		self.persbut = QtWidgets.QRadioButton("Perspective")
 		self.persbut.setChecked(self.target().perspective==True)
 		
-		self.orthbut = QtGui.QRadioButton("Orthographic")
+		self.orthbut = QtWidgets.QRadioButton("Orthographic")
 		self.orthbut.setChecked(self.target().perspective==False)
 		
-		self.groupbox = QtGui.QVBoxLayout()
+		self.groupbox = QtWidgets.QVBoxLayout()
 		self.groupbox.addWidget(self.persbut)
 		self.groupbox.addWidget(self.orthbut)
 		
-		self.viewingvol = QtGui.QGroupBox("Viewing Volume")
+		self.viewingvol = QtWidgets.QGroupBox("Viewing Volume")
 		self.viewingvol.setLayout(self.groupbox)
 		
 		self.hbl.addWidget(self.viewingvol)
@@ -838,7 +839,7 @@
 
 class EMImage3DModule(EMImage3DWidget):
 	def __init__(self, parent=None, image=None,application=None,winid=None):
-		import warnings	
+		import warnings
 		warnings.warn("convert EMImage3DModule to EMImage3DWidget", DeprecationWarning)
 		EMImage3DWidget.__init__(self, parent, image, application, winid)
 	
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage3diso.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage3diso.py	2017-10-21 17:14:55.000000000 -0500
@@ -33,8 +33,8 @@
 #
 #
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
@@ -52,9 +52,17 @@
 from emimageutil import ImgHistogram, EMTransformPanel
 
 
+try:
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+
 MAG_INCREMENT_FACTOR = 1.1
 
 class EMIsosurfaceModel(EM3DModel):
+	set_threshold = QtCore.pyqtSignal()
+
 	def eye_coords_dif(self,x1,y1,x2,y2,mdepth=True):
 		return self.vdtools.eye_coords_dif(x1,y1,x2,y2,mdepth)
 
@@ -306,7 +314,7 @@
 				self.update_data_and_texture()
 			self.get_iso_dl()
 		
-			if self.emit_events: self.emit(QtCore.SIGNAL("set_threshold"),val)
+			if self.emit_events: self.set_threshold.emit(val)
 			self.updateGL()
 	
 	def set_sample(self,val):
@@ -366,34 +374,34 @@
 		return self.get_inspector().mrcfileName
 		
 
-class EMIsoInspector(QtGui.QWidget):
+class EMIsoInspector(QtWidgets.QWidget):
 	def __init__(self,target,enable_browse=False) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"desktop.png"))
 		self.target=weakref.ref(target)
 		self.rotation_sliders = EMTransformPanel(target,self)
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
 		self.mrcChanged = False #added by Muthu
 		
 		if enable_browse:
-			hblbrowse = QtGui.QHBoxLayout()
-			self.mrc_text = QtGui.QLineEdit()
+			hblbrowse = QtWidgets.QHBoxLayout()
+			self.mrc_text = QtWidgets.QLineEdit()
 			hblbrowse.addWidget(self.mrc_text)
-			self.mrc_browse = QtGui.QPushButton("Browse")
+			self.mrc_browse = QtWidgets.QPushButton("Browse")
 			hblbrowse.addWidget(self.mrc_browse)
 			self.vbl.addLayout(hblbrowse)
 
-			QtCore.QObject.connect(self.mrc_text, QtCore.SIGNAL("textEdited(const QString&)"), self.on_mrc_text_change) #added by Muthu
-			QtCore.QObject.connect(self.mrc_browse, QtCore.SIGNAL("clicked(bool)"), self.on_mrc_browse) # added by Muthu
+			self.mrc_text.textEdited['QString'].connect(self.on_mrc_text_change)
+			self.mrc_browse.clicked[bool].connect(self.on_mrc_browse)
 
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
@@ -402,30 +410,30 @@
 		self.hist.setObjectName("hist")
 		self.hbl.addWidget(self.hist)
 		
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 		
-		self.wiretog = QtGui.QPushButton("Wire")
+		self.wiretog = QtWidgets.QPushButton("Wire")
 		self.wiretog.setCheckable(1)
 		self.vbl2.addWidget(self.wiretog)
 		
-		self.lighttog = QtGui.QPushButton("Light")
+		self.lighttog = QtWidgets.QPushButton("Light")
 		self.lighttog.setCheckable(1)
 		self.vbl2.addWidget(self.lighttog)
 		
-		self.cubetog = QtGui.QPushButton("Cube")
+		self.cubetog = QtWidgets.QPushButton("Cube")
 		self.cubetog.setCheckable(1)
 		self.vbl2.addWidget(self.cubetog)
 		
-		self.texturetog = QtGui.QPushButton("Texture")
+		self.texturetog = QtWidgets.QPushButton("Texture")
 		self.texturetog.setCheckable(1)
 		self.vbl2.addWidget(self.texturetog)
 		self.texture = False
 		
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.maintab = None
 		self.tabwidget.addTab(self.get_main_tab(), "Main")
 		self.texturetab = None
@@ -435,31 +443,31 @@
 		self.vbl.addWidget(self.tabwidget)
 		self.n3_showing = False
 		
-		QtCore.QObject.connect(self.thr, QtCore.SIGNAL("valueChanged"), self.on_threshold_slider)
-		QtCore.QObject.connect(self.contrast, QtCore.SIGNAL("valueChanged"), target.set_contrast)
-		QtCore.QObject.connect(self.bright, QtCore.SIGNAL("valueChanged"), target.set_brightness)
-		QtCore.QObject.connect(self.cbb, QtCore.SIGNAL("currentIndexChanged(QString)"), self.set_material)
-		QtCore.QObject.connect(self.smp, QtCore.SIGNAL("valueChanged(int)"), target.set_sample)
-		QtCore.QObject.connect(self.wiretog, QtCore.SIGNAL("toggled(bool)"), target.toggle_wire)
-		QtCore.QObject.connect(self.lighttog, QtCore.SIGNAL("toggled(bool)"), target.toggle_light)
-		QtCore.QObject.connect(self.texturetog, QtCore.SIGNAL("toggled(bool)"), self.toggle_texture)
-		QtCore.QObject.connect(self.cubetog, QtCore.SIGNAL("toggled(bool)"), target.toggle_cube)
-		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), target.set_GL_contrast)
-		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), target.set_GL_brightness)
-		
-		QtCore.QObject.connect(self.ambient_tab.r, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.ambient_tab.g, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.ambient_tab.b, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.diffuse_tab.r, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.diffuse_tab.g, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.diffuse_tab.b, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.specular_tab.r, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.specular_tab.g, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.specular_tab.b, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.emission_tab.r, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.emission_tab.g, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.emission_tab.b, QtCore.SIGNAL("valueChanged"), self.update_material)
-		QtCore.QObject.connect(self.shininess, QtCore.SIGNAL("valueChanged"), self.update_material)
+		self.thr.valueChanged.connect(self.on_threshold_slider)
+		self.contrast.valueChanged.connect(target.set_contrast)
+		self.bright.valueChanged.connect(target.set_brightness)
+		self.cbb.currentIndexChanged['QString'].connect(self.set_material)
+		self.smp.valueChanged[int].connect(target.set_sample)
+		self.wiretog.toggled[bool].connect(target.toggle_wire)
+		self.lighttog.toggled[bool].connect(target.toggle_light)
+		self.texturetog.toggled[bool].connect(self.toggle_texture)
+		self.cubetog.toggled[bool].connect(target.toggle_cube)
+		self.glcontrast.valueChanged.connect(target.set_GL_contrast)
+		self.glbrightness.valueChanged.connect(target.set_GL_brightness)
+		
+		self.ambient_tab.r.valueChanged.connect(self.update_material)
+		self.ambient_tab.g.valueChanged.connect(self.update_material)
+		self.ambient_tab.b.valueChanged.connect(self.update_material)
+		self.diffuse_tab.r.valueChanged.connect(self.update_material)
+		self.diffuse_tab.g.valueChanged.connect(self.update_material)
+		self.diffuse_tab.b.valueChanged.connect(self.update_material)
+		self.specular_tab.r.valueChanged.connect(self.update_material)
+		self.specular_tab.g.valueChanged.connect(self.update_material)
+		self.specular_tab.b.valueChanged.connect(self.update_material)
+		self.emission_tab.r.valueChanged.connect(self.update_material)
+		self.emission_tab.g.valueChanged.connect(self.update_material)
+		self.emission_tab.b.valueChanged.connect(self.update_material)
+		self.shininess.valueChanged.connect(self.update_material)
 
 
 
@@ -468,7 +476,7 @@
 
 	def on_mrc_browse(self): #if enable_browse, added by muthu
 		import os
-		self.mrcfileName = QtGui.QFileDialog.getOpenFileName(self, "open file", os.getcwd(), "Text files (*.mrc)")
+		self.mrcfileName = QtWidgets.QFileDialog.getOpenFileName(self, "open file", os.getcwd(), "Text files (*.mrc)")[0]
 		if (self.mrcfileName == ""): return
 		mrcData = EMData(str(self.mrcfileName))
 		self.target().set_data(mrcData)
@@ -503,7 +511,7 @@
 		custom["shininess"] = self.shininess.getValue()
 		self.target().colors["custom"] = custom
 
-		n = self.cbb.findText(QtCore.QString("custom"))
+		n = self.cbb.findText(QString("custom"))
 		if n < 0: return
 		self.cbb.setCurrentIndex(n)
 		self.target().updateGL()
@@ -556,11 +564,11 @@
 		#return rgbtab
 	
 	def get_GL_tab(self):
-		self.gltab = QtGui.QWidget()
+		self.gltab = QtWidgets.QWidget()
 		gltab = self.gltab
 		
-		gltab.vbl = QtGui.QVBoxLayout(self.gltab )
-		gltab.vbl.setMargin(0)
+		gltab.vbl = QtWidgets.QVBoxLayout(self.gltab )
+		gltab.vbl.setContentsMargins(0, 0, 0, 0)
 		gltab.vbl.setSpacing(6)
 		gltab.vbl.setObjectName("GL")
 		
@@ -576,7 +584,7 @@
 		self.glbrightness.setValue(0.0)
 		gltab.vbl.addWidget(self.glbrightness)
 	
-		self.material_tab_widget = QtGui.QTabWidget()
+		self.material_tab_widget = QtWidgets.QTabWidget()
 		self.ambient_tab = self.get_RGB_tab("ambient")
 		self.material_tab_widget.addTab(self.ambient_tab, "Ambient")
 		
@@ -596,17 +604,17 @@
 		self.shininess.setValue(64)
 		gltab.vbl.addWidget(self.shininess)
 
-		self.hbl_color = QtGui.QHBoxLayout()
-		self.hbl_color.setMargin(0)
+		self.hbl_color = QtWidgets.QHBoxLayout()
+		self.hbl_color.setContentsMargins(0, 0, 0, 0)
 		self.hbl_color.setSpacing(6)
 		self.hbl_color.setObjectName("Material")
 		gltab.vbl.addLayout(self.hbl_color)
 		
-		self.color_label = QtGui.QLabel()
+		self.color_label = QtWidgets.QLabel()
 		self.color_label.setText('Material')
 		self.hbl_color.addWidget(self.color_label)
 		
-		self.cbb = QtGui.QComboBox(gltab)
+		self.cbb = QtWidgets.QComboBox(gltab)
 		self.hbl_color.addWidget(self.cbb)
 		
 		return gltab
@@ -618,10 +626,10 @@
 	
 	def get_texture_tab(self):
 		if ( self.texturetab == None ):
-			self.texturetab = QtGui.QWidget()
+			self.texturetab = QtWidgets.QWidget()
 			texturetab = self.texturetab
-			texturetab.vbl = QtGui.QVBoxLayout(self.texturetab)
-			texturetab.vbl.setMargin(0)
+			texturetab.vbl = QtWidgets.QVBoxLayout(self.texturetab)
+			texturetab.vbl.setContentsMargins(0, 0, 0, 0)
 			texturetab.vbl.setSpacing(6)
 			texturetab.vbl.setObjectName("Main")
 		
@@ -651,10 +659,10 @@
 	
 	def get_main_tab(self):
 		if ( self.maintab == None ):
-			self.maintab = QtGui.QWidget()
+			self.maintab = QtWidgets.QWidget()
 			maintab = self.maintab
-			maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-			maintab.vbl.setMargin(0)
+			maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+			maintab.vbl.setContentsMargins(0, 0, 0, 0)
 			maintab.vbl.setSpacing(6)
 			maintab.vbl.setObjectName("Main")
 			
@@ -663,17 +671,17 @@
 			self.thr.setValue(0.5)
 			maintab.vbl.addWidget(self.thr)
 			
-			self.hbl_smp = QtGui.QHBoxLayout()
-			self.hbl_smp.setMargin(0)
+			self.hbl_smp = QtWidgets.QHBoxLayout()
+			self.hbl_smp.setContentsMargins(0, 0, 0, 0)
 			self.hbl_smp.setSpacing(6)
 			self.hbl_smp.setObjectName("Sample")
 			maintab.vbl.addLayout(self.hbl_smp)
 			
-			self.smp_label = QtGui.QLabel()
+			self.smp_label = QtWidgets.QLabel()
 			self.smp_label.setText('Sample Level')
 			self.hbl_smp.addWidget(self.smp_label)
 			
-			self.smp = QtGui.QSpinBox(maintab)
+			self.smp = QtWidgets.QSpinBox(maintab)
 			self.smp.setValue(1)
 			self.hbl_smp.addWidget(self.smp)
 	
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage3dslice.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage3dslice.py	2017-10-21 17:14:55.000000000 -0500
@@ -34,8 +34,8 @@
 
 
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
@@ -437,21 +437,21 @@
 		self.vdtools.set_update_P_inv()
 		
 
-class EM3DSliceInspector(QtGui.QWidget):
+class EM3DSliceInspector(QtWidgets.QWidget):
 	def __init__(self,target) :
 		self.busy = False
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"desktop.png"))
 		self.transform_panel = EMTransformPanel(target,self)
 		self.target=weakref.ref(target)
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
@@ -460,17 +460,17 @@
 		self.hist.setObjectName("hist")
 		self.hbl.addWidget(self.hist)
 		
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 	
-		self.cubetog = QtGui.QPushButton("Cube")
+		self.cubetog = QtWidgets.QPushButton("Cube")
 		self.cubetog.setCheckable(1)
 		self.vbl2.addWidget(self.cubetog)
 		
-		self.defaults = QtGui.QPushButton("Defaults")
+		self.defaults = QtWidgets.QPushButton("Defaults")
 		self.vbl2.addWidget(self.defaults)
 		
 		self.vbl.addWidget(self.get_main_tab())
@@ -479,14 +479,14 @@
 		
 #		self.current_src = EULER_EMAN
 		
-		QtCore.QObject.connect(self.slice, QtCore.SIGNAL("valueChanged"), target.set_slice)
-		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), target.set_GL_contrast)
-		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), target.set_GL_brightness)
-		QtCore.QObject.connect(self.axisCombo, QtCore.SIGNAL("currentIndexChanged(QString)"), target.setAxis)
-		QtCore.QObject.connect(self.cubetog, QtCore.SIGNAL("toggled(bool)"), target.toggle_cube)
-		QtCore.QObject.connect(self.defaults, QtCore.SIGNAL("clicked(bool)"), self.set_defaults)
-		QtCore.QObject.connect(self.contrast, QtCore.SIGNAL("valueChanged"), self.on_contrast_changed)
-		QtCore.QObject.connect(self.bright, QtCore.SIGNAL("valueChanged"), self.on_brightness_changed)
+		self.slice.valueChanged.connect(target.set_slice)
+		self.glcontrast.valueChanged.connect(target.set_GL_contrast)
+		self.glbrightness.valueChanged.connect(target.set_GL_brightness)
+		self.axisCombo.currentIndexChanged['QString'].connect(target.setAxis)
+		self.cubetog.toggled[bool].connect(target.toggle_cube)
+		self.defaults.clicked[bool].connect(self.set_defaults)
+		self.contrast.valueChanged.connect(self.on_contrast_changed)
+		self.bright.valueChanged.connect(self.on_brightness_changed)
 	
 	def on_contrast_changed(self,val):
 		if self.busy: return
@@ -528,15 +528,15 @@
 
 	def get_main_tab(self):
 	
-		self.maintab = QtGui.QWidget()
+		self.maintab = QtWidgets.QWidget()
 		maintab = self.maintab
-		maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-		maintab.vbl.setMargin(0)
+		maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+		maintab.vbl.setContentsMargins(0, 0, 0, 0)
 		maintab.vbl.setSpacing(6)
 		maintab.vbl.setObjectName("Main")
 		
-		self.hbl_slice = QtGui.QHBoxLayout()
-		self.hbl_slice.setMargin(0)
+		self.hbl_slice = QtWidgets.QHBoxLayout()
+		self.hbl_slice.setContentsMargins(0, 0, 0, 0)
 		self.hbl_slice.setSpacing(6)
 		self.hbl_slice.setObjectName("Axis")
 		maintab.vbl.addLayout(self.hbl_slice)
@@ -546,7 +546,7 @@
 		self.slice.setValue(1.0)
 		self.hbl_slice.addWidget(self.slice)
 		
-		self.axisCombo = QtGui.QComboBox(maintab)
+		self.axisCombo = QtWidgets.QComboBox(maintab)
 		self.axisCombo.addItem(' z ')
 		self.axisCombo.addItem(' y ')
 		self.axisCombo.addItem(' x ')
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage3dsym.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage3dsym.py	2017-10-21 17:14:56.000000000 -0500
@@ -36,8 +36,8 @@
 from OpenGL import GL, GLU, GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import EMApp, get_application
 from emglobjects import EM3DModel, EMGLWidget, Camera, Camera2, EMViewportDepthTools2, EMGLProjectionViewMatrices, get_default_gl_colors
 from emimageutil import EMTransformPanel
@@ -412,7 +412,7 @@
 		if self.image_display_window == None:
 			from emimage2d import EMImage2DWidget
 			self.image_display_window = EMImage2DWidget()
-			QtCore.QObject.connect(self.image_display_window,QtCore.SIGNAL("module_closed"),self.on_image_display_window_closed)
+			self.image_display_window.module_closed.connect(self.on_image_display_window_closed)
 			resize_necessary = True
 				
 		self.image_display_window.set_data(self.euler_data[object_number],"Data")
@@ -1295,36 +1295,36 @@
 		@param vbl a QtGui.QVBoxLayout - all widgets and layouts are added to it
 		'''
 		self.busy = True
-		self.button_hbl1 = QtGui.QHBoxLayout()
-		self.symtogdisplay = QtGui.QPushButton("Display Eulers")
+		self.button_hbl1 = QtWidgets.QHBoxLayout()
+		self.symtogdisplay = QtWidgets.QPushButton("Display Eulers")
 		self.symtogdisplay.setCheckable(1)
 		self.symtogdisplay.setChecked(1)
 		self.button_hbl1.addWidget(self.symtogdisplay)
 		
-		self.triangletog = QtGui.QPushButton("Display Triangles")
+		self.triangletog = QtWidgets.QPushButton("Display Triangles")
 		self.triangletog.setCheckable(1)
 		self.triangletog.setChecked(0)
 		self.button_hbl1.addWidget(self.triangletog)
 		
 		vbl.addLayout(self.button_hbl1)
 		
-		self.button_hbl2 = QtGui.QHBoxLayout()
+		self.button_hbl2 = QtWidgets.QHBoxLayout()
 		
-		self.arctog = QtGui.QPushButton("Display Arcs")
+		self.arctog = QtWidgets.QPushButton("Display Arcs")
 		self.arctog.setCheckable(1)
 		self.arctog.setChecked(1)
 		self.button_hbl2.addWidget(self.arctog)
 		
-		self.symtog = QtGui.QPushButton("All syms")
+		self.symtog = QtWidgets.QPushButton("All syms")
 		self.symtog.setCheckable(1)
 		self.button_hbl2.addWidget(self.symtog)
 		vbl.addLayout(self.button_hbl2)
 		
 		
-		QtCore.QObject.connect(self.symtog, QtCore.SIGNAL("toggled(bool)"), self.set_display_all_syms)
-		QtCore.QObject.connect(self.symtogdisplay, QtCore.SIGNAL("clicked(bool)"), self.toggle_sym_display)
-		QtCore.QObject.connect(self.triangletog, QtCore.SIGNAL("clicked(bool)"), self.triangle_tog)
-		QtCore.QObject.connect(self.arctog, QtCore.SIGNAL("clicked(bool)"), self.arc_tog)
+		self.symtog.toggled[bool].connect(self.set_display_all_syms)
+		self.symtogdisplay.clicked[bool].connect(self.toggle_sym_display)
+		self.triangletog.clicked[bool].connect(self.triangle_tog)
+		self.arctog.clicked[bool].connect(self.arc_tog)
 		self.busy = False
 
 	def set_display_all_syms(self,val):
@@ -1368,20 +1368,20 @@
 		Makes QtCore.QObject connections to functions of self.target() (see bottom of this function)
 		'''
 		self.busy = True
-		self.maintab = QtGui.QWidget()
+		self.maintab = QtWidgets.QWidget()
 		maintab = self.maintab
-		maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-		maintab.vbl.setMargin(0)
+		maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+		maintab.vbl.setContentsMargins(0, 0, 0, 0)
 		maintab.vbl.setSpacing(6)
 		maintab.vbl.setObjectName("Main")
 		
-		self.hbl_sym = QtGui.QHBoxLayout()
-		self.hbl_sym.setMargin(0)
+		self.hbl_sym = QtWidgets.QHBoxLayout()
+		self.hbl_sym.setContentsMargins(0, 0, 0, 0)
 		self.hbl_sym.setSpacing(6)
 		self.hbl_sym.setObjectName("Sym")
 		maintab.vbl.addLayout(self.hbl_sym)
 		
-		self.sym_combo = QtGui.QComboBox(maintab)
+		self.sym_combo = QtWidgets.QComboBox(maintab)
 		self.symmetries = []
 		self.symmetries.append(' Icosahedral ')
 		self.symmetries.append(' Octahedral ')
@@ -1403,13 +1403,13 @@
 		self.sym_combo.setCurrentIndex(idx_default)
 		self.hbl_sym.addWidget(self.sym_combo)
 		
-		self.sym_label = QtGui.QLabel()
+		self.sym_label = QtWidgets.QLabel()
 		self.sym_label.setText('C/D sym')
 		self.hbl_sym.addWidget(self.sym_label)
 		
 		self.pos_int_validator = QtGui.QIntValidator(self.widget())
 		self.pos_int_validator.setBottom(1)
-		self.sym_text = QtGui.QLineEdit()
+		self.sym_text = QtWidgets.QLineEdit()
 		self.sym_text.setValidator(self.pos_int_validator)
 		self.sym_text.setText("7")
 		self.sym_text.setFixedWidth(50)
@@ -1419,30 +1419,30 @@
 		self.set_sym(self.target().get_sym())
 		
 		if enable_orient_gen:
-			self.angle_label = QtGui.QComboBox()
+			self.angle_label = QtWidgets.QComboBox()
 			self.angle_label.addItem('Angle Based')
 			self.angle_label.addItem('Number Based')
 			self.hbl_sym.addWidget(self.angle_label)
 			
 			self.pos_double_validator = QtGui.QDoubleValidator(self.widget())
 			self.pos_double_validator.setBottom(0.05)
-			self.prop_text = QtGui.QLineEdit()
+			self.prop_text = QtWidgets.QLineEdit()
 			self.prop_text.setValidator(self.pos_double_validator)
 			self.prop_text.setText(str(self.target().get_prop()))
 			self.prop_text.setFixedWidth(50)
 			self.hbl_sym.addWidget(self.prop_text)
 			
-			self.hbl_sym2 = QtGui.QHBoxLayout()
-			self.hbl_sym2.setMargin(0)
+			self.hbl_sym2 = QtWidgets.QHBoxLayout()
+			self.hbl_sym2.setContentsMargins(0, 0, 0, 0)
 			self.hbl_sym2.setSpacing(6)
 			self.hbl_sym2.setObjectName("Sym2")
 			maintab.vbl.addLayout(self.hbl_sym2)
 			
-			self.og_label = QtGui.QLabel()
+			self.og_label = QtWidgets.QLabel()
 			self.og_label.setText('Strategy')
 			self.hbl_sym2.addWidget(self.og_label)
 			
-			self.strategy_label = QtGui.QComboBox()
+			self.strategy_label = QtWidgets.QComboBox()
 			l = dump_orientgens_list()
 				
 			n = len(l)
@@ -1452,22 +1452,22 @@
 			self.strategy_label.setCurrentIndex(n-1)
 			self.hbl_sym2.addWidget(self.strategy_label)
 			
-			self.mirror_checkbox = QtGui.QCheckBox("Mirror")
+			self.mirror_checkbox = QtWidgets.QCheckBox("Mirror")
 			self.hbl_sym2.addWidget(self.mirror_checkbox)
 			self.mirror_checkbox.setChecked(self.target().mirror_enabled())
 		else:
-			self.mirror_checkbox = QtGui.QCheckBox("Mirror")
+			self.mirror_checkbox = QtWidgets.QCheckBox("Mirror")
 			self.hbl_sym.addWidget(self.mirror_checkbox)
 			self.mirror_checkbox.setChecked(self.target().mirror_enabled())
 			
-		QtCore.QObject.connect(self.sym_combo, QtCore.SIGNAL("currentIndexChanged(QString)"), self.sym_changed)
-		QtCore.QObject.connect(self.sym_text, QtCore.SIGNAL("editingFinished()"), self.sym_number_changed)
+		self.sym_combo.currentIndexChanged['QString'].connect(self.sym_changed)
+		self.sym_text.editingFinished.connect(self.sym_number_changed)
 
 		if enable_orient_gen:
-			QtCore.QObject.connect(self.prop_text, QtCore.SIGNAL("editingFinished()"), self.prop_changed)
-			QtCore.QObject.connect(self.angle_label, QtCore.SIGNAL("currentIndexChanged(QString)"), self.angle_label_changed)
-			QtCore.QObject.connect(self.strategy_label, QtCore.SIGNAL("currentIndexChanged(QString)"), self.strategy_changed)
-		QtCore.QObject.connect(self.mirror_checkbox, QtCore.SIGNAL("stateChanged(int)"), self.set_mirror)
+			self.prop_text.editingFinished.connect(self.prop_changed)
+			self.angle_label.currentIndexChanged['QString'].connect(self.angle_label_changed)
+			self.strategy_label.currentIndexChanged['QString'].connect(self.strategy_changed)
+		self.mirror_checkbox.stateChanged[int].connect(self.set_mirror)
 	
 		vbl.addWidget(maintab)
 		self.busy = False
@@ -1590,7 +1590,7 @@
 		
 		return d
 
-class EMSymChoiceDialog(QtGui.QDialog):
+class EMSymChoiceDialog(QtWidgets.QDialog):
 	'''
 	This is a dialog one can use to get the parameters you can use for 
 	generating orientations evenly covering the asymmetric unit (etc)
@@ -1601,12 +1601,12 @@
 		'''
 		@param sym some kind of symmetry, such as "d7", "icos" etc
 		'''
-		QtGui.QDialog.__init__(self)		
+		QtWidgets.QDialog.__init__(self)		
 		self.setWindowTitle("Choose Distribution Parameters")
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "eulerxplor.png"))
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
@@ -1620,10 +1620,10 @@
 
 		self.vbl.addWidget(self.sym_widget,10)
 		
-		self.button_hbl = QtGui.QHBoxLayout()
-		self.ok = QtGui.QPushButton("Ok")
+		self.button_hbl = QtWidgets.QHBoxLayout()
+		self.ok = QtWidgets.QPushButton("Ok")
 		self.ok.setDefault(True)
-		self.cancel = QtGui.QPushButton("Cancel")
+		self.cancel = QtWidgets.QPushButton("Cancel")
 		self.button_hbl.addWidget(self.cancel )
 		self.button_hbl.addWidget(self.ok )
 		self.vbl.addLayout(self.button_hbl)
@@ -1632,8 +1632,8 @@
 	
 		self.dialog_result = None
 	
-		QtCore.QObject.connect(self.ok, QtCore.SIGNAL("clicked(bool)"), self.on_ok)
-		QtCore.QObject.connect(self.cancel, QtCore.SIGNAL("clicked(bool)"), self.on_cancel)
+		self.ok.clicked[bool].connect(self.on_ok)
+		self.cancel.clicked[bool].connect(self.on_cancel)
 		
 
 		
@@ -1655,14 +1655,14 @@
 		Customized exec_ function
 		@return None if the user hit cancel or a dictionary containing important parameters if the user hit ok
 		'''
-		QtGui.QDialog.exec_(self)
+		QtWidgets.QDialog.exec_(self)
 		return self.dialog_result
 		
 	
-class EMSymInspector(QtGui.QWidget):
+class EMSymInspector(QtWidgets.QWidget):
 	def __init__(self,target,enable_trace=True,enable_og=True) :
 		self.busy = True
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "eulerxplor.png"))
 		self.target=weakref.ref(target)
 		
@@ -1670,8 +1670,8 @@
 		self.rotation_sliders = EMTransformPanel(self.target(),self)
 		self.enable_trace = enable_trace
 		self.enable_og = enable_og
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
@@ -1681,7 +1681,7 @@
 		self.add_symmetry_options()
 		self.n3_showing = False
 		
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.tabwidget.addTab(self.get_display_tab(), "Display")
 		self.tabwidget.addTab(self.get_transform_tab(), "Transform")
 		self.vbl.addWidget(self.tabwidget)
@@ -1712,21 +1712,21 @@
 			if self.score_options_hbl != None:
 				self.display_tab.vbl.removeItem(self.score_options_hbl)
 				self.score_options_hbl.deleteLater()
-				QtCore.QObject.disconnect(self.score_options,QtCore.SIGNAL("currentIndexChanged(int)"),self.score_option_changed)
+				self.score_options.currentIndexChanged[int].disconnect(self.score_option_changed)
 			return
 
 		if self.score_options_hbl == None:
-			self.score_options_hbl = QtGui.QHBoxLayout()
+			self.score_options_hbl = QtWidgets.QHBoxLayout()
 			self.score_options = self.__get_combo(options,default)
-			self.score_options_hbl.addWidget(QtGui.QLabel("Cylinder Score:",self))
+			self.score_options_hbl.addWidget(QtWidgets.QLabel("Cylinder Score:",self))
 			self.score_options_hbl.addWidget(self.score_options)
-			self.cylinder_log = QtGui.QCheckBox("log scale")
+			self.cylinder_log = QtWidgets.QCheckBox("log scale")
 			self.cylinder_log.setChecked(self.target().log_scale)
 			self.score_options_hbl.addWidget(self.cylinder_log)
 			self.display_tab.vbl.addLayout(self.score_options_hbl)
 			
-			QtCore.QObject.connect(self.score_options,QtCore.SIGNAL("currentIndexChanged(int)"),self.score_option_changed)
-			QtCore.QObject.connect(self.cylinder_log,QtCore.SIGNAL("stateChanged(int)"),self.cylinder_log_clicked)
+			self.score_options.currentIndexChanged[int].connect(self.score_option_changed)
+			self.cylinder_log.stateChanged[int].connect(self.cylinder_log_clicked)
 		else:
 			self.score_options.clear()
 			idx = 0
@@ -1772,8 +1772,8 @@
 		
 		
 	def get_transform_tab(self):
-		self.transform_tab = QtGui.QWidget()
-		self.transform_tab.vbl = QtGui.QVBoxLayout(self.transform_tab)
+		self.transform_tab = QtWidgets.QWidget()
+		self.transform_tab.vbl = QtWidgets.QVBoxLayout(self.transform_tab)
 		self.rotation_sliders.addWidgets(self.transform_tab.vbl)
 		
 		return self.transform_tab
@@ -1798,8 +1798,8 @@
 	
 	def get_display_tab(self):
 		
-		self.display_tab = QtGui.QWidget()
-		self.display_tab.vbl = QtGui.QVBoxLayout(self.display_tab)
+		self.display_tab = QtWidgets.QWidget()
+		self.display_tab.vbl = QtWidgets.QVBoxLayout(self.display_tab)
 				
 #		self.glcontrast = ValSlider(self.display_tab,(1.0,5.0),"GLShd:")
 #		self.glcontrast.setObjectName("GLShade")
@@ -1815,21 +1815,21 @@
 		keys = self.target().colors.keys()
 		keys.sort()
 		self.arc_color = self.__get_combo(keys,self.target().arc_color)
-		hbl1 = QtGui.QHBoxLayout()
-		hbl1.addWidget(QtGui.QLabel("Arc Color:",self))
+		hbl1 = QtWidgets.QHBoxLayout()
+		hbl1.addWidget(QtWidgets.QLabel("Arc Color:",self))
 		hbl1.addWidget(self.arc_color)
 		self.display_tab.vbl.addLayout(hbl1)
 		
 		self.tall_column_color = self.__get_combo(keys,self.target().tall_column_color)
-		hbl2 = QtGui.QHBoxLayout()
-		hbl2.addWidget(QtGui.QLabel("Higher Cylinder Color:",self))
+		hbl2 = QtWidgets.QHBoxLayout()
+		hbl2.addWidget(QtWidgets.QLabel("Higher Cylinder Color:",self))
 		hbl2.addWidget(self.tall_column_color)
 		self.display_tab.vbl.addLayout(hbl2)
 		
 		
 		self.small_column_color = self.__get_combo(keys,self.target().small_column_color)
-		hbl3 = QtGui.QHBoxLayout()
-		hbl3.addWidget(QtGui.QLabel("Lower Cylinder Color:",self))
+		hbl3 = QtWidgets.QHBoxLayout()
+		hbl3.addWidget(QtWidgets.QLabel("Lower Cylinder Color:",self))
 		hbl3.addWidget(self.small_column_color)
 		self.display_tab.vbl.addLayout(hbl3)
 		
@@ -1845,30 +1845,30 @@
 		self.arc_width_scale.setValue(self.target().arc_width_scale)
 		self.display_tab.vbl.addWidget(self.arc_width_scale)
 		
-		hbl_l = QtGui.QHBoxLayout()
-		arc_div_label = QtGui.QLabel("Arc Segments:")
+		hbl_l = QtWidgets.QHBoxLayout()
+		arc_div_label = QtWidgets.QLabel("Arc Segments:")
 		arc_div_label.setAlignment(Qt.AlignLeft|Qt.AlignVCenter)
 		hbl_l.addWidget(arc_div_label)
-		self.arc_divisions = QtGui.QSpinBox(self)
+		self.arc_divisions = QtWidgets.QSpinBox(self)
 		self.arc_divisions.setRange(1,1000)
 		self.arc_divisions.setValue(int(self.target().arc_segments))
 		hbl_l.addWidget(self.arc_divisions)
 		self.display_tab.vbl.addLayout(hbl_l)
 		
-		QtCore.QObject.connect(self.width_scale, QtCore.SIGNAL("valueChanged"), self.target().set_width_scale)
-		QtCore.QObject.connect(self.height_scale, QtCore.SIGNAL("valueChanged"), self.target().set_height_scale)
-		QtCore.QObject.connect(self.arc_width_scale, QtCore.SIGNAL("valueChanged"), self.target().set_arc_width_scale)
+		self.width_scale.valueChanged.connect(self.target().set_width_scale)
+		self.height_scale.valueChanged.connect(self.target().set_height_scale)
+		self.arc_width_scale.valueChanged.connect(self.target().set_arc_width_scale)
 #		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), self.target().set_GL_contrast)
 #		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), self.target().set_GL_brightness)
-		QtCore.QObject.connect(self.arc_color,QtCore.SIGNAL("currentIndexChanged(int)"),self.arc_color_changed)
-		QtCore.QObject.connect(self.small_column_color,QtCore.SIGNAL("currentIndexChanged(int)"),self.small_column_color_changed)
-		QtCore.QObject.connect(self.tall_column_color,QtCore.SIGNAL("currentIndexChanged(int)"),self.tall_column_color_changed)
-		QtCore.QObject.connect(self.arc_divisions, QtCore.SIGNAL("valueChanged(int)"), self.target().set_arc_segments)
+		self.arc_color.currentIndexChanged[int].connect(self.arc_color_changed)
+		self.small_column_color.currentIndexChanged[int].connect(self.small_column_color_changed)
+		self.tall_column_color.currentIndexChanged[int].connect(self.tall_column_color_changed)
+		self.arc_divisions.valueChanged[int].connect(self.target().set_arc_segments)
 		
 		return self.display_tab
 	
 	def __get_combo(self,keys,default):
-		combo = QtGui.QComboBox()
+		combo = QtWidgets.QComboBox()
 		idx = 0
 		for i,k in enumerate(keys): 
 			combo.addItem(k)
@@ -1881,48 +1881,48 @@
 		self.sparse_syms_widgets.add_symmetry_options(self.vbl,self.enable_og)
 
 		if self.enable_trace:		
-			self.hbl_pt = QtGui.QHBoxLayout()
-			self.hbl_pt.setMargin(0)
+			self.hbl_pt = QtWidgets.QHBoxLayout()
+			self.hbl_pt.setContentsMargins(0, 0, 0, 0)
 			self.hbl_pt.setSpacing(6)
 			self.hbl_pt.setObjectName("Ptl Trace")
 			
 			
-			self.tracetog = QtGui.QPushButton("Trace")
+			self.tracetog = QtWidgets.QPushButton("Trace")
 			self.tracetog.setCheckable(1)
 			self.tracetog.setChecked(0)
 			self.hbl_pt.addWidget(self.tracetog)
 			
-			self.tracefile = QtGui.QLineEdit()
+			self.tracefile = QtWidgets.QLineEdit()
 			self.tracefile.setText("filename.txt")
 			self.tracefile.setFixedWidth(100)
 			self.hbl_pt.addWidget(self.tracefile)
 			self.tracefile.setEnabled(False)
 			
-			self.pt_label = QtGui.QLabel()
+			self.pt_label = QtWidgets.QLabel()
 			self.pt_label.setText('Range')
 			self.hbl_pt.addWidget(self.pt_label)
 			
 			self.pos_int_validator2 = QtGui.QIntValidator(self)
 			self.pos_int_validator2.setBottom(0)
-			self.lowrange = QtGui.QLineEdit()
+			self.lowrange = QtWidgets.QLineEdit()
 			self.lowrange.setValidator(self.pos_int_validator2)
 			self.lowrange.setText("1")
 			self.lowrange.setFixedWidth(50)
 			self.hbl_pt.addWidget(self.lowrange)
 			self.lowrange.setEnabled(False)
 			
-			self.pt_label_to = QtGui.QLabel()
+			self.pt_label_to = QtWidgets.QLabel()
 			self.pt_label_to.setText('to')
 			self.hbl_pt.addWidget(self.pt_label_to)
 			
-			self.highrange = QtGui.QLineEdit()
+			self.highrange = QtWidgets.QLineEdit()
 			self.highrange.setValidator(self.pos_int_validator2)
 			self.highrange.setText("1")
 			self.highrange.setFixedWidth(50)
 			self.hbl_pt.addWidget(self.highrange)
 			self.highrange.setEnabled(False)
 			
-			self.reducetog = QtGui.QPushButton("Reduce")
+			self.reducetog = QtWidgets.QPushButton("Reduce")
 			self.reducetog.setCheckable(1)
 			self.reducetog.setChecked(0)
 			self.hbl_pt.addWidget(self.reducetog)
@@ -1930,11 +1930,11 @@
 			self.vbl.addLayout(self.hbl_pt)
 
 		if self.enable_trace:
-			QtCore.QObject.connect(self.tracetog, QtCore.SIGNAL("clicked(bool)"), self.toggle_trace)
-			QtCore.QObject.connect(self.reducetog, QtCore.SIGNAL("clicked(bool)"), self.target().reducetog)
-			QtCore.QObject.connect(self.lowrange, QtCore.SIGNAL("editingFinished()"), self.trace_update)
-			QtCore.QObject.connect(self.highrange, QtCore.SIGNAL("editingFinished()"), self.trace_update)
-			QtCore.QObject.connect(self.tracefile, QtCore.SIGNAL("editingFinished()"), self.trace_update)
+			self.tracetog.clicked[bool].connect(self.toggle_trace)
+			self.reducetog.clicked[bool].connect(self.target().reducetog)
+			self.lowrange.editingFinished.connect(self.trace_update)
+			self.highrange.editingFinished.connect(self.trace_update)
+			self.tracefile.editingFinished.connect(self.trace_update)
 
 		
 	def slider_rotate(self):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimage3dvol.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimage3dvol.py	2017-10-21 17:14:56.000000000 -0500
@@ -34,8 +34,8 @@
 
 
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
@@ -567,20 +567,20 @@
 		self.vdtools.set_update_P_inv()
 
 
-class EMVolumeInspector(QtGui.QWidget):
+class EMVolumeInspector(QtWidgets.QWidget):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"desktop.png"))
 		self.rotation_sliders = EMTransformPanel(target,self)
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
@@ -589,20 +589,20 @@
 		self.hist.setObjectName("hist")
 		self.hbl.addWidget(self.hist)
 		
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 	
-		self.cubetog = QtGui.QPushButton("Cube")
+		self.cubetog = QtWidgets.QPushButton("Cube")
 		self.cubetog.setCheckable(1)
 		self.vbl2.addWidget(self.cubetog)
 		
-		self.defaults = QtGui.QPushButton("Defaults")
+		self.defaults = QtWidgets.QPushButton("Defaults")
 		self.vbl2.addWidget(self.defaults)
 		
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		
 		self.tabwidget.addTab(self.get_main_tab(), "Main")
 		self.tabwidget.addTab(self.get_GL_tab(),"GL")
@@ -611,13 +611,13 @@
 		
 		self.n3_showing = False
 		
-		QtCore.QObject.connect(self.contrast, QtCore.SIGNAL("valueChanged"), target.set_contrast)
-		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), target.set_GL_contrast)
-		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), target.set_GL_brightness)
-		QtCore.QObject.connect(self.bright, QtCore.SIGNAL("valueChanged"), target.set_brightness)
-		QtCore.QObject.connect(self.cubetog, QtCore.SIGNAL("toggled(bool)"), target.toggle_cube)
-		QtCore.QObject.connect(self.defaults, QtCore.SIGNAL("clicked(bool)"), self.set_defaults)
-		QtCore.QObject.connect(self.smp, QtCore.SIGNAL("valueChanged(int)"), target.set_texture_sample)
+		self.contrast.valueChanged.connect(target.set_contrast)
+		self.glcontrast.valueChanged.connect(target.set_GL_contrast)
+		self.glbrightness.valueChanged.connect(target.set_GL_brightness)
+		self.bright.valueChanged.connect(target.set_brightness)
+		self.cubetog.toggled[bool].connect(target.toggle_cube)
+		self.defaults.clicked[bool].connect(self.set_defaults)
+		self.smp.valueChanged[int].connect(target.set_texture_sample)
 	
 	def update_rotations(self,t3d):
 		self.rotation_sliders.update_rotations(t3d)
@@ -635,11 +635,11 @@
 		return self.maintab.vbl
 	
 	def get_GL_tab(self):
-		self.gltab = QtGui.QWidget()
+		self.gltab = QtWidgets.QWidget()
 		gltab = self.gltab
 		
-		gltab.vbl = QtGui.QVBoxLayout(self.gltab )
-		gltab.vbl.setMargin(0)
+		gltab.vbl = QtWidgets.QVBoxLayout(self.gltab )
+		gltab.vbl.setContentsMargins(0, 0, 0, 0)
 		gltab.vbl.setSpacing(6)
 		gltab.vbl.setObjectName("Main")
 		
@@ -658,10 +658,10 @@
 	
 	def get_main_tab(self):
 	
-		self.maintab = QtGui.QWidget()
+		self.maintab = QtWidgets.QWidget()
 		maintab = self.maintab
-		maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-		maintab.vbl.setMargin(0)
+		maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+		maintab.vbl.setContentsMargins(0, 0, 0, 0)
 		maintab.vbl.setSpacing(6)
 		maintab.vbl.setObjectName("Main")
 			
@@ -676,17 +676,17 @@
 		self.bright.setValue(0.0)
 		maintab.vbl.addWidget(self.bright)
 
-		self.hbl_smp = QtGui.QHBoxLayout()
-		self.hbl_smp.setMargin(0)
+		self.hbl_smp = QtWidgets.QHBoxLayout()
+		self.hbl_smp.setContentsMargins(0, 0, 0, 0)
 		self.hbl_smp.setSpacing(6)
 		self.hbl_smp.setObjectName("Texture Oversampling")
 		maintab.vbl.addLayout(self.hbl_smp)
 		
-		self.smp_label = QtGui.QLabel()
+		self.smp_label = QtWidgets.QLabel()
 		self.smp_label.setText('Texture Oversampling')
 		self.hbl_smp.addWidget(self.smp_label)
 		
-		self.smp = QtGui.QSpinBox(maintab)
+		self.smp = QtWidgets.QSpinBox(maintab)
 		self.smp.setMaximum(10)
 		self.smp.setMinimum(1)
 		self.smp.setValue(1)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimagemx.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimagemx.py	2017-10-21 17:14:57.000000000 -0500
@@ -32,8 +32,8 @@
 #
 #
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
@@ -50,8 +50,8 @@
 from emimageutil import ImgHistogram, EMParentWin
 from weakref import WeakKeyDictionary
 from pickle import dumps,loads
-from PyQt4.QtGui import QImage
-from PyQt4.QtCore import QTimer
+from PyQt5.QtGui import QImage
+from PyQt5.QtCore import QTimer
 from libpyGLUtils2 import *
 
 from emglobjects import EMOpenGLFlagsAndTools,EMGLProjectionViewMatrices,EMBasicOpenGLObjects,init_glut
@@ -62,6 +62,8 @@
 from emapplication import EMProgressDialog
 
 
+QStringList = list
+
 class EMMatrixPanel:
 	'''
 	A class for managing the parameters of displaying a matrix panel
@@ -256,6 +258,15 @@
 		self.mouse_modes = ["App", "Del", "Drag", "Sets"]
 		self.mmode="App"
 		self.class_window = None # used if people are looking at class averages and they double click, in which case a second window is opened showing the particles in the class
+		setsChanged = QtCore.pyqtSignal()
+		mx_boxdeleted = QtCore.pyqtSignal()
+		set_scale = QtCore.pyqtSignal()
+		origin_update = QtCore.pyqtSignal()
+		mx_image_selected = QtCore.pyqtSignal()
+		mx_image_double = QtCore.pyqtSignal()
+		mx_mousedrag = QtCore.pyqtSignal()
+		mx_mouseup = QtCore.pyqtSignal()
+		set_origin = QtCore.pyqtSignal()
 		self.downbutton=None
 
 		self.sets={}			# All available sets for the current data, key is set name, value is set of ints
@@ -398,17 +409,17 @@
 		self.force_display_update()
 		if update: self.updateGL()
 
-		self.emit(QtCore.SIGNAL("setsChanged"))
+		self.setsChanged.emit()
 
 	def save_set(self,name):
 		"""Saves the particles in a named set to a file"""
 		outset=self.get_set(name)
 		if len(outset)==None :
-			QtGui.QMessageBox.warning(None,"Error","The set: %s is empty"%(name))
+			QtWidgets.QMessageBox.warning(None,"Error","The set: %s is empty"%(name))
 			return
 		
 		# Get the output filespec
-		fsp=QtGui.QFileDialog.getSaveFileName(self, "Image Output File")
+		fsp=QtWidgets.QFileDialog.getSaveFileName(self, "Image Output File")[0]
 		fsp=str(fsp)
 		
 		badimg=[]
@@ -417,9 +428,9 @@
 			except: badimg.append(i)
 
 		if len(badimg)>0 :
-			QtGui.QMessageBox.warning(None,"Error","Could not save images: %s"%(str(badimg)))
+			QtWidgets.QMessageBox.warning(None,"Error","Could not save images: %s"%(str(badimg)))
 		else:
-			QtGui.QMessageBox.information(None,"Save Succesful","%d images appended to %s"%(len(outset),fsp))
+			QtWidgets.QMessageBox.information(None,"Save Succesful","%d images appended to %s"%(len(outset),fsp))
 		
 
 	def get_set(self,name):
@@ -443,12 +454,12 @@
 		self.force_display_update()
 		if update: self.updateGL()
 
-		self.emit(QtCore.SIGNAL("setsChanged"))
+		self.setsChanged.emit()
 
 	def clear_sets(self,update=True):
 		"""This doesn't erase sets, it just hides"""
 		self.sets_visible={}
-		self.emit(QtCore.SIGNAL("setsChanged"))
+		self.setsChanged.emit()
 		self.force_display_update()
 		if update: self.updateGL()
 
@@ -460,7 +471,7 @@
 		except : self.sets_visible={}
 		if self.current_set==None : self.current_set=name
 
-		self.emit(QtCore.SIGNAL("setsChanged"))
+		self.setsChanged.emit()
 		self.force_display_update()
 		self.updateGL()
 
@@ -477,7 +488,7 @@
 			except: self.sets={}
 		else: self.sets={}
 		self.sets_visible={}
-		self.emit(QtCore.SIGNAL("setsChanged"))
+		self.setsChanged.emit()
 
 	def commit_sets(self):
 		"""this will store all of the current sets in the appropriate _info.json file, if available"""
@@ -625,9 +636,9 @@
 			if update_gl:
 				self.force_display_update()
 				self.updateGL()
-				if event != None: self.emit(QtCore.SIGNAL("mx_boxdeleted"),event,[idx],False)
+				if event != None: self.mx_boxdeleted.emit(event, [idx], False)
 		else:
-			self.emit(QtCore.SIGNAL("mx_boxdeleted"),event,[idx],False)
+			self.mx_boxdeleted.emit(event, [idx], False)
 
 
 	def get_box_image(self,idx):
@@ -857,7 +868,7 @@
 			nimg=sqrt(len(self.data))
 			x=self.data[0]["nx"]*sqrt(nimg)
 			y=self.data[0]["ny"]*sqrt(nimg)
-			xys=QtGui.QApplication.desktop().availableGeometry()
+			xys=QtWidgets.QApplication.desktop().availableGeometry()
 			mx=xys.width()*2/3
 			my=xys.height()*2/3
 			
@@ -927,7 +938,7 @@
 			self.draw_scroll = True
 			self.scroll_bar.update_target_ypos()
 
-		if self.emit_events: self.emit(QtCore.SIGNAL("set_scale"),self.scale,adjust,update_gl)
+		if self.emit_events: self.set_scale.emit(self.scale, adjust, update_gl)
 		if update_gl: self.updateGL()
 
 	def resize_event(self, width, height):
@@ -1552,7 +1563,7 @@
 		Overwrites existing data (the old file is removed)
 		'''
 
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 		msg.setWindowTitle("Woops")
 		if self.data==None or len(self.data)==0:
 			msg.setText("there is no data to save" %fsp)
@@ -1631,11 +1642,11 @@
 					i.write_image(i["source_path"],i["source_n"])
 #					print j,i["source_path"],i["source_n"]
 				except:
-					QtGui.QMessageBox.warning(None,"Error","Failed to save inverted image at: %s %d"%(i["source_path"],i["source_n"]))
+					QtWidgets.QMessageBox.warning(None,"Error","Failed to save inverted image at: %s %d"%(i["source_path"],i["source_n"]))
 					return
 
 
-			QtGui.QMessageBox.warning(None,"Images Saved","Images have been inverted on-disk")
+			QtWidgets.QMessageBox.warning(None,"Images Saved","Images have been inverted on-disk")
 			return
 
 		elif event.key()==Qt.Key_Up :
@@ -1657,7 +1668,7 @@
 		else:
 			return
 
-		if self.emit_events: self.emit(QtCore.SIGNAL("origin_update"),self.origin)
+		if self.emit_events: self.origin_update.emit(self.origin)
 
 	def check_newy(self,y):
 		newy = y
@@ -1676,7 +1687,7 @@
 #				print "select ",lc[0]
 				#print "setting selected"
 				self.set_selected([lc[0]],True)
-				self.emit(QtCore.SIGNAL("mx_image_selected"),event,lc)
+				self.mx_image_selected.emit(event, lc)
 			xians_stuff = False
 			if xians_stuff:
 				if lc[0] != None:
@@ -1698,17 +1709,17 @@
 			lc=self.scr_to_img((event.x(),event.y()))
 			if lc:
 #				print "dselect ",lc[0]
-				self.emit(QtCore.SIGNAL("mx_image_double"),event,lc)
+				self.mx_image_double.emit(event, lc)
 
 	def __app_mode_mouse_move(self, event):
 		if event.buttons()&Qt.LeftButton:
-			self.emit(QtCore.SIGNAL("mx_mousedrag"),event,self.get_scale())
+			self.mx_mousedrag.emit(event, self.get_scale())
 
 	def __app_mode_mouse_up(self,event):
 		if self.downbutton==Qt.LeftButton:
 			lc=self.scr_to_img((event.x(),event.y()))
 
-			self.emit(QtCore.SIGNAL("mx_mouseup"),event,lc)
+			self.mx_mouseup.emit(event, lc)
 
 			# disabled by stevel 2/17/2011 for external application flexibility
 			#if  not event.modifiers()&Qt.ShiftModifier:
@@ -1799,7 +1810,7 @@
 				except: idxse = []
 				name = d["class_ptcl_src"]
 				try:
-					progress = QtGui.QProgressDialog("Reading images from %s" %base_name(name), "Cancel", 0, len(idxs)+len(idxse),None)
+					progress = QtWidgets.QProgressDialog("Reading images from %s" %base_name(name), "Cancel", 0, len(idxs)+len(idxse),None)
 					progress.show()
 				except:
 					pass
@@ -1846,7 +1857,7 @@
 				resize_necessary = False
 				if self.class_window == None:
 					self.class_window = EMImageMXWidget()
-					QtCore.QObject.connect(self.class_window,QtCore.SIGNAL("module_closed"),self.on_class_window_closed)
+					self.class_window.module_closed.connect(self.on_class_window_closed)
 					resize_necessary = True
 
 				self.class_window.set_data(data,"Class Particles")
@@ -1926,7 +1937,7 @@
 
 			#self.origin=(self.origin[0]+self.mousedrag[0]-event.x(),self.origin[1]-self.mousedrag[1]+event.y())
 			self.origin=(self.matrix_panel.xoffset,newy)
-			if self.emit_events: self.emit(QtCore.SIGNAL("set_origin"),self.origin[0],self.origin[1],False)
+			if self.emit_events: self.set_origin.emit(self.origin[0], self.origin[1], False)
 			self.mousedrag=(event.x(),event.y())
 			try:self.updateGL()
 			except: pass
@@ -1955,9 +1966,9 @@
 
 	def wheelEvent(self, event):
 		if not self.data: return
-		if event.delta() > 0:
+		if event.angleDelta().y() > 0:
 			self.set_scale( self.scale * self.mag )
-		elif event.delta() < 0:
+		elif event.angleDelta().y() < 0:
 			self.set_scale(self.scale * self.invmag)
 		#self.resize_event(self.width(),self.height())
 		# The self.scale variable is updated now, so just update with that
@@ -2202,15 +2213,15 @@
 		self.down_arrow_color = self.scroll_bar_idle_color
 		self.target().updateGL()
 
-class EMImageInspectorMX(QtGui.QWidget):
+class EMImageInspectorMX(QtWidgets.QWidget):
 	def __init__(self,target, allow_opt_button=False):
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"multiple_images.png"))
 
 		self.target=weakref.ref(target)
 		self.busy = 1
-		self.vals = QtGui.QMenu()
-		self.valsbut = QtGui.QPushButton("Values")
+		self.vals = QtWidgets.QMenu()
+		self.valsbut = QtWidgets.QPushButton("Values")
 		self.valsbut.setMenu(self.vals)
 
 		self.update_vals()
@@ -2219,14 +2230,14 @@
 		action.setCheckable(1)
 		action.setChecked(1)
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(2)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(2, 2, 2, 2)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vboxlayout")
 
 
-		self.hbl3 = QtGui.QHBoxLayout()
-		self.hbl3.setMargin(0)
+		self.hbl3 = QtWidgets.QHBoxLayout()
+		self.hbl3.setContentsMargins(0, 0, 0, 0)
 		self.hbl3.setSpacing(6)
 		self.hbl3.setObjectName("hboxlayout")
 		self.vbl.addLayout(self.hbl3)
@@ -2235,20 +2246,20 @@
 		self.hist.setObjectName("hist")
 		self.hbl3.addWidget(self.hist)
 
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vboxlayout")
 		self.hbl3.addLayout(self.vbl2)
 
-		self.bsavedata = QtGui.QPushButton("Save")
+		self.bsavedata = QtWidgets.QPushButton("Save")
 		self.vbl2.addWidget(self.bsavedata)
 
 		if allow_opt_button:
-			self.opt_fit = QtGui.QPushButton("Opt. Fit")
+			self.opt_fit = QtWidgets.QPushButton("Opt. Fit")
 			self.vbl2.addWidget(self.opt_fit)
 
-		self.bsnapshot = QtGui.QPushButton("Snap")
+		self.bsnapshot = QtWidgets.QPushButton("Snap")
 		self.vbl2.addWidget(self.bsnapshot)
 		if get_platform() != "Linux":
 			self.bsnapshot.setEnabled(False)
@@ -2261,26 +2272,26 @@
 
 
 		# This shows the mouse mode buttons
-		self.hbl2 = QtGui.QHBoxLayout()
-		self.hbl2.setMargin(0)
+		self.hbl2 = QtWidgets.QHBoxLayout()
+		self.hbl2.setContentsMargins(0, 0, 0, 0)
 		self.hbl2.setSpacing(6)
 		self.hbl2.setObjectName("hboxlayout")
 		self.vbl.addLayout(self.hbl2)
 
-		self.mapp = QtGui.QPushButton("App")
+		self.mapp = QtWidgets.QPushButton("App")
 		self.mapp.setCheckable(1)
 		self.hbl2.addWidget(self.mapp)
 
-		self.mDel = QtGui.QPushButton("Del")
+		self.mDel = QtWidgets.QPushButton("Del")
 		self.mDel.setCheckable(1)
 		self.hbl2.addWidget(self.mDel)
 
-		self.mdrag = QtGui.QPushButton("Drag")
+		self.mdrag = QtWidgets.QPushButton("Drag")
 		self.mdrag.setCheckable(1)
 		self.hbl2.addWidget(self.mdrag)
 
 
-		self.mouse_mode_but_grp=QtGui.QButtonGroup()
+		self.mouse_mode_but_grp=QtWidgets.QButtonGroup()
 		self.mouse_mode_but_grp.setExclusive(1)
 		self.mouse_mode_but_grp.addButton(self.mapp)
 		self.mouse_mode_but_grp.addButton(self.mDel)
@@ -2290,8 +2301,8 @@
 		self.mapp.setChecked(True)
 
 
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hboxlayout")
 		self.vbl.addLayout(self.hbl)
@@ -2300,25 +2311,25 @@
 
 		self.xyz = None
 
-		self.font_label = QtGui.QLabel("font size:")
+		self.font_label = QtWidgets.QLabel("font size:")
 		self.font_label.setAlignment(Qt.AlignRight|Qt.AlignVCenter)
 		self.hbl.addWidget(self.font_label)
 
-		self.font_size = QtGui.QSpinBox()
+		self.font_size = QtWidgets.QSpinBox()
 		self.font_size.setObjectName("nrow")
 		self.font_size.setRange(1,50)
 		self.font_size.setValue(int(self.target().get_font_size()))
 		self.hbl.addWidget(self.font_size)
 
-		QtCore.QObject.connect(self.font_size, QtCore.SIGNAL("valueChanged(int)"), self.target().set_font_size)
+		self.font_size.valueChanged[int].connect(self.target().set_font_size)
 
 
-		self.banim = QtGui.QPushButton("Animate")
+		self.banim = QtWidgets.QPushButton("Animate")
 		self.banim.setCheckable(True)
 		self.banim.setChecked(self.target().animation_enabled)
 		self.hbl.addWidget(self.banim)
 
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 
 		self.tabwidget.addTab(self.get_image_manip_page(),"Main")
 
@@ -2334,19 +2345,19 @@
 
 		self.busy=0
 
-		QtCore.QObject.connect(self.vals, QtCore.SIGNAL("triggered(QAction*)"), self.newValDisp)
+		self.vals.triggered[QAction].connect(self.newValDisp)
 #		QtCore.QObject.connect(self.mapp, QtCore.SIGNAL("clicked(bool)"), self.set_app_mode)
 #		QtCore.QObject.connect(self.mDel, QtCore.SIGNAL("clicked(bool)"), self.set_Del_mode)
 #		QtCore.QObject.connect(self.mdrag, QtCore.SIGNAL("clicked(bool)"), self.set_drag_mode)
 #		QtCore.QObject.connect(self.mset, QtCore.SIGNAL("clicked(bool)"), self.set_set_mode)
-		QtCore.QObject.connect(self.mouse_mode_but_grp,QtCore.SIGNAL("buttonClicked(QAbstractButton *)"),self.mouse_mode_button_clicked)
+		self.mouse_mode_but_grp.buttonClicked[QAbstractButton].connect(self.mouse_mode_button_clicked)
 
-		QtCore.QObject.connect(self.bsavedata, QtCore.SIGNAL("clicked(bool)"), self.save_data)
+		self.bsavedata.clicked[bool].connect(self.save_data)
 		if allow_opt_button:
-			QtCore.QObject.connect(self.opt_fit, QtCore.SIGNAL("clicked(bool)"), self.target().optimize_fit)
-		QtCore.QObject.connect(self.bsnapshot, QtCore.SIGNAL("clicked(bool)"), self.snapShot)
+			self.opt_fit.clicked[bool].connect(self.target().optimize_fit)
+		self.bsnapshot.clicked[bool].connect(self.snapShot)
 		#QtCore.QObject.connect(self.bnorm, QtCore.SIGNAL("clicked(bool)"), self.setNorm)
-		QtCore.QObject.connect(self.banim, QtCore.SIGNAL("clicked(bool)"), self.animation_clicked)
+		self.banim.clicked[bool].connect(self.animation_clicked)
 	
 	def update_vals(self):
 		try:
@@ -2364,7 +2375,7 @@
 	def add_panel(self,widget,name):
 		self.tabwidget.addTab(widget,name)
 
-		button = QtGui.QPushButton(name)
+		button = QtWidgets.QPushButton(name)
 		button.setCheckable(1)
 		self.hbl2.addWidget(button)
 
@@ -2381,11 +2392,11 @@
 	def enable_xyz(self):
 
 		if self.xyz == None:
-			self.xyz = QtGui.QComboBox()
-			self.xyz.addItems(QtCore.QStringList(["x","y","z"]))
+			self.xyz = QtWidgets.QComboBox()
+			self.xyz.addItems(QStringList(["x","y","z"]))
 			self.hbl.addWidget(self.xyz)
 			self.xyz.setCurrentIndex(2)
-			QtCore.QObject.connect(self.xyz, QtCore.SIGNAL("currentIndexChanged(const QString&)"), self.target().xyz_changed)
+			self.xyz.currentIndexChanged['QString'].connect(self.target().xyz_changed)
 
 	def disable_xyz(self):
 		if self.xyz != None:
@@ -2397,9 +2408,9 @@
 		self.target().animation_enabled = bool
 
 	def get_image_manip_page(self):
-		self.impage = QtGui.QWidget()
-		vbl = QtGui.QVBoxLayout(self.impage )
-		vbl.setMargin(2)
+		self.impage = QtWidgets.QWidget()
+		vbl = QtWidgets.QVBoxLayout(self.impage )
+		vbl.setContentsMargins(2, 2, 2, 2)
 		vbl.setSpacing(6)
 		vbl.setObjectName("get_image_manip_page")
 
@@ -2439,12 +2450,12 @@
 		self.gammas.setValue(1.0)
 		vbl.addWidget(self.gammas)
 
-		QtCore.QObject.connect(self.scale, QtCore.SIGNAL("valueChanged"), self.target().set_scale)
-		QtCore.QObject.connect(self.mins, QtCore.SIGNAL("valueChanged"), self.newMin)
-		QtCore.QObject.connect(self.maxs, QtCore.SIGNAL("valueChanged"), self.newMax)
-		QtCore.QObject.connect(self.brts, QtCore.SIGNAL("valueChanged"), self.newBrt)
-		QtCore.QObject.connect(self.conts, QtCore.SIGNAL("valueChanged"), self.newCont)
-		QtCore.QObject.connect(self.gammas, QtCore.SIGNAL("valueChanged"), self.newGamma)
+		self.scale.valueChanged.connect(self.target().set_scale)
+		self.mins.valueChanged.connect(self.newMin)
+		self.maxs.valueChanged.connect(self.newMax)
+		self.brts.valueChanged.connect(self.newBrt)
+		self.conts.valueChanged.connect(self.newCont)
+		self.gammas.valueChanged.connect(self.newGamma)
 
 
 		return self.impage
@@ -2487,7 +2498,7 @@
 			#QtGui.QMessageBox.warning ( self, "Framebuffer ?", "Could not read framebuffer")
 
 		# Get the output filespec
-		fsp=QtGui.QFileDialog.getSaveFileName(self, "Select File")
+		fsp=QtWidgets.QFileDialog.getSaveFileName(self, "Select File")[0]
 		fsp=str(fsp)
 
 		qim.save(fsp,None,90)
@@ -2583,12 +2594,12 @@
 	def deleted_ptcls(self):
 		return self.deleted_idxs
 
-class EMMXSetsPanel(QtGui.QWidget):
+class EMMXSetsPanel(QtWidgets.QWidget):
 	'''
 	This is the set display panel
 	'''
 	def __init__(self,target):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 
 		self.target = weakref.ref(target) # this should be the EMImageMXWidget
 		self.busy = False
@@ -2597,28 +2608,28 @@
 		self.itemflags=	Qt.ItemFlags(Qt.ItemIsEditable)|Qt.ItemFlags(Qt.ItemIsSelectable)|Qt.ItemFlags(Qt.ItemIsEnabled)|Qt.ItemFlags(Qt.ItemIsUserCheckable)
 
 		# now build the interface
-		hbl = QtGui.QHBoxLayout(self)
-		self.setlist=QtGui.QListWidget()
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		hbl = QtWidgets.QHBoxLayout(self)
+		self.setlist=QtWidgets.QListWidget()
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		hbl.addWidget(self.setlist)
 
-		vbl = QtGui.QVBoxLayout()
+		vbl = QtWidgets.QVBoxLayout()
 
-		self.new_set_button = QtGui.QPushButton("New")
+		self.new_set_button = QtWidgets.QPushButton("New")
 		vbl.addWidget(self.new_set_button)
-		self.delete_set_button = QtGui.QPushButton("delete")
+		self.delete_set_button = QtWidgets.QPushButton("delete")
 		vbl.addWidget(self.delete_set_button)
-		self.save_set_button = QtGui.QPushButton("Save")
+		self.save_set_button = QtWidgets.QPushButton("Save")
 		vbl.addWidget(self.save_set_button)
 
 		hbl.addLayout(vbl)
 
-		QtCore.QObject.connect(self.save_set_button, QtCore.SIGNAL("clicked(bool)"), self.save_set)
-		QtCore.QObject.connect(self.new_set_button, QtCore.SIGNAL("clicked(bool)"), self.new_set)
-		QtCore.QObject.connect(self.delete_set_button, QtCore.SIGNAL("clicked(bool)"), self.delete_set)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.set_list_item_changed)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.set_list_row_changed)
-		QtCore.QObject.connect(self.target(),QtCore.SIGNAL("setsChanged"),self.sets_changed)
+		self.save_set_button.clicked[bool].connect(self.save_set)
+		self.new_set_button.clicked[bool].connect(self.new_set)
+		self.delete_set_button.clicked[bool].connect(self.delete_set)
+		self.setlist.itemChanged[QListWidgetItem].connect(self.set_list_item_changed)
+		self.setlist.currentRowChanged[int].connect(self.set_list_row_changed)
+		self.target().setsChanged.connect(self.sets_changed)
 
 
 	def sets_changed(self):
@@ -2650,7 +2661,7 @@
 
 
 	def new_set(self,unused=None):
-		name,ok=QtGui.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
+		name,ok=QtWidgets.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
 		if not ok : return
 		name=str(name)
 		if name in self.target().sets :
@@ -2670,7 +2681,7 @@
 		self.setlist.clear()
 
 		for i,k in enumerate(keys):
-			item=QtGui.QListWidgetItem(k)
+			item=QtWidgets.QListWidgetItem(k)
 			item.setFlags(self.itemflags)
 			item.setTextColor(self.target().setcolors[i%len(self.target().setcolors)])
 			self.setlist.addItem(item)
@@ -3181,7 +3192,7 @@
 		if refresh: self.__refresh_cache()
 
 	def __refresh_cache(self):
-		app = QtGui.QApplication.instance()
+		app = QtWidgets.QApplication.instance()
 		app.setOverrideCursor(Qt.BusyCursor)
 
 		try:
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emimageutil.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emimageutil.py	2017-10-21 17:14:57.000000000 -0500
@@ -31,8 +31,8 @@
 #
 #
 
-from PyQt4 import QtGui,QtCore
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from math import *
 import numpy
 from EMAN2 import *
@@ -48,32 +48,32 @@
 		self.target = weakref.ref(target)
 		self.parent = weakref.ref(parent)
 		
-		self.label_src = QtGui.QLabel(parent)
+		self.label_src = QtWidgets.QLabel(parent)
 		self.label_src.setText('Rotation Convention')
 		
-		self.src = QtGui.QComboBox(parent)
+		self.src = QtWidgets.QComboBox(parent)
 		self.load_src_options(self.src)
 		
-		self.x_label = QtGui.QLabel()
+		self.x_label = QtWidgets.QLabel()
 		self.x_label.setText('x')
 		
-		self.x_trans = QtGui.QDoubleSpinBox(parent)
+		self.x_trans = QtWidgets.QDoubleSpinBox(parent)
 		self.x_trans.setMinimum(-10000)
 		self.x_trans.setMaximum(10000)
 		self.x_trans.setValue(0.0)
 	
-		self.y_label = QtGui.QLabel()
+		self.y_label = QtWidgets.QLabel()
 		self.y_label.setText('y')
 		
-		self.y_trans = QtGui.QDoubleSpinBox(parent)
+		self.y_trans = QtWidgets.QDoubleSpinBox(parent)
 		self.y_trans.setMinimum(-10000)
 		self.y_trans.setMaximum(10000)
 		self.y_trans.setValue(0.0)
 		
-		self.z_label = QtGui.QLabel()
+		self.z_label = QtWidgets.QLabel()
 		self.z_label.setText('z')
 		
-		self.z_trans = QtGui.QDoubleSpinBox(parent)
+		self.z_trans = QtWidgets.QDoubleSpinBox(parent)
 		self.z_trans.setMinimum(-10000)
 		self.z_trans.setMaximum(10000)
 		self.z_trans.setValue(0.0)
@@ -98,14 +98,14 @@
 		
 		self.current_src = "eman"
 		
-		QtCore.QObject.connect(self.az, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
-		QtCore.QObject.connect(self.alt, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
-		QtCore.QObject.connect(self.phi, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
-		QtCore.QObject.connect(self.src, QtCore.SIGNAL("currentIndexChanged(QString)"), self.set_src)
-		QtCore.QObject.connect(self.scale, QtCore.SIGNAL("valueChanged"), self.target().set_scale)
-		QtCore.QObject.connect(self.x_trans, QtCore.SIGNAL("valueChanged(double)"), self.target().set_cam_x)
-		QtCore.QObject.connect(self.y_trans, QtCore.SIGNAL("valueChanged(double)"), self.target().set_cam_y)
-		QtCore.QObject.connect(self.z_trans, QtCore.SIGNAL("valueChanged(double)"), self.target().set_cam_z)
+		self.az.valueChanged.connect(self.slider_rotate)
+		self.alt.valueChanged.connect(self.slider_rotate)
+		self.phi.valueChanged.connect(self.slider_rotate)
+		self.src.currentIndexChanged['QString'].connect(self.set_src)
+		self.scale.valueChanged.connect(self.target().set_scale)
+		self.x_trans.valueChanged[double].connect(self.target().set_cam_x)
+		self.y_trans.valueChanged[double].connect(self.target().set_cam_y)
+		self.z_trans.valueChanged[double].connect(self.target().set_cam_z)
 		
 		
 	def set_defaults(self):
@@ -152,8 +152,8 @@
 	def addWidgets(self,target):
 		
 		target.addWidget(self.scale)
-		self.hbl_trans = QtGui.QHBoxLayout()
-		self.hbl_trans.setMargin(0)
+		self.hbl_trans = QtWidgets.QHBoxLayout()
+		self.hbl_trans.setContentsMargins(0, 0, 0, 0)
 		self.hbl_trans.setSpacing(6)
 		self.hbl_trans.setObjectName("Trans")
 		self.hbl_trans.addWidget(self.x_label)
@@ -165,8 +165,8 @@
 		
 		target.addLayout(self.hbl_trans)
 		
-		self.hbl_src = QtGui.QHBoxLayout()
-		self.hbl_src.setMargin(0)
+		self.hbl_src = QtWidgets.QHBoxLayout()
+		self.hbl_src.setContentsMargins(0, 0, 0, 0)
 		self.hbl_src.setSpacing(6)
 		self.hbl_src.setObjectName("hbl")
 		self.hbl_src.addWidget(self.label_src)
@@ -221,7 +221,7 @@
 			self.n3.setRange(-1,1)
 			self.n3.setObjectName("n3")
 			self.parent().get_transform_layout().addWidget(self.n3)
-			QtCore.QObject.connect(self.n3, QtCore.SIGNAL("valueChanged"), self.slider_rotate)
+			self.n3.valueChanged.connect(self.slider_rotate)
 			self.n3_showing = True
 		
 		self.current_src = self.src_map[str(val)]
@@ -273,7 +273,7 @@
 	
 import weakref
 
-class EMParentWin(QtGui.QWidget,Animator):
+class EMParentWin(QtWidgets.QWidget,Animator):
 	"""
 	This class adds a status bar with a size grip to QGLWidgets on Mac OS X, 
 	to provide a visual cue that the window can be resized. This is accomplished
@@ -288,22 +288,22 @@
 		@param enable_timer: not used... historical purposes???
 		"""
 		#TODO: figure out why the enable_timer parameter isn't being used
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		Animator.__init__(self)
 
 
 		self.setMaximumSize(8000,8000)
-		self.hbl = QtGui.QVBoxLayout(self)
+		self.hbl = QtWidgets.QVBoxLayout(self)
 		
 		self.hbl.setSpacing(0)
 		if get_platform() == "Darwin": # because OpenGL widgets in Qt don't leave room in the bottom right hand corner for the resize tool
-			self.status = QtGui.QStatusBar()
+			self.status = QtWidgets.QStatusBar()
 			self.status.setSizeGripEnabled(True)
 			self.hbl.addWidget(self.status,0)
 			self.margin = 0
 		else:
 			self.margin = 5
-		self.hbl.setMargin(self.margin)
+		self.hbl.setContentsMargins(self.margin, self.margin, self.margin, self.margin)
 		
 		
 	def __del__(self):
@@ -326,7 +326,7 @@
 			self.child().closeEvent(e)
 			#self.child.inspector.close()
 		except: pass
-		QtGui.QWidget.closeEvent(self,e)
+		QtWidgets.QWidget.closeEvent(self,e)
 		
 #	def resizeEvent(self,event):
 #		self.child().resizeEvent(event)
@@ -359,10 +359,12 @@
 	def initGL(self):
 		self.child().glInit()
 	
-class ImgHistogram(QtGui.QWidget):
+class ImgHistogram(QtWidgets.QWidget):
 	""" A small fixed-size histogram widget"""
+	thresholdChanged = QtCore.pyqtSignal(float)
+
 	def __init__(self,parent):
-		QtGui.QWidget.__init__(self,parent)
+		QtWidgets.QWidget.__init__(self,parent)
 		
 		self.brush=QtGui.QBrush(Qt.black)
 		self.font=QtGui.QFont("Helvetica", 12);
@@ -528,7 +530,7 @@
 			self.probe=(x,self.histdata[x])
 			self.threshold = (self.probe[0]/255.0*(self.maxden-self.minden)+self.minden)
 			if (self.volume == False):
-				self.emit(QtCore.SIGNAL("thresholdChanged(float)"), self.threshold)
+				self.thresholdChanged.emit(self.threshold)
 			self.update()
 		
 		if (event.button()==Qt.LeftButton) and (self.volume):
@@ -559,7 +561,7 @@
 			x=max(min(event.x()-1,255),0)
 			self.probe=(x,self.histdata[x])
 			self.threshold = (self.probe[0]/255.0*(self.maxden-self.minden)+self.minden)
-			self.emit(QtCore.SIGNAL("thresholdChanged(float)"), self.threshold)
+			self.thresholdChanged.emit(self.threshold)
 			self.update()
 		
 		if (Qt.LeftButton) and (self.volume):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emitem3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emitem3d.py	2017-10-21 17:14:57.000000000 -0500
@@ -32,7 +32,7 @@
 #
 
 from OpenGL import GL
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtGui, QtWidgets
 from EMAN2 import Transform, Vec4f, Vec3f
 from libpyGLUtils2 import GLUtil
 from valslider import ValSlider, EMSpinWidget
@@ -81,53 +81,53 @@
 		"""
 		font = QtGui.QFont()
 		font.setBold(True)
-		translatelabel = QtGui.QLabel("Translation")
+		translatelabel = QtWidgets.QLabel("Translation")
 		translatelabel.setFont(font)
 		translatelabel.setAlignment(QtCore.Qt.AlignCenter)
 		layout.addWidget(translatelabel, idx, 0, 1, 4)
-		txlabel = QtGui.QLabel("Tx")
-		tylabel = QtGui.QLabel("Ty")
+		txlabel = QtWidgets.QLabel("Tx")
+		tylabel = QtWidgets.QLabel("Ty")
 		txlabel.setAlignment(QtCore.Qt.AlignRight)
 		tylabel.setAlignment(QtCore.Qt.AlignRight)
-		attribdict["tx"] = QtGui.QLineEdit("0.0")
-		attribdict["ty"] = QtGui.QLineEdit("0.0")
+		attribdict["tx"] = QtWidgets.QLineEdit("0.0")
+		attribdict["ty"] = QtWidgets.QLineEdit("0.0")
 		attribdict["tx"].setMinimumWidth(100.0)
 		attribdict["ty"].setMinimumWidth(100.0)
 		layout.addWidget(txlabel, idx+1, 0, 1, 1)
 		layout.addWidget(attribdict["tx"], idx+1, 1, 1, 1)
 		layout.addWidget(tylabel, idx+1, 2, 1, 1)
 		layout.addWidget(attribdict["ty"], idx+1, 3, 1, 1)
-		tzlabel = QtGui.QLabel("Tz")
-		zoomlabel = QtGui.QLabel("Zm")
+		tzlabel = QtWidgets.QLabel("Tz")
+		zoomlabel = QtWidgets.QLabel("Zm")
 		tylabel.setAlignment(QtCore.Qt.AlignRight)
 		zoomlabel.setAlignment(QtCore.Qt.AlignRight)
-		attribdict["tz"] = QtGui.QLineEdit("0.0")
-		attribdict["zoom"] = QtGui.QLineEdit("1.0")
+		attribdict["tz"] = QtWidgets.QLineEdit("0.0")
+		attribdict["zoom"] = QtWidgets.QLineEdit("1.0")
 		attribdict["tz"].setMinimumWidth(100.0)
 		attribdict["zoom"].setMinimumWidth(100.0)
 		layout.addWidget(tzlabel, idx+2, 0, 1, 1)
 		layout.addWidget(attribdict["tz"], idx+2, 1, 1, 1)
 		layout.addWidget(zoomlabel, idx+2, 2, 1, 1)
 		layout.addWidget(attribdict["zoom"], idx+2, 3, 1, 1)
-		rotatelabel = QtGui.QLabel("EMAN Rotation")
+		rotatelabel = QtWidgets.QLabel("EMAN Rotation")
 		rotatelabel.setFont(font)
 		rotatelabel.setAlignment(QtCore.Qt.AlignCenter)
 		layout.addWidget(rotatelabel, idx+3, 0, 1, 4)
-		azlabel = QtGui.QLabel("Az")
+		azlabel = QtWidgets.QLabel("Az")
 		azlabel.setAlignment(QtCore.Qt.AlignRight)
-		attribdict["az"] = QtGui.QLineEdit("0.0")
-		altlabel = QtGui.QLabel("Alt")
+		attribdict["az"] = QtWidgets.QLineEdit("0.0")
+		altlabel = QtWidgets.QLabel("Alt")
 		altlabel.setAlignment(QtCore.Qt.AlignRight)
-		attribdict["alt"] = QtGui.QLineEdit("0.0")
+		attribdict["alt"] = QtWidgets.QLineEdit("0.0")
 		attribdict["az"] .setMinimumWidth(100.0)
 		attribdict["alt"].setMinimumWidth(100.0)
 		layout.addWidget(azlabel, idx+4, 0, 1, 1)
 		layout.addWidget(attribdict["az"], idx+4, 1, 1, 1)
 		layout.addWidget(altlabel, idx+4, 2, 1, 1)
 		layout.addWidget(attribdict["alt"], idx+4, 3, 1, 1)
-		philabel = QtGui.QLabel("Phi")
+		philabel = QtWidgets.QLabel("Phi")
 		philabel.setAlignment(QtCore.Qt.AlignRight)
-		attribdict["phi"] = QtGui.QLineEdit("0.0")
+		attribdict["phi"] = QtWidgets.QLineEdit("0.0")
 		layout.addWidget(philabel, idx+5, 0, 1, 1)
 		layout.addWidget(attribdict["phi"], idx+5, 1, 1, 1)
 	
@@ -141,10 +141,10 @@
 		"""
 		Get Data Widget
 		"""
-		nodewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_label = QtGui.QLabel("Node Name")
-		attribdict["node_name"] = QtGui.QLineEdit()
+		nodewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_label = QtWidgets.QLabel("Node Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit()
 		grid.addWidget(node_name_label , 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 2, attribdict)
@@ -511,12 +511,12 @@
 	def mouseReleaseEvent(self, event): pass
 	def wheelEvent(self, event): pass
 		
-class EMItem3DInspector(QtGui.QTabWidget):
+class EMItem3DInspector(QtWidgets.QTabWidget):
 	"""
 	Class to make the EMItem GUI controls
 	"""
 	def __init__(self, name, item3d):
-		QtGui.QTabWidget.__init__(self)
+		QtWidgets.QTabWidget.__init__(self)
 		self.item3d = weakref.ref(item3d)
 		self.name = name
 		self.inspector = None
@@ -530,8 +530,8 @@
 		
 	def addTabs(self):
 		""" Add a tab for each 'column' """
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		
 		EMItem3DInspector.addControls(self, gridbox)
 		
@@ -543,53 +543,53 @@
 		# selection box and label
 		font = QtGui.QFont()
 		font.setBold(True)
-		label = QtGui.QLabel(self.name,self)
+		label = QtWidgets.QLabel(self.name,self)
 		label.setFont(font)
 		label.setAlignment(QtCore.Qt.AlignCenter)
 		gridbox.addWidget(label, 0, 0, 1, 1)
-		databox = QtGui.QHBoxLayout()
+		databox = QtWidgets.QHBoxLayout()
 		self.boundingbox = None
 		if self.item3d().boundingboxsize:
-			self.boundingbox = QtGui.QLabel("Size: "+self.item3d().boundingboxsize,self)
+			self.boundingbox = QtWidgets.QLabel("Size: "+self.item3d().boundingboxsize,self)
 			databox.addWidget(self.boundingbox)
 		gridbox.addLayout(databox, 1, 0, 1, 1)
 		# angluar controls
-		xformframe = QtGui.QFrame()
-		xformframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		xformbox = QtGui.QGridLayout()
-		xformlabel = QtGui.QLabel("Transformation", xformframe)
+		xformframe = QtWidgets.QFrame()
+		xformframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		xformbox = QtWidgets.QGridLayout()
+		xformlabel = QtWidgets.QLabel("Transformation", xformframe)
 		xformlabel.setFont(font)
 		xformlabel.setAlignment(QtCore.Qt.AlignCenter)
 		xformbox.addWidget(xformlabel, 0, 0, 1, 2)
 		# Rotations
-		self.rotcombobox = QtGui.QComboBox()
+		self.rotcombobox = QtWidgets.QComboBox()
 		xformbox.addWidget(self.rotcombobox, 1, 0, 1, 2)
-		self.rotstackedwidget = QtGui.QStackedWidget()
+		self.rotstackedwidget = QtWidgets.QStackedWidget()
 		self.addRotationWidgets()
 		xformbox.addWidget(self.rotstackedwidget, 2, 0, 1, 2)
 		#translations
-		txlabel = QtGui.QLabel("TX",xformframe)
+		txlabel = QtWidgets.QLabel("TX",xformframe)
 		txlabel.setAlignment(QtCore.Qt.AlignCenter)
 		xformbox.addWidget(txlabel, 3, 0, 1, 1)
-		tylabel = QtGui.QLabel("TY",xformframe)
+		tylabel = QtWidgets.QLabel("TY",xformframe)
 		tylabel.setAlignment(QtCore.Qt.AlignCenter)
 		xformbox.addWidget(tylabel, 3, 1, 1, 1)
 		self.tx = EMSpinWidget(0.0, 1.0)
 		self.ty = EMSpinWidget(0.0, 1.0)
 		xformbox.addWidget(self.tx, 4, 0, 1, 1)
 		xformbox.addWidget(self.ty, 4, 1, 1, 1)
-		tzlabel = QtGui.QLabel("TZ",xformframe)
+		tzlabel = QtWidgets.QLabel("TZ",xformframe)
 		tzlabel.setAlignment(QtCore.Qt.AlignCenter)
 		xformbox.addWidget(tzlabel, 5, 0, 1, 1)
-		zoomlabel = QtGui.QLabel("Zoom",xformframe)
+		zoomlabel = QtWidgets.QLabel("Zoom",xformframe)
 		zoomlabel.setAlignment(QtCore.Qt.AlignCenter)
 		xformbox.addWidget(zoomlabel, 5, 1, 1, 1)
 		self.tz = EMSpinWidget(0.0, 1.0)
 		self.zoom = EMSpinWidget(1.0, 0.1, postivemode=True, wheelstep=0.1)
 		xformbox.addWidget(self.tz, 6, 0, 1, 1)
 		xformbox.addWidget(self.zoom, 6, 1, 1, 1)
-		self.resetbuttontx = QtGui.QPushButton("Reset Tx")
-		self.resetbuttonrot = QtGui.QPushButton("Reset Rot")
+		self.resetbuttontx = QtWidgets.QPushButton("Reset Tx")
+		self.resetbuttonrot = QtWidgets.QPushButton("Reset Rot")
 		xformbox.addWidget(self.resetbuttontx, 7, 0, 1, 1)
 		xformbox.addWidget(self.resetbuttonrot, 7, 1, 1, 1)
 		xformframe.setLayout(xformbox)
@@ -602,12 +602,12 @@
 		# set to default, but run only as a base class
 		if type(self) == EMItem3DInspector: self.updateItemControls()
 		
-		QtCore.QObject.connect(self.tx,QtCore.SIGNAL("valueChanged(int)"),self._on_translation)
-		QtCore.QObject.connect(self.ty,QtCore.SIGNAL("valueChanged(int)"),self._on_translation)
-		QtCore.QObject.connect(self.tz,QtCore.SIGNAL("valueChanged(int)"),self._on_translation)
-		QtCore.QObject.connect(self.zoom,QtCore.SIGNAL("valueChanged(int)"),self._on_scale)
-		QtCore.QObject.connect(self.resetbuttontx,QtCore.SIGNAL("clicked()"),self._on_resettx)
-		QtCore.QObject.connect(self.resetbuttonrot,QtCore.SIGNAL("clicked()"),self._on_resetrot)
+		self.tx.valueChanged[int].connect(self._on_translation)
+		self.ty.valueChanged[int].connect(self._on_translation)
+		self.tz.valueChanged[int].connect(self._on_translation)
+		self.zoom.valueChanged[int].connect(self._on_scale)
+		self.resetbuttontx.clicked.connect(self._on_resettx)
+		self.resetbuttonrot.clicked.connect(self._on_resetrot)
 	
 	def _on_translation(self, value):
 		"""
@@ -730,16 +730,16 @@
 		
 	def addRotationWidgets(self):
 		""" Add alll the widgets for the various EMAN2 rotation conventions """
-		EMANwidget = QtGui.QWidget()
-		Imagicwidget = QtGui.QWidget()
-		Spiderwidget = QtGui.QWidget()
-		MRCwidget = QtGui.QWidget()
-		XYZwidget = QtGui.QWidget()
-		spinwidget = QtGui.QWidget()
-		sgirotwidget = QtGui.QWidget()
-		quaternionwidget = QtGui.QWidget()
+		EMANwidget = QtWidgets.QWidget()
+		Imagicwidget = QtWidgets.QWidget()
+		Spiderwidget = QtWidgets.QWidget()
+		MRCwidget = QtWidgets.QWidget()
+		XYZwidget = QtWidgets.QWidget()
+		spinwidget = QtWidgets.QWidget()
+		sgirotwidget = QtWidgets.QWidget()
+		quaternionwidget = QtWidgets.QWidget()
 		# EMAN
-		emanbox = QtGui.QVBoxLayout()
+		emanbox = QtWidgets.QVBoxLayout()
 		self.emanazslider = ValSlider(EMANwidget, (0.0, 360.0), "  Az", rounding = 1)
 		self.emanaltslider = ValSlider(EMANwidget, (0.0, 180.0), "Alt", rounding = 1)
 		self.emanphislider = ValSlider(EMANwidget, (0.0, 360.0), "Phi", rounding = 1)
@@ -748,7 +748,7 @@
 		emanbox.addWidget(self.emanphislider)
 		EMANwidget.setLayout(emanbox)
 		# Imagic
-		imagicbox = QtGui.QVBoxLayout()
+		imagicbox = QtWidgets.QVBoxLayout()
 		self.imagicgammaslider = ValSlider(Imagicwidget, (0.0, 360.0), "Gamma", rounding = 1)
 		self.imagicbetaslider = ValSlider(Imagicwidget, (0.0, 180.0), "     Beta", rounding = 1)
 		self.imagicalphaslider = ValSlider(Imagicwidget, (0.0, 360.0), "   Alpha", rounding = 1)
@@ -757,7 +757,7 @@
 		imagicbox.addWidget(self.imagicalphaslider)
 		Imagicwidget.setLayout(imagicbox)
 		# Spider
-		spiderbox = QtGui.QVBoxLayout()
+		spiderbox = QtWidgets.QVBoxLayout()
 		self.spiderpsislider = ValSlider(Spiderwidget, (0.0, 360.0), "   Psi", rounding = 1)
 		self.spiderthetaslider = ValSlider(Spiderwidget, (0.0, 180.0), "Theta", rounding = 1)
 		self.spiderphislider = ValSlider(Spiderwidget, (0.0, 360.0), "   Phi", rounding = 1)
@@ -766,7 +766,7 @@
 		spiderbox.addWidget(self.spiderphislider)
 		Spiderwidget.setLayout(spiderbox)
 		# MRC
-		mrcbox = QtGui.QVBoxLayout()
+		mrcbox = QtWidgets.QVBoxLayout()
 		self.mrcpsislider = ValSlider(MRCwidget, (0.0, 360.0), "      Psi", rounding = 1)
 		self.mrcthetaslider = ValSlider(MRCwidget, (0.0, 180.0), "  Theta", rounding = 1)
 		self.mrcomegaslider = ValSlider(MRCwidget, (0.0, 360.0), "Omega", rounding = 1)
@@ -775,7 +775,7 @@
 		mrcbox.addWidget(self.mrcomegaslider)
 		MRCwidget.setLayout(mrcbox)
 		# XYZ
-		xyzbox = QtGui.QVBoxLayout()
+		xyzbox = QtWidgets.QVBoxLayout()
 		self.xyzzslider = ValSlider(XYZwidget, (0.0, 360.0), "Z", rounding = 1)
 		self.xyzyslider = ValSlider(XYZwidget, (0.0, 180.0), "Y", rounding = 1)
 		self.xyzxslider = ValSlider(XYZwidget, (0.0, 360.0), "X", rounding = 1)
@@ -784,7 +784,7 @@
 		xyzbox.addWidget(self.xyzxslider)
 		XYZwidget.setLayout(xyzbox)
 		# spin
-		spinbox = QtGui.QVBoxLayout()
+		spinbox = QtWidgets.QVBoxLayout()
 		self.spinomegaslider = ValSlider(spinwidget, (0.0, 180.0), "Omega", rounding = 1)
 		self.spinn1slider = ValSlider(spinwidget, (0.0, 1.0), "       N1", rounding = 4)
 		self.spinn2slider = ValSlider(spinwidget, (0.0, 1.0), "       N2", rounding = 4)
@@ -795,7 +795,7 @@
 		spinbox.addWidget(self.spinn3slider)
 		spinwidget.setLayout(spinbox)
 		# sgirot
-		sgirotbox = QtGui.QVBoxLayout()
+		sgirotbox = QtWidgets.QVBoxLayout()
 		self.sgirotqslider = ValSlider(sgirotwidget, (0.0, 180.0), " Q", rounding = 1)
 		self.sgirotn1slider = ValSlider(sgirotwidget, (0.0, 1.0), "N1", rounding = 4)
 		self.sgirotn2slider = ValSlider(sgirotwidget, (0.0, 1.0), "N2", rounding = 4)
@@ -806,7 +806,7 @@
 		sgirotbox.addWidget(self.sgirotn3slider)
 		sgirotwidget.setLayout(sgirotbox)
 		# quaternion
-		quaternionbox = QtGui.QVBoxLayout()
+		quaternionbox = QtWidgets.QVBoxLayout()
 		self.quaternione0slider = ValSlider(quaternionwidget, (0.0, 1.0), "E0", rounding = 4)
 		self.quaternione1slider = ValSlider(quaternionwidget, (0.0, 1.0), "E1", rounding = 4)
 		self.quaternione2slider = ValSlider(quaternionwidget, (0.0, 1.0), "E2", rounding = 4)
@@ -836,34 +836,34 @@
 		self.rotcombobox.addItem("quaternion")
 	
 		# Signal for all sliders
-		QtCore.QObject.connect(self.rotcombobox, QtCore.SIGNAL("activated(int)"), self._rotcombobox_changed)
-		QtCore.QObject.connect(self.emanazslider,QtCore.SIGNAL("valueChanged"),self._on_EMAN_rotation)
-		QtCore.QObject.connect(self.emanaltslider,QtCore.SIGNAL("valueChanged"),self._on_EMAN_rotation)
-		QtCore.QObject.connect(self.emanphislider,QtCore.SIGNAL("valueChanged"),self._on_EMAN_rotation)
-		QtCore.QObject.connect(self.imagicgammaslider,QtCore.SIGNAL("valueChanged"),self._on_Imagic_rotation)
-		QtCore.QObject.connect(self.imagicbetaslider,QtCore.SIGNAL("valueChanged"),self._on_Imagic_rotation)
-		QtCore.QObject.connect(self.imagicalphaslider,QtCore.SIGNAL("valueChanged"),self._on_Imagic_rotation)
-		QtCore.QObject.connect(self.spiderpsislider,QtCore.SIGNAL("valueChanged"),self._on_Spider_rotation)
-		QtCore.QObject.connect(self.spiderthetaslider,QtCore.SIGNAL("valueChanged"),self._on_Spider_rotation)
-		QtCore.QObject.connect(self.spiderphislider,QtCore.SIGNAL("valueChanged"),self._on_Spider_rotation)
-		QtCore.QObject.connect(self.mrcpsislider,QtCore.SIGNAL("valueChanged"),self._on_MRC_rotation)
-		QtCore.QObject.connect(self.mrcthetaslider,QtCore.SIGNAL("valueChanged"),self._on_MRC_rotation)
-		QtCore.QObject.connect(self.mrcomegaslider,QtCore.SIGNAL("valueChanged"),self._on_MRC_rotation)
-		QtCore.QObject.connect(self.xyzzslider,QtCore.SIGNAL("valueChanged"),self._on_XYZ_rotation)
-		QtCore.QObject.connect(self.xyzyslider,QtCore.SIGNAL("valueChanged"),self._on_XYZ_rotation)
-		QtCore.QObject.connect(self.xyzxslider,QtCore.SIGNAL("valueChanged"),self._on_XYZ_rotation)
-		QtCore.QObject.connect(self.spinomegaslider,QtCore.SIGNAL("valueChanged"),self._on_spin_rotation)
-		QtCore.QObject.connect(self.spinn1slider,QtCore.SIGNAL("valueChanged"),self._on_spin_rotation)
-		QtCore.QObject.connect(self.spinn2slider,QtCore.SIGNAL("valueChanged"),self._on_spin_rotation)
-		QtCore.QObject.connect(self.spinn3slider,QtCore.SIGNAL("valueChanged"),self._on_spin_rotation)
-		QtCore.QObject.connect(self.sgirotqslider,QtCore.SIGNAL("valueChanged"),self._on_sgirot_rotation)
-		QtCore.QObject.connect(self.sgirotn1slider,QtCore.SIGNAL("valueChanged"),self._on_sgirot_rotation)
-		QtCore.QObject.connect(self.sgirotn2slider,QtCore.SIGNAL("valueChanged"),self._on_sgirot_rotation)
-		QtCore.QObject.connect(self.sgirotn3slider,QtCore.SIGNAL("valueChanged"),self._on_sgirot_rotation)
-		QtCore.QObject.connect(self.quaternione0slider,QtCore.SIGNAL("valueChanged"),self._on_quaternion_rotation)
-		QtCore.QObject.connect(self.quaternione1slider,QtCore.SIGNAL("valueChanged"),self._on_quaternion_rotation)
-		QtCore.QObject.connect(self.quaternione2slider,QtCore.SIGNAL("valueChanged"),self._on_quaternion_rotation)
-		QtCore.QObject.connect(self.quaternione3slider,QtCore.SIGNAL("valueChanged"),self._on_quaternion_rotation)	
+		self.rotcombobox.activated[int].connect(self._rotcombobox_changed)
+		self.emanazslider.valueChanged.connect(self._on_EMAN_rotation)
+		self.emanaltslider.valueChanged.connect(self._on_EMAN_rotation)
+		self.emanphislider.valueChanged.connect(self._on_EMAN_rotation)
+		self.imagicgammaslider.valueChanged.connect(self._on_Imagic_rotation)
+		self.imagicbetaslider.valueChanged.connect(self._on_Imagic_rotation)
+		self.imagicalphaslider.valueChanged.connect(self._on_Imagic_rotation)
+		self.spiderpsislider.valueChanged.connect(self._on_Spider_rotation)
+		self.spiderthetaslider.valueChanged.connect(self._on_Spider_rotation)
+		self.spiderphislider.valueChanged.connect(self._on_Spider_rotation)
+		self.mrcpsislider.valueChanged.connect(self._on_MRC_rotation)
+		self.mrcthetaslider.valueChanged.connect(self._on_MRC_rotation)
+		self.mrcomegaslider.valueChanged.connect(self._on_MRC_rotation)
+		self.xyzzslider.valueChanged.connect(self._on_XYZ_rotation)
+		self.xyzyslider.valueChanged.connect(self._on_XYZ_rotation)
+		self.xyzxslider.valueChanged.connect(self._on_XYZ_rotation)
+		self.spinomegaslider.valueChanged.connect(self._on_spin_rotation)
+		self.spinn1slider.valueChanged.connect(self._on_spin_rotation)
+		self.spinn2slider.valueChanged.connect(self._on_spin_rotation)
+		self.spinn3slider.valueChanged.connect(self._on_spin_rotation)
+		self.sgirotqslider.valueChanged.connect(self._on_sgirot_rotation)
+		self.sgirotn1slider.valueChanged.connect(self._on_sgirot_rotation)
+		self.sgirotn2slider.valueChanged.connect(self._on_sgirot_rotation)
+		self.sgirotn3slider.valueChanged.connect(self._on_sgirot_rotation)
+		self.quaternione0slider.valueChanged.connect(self._on_quaternion_rotation)
+		self.quaternione1slider.valueChanged.connect(self._on_quaternion_rotation)
+		self.quaternione2slider.valueChanged.connect(self._on_quaternion_rotation)
+		self.quaternione3slider.valueChanged.connect(self._on_quaternion_rotation)
 		
 	def _rotcombobox_changed(self, idx):
 		self.rotstackedwidget.setCurrentIndex(idx)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emlights.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emlights.py	2017-10-21 17:14:57.000000000 -0500
@@ -38,8 +38,8 @@
 from OpenGL.GL import *
 from OpenGL.GLU import *
 from OpenGL.GLUT import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from emglobjects import Camera2, get_default_gl_colors, EMViewportDepthTools2, get_RGB_tab, get_gl_lights_vector, init_glut, EM3DModel
 from emimageutil import EMTransformPanel # for EMLightsInspector
 from math import *
@@ -813,24 +813,24 @@
 		self.target().updateGL()
 		
 	def get_light_tab(self):
-		self.light_tab = QtGui.QWidget()
+		self.light_tab = QtWidgets.QWidget()
 		light_tab = self.light_tab
 		
-		vbl = QtGui.QVBoxLayout(self.light_tab )
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout(self.light_tab )
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.setObjectName("Lights")
 		
-		self.light_manip_check = QtGui.QCheckBox("Mouse moves lights")
-		self.local_viewer_check = QtGui.QCheckBox("Local light model")
+		self.light_manip_check = QtWidgets.QCheckBox("Mouse moves lights")
+		self.local_viewer_check = QtWidgets.QCheckBox("Local light model")
 		self.local_viewer_check.setChecked(glGetInteger(GL_LIGHT_MODEL_LOCAL_VIEWER))
-		show_lights = QtGui.QCheckBox("Show lights")
+		show_lights = QtWidgets.QCheckBox("Show lights")
 		show_lights.setChecked(self.target().display_lights)
-		max_lights_label = QtGui.QLabel()
+		max_lights_label = QtWidgets.QLabel()
 		max_lights_label.setText("Max lights : " + str(glGetInteger(GL_MAX_LIGHTS)))
 		
-		hdl_l = QtGui.QHBoxLayout()
-		hdl_t = QtGui.QHBoxLayout()
+		hdl_l = QtWidgets.QHBoxLayout()
+		hdl_t = QtWidgets.QHBoxLayout()
 		
 		hdl_l.addWidget(self.light_manip_check)
 		hdl_l.addWidget(self.local_viewer_check)
@@ -840,7 +840,7 @@
 		vbl.addLayout(hdl_l)
 		vbl.addLayout(hdl_t)
 		
-		self.light_tab_widget = QtGui.QTabWidget()
+		self.light_tab_widget = QtWidgets.QTabWidget()
 		
 		
 		self.light_tab_widget.addTab(self.get_directional_light_tab(), "Directional")
@@ -848,7 +848,7 @@
 		
 		vbl.addWidget(self.light_tab_widget)
 		
-		light_material_tab_widget = QtGui.QTabWidget()
+		light_material_tab_widget = QtWidgets.QTabWidget()
 		self.light_ambient = get_RGB_tab(self,"ambient")
 		light_material_tab_widget.addTab(self.light_ambient, "Ambient")
 		self.light_diffuse = get_RGB_tab(self,"diffuse")
@@ -861,22 +861,22 @@
 		
 		vbl.addWidget(light_material_tab_widget)
 
-		QtCore.QObject.connect(self.light_ambient.r, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_ambient.g, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_ambient.b, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_diffuse.r, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_diffuse.g, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_diffuse.b, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_specular.r, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_specular.g, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_specular.b, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.light_x_dir, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_y_dir, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_z_dir, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_manip_check, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_manip_check, QtCore.SIGNAL("stateChanged(int)"), self.target().light_manipulation_toggled)
-		QtCore.QObject.connect(show_lights, QtCore.SIGNAL("stateChanged(int)"), self.target().show_lights)
-		QtCore.QObject.connect(self.local_viewer_check, QtCore.SIGNAL("stateChanged(int)"), self.local_viewer_checked)
+		self.light_ambient.r.valueChanged.connect(self.update_light)
+		self.light_ambient.g.valueChanged.connect(self.update_light)
+		self.light_ambient.b.valueChanged.connect(self.update_light)
+		self.light_diffuse.r.valueChanged.connect(self.update_light)
+		self.light_diffuse.g.valueChanged.connect(self.update_light)
+		self.light_diffuse.b.valueChanged.connect(self.update_light)
+		self.light_specular.r.valueChanged.connect(self.update_light)
+		self.light_specular.g.valueChanged.connect(self.update_light)
+		self.light_specular.b.valueChanged.connect(self.update_light)
+		self.light_x_dir.valueChanged[double].connect(self.update_light)
+		self.light_y_dir.valueChanged[double].connect(self.update_light)
+		self.light_z_dir.valueChanged[double].connect(self.update_light)
+		self.light_manip_check.valueChanged[double].connect(self.update_light)
+		self.light_manip_check.stateChanged[int].connect(self.target().light_manipulation_toggled)
+		show_lights.stateChanged[int].connect(self.target().show_lights)
+		self.local_viewer_check.stateChanged[int].connect(self.local_viewer_checked)
 		#QtCore.QObject.connect(self.light_w_pos, QtCore.SIGNAL("valueChanged(int)"), self.update_light)
 	 
 		return light_tab
@@ -981,7 +981,7 @@
 			if glIsEnabled(l):
 				pos = glGetLightfv(l,GL_POSITION)
 				if pos[3] == 0:
-					a = QtGui.QListWidgetItem("Light "+str(i),self.light_list)
+					a = QtWidgets.QListWidgetItem("Light "+str(i),self.light_list)
 					if len(self.light_list.selectedItems()) == 0:
 						a.setSelected(True)
 						
@@ -991,7 +991,7 @@
 			if glIsEnabled(l):
 				pos = glGetLightfv(l,GL_POSITION)
 				if pos[3] == 1:
-					a = QtGui.QListWidgetItem("Light "+str(i),self.light_list)
+					a = QtWidgets.QListWidgetItem("Light "+str(i),self.light_list)
 					if len(self.light_list.selectedItems()) == 0 and len(self.point_light_list.selectedItems()) == 0:
 						a.setSelected(True)
 		
@@ -1026,11 +1026,11 @@
 				new_label = "Light "+str(i)
 				
 				if not point_source: 
-					a = QtGui.QListWidgetItem(new_label,self.light_list)
+					a = QtWidgets.QListWidgetItem(new_label,self.light_list)
 					for item in self.point_light_list.selectedItems(): item.setSelected(False)
 						
 				else:
-					a = QtGui.QListWidgetItem(new_label,self.point_light_list)
+					a = QtWidgets.QListWidgetItem(new_label,self.point_light_list)
 					for item in self.light_list.selectedItems(): item.setSelected(False)
 					
 				a.setSelected(True)
@@ -1045,7 +1045,7 @@
 				glEnable(l)
 				new_label = "Light "+str(i)
 				
-				a = QtGui.QListWidgetItem(new_label,self.light_list)
+				a = QtWidgets.QListWidgetItem(new_label,self.light_list)
 				a.setSelected(True)
 				
 				self.refresh_light_states()
@@ -1069,66 +1069,66 @@
 	
 	def get_directional_light_tab(self):
 		
-		self.directional_light_widget = QtGui.QWidget()
+		self.directional_light_widget = QtWidgets.QWidget()
 		
-		vbl = QtGui.QVBoxLayout(self.directional_light_widget)
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout(self.directional_light_widget)
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.setObjectName("Lights")
 		
-		hbl = QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl = QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(6)
 		hbl.setObjectName("hbl")
 		vbl.addLayout(hbl)
 
-		self.light_list = QtGui.QListWidget(None)
+		self.light_list = QtWidgets.QListWidget(None)
 		self.light_list.setMouseTracking(True)
 		self.redo_directional_light_list()
 
 		hbl.addWidget(self.light_list)
 
-		vbl2 = QtGui.QVBoxLayout()
-		vbl2.setMargin(0)
+		vbl2 = QtWidgets.QVBoxLayout()
+		vbl2.setContentsMargins(0, 0, 0, 0)
 		vbl2.setSpacing(6)
 		vbl2.setObjectName("vbl2")
 		hbl.addLayout(vbl2)
 		
-		new_light = QtGui.QPushButton("New")
+		new_light = QtWidgets.QPushButton("New")
 		vbl2.addWidget(new_light)
 		#copy_light = QtGui.QPushButton("Copy")
 		#vbl2.addWidget(copy_light)
-		del_light = QtGui.QPushButton("Delete")
+		del_light = QtWidgets.QPushButton("Delete")
 		vbl2.addWidget(del_light)
 		
 		
-		x_label = QtGui.QLabel()
+		x_label = QtWidgets.QLabel()
 		x_label.setText('x')
 		
-		self.light_x_dir = QtGui.QDoubleSpinBox(self)
+		self.light_x_dir = QtWidgets.QDoubleSpinBox(self)
 		self.light_x_dir.setMinimum(-100000)
 		self.light_x_dir.setMaximum(100000)
 		self.light_x_dir.setValue(0.0)
 	
-		y_label = QtGui.QLabel()
+		y_label = QtWidgets.QLabel()
 		y_label.setText('y')
 		
-		self.light_y_dir = QtGui.QDoubleSpinBox(self)
+		self.light_y_dir = QtWidgets.QDoubleSpinBox(self)
 		self.light_y_dir.setMinimum(-100000)
 		self.light_y_dir.setMaximum(100000)
 		self.light_y_dir.setValue(0.0)
 		
-		z_label = QtGui.QLabel()
+		z_label = QtWidgets.QLabel()
 		z_label.setText('z')
 		
-		self.light_z_dir = QtGui.QDoubleSpinBox(self)
+		self.light_z_dir = QtWidgets.QDoubleSpinBox(self)
 		self.light_z_dir.setMinimum(-100000)
 		self.light_z_dir.setMaximum(100000)
 		self.light_z_dir.setValue(0.0)
 		
 		
-		hbl_trans = QtGui.QHBoxLayout()
-		hbl_trans.setMargin(0)
+		hbl_trans = QtWidgets.QHBoxLayout()
+		hbl_trans.setContentsMargins(0, 0, 0, 0)
 		hbl_trans.setSpacing(6)
 		hbl_trans.setObjectName("Trans")
 		hbl_trans.addWidget(x_label)
@@ -1140,29 +1140,29 @@
 		
 		vbl.addLayout(hbl_trans)
 		
-		QtCore.QObject.connect(new_light, QtCore.SIGNAL("clicked()"), self.new_directional_light)
-		QtCore.QObject.connect(del_light, QtCore.SIGNAL("clicked()"), self.del_directional_light)
-		QtCore.QObject.connect(self.light_list, QtCore.SIGNAL("itemPressed(QListWidgetItem*)"), self.light_list_clicked)
+		new_light.clicked.connect(self.new_directional_light)
+		del_light.clicked.connect(self.del_directional_light)
+		self.light_list.itemPressed[QListWidgetItem].connect(self.light_list_clicked)
 		
 		return self.directional_light_widget
 	
 	
 	def get_pointsource_light_tab(self):
 		
-		self.pointsource_light_widget = QtGui.QWidget()
+		self.pointsource_light_widget = QtWidgets.QWidget()
 		
-		vbl = QtGui.QVBoxLayout(self.pointsource_light_widget)
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout(self.pointsource_light_widget)
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.setObjectName("Lights")
 		
-		hbl = QtGui.QHBoxLayout()
-		hbl.setMargin(0)
+		hbl = QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(0, 0, 0, 0)
 		hbl.setSpacing(6)
 		hbl.setObjectName("hbl")
 		vbl.addLayout(hbl)
 
-		self.point_light_list = QtGui.QListWidget(None)
+		self.point_light_list = QtWidgets.QListWidget(None)
 		self.point_light_list.setMouseTracking(True)
 		
 		self.redo_pointsource_light_list()
@@ -1170,50 +1170,50 @@
 		#a.setSelected(True)
 		hbl.addWidget(self.point_light_list)
 
-		vbl2 = QtGui.QVBoxLayout()
-		vbl2.setMargin(0)
+		vbl2 = QtWidgets.QVBoxLayout()
+		vbl2.setContentsMargins(0, 0, 0, 0)
 		vbl2.setSpacing(6)
 		vbl2.setObjectName("vbl2")
 		hbl.addLayout(vbl2)
 		
-		new_light = QtGui.QPushButton("New")
+		new_light = QtWidgets.QPushButton("New")
 		vbl2.addWidget(new_light)
 		#copy_light = QtGui.QPushButton("Copy")
 		#vbl2.addWidget(copy_light)
-		del_light = QtGui.QPushButton("Delete")
+		del_light = QtWidgets.QPushButton("Delete")
 		vbl2.addWidget(del_light)
 		
 		
-		pos_label = QtGui.QLabel()
+		pos_label = QtWidgets.QLabel()
 		pos_label.setText('Pos: ')
 		
-		x_label = QtGui.QLabel()
+		x_label = QtWidgets.QLabel()
 		x_label.setText('x')
 		
-		self.light_x_pos = QtGui.QDoubleSpinBox(self)
+		self.light_x_pos = QtWidgets.QDoubleSpinBox(self)
 		self.light_x_pos.setMinimum(-100000)
 		self.light_x_pos.setMaximum(100000)
 		self.light_x_pos.setValue(0.0)
 	
-		y_label = QtGui.QLabel()
+		y_label = QtWidgets.QLabel()
 		y_label.setText('y')
 		
-		self.light_y_pos = QtGui.QDoubleSpinBox(self)
+		self.light_y_pos = QtWidgets.QDoubleSpinBox(self)
 		self.light_y_pos.setMinimum(-100000)
 		self.light_y_pos.setMaximum(100000)
 		self.light_y_pos.setValue(0.0)
 		
-		z_label = QtGui.QLabel()
+		z_label = QtWidgets.QLabel()
 		z_label.setText('z')
 		
-		self.light_z_pos = QtGui.QDoubleSpinBox(self)
+		self.light_z_pos = QtWidgets.QDoubleSpinBox(self)
 		self.light_z_pos.setMinimum(-100000)
 		self.light_z_pos.setMaximum(100000)
 		self.light_z_pos.setValue(0.0)
 		
 		
-		hbl_trans = QtGui.QHBoxLayout()
-		hbl_trans.setMargin(0)
+		hbl_trans = QtWidgets.QHBoxLayout()
+		hbl_trans.setContentsMargins(0, 0, 0, 0)
 		hbl_trans.setSpacing(6)
 		hbl_trans.setObjectName("Trans")
 		hbl_trans.addWidget(pos_label)
@@ -1242,32 +1242,32 @@
 		vbl.addWidget(self.quad_atten)
 		
 		
-		dir_label = QtGui.QLabel()
+		dir_label = QtWidgets.QLabel()
 		dir_label.setText('Dir: ')
 		
-		self.light_ps_xdir = QtGui.QDoubleSpinBox(self)
+		self.light_ps_xdir = QtWidgets.QDoubleSpinBox(self)
 		self.light_ps_xdir.setMinimum(-100000)
 		self.light_ps_xdir.setMaximum(100000)
 		self.light_ps_xdir.setValue(0.0)
 	
-		y_label = QtGui.QLabel()
+		y_label = QtWidgets.QLabel()
 		y_label.setText('y')
 		
-		self.light_ps_ydir = QtGui.QDoubleSpinBox(self)
+		self.light_ps_ydir = QtWidgets.QDoubleSpinBox(self)
 		self.light_ps_ydir.setMinimum(-100000)
 		self.light_ps_ydir.setMaximum(100000)
 		self.light_ps_ydir.setValue(0.0)
 		
-		z_label = QtGui.QLabel()
+		z_label = QtWidgets.QLabel()
 		z_label.setText('z')
 		
-		self.light_ps_zdir = QtGui.QDoubleSpinBox(self)
+		self.light_ps_zdir = QtWidgets.QDoubleSpinBox(self)
 		self.light_ps_zdir.setMinimum(-100000)
 		self.light_ps_zdir.setMaximum(100000)
 		self.light_ps_zdir.setValue(0.0)
 		
-		hbl_trans2 = QtGui.QHBoxLayout()
-		hbl_trans2.setMargin(0)
+		hbl_trans2 = QtWidgets.QHBoxLayout()
+		hbl_trans2.setContentsMargins(0, 0, 0, 0)
 		hbl_trans2.setSpacing(6)
 		hbl_trans2.setObjectName("Trans")
 		hbl_trans2.addWidget(dir_label)
@@ -1291,58 +1291,58 @@
 		vbl.addWidget(self.spot_exponent)
 		
 		
-		QtCore.QObject.connect(new_light, QtCore.SIGNAL("clicked()"), self.new_pointsource_light)
-		QtCore.QObject.connect(self.point_light_list, QtCore.SIGNAL("itemPressed(QListWidgetItem*)"), self.point_light_list_clicked)
-		QtCore.QObject.connect(self.light_x_pos, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_y_pos, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_z_pos, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_ps_xdir, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_ps_ydir, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.light_ps_zdir, QtCore.SIGNAL("valueChanged(double)"), self.update_light)
-		QtCore.QObject.connect(self.spot_cutoff, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.spot_exponent, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.const_atten, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.linear_atten, QtCore.SIGNAL("valueChanged"), self.update_light)
-		QtCore.QObject.connect(self.quad_atten, QtCore.SIGNAL("valueChanged"), self.update_light)
+		new_light.clicked.connect(self.new_pointsource_light)
+		self.point_light_list.itemPressed[QListWidgetItem].connect(self.point_light_list_clicked)
+		self.light_x_pos.valueChanged[double].connect(self.update_light)
+		self.light_y_pos.valueChanged[double].connect(self.update_light)
+		self.light_z_pos.valueChanged[double].connect(self.update_light)
+		self.light_ps_xdir.valueChanged[double].connect(self.update_light)
+		self.light_ps_ydir.valueChanged[double].connect(self.update_light)
+		self.light_ps_zdir.valueChanged[double].connect(self.update_light)
+		self.spot_cutoff.valueChanged.connect(self.update_light)
+		self.spot_exponent.valueChanged.connect(self.update_light)
+		self.const_atten.valueChanged.connect(self.update_light)
+		self.linear_atten.valueChanged.connect(self.update_light)
+		self.quad_atten.valueChanged.connect(self.update_light)
 
-		QtCore.QObject.connect(del_light, QtCore.SIGNAL("clicked()"), self.del_pointsource_light)
+		del_light.clicked.connect(self.del_pointsource_light)
 		
 		return self.pointsource_light_widget
 	
 
-class EMLightsInspector(QtGui.QWidget,EMLightsInspectorBase):
+class EMLightsInspector(QtWidgets.QWidget,EMLightsInspectorBase):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		EMLightsInspectorBase.__init__(self)
 		self.target=weakref.ref(target)
 		
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
-		self.hbl = QtGui.QHBoxLayout()
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		self.vbl.addLayout(self.hbl)
 
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.vbl2.setMargin(0)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.vbl2.setContentsMargins(0, 0, 0, 0)
 		self.vbl2.setSpacing(6)
 		self.vbl2.setObjectName("vbl2")
 		self.hbl.addLayout(self.vbl2)
 		
-		self.wiretog = QtGui.QPushButton("Wire")
+		self.wiretog = QtWidgets.QPushButton("Wire")
 		self.wiretog.setCheckable(1)
 		self.vbl2.addWidget(self.wiretog)
 		
-		self.lighttog = QtGui.QPushButton("Light")
+		self.lighttog = QtWidgets.QPushButton("Light")
 		self.lighttog.setCheckable(1)
 		self.lighttog.setChecked(True)
 		self.vbl2.addWidget(self.lighttog)
 		
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.maintab = None
 		self.tabwidget.addTab(self.get_light_tab(), "Lights")
 		self.tabwidget.addTab(self.get_main_tab(), "Transform")
@@ -1351,11 +1351,11 @@
 		self.n3_showing = False
 		self.quiet = False
 
-		QtCore.QObject.connect(self.cbb, QtCore.SIGNAL("currentIndexChanged(QString)"), target.setColor)
-		QtCore.QObject.connect(self.wiretog, QtCore.SIGNAL("toggled(bool)"), target.toggle_wire)
-		QtCore.QObject.connect(self.lighttog, QtCore.SIGNAL("toggled(bool)"), target.toggle_light)
-		QtCore.QObject.connect(self.glcontrast, QtCore.SIGNAL("valueChanged"), target.set_GL_contrast)
-		QtCore.QObject.connect(self.glbrightness, QtCore.SIGNAL("valueChanged"), target.set_GL_brightness)
+		self.cbb.currentIndexChanged['QString'].connect(target.setColor)
+		self.wiretog.toggled[bool].connect(target.toggle_wire)
+		self.lighttog.toggled[bool].connect(target.toggle_light)
+		self.glcontrast.valueChanged.connect(target.set_GL_contrast)
+		self.glbrightness.valueChanged.connect(target.set_GL_brightness)
 
 	def update_rotations(self,t3d):
 		self.rotation_sliders.update_rotations(t3d)
@@ -1371,24 +1371,24 @@
 		#return self.advanced_tab
 	
 	def get_GL_tab(self):
-		self.gltab = QtGui.QWidget()
+		self.gltab = QtWidgets.QWidget()
 		gltab = self.gltab
 		
-		gltab.vbl = QtGui.QVBoxLayout(self.gltab )
-		gltab.vbl.setMargin(0)
+		gltab.vbl = QtWidgets.QVBoxLayout(self.gltab )
+		gltab.vbl.setContentsMargins(0, 0, 0, 0)
 		gltab.vbl.setSpacing(6)
 		gltab.vbl.setObjectName("Main")
 		
-		self.hbl_color = QtGui.QHBoxLayout()
-		self.hbl_color.setMargin(0)
+		self.hbl_color = QtWidgets.QHBoxLayout()
+		self.hbl_color.setContentsMargins(0, 0, 0, 0)
 		self.hbl_color.setSpacing(6)
 		gltab.vbl.addLayout(self.hbl_color)
 
-		self.color_label = QtGui.QLabel()
+		self.color_label = QtWidgets.QLabel()
 		self.color_label.setText('Material')
 		self.hbl_color.addWidget(self.color_label)
 		
-		self.cbb = QtGui.QComboBox(gltab)
+		self.cbb = QtWidgets.QComboBox(gltab)
 		self.hbl_color.addWidget(self.cbb)
 		
 		self.glcontrast = ValSlider(gltab,(1.0,5.0),"GLShd:")
@@ -1406,10 +1406,10 @@
 	
 	def get_main_tab(self):
 		if ( self.maintab == None ):
-			self.maintab = QtGui.QWidget()
+			self.maintab = QtWidgets.QWidget()
 			maintab = self.maintab
-			maintab.vbl = QtGui.QVBoxLayout(self.maintab)
-			maintab.vbl.setMargin(0)
+			maintab.vbl = QtWidgets.QVBoxLayout(self.maintab)
+			maintab.vbl.setContentsMargins(0, 0, 0, 0)
 			maintab.vbl.setSpacing(6)
 			maintab.vbl.setObjectName("Main")
 			
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/empdbitem3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/empdbitem3d.py	2017-10-21 17:14:57.000000000 -0500
@@ -41,7 +41,7 @@
 
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtGui, QtWidgets
 
 import numpy as np
 
@@ -58,13 +58,13 @@
 	@staticmethod
 	def getNodeDialogWidget(attribdict):
 		"""Get PDB Widget"""
-		pdbwidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_data_label = QtGui.QLabel("PDB Model Label")
-		attribdict["node_name"] = QtGui.QLineEdit()
-		data_path_label = QtGui.QLabel("PDB Model Path")
-		attribdict["data_path"] = QtGui.QLineEdit()
-		browse_button = QtGui.QPushButton("Browse")
+		pdbwidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_data_label = QtWidgets.QLabel("PDB Model Label")
+		attribdict["node_name"] = QtWidgets.QLineEdit()
+		data_path_label = QtWidgets.QLabel("PDB Model Path")
+		attribdict["data_path"] = QtWidgets.QLineEdit()
+		browse_button = QtWidgets.QPushButton("Browse")
 		grid.addWidget(node_name_data_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		grid.addWidget(data_path_label, 1, 0, 1, 2)
@@ -73,12 +73,12 @@
 		EMItem3D.get_transformlayout(grid, 4, attribdict)
 		pdbwidget.setLayout(grid)
 		EMPDBItem3D.attribdict = attribdict
-		QtCore.QObject.connect(browse_button, QtCore.SIGNAL('clicked()'), EMPDBItem3D._on_browse)
+		browse_button.clicked.connect(EMPDBItem3D._on_browse)
 		return pdbwidget
 	
 	@staticmethod
 	def _on_browse():
-		filename = QtGui.QFileDialog.getOpenFileName(None, 'Get file', os.getcwd())
+		filename = QtWidgets.QFileDialog.getOpenFileName(None, 'Get file', os.getcwd())[0]
 		if filename:
 			EMPDBItem3D.attribdict["data_path"].setText(filename)
 			#name = os.path.basename(str(filename))
@@ -175,8 +175,8 @@
 
 	def addTabs(self):
 		""" Add a tab for each 'column' """
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		tabwidget.setLayout(gridbox)
 		self.addTab(tabwidget, "data")
 		# add data tab first, then basic
@@ -185,29 +185,29 @@
 
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
-		dataframe = QtGui.QFrame()
-		dataframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		dataframe = QtWidgets.QFrame()
+		dataframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		lfont = QtGui.QFont()
 		lfont.setBold(True)
-		datagridbox = QtGui.QGridLayout()
-		self.data_checkbox= QtGui.QCheckBox("Display Bounding Box")
+		datagridbox = QtWidgets.QGridLayout()
+		self.data_checkbox= QtWidgets.QCheckBox("Display Bounding Box")
 		datagridbox.addWidget(self.data_checkbox, 0, 0)
-		self.file_browse_button = QtGui.QPushButton("Set Data Source")
+		self.file_browse_button = QtWidgets.QPushButton("Set Data Source")
 		datagridbox.addWidget(self.file_browse_button, 1, 0)
 		dataframe.setLayout(datagridbox)
 		gridbox.addWidget(dataframe, 2, 0)
-		self.file_path_label = QtGui.QLabel()
+		self.file_path_label = QtWidgets.QLabel()
 		self.file_path_label.setAlignment(QtCore.Qt.AlignCenter)
 		self.file_path_label.setFont(lfont)
 		gridbox.addWidget(self.file_path_label, 3, 0)
 		self.file_browse_button.clicked.connect(self.onFileBrowse)
-		QtCore.QObject.connect(self.data_checkbox, QtCore.SIGNAL("stateChanged(int)"), self.onBBoxChange)
+		self.data_checkbox.stateChanged[int].connect(self.onBBoxChange)
 		# Set to default, but run only once and not in each base class
 		if type(self) == EMPDBItem3DInspector: self.updateItemControls()
 
 	def onFileBrowse(self):
 		#TODO: replace this with an EMAN2 browser window once we re-write it
-		file_path = QtGui.QFileDialog.getOpenFileName(self, "Open PDB Model")
+		file_path = QtWidgets.QFileDialog.getOpenFileName(self, "Open PDB Model")[0]
 		if file_path:
 			self.file_path_label.setText(file_path)
 			self.item3d().setData(file_path)
@@ -245,10 +245,10 @@
 	@staticmethod
 	def getNodeDialogWidget(attribdict):
 		"""Get Ball and Stick Model Widget"""
-		ballstickwidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_model_label = QtGui.QLabel("PDB Structure Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMBallStickModel.representation))
+		ballstickwidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_model_label = QtWidgets.QLabel("PDB Structure Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMBallStickModel.representation))
 		grid.addWidget(node_name_model_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 2, attribdict)
@@ -1043,10 +1043,10 @@
 	@staticmethod
 	def getNodeDialogWidget(attribdict):
 		"""Get Spheres Model Widget"""
-		sphereswidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		node_name_model_label = QtGui.QLabel("PDB Structure Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMSphereModel.representation))
+		sphereswidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		node_name_model_label = QtWidgets.QLabel("PDB Structure Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMSphereModel.representation))
 		grid.addWidget(node_name_model_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 0, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 2, attribdict)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/empdbvaltool.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/empdbvaltool.py	2017-10-21 17:14:58.000000000 -0500
@@ -33,19 +33,21 @@
 
 from EMAN2 import PDBReader, EMData
 from emapplication import EMApp, get_application
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtGui, QtWidgets
 from emimage3d import EMImage3DWidget
 from emimage3diso import EMIsosurfaceModel
 from empdbviewer import *
 from emselector import EMSelectorDialog
 
 
-class EMPDBValWidget(QtGui.QWidget):
+class EMPDBValWidget(QtWidgets.QWidget):
 	'''
 	EMPDB versus isosurface visual evaluation
 	'''
+	run_validate = QtCore.pyqtSignal()
+
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 
 		self.pdb_model = None # will eventually be a EMPDBModel
 		self.iso_model = None # will eventually be a EMIsosurfaceModel
@@ -61,59 +63,59 @@
 		get_application().attach_child(self)
 		
 	def __init_gui(self):
-		self.data_groupbox = QtGui.QGroupBox(self.tr("Data"))
+		self.data_groupbox = QtWidgets.QGroupBox(self.tr("Data"))
 		
-		pdb_label = QtGui.QLabel("PDB:")
-		self.pdb_line_edit = QtGui.QLineEdit()
-		self.pdb_browse_button = QtGui.QPushButton(self.tr("Browse"))
-		pdb_layout = QtGui.QHBoxLayout()
+		pdb_label = QtWidgets.QLabel("PDB:")
+		self.pdb_line_edit = QtWidgets.QLineEdit()
+		self.pdb_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
+		pdb_layout = QtWidgets.QHBoxLayout()
 		pdb_layout.addWidget(pdb_label)
 		pdb_layout.addWidget(self.pdb_line_edit)
 		pdb_layout.addWidget(self.pdb_browse_button)		
 		
-		volume_label = QtGui.QLabel("Volume:")
-		self.volume_line_edit = QtGui.QLineEdit()
-		self.volume_browse_button = QtGui.QPushButton(self.tr("Browse"))
-		volume_layout = QtGui.QHBoxLayout()
+		volume_label = QtWidgets.QLabel("Volume:")
+		self.volume_line_edit = QtWidgets.QLineEdit()
+		self.volume_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
+		volume_layout = QtWidgets.QHBoxLayout()
 		volume_layout.addWidget(volume_label)
 		volume_layout.addWidget(self.volume_line_edit)
 		volume_layout.addWidget(self.volume_browse_button)
 		
-		data_layout = QtGui.QVBoxLayout()
+		data_layout = QtWidgets.QVBoxLayout()
 		data_layout.addLayout(pdb_layout)
 		data_layout.addLayout(volume_layout)
 		
 		self.data_groupbox.setLayout(data_layout)
 
 		
-		self.validation_groupbox = QtGui.QGroupBox(self.tr("Validation"))
+		self.validation_groupbox = QtWidgets.QGroupBox(self.tr("Validation"))
 		
-		transformations_label = QtGui.QLabel(self.tr("&Number of Transformations"))
-		self.transformations_spinbox = QtGui.QSpinBox()
+		transformations_label = QtWidgets.QLabel(self.tr("&Number of Transformations"))
+		self.transformations_spinbox = QtWidgets.QSpinBox()
 		self.transformations_spinbox.setMaximum(9999)
 		self.transformations_spinbox.setValue(20)
 		transformations_label.setBuddy(self.transformations_spinbox)
-		transformations_layout = QtGui.QHBoxLayout()
+		transformations_layout = QtWidgets.QHBoxLayout()
 		transformations_layout.addWidget(transformations_label)
 		transformations_layout.addWidget(self.transformations_spinbox)
 		
-		threshold_label = QtGui.QLabel(self.tr("Isosurface &Threshold"))
-		self.threshold_doublespinbox = QtGui.QDoubleSpinBox()
+		threshold_label = QtWidgets.QLabel(self.tr("Isosurface &Threshold"))
+		self.threshold_doublespinbox = QtWidgets.QDoubleSpinBox()
 		self.threshold_doublespinbox.setValue(0.1)
 		threshold_label.setBuddy(self.threshold_doublespinbox)
-		threshold_layout = QtGui.QHBoxLayout()
+		threshold_layout = QtWidgets.QHBoxLayout()
 		threshold_layout.addWidget(threshold_label)
 		threshold_layout.addWidget(self.threshold_doublespinbox)
 		
-		self.validate_button = QtGui.QPushButton(self.tr("&Validate"))
+		self.validate_button = QtWidgets.QPushButton(self.tr("&Validate"))
 		
-		validation_layout = QtGui.QVBoxLayout()
+		validation_layout = QtWidgets.QVBoxLayout()
 		validation_layout.addLayout(transformations_layout)
 		validation_layout.addLayout(threshold_layout)
 		validation_layout.addWidget(self.validate_button)
 		self.validation_groupbox.setLayout(validation_layout)
 		
-		layout = QtGui.QVBoxLayout()
+		layout = QtWidgets.QVBoxLayout()
 		layout.addWidget(self.data_groupbox)
 		layout.addWidget(self.validation_groupbox)
 		
@@ -145,12 +147,12 @@
 		self.volume_line_edit.setText(file_path)
 		
 	def browse_pdb(self):
-		file_path = QtGui.QFileDialog.getOpenFileName(filter="Protein Data Bank (*.pdb)")
+		file_path = QtWidgets.QFileDialog.getOpenFileName(filter="Protein Data Bank (*.pdb)")[0]
 		self.pdb_line_edit.setText(file_path)
 		
 	def closeEvent(self, event):
 		self.viewer_window.close()
-		QtGui.QWidget.closeEvent(self, event)
+		QtWidgets.QWidget.closeEvent(self, event)
 		
 	def draw_objects(self):
 		if self.iso_model == None: 
@@ -172,7 +174,7 @@
 		current_pdb = str(self.pdb_line_edit.text())
 		current_mrc = str(self.volume_line_edit.text())
 
-		self.emit(QtCore.SIGNAL("run_validate"), current_mrc, current_pdb, num_transformations, threshold)
+		self.run_validate.emit(current_mrc, current_pdb, num_transformations, threshold)
 		
 	def update_iso_file(self):
 		iso_file_path = str(self.volume_line_edit.text())
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/empdbviewer.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/empdbviewer.py	2017-10-21 17:14:58.000000000 -0500
@@ -36,8 +36,8 @@
 from OpenGL.GL import *
 from OpenGL.GLU import *
 from emglobjects import EM3DModel, get_default_gl_colors, EMViewportDepthTools, Camera2
-from PyQt4 import QtGui, QtCore
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 import sys
 import weakref
 from emimageutil import EMTransformPanel
@@ -979,25 +979,25 @@
 		self.get_inspector().text.setText(self.text)
 		self.updateGL()
 		
-class EMPDBInspector(QtGui.QWidget):
+class EMPDBInspector(QtWidgets.QWidget):
 	def __init__(self,target,enable_advanced=False):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.target = weakref.ref(target)
 
 		self.rotation_sliders = EMTransformPanel(target,self)
 		
-		self.text = QtGui.QLineEdit()
+		self.text = QtWidgets.QLineEdit()
 		text_value = self.target().current_text()
 		if text_value:
 			self.text.setText(text_value)
-		self.browse = QtGui.QPushButton("Browse")
+		self.browse = QtWidgets.QPushButton("Browse")
 
-		hbl1 = QtGui.QHBoxLayout()
+		hbl1 = QtWidgets.QHBoxLayout()
 		hbl1.addWidget(self.text)
 		hbl1.addWidget(self.browse)
 
-		vbl = QtGui.QVBoxLayout()
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout()
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.addLayout(hbl1)
 		
@@ -1005,15 +1005,15 @@
 
 		self.setLayout(vbl)
 		
-		QtCore.QObject.connect(self.text, QtCore.SIGNAL("textEdited(const QString&)"), self.on_text_change)
-		QtCore.QObject.connect(self.browse, QtCore.SIGNAL("clicked(bool)"), self.on_browse)
+		self.text.textEdited['QString'].connect(self.on_text_change)
+		self.browse.clicked[bool].connect(self.on_browse)
 	
 	def on_text_change(self,text):
 		print("Use the Browse button to update the pdb file")
 
 	def on_browse(self):
 		import os
-		self.fileName = QtGui.QFileDialog.getOpenFileName(self, "open file", os.getcwd(), "Text files (*.pdb)")
+		self.fileName = QtWidgets.QFileDialog.getOpenFileName(self, "open file", os.getcwd(), "Text files (*.pdb)")[0]
 		if (self.fileName == ""): return
 		self.target().set_current_text(str(self.fileName)) #self.target().text and self.text are what the user sees. 
 		self.text.setText(self.fileName) #if self.text changes, then self.fName becomes self.text and the image regenerates	
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emplot2d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emplot2d.py	2017-10-21 17:14:58.000000000 -0500
@@ -32,6 +32,8 @@
 #
 #
 
+QStringList = list
+
 ploticon = [
     '15 14 2 1',
     'b c #000055',
@@ -56,10 +58,10 @@
 	try: return float(x)
 	except: return 0.0
 
-import PyQt4
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtOpenGL import QGLWidget
-from PyQt4.QtCore import Qt
+import PyQt5
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWebKitWidgets, QtWidgets
+from PyQt5.QtOpenGL import QGLWidget
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU
 from OpenGL.GL import *
 import OpenGL.GL as gl
@@ -107,6 +109,7 @@
 class EMPlot2DWidget(EMGLWidget):
 	"""A QT widget for drawing 2-D plots using matplotlib
 	"""
+	selected = QtCore.pyqtSignal()
 
 	def __init__(self,application=None,winid=None,parent=None):
 
@@ -202,13 +205,13 @@
 		if event.key() == Qt.Key_C:
 			self.show_inspector(1)
 		elif event.key() == Qt.Key_F1:
-			try: from PyQt4 import QtWebKit
+			try: from PyQt5 import QtWebKit
 			except: return
 			try:
 				try:
 					test = self.browser
 				except:
-					self.browser = QtWebKit.QWebView()
+					self.browser = QtWebKitWidgets.QWebView()
 					self.browser.load(QtCore.QUrl("http://blake.bcm.edu/emanwiki/e2display"))
 					self.browser.resize(800,800)
 
@@ -842,7 +845,7 @@
 
 
 
-		self.emit(QtCore.SIGNAL("selected"),self.selected)
+		self.selected.emit(self.selected)
 
 	def mousePressEvent(self, event):
 		lc=self.scr2plot(event.x(),event.y())
@@ -993,6 +996,8 @@
 	"""
 	A QT widget for plotting ploar plots:
 	"""
+	clusterStats = QtCore.pyqtSignal()
+
 	def __init__(self,application=None,winid=None):
 		fmt=QtOpenGL.QGLFormat()
 		fmt.setDoubleBuffer(True);
@@ -1071,13 +1076,13 @@
 		if event.key() == Qt.Key_C:
 			self.show_inspector(1)
 		elif event.key() == Qt.Key_F1:
-			try: from PyQt4 import QtWebKit
+			try: from PyQt5 import QtWebKit
 			except: return
 			try:
 				try:
 					test = self.browser
 				except:
-					self.browser = QtWebKit.QWebView()
+					self.browser = QtWebKitWidgets.QWebView()
 					self.browser.load(QtCore.QUrl("http://blake.bcm.edu/emanwiki/e2display"))
 					self.browser.resize(800,800)
 
@@ -1106,7 +1111,7 @@
 		x = self.firstcx - self.width()/2.0
 		y = self.firstcy - self.height()/2.0
 		if event.buttons()&Qt.MidButton:
-			filename = QtGui.QFileDialog.getSaveFileName(self, 'Publish or Perish! Save Plot', os.getcwd(), "(*.tiff *.jpeg, *.png)")
+			filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Publish or Perish! Save Plot', os.getcwd(), "(*.tiff *.jpeg, *.png)")[0]
 			if filename: # if we cancel
 				self.saveSnapShot(filename)
 		elif event.buttons()&Qt.LeftButton:
@@ -1227,7 +1232,7 @@
 			rmsdAngle = math.degrees(math.atan2(math.sqrt(varAngSin/pcount),math.sqrt(varAngCos/pcount)))
 			rmsdRad = math.sqrt(varRad/pcount)
 			#print "RMSD Angle: %3.2f, RMSD Rad %3.2f"%(rmsdAngle, rmsdRad)
-			self.emit(QtCore.SIGNAL("clusterStats"), [meanAngle,meanRad,rmsdAngle,rmsdRad,pcount])
+			self.clusterStats.emit([meanAngle, meanRad, rmsdAngle, rmsdRad, pcount])
 
 	def saveSnapShot(self, filename, format="tiff"):
 		"""
@@ -1549,29 +1554,29 @@
 		self.shapechange=1
 		#self.updateGL()
 
-class EMPlot2DStatsInsp(QtGui.QWidget):
+class EMPlot2DStatsInsp(QtWidgets.QWidget):
 
 	"""This class implements the statistics pop-up from the EMPlot2DInspector"""
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
-		gbl0=QtGui.QGridLayout(self)
+		gbl0=QtWidgets.QGridLayout(self)
 
-		self.summary=QtGui.QPushButton(self)
+		self.summary=QtWidgets.QPushButton(self)
 		self.summary.setText("Summary Table")
 		gbl0.addWidget(self.summary,2,0,1,2)
 
-		hl1 = QtGui.QFrame()
-		hl1.setFrameStyle(QtGui.QFrame.HLine)
-		hl1.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl1 = QtWidgets.QFrame()
+		hl1.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl1.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl1,3,0,1,2)
 
-		self.wlnorm=QtGui.QLabel(self)
+		self.wlnorm=QtWidgets.QLabel(self)
 		self.wlnorm.setText("Test:")
 		gbl0.addWidget(self.wlnorm,4,0)
 
-		self.wcomb_test=QtGui.QComboBox(self)
+		self.wcomb_test=QtWidgets.QComboBox(self)
 		self.wcomb_test.addItem("Welch's t-test")
 		self.wcomb_test.addItem("Student's t-test")
 		self.wcomb_test.addItem("Hotelling's T-squared test")
@@ -1593,23 +1598,23 @@
 		self.wnround.intonly=1
 		gbl0.addWidget(self.wnround,6,1)
 
-		self.run=QtGui.QPushButton(self)
+		self.run=QtWidgets.QPushButton(self)
 		self.run.setText("Compute")
 		gbl0.addWidget(self.run,8,0,1,2)
 
-		hl2 = QtGui.QFrame()
-		hl2.setFrameStyle(QtGui.QFrame.HLine)
-		hl2.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl2 = QtWidgets.QFrame()
+		hl2.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl2.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl2,9,0,1,2)
 
-		self.table = QtGui.QTableWidget() #QtGui.QTextEdit()
+		self.table = QtWidgets.QTableWidget() #QtWidgets.QTextEdit()
 		self.table.setRowCount(1)
 		self.table.setColumnCount(1)
 		self.table.setSortingEnabled(True)
 		gbl0.addWidget(self.table,10,0,2,2)
 
-		QtCore.QObject.connect(self.summary,QtCore.SIGNAL("clicked()"),self.printSummary)
-		QtCore.QObject.connect(self.run,QtCore.SIGNAL("clicked()"),self.runTest)
+		self.summary.clicked.connect(self.printSummary)
+		self.run.clicked.connect(self.runTest)
 
 		self.imgwin=None
 
@@ -1661,7 +1666,7 @@
 			for s,stat in enumerate(stats):
 				if s == 0: item = str(int(stat))
 				else: item = str(round(stat,rnd))
-				self.table.setItem( c, s, QtGui.QTableWidgetItem(item) )
+				self.table.setItem( c, s, QtWidgets.QTableWidgetItem(item) )
 
 	def runTest(self):
 		stat = str(self.wcomb_test.currentText())
@@ -1696,25 +1701,25 @@
 		for i, r in enumerate(result):
 			for j, c in enumerate(r):
 				item = str(c)
-				self.table.setItem( j, i, QtGui.QTableWidgetItem(item) )
+				self.table.setItem( j, i, QtWidgets.QTableWidgetItem(item) )
 
 	def replaceRowLabels(self,rows):
-		self.table.setVerticalHeaderLabels(QtCore.QStringList(rows))
+		self.table.setVerticalHeaderLabels(QStringList(rows))
 
 	def replaceColumnLabels(self,cols):
-		self.table.setHorizontalHeaderLabels(QtCore.QStringList(cols))
+		self.table.setHorizontalHeaderLabels(QStringList(cols))
 
 	def replaceTableLabels(self,cols):
-		self.table.setHorizontalHeaderLabels(QtCore.QStringList(cols))
-		self.table.setVerticalHeaderLabels(QtCore.QStringList(cols))
+		self.table.setHorizontalHeaderLabels(QStringList(cols))
+		self.table.setVerticalHeaderLabels(QStringList(cols))
 
-class EMPlot2DRegrInsp(QtGui.QWidget):
+class EMPlot2DRegrInsp(QtWidgets.QWidget):
 	"""This class implements the regression pop-up from the EMPlot2DInspector"""
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
-		gbl0=QtGui.QGridLayout(self)
+		gbl0=QtWidgets.QGridLayout(self)
 
 		insp = self.target().get_inspector()
 
@@ -1734,21 +1739,21 @@
 		self.wnpts.intonly=1
 		gbl0.addWidget(self.wnpts,4,1)
 
-		self.wlnorm=QtGui.QLabel(self)
+		self.wlnorm=QtWidgets.QLabel(self)
 		self.wlnorm.setText("Normalization:")
 		gbl0.addWidget(self.wlnorm,6,0)
 
-		self.wcomb_norm=QtGui.QComboBox(self)
+		self.wcomb_norm=QtWidgets.QComboBox(self)
 		self.wcomb_norm.addItem("None")
 		self.wcomb_norm.addItem("Standardize")
 		self.wcomb_norm.addItem("Maxmin")
 		gbl0.addWidget(self.wcomb_norm,6,1)
 
-		self.regrb=QtGui.QPushButton(self)
+		self.regrb=QtWidgets.QPushButton(self)
 		self.regrb.setText("Regress")
 		gbl0.addWidget(self.regrb,8,0,1,2)
 
-		QtCore.QObject.connect(self.regrb,QtCore.SIGNAL("clicked()"),self.doRegression)
+		self.regrb.clicked.connect(self.doRegression)
 
 		self.imgwin=None
 
@@ -1769,7 +1774,7 @@
 			yaxes=[int(i) for i in yaxes.split(",")]
 			if max(yaxes)>=ncol : raise Exception
 		except:
-			pass #QtGui.QMessageBox.warning(self, "Axes must be a comma separated list of column numbers")
+			pass #QtWidgets.QMessageBox.warning(self, "Axes must be a comma separated list of column numbers")
 			#return
 
 		xs = ",".join([str(i) for i in xaxes])
@@ -1832,13 +1837,13 @@
 		elif norm == "None":
 			return x
 
-class EMPlot2DClassInsp(QtGui.QWidget):
+class EMPlot2DClassInsp(QtWidgets.QWidget):
 	"""This class implements the classification pop-up from the EMPlot2DInspector"""
 	def __init__(self,target) :
 
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
-		gbl0=QtGui.QGridLayout(self)
+		gbl0=QtWidgets.QGridLayout(self)
 
 		#self.wimgfile=StringBox(label="Images:")
 		#gbl0.addWidget(self.wimgfile,0,0)
@@ -1847,7 +1852,7 @@
 		#self.wimgfilebut.setText("Browse")
 		#gbl0.addWidget(self.wimgfilebut,0,1)
 
-		self.kmeansb=QtGui.QPushButton(self)
+		self.kmeansb=QtWidgets.QPushButton(self)
 		self.kmeansb.setText("K-means")
 		gbl0.addWidget(self.kmeansb,2,0,1,2)
 
@@ -1861,12 +1866,12 @@
 		self.wcbaxnorm=CheckBox(label="Eq Wt Axes:",value=0)
 		gbl0.addWidget(self.wcbaxnorm,6,0)
 
-		hl1 = QtGui.QFrame()
-		hl1.setFrameStyle(QtGui.QFrame.HLine)
-		hl1.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl1 = QtWidgets.QFrame()
+		hl1.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl1.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl1,7,0,1,2)
 
-		self.threshb=QtGui.QPushButton(self)
+		self.threshb=QtWidgets.QPushButton(self)
 		self.threshb.setText("Threshold")
 		gbl0.addWidget(self.threshb,8,0,1,2)
 
@@ -1877,7 +1882,7 @@
 		self.wnax_thresh=StringBox(label="Axes:",value="0")
 		gbl0.addWidget(self.wnax_thresh,10,1)
 
-		self.wcomb_threshtype=QtGui.QComboBox(self)
+		self.wcomb_threshtype=QtWidgets.QComboBox(self)
 		self.wcomb_threshtype.addItem("value")
 		self.wcomb_threshtype.addItem("sigma")
 		self.wcomb_threshtype.addItem("median")
@@ -1885,21 +1890,21 @@
 		self.wcomb_threshtype.addItem("percentile")
 		gbl0.addWidget(self.wcomb_threshtype,12,0)
 
-		hl2 = QtGui.QFrame()
-		hl2.setFrameStyle(QtGui.QFrame.HLine)
-		hl2.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl2 = QtWidgets.QFrame()
+		hl2.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl2.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl2,13,0,1,2)
 
 		self.wspfix=StringBox(label="Prefix:",value="split")
 		gbl0.addWidget(self.wspfix,14,0)
 
-		self.wbmakeset=QtGui.QPushButton()
+		self.wbmakeset=QtWidgets.QPushButton()
 		self.wbmakeset.setText("New Sets")
 		gbl0.addWidget(self.wbmakeset,14,1)
 
-		QtCore.QObject.connect(self.kmeansb,QtCore.SIGNAL("clicked()"),self.doKMeans)
-		QtCore.QObject.connect(self.threshb,QtCore.SIGNAL("clicked()"),self.doThresh)
-		QtCore.QObject.connect(self.wbmakeset,QtCore.SIGNAL("clicked()"),self.doMakeSet)
+		self.kmeansb.clicked.connect(self.doKMeans)
+		self.threshb.clicked.connect(self.doThresh)
+		self.wbmakeset.clicked.connect(self.doMakeSet)
 
 		#QtCore.QObject.connect(self.wimgfilebut,QtCore.SIGNAL("clicked()"),self.selectImgFile)
 		#QtCore.QObject.connect(self.target(),QtCore.SIGNAL("selected"),self.imgSelect)
@@ -1923,10 +1928,10 @@
 		for name in names:
 			try: num=int(name.rsplit("_",1)[1])
 			except:
-				QtGui.QMessageBox.warning(self,"Error","Please hilight sets with names ending in _# !")
+				QtWidgets.QMessageBox.warning(self,"Error","Please hilight sets with names ending in _# !")
 				return
 			if num in nums:
-				QtGui.QMessageBox.warning(self, "Error","Please select only one group of sets at a time !")
+				QtWidgets.QMessageBox.warning(self, "Error","Please select only one group of sets at a time !")
 				return
 			nums.add(num)
 
@@ -1935,13 +1940,13 @@
 
 			try: comments=self.target().comments[name]
 			except:
-				QtGui.QMessageBox.warning(self,"Error", "No filenames stored in {}".format(name))
+				QtWidgets.QMessageBox.warning(self,"Error", "No filenames stored in {}".format(name))
 				return
 
 			for r in range(len(comments)):
 				try: imn,imf=comments[r].split(";")[:2]
 				except:
-					QtGui.QMessageBox.warning(self,"Error", "Invalid filename {} in {}, line {}".format(comments[r],name,r))
+					QtWidgets.QMessageBox.warning(self,"Error", "Invalid filename {} in {}, line {}".format(comments[r],name,r))
 					return
 
 				imn=int(imn)
@@ -1949,7 +1954,7 @@
 				val=lsx[imf][imn]
 				out[r]=val
 
-		QtGui.QMessageBox.information(None,"Finished","New sets created: "+", ".join(outs))
+		QtWidgets.QMessageBox.information(None,"Finished","New sets created: "+", ".join(outs))
 
 	def doKMeans(self):
 		"""Performs K-means classification, and produces nseg new data sets"""
@@ -1971,7 +1976,7 @@
 				axes=[int(i) for i in axes.split(",")]
 				if max(axes)>=ncol : raise Exception
 			except:
-				QtGui.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
+				QtWidgets.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
 				return
 
 		# Sometimes one axis dominates the classification improperly, this makes each axis equally weighted
@@ -2029,14 +2034,14 @@
 				axes=[int(i) for i in axes.split(",")]
 				if max(axes)>=ncol : raise Exception
 			except:
-				QtGui.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
+				QtWidgets.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
 				return
 
 		try:
 			vals=[float(i) for i in vals.split(",")]
 			if len(vals) != len(axes): raise Exception
 		except:
-			QtGui.QMessageBox.warning(self, "You must specify one (comma separated) value for each axis.")
+			QtWidgets.QMessageBox.warning(self, "You must specify one (comma separated) value for each axis.")
 			return
 
 		if thresh_type == "value":
@@ -2121,8 +2126,8 @@
 		from embrowser import EMBrowserWidget
 		self.browse = EMBrowserWidget(withmodal=True,multiselect=False)
 		self.browse.show()
-		QtCore.QObject.connect(self.browse, QtCore.SIGNAL("ok"),self.setImgFile)
-		QtCore.QObject.connect(self.browse, QtCore.SIGNAL("cancel"),self.canImgFile)
+		self.browse.ok.connect(self.setImgFile)
+		self.browse.cancel.connect(self.canImgFile)
 
 	def canImgFile(self,file=None):
 		return
@@ -2141,7 +2146,7 @@
 		try: self.imgwin.close()
 		except: pass
 
-class DragListWidget(QtGui.QListWidget):
+class DragListWidget(QtWidgets.QListWidget):
 	"This is a minor modification of the QListWidget to support drag-drop of data sets"
 	def setDataSource(self,trg):
 		"""We keep a weak reference to our data source so we can pull the data only when dragging actually starts"""
@@ -2151,7 +2156,7 @@
 		if event.key() == Qt.Key_Backspace:
 			name=str(self.currentItem().text())		# currently hilighted item
 			self.datasource().target().set_data(None,key=name)
-		else: QtGui.QListWidget.keyPressEvent(self,event)
+		else: QtWidgets.QListWidget.keyPressEvent(self,event)
 
 	def dragEnterEvent(self,e):
 		if e.mimeData().hasText() : e.acceptProposedAction()
@@ -2200,13 +2205,13 @@
 
 	def setMovement(self,x):
 		"""The ListView and ListWidget unfortunately make use of drag-drop for internal rearrangement, but we need to use it for widget->widget copy. This prevents the parent from disabling drag/drop."""
-		QtGui.QListWidget.setMovement(self,x)
+		QtWidgets.QListWidget.setMovement(self,x)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 
 	def setViewMode(self,x):
 		"""The ListView and ListWidget unfortunately make use of drag-drop for internal rearrangement, but we need to use it for widget->widget copy. This prevents the parent from disabling drag/drop."""
-		QtGui.QListWidget.setViewMode(self,x)
+		QtWidgets.QListWidget.setViewMode(self,x)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 
@@ -2240,23 +2245,23 @@
 #		print "Dropped ",dropact
 
 
-class EMPlot2DInspector(QtGui.QWidget):
+class EMPlot2DInspector(QtWidgets.QWidget):
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"plot.png"))
 		self.target=weakref.ref(target)
-		vbl0=QtGui.QVBoxLayout(self)
+		vbl0=QtWidgets.QVBoxLayout(self)
 
-		hbl = QtGui.QHBoxLayout()
-		hbl.setMargin(2)
+		hbl = QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(2, 2, 2, 2)
 		hbl.setSpacing(6)
 		hbl.setObjectName("hbl")
 
-		gbx = QtGui.QGroupBox("Data sets")
+		gbx = QtWidgets.QGroupBox("Data sets")
 
-		vbl3 = QtGui.QVBoxLayout()
-		vbl3.setMargin(4)
+		vbl3 = QtWidgets.QVBoxLayout()
+		vbl3.setContentsMargins(4, 4, 4, 4)
 		vbl3.setSpacing(6)
 		vbl3.setObjectName("vbl3")
 		gbx.setLayout(vbl3)
@@ -2266,21 +2271,21 @@
 		self.setlist=DragListWidget(self)
 		self.setlist.setDataSource(self)
 		self.setlist.setSelectionMode(3)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 		vbl3.addWidget(self.setlist)
 
 		# none and all buttons for turning plot display on and off
-		hbl6 = QtGui.QHBoxLayout()
+		hbl6 = QtWidgets.QHBoxLayout()
 		hbl.setObjectName("hbl6")
 		vbl3.addLayout(hbl6)
 
-		self.nonebut=QtGui.QPushButton(self)
+		self.nonebut=QtWidgets.QPushButton(self)
 		self.nonebut.setText("None")
 		hbl6.addWidget(self.nonebut)
 
-		self.allbut=QtGui.QPushButton(self)
+		self.allbut=QtWidgets.QPushButton(self)
 		self.allbut.setText("All")
 		hbl6.addWidget(self.allbut)
 
@@ -2290,7 +2295,7 @@
 		vbl3.addWidget(self.showslide)
 
 		# number and step for the slider
-		hbl7 = QtGui.QHBoxLayout()
+		hbl7 = QtWidgets.QHBoxLayout()
 		hbl.setObjectName("hbl7")
 		vbl3.addLayout(hbl7)
 
@@ -2300,52 +2305,52 @@
 		self.stepbox=ValBox(label="stp:",value=1)
 		hbl7.addWidget(self.stepbox)
 
-		vbl = QtGui.QVBoxLayout()
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout()
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.setObjectName("vbl")
 		hbl.addLayout(vbl)
 
-		hbl0=QtGui.QHBoxLayout()
-		hbl0.setMargin(0)
+		hbl0=QtWidgets.QHBoxLayout()
+		hbl0.setContentsMargins(0, 0, 0, 0)
 		hbl0.setSpacing(6)
 		vbl.addLayout(hbl0)
 
-		self.saveb=QtGui.QPushButton(self)
+		self.saveb=QtWidgets.QPushButton(self)
 		self.saveb.setText("Save")
 		hbl0.addWidget(self.saveb)
 
-		self.concatb=QtGui.QPushButton(self)
+		self.concatb=QtWidgets.QPushButton(self)
 		self.concatb.setText("Concat")
 		hbl0.addWidget(self.concatb)
 
-		self.pdfb=QtGui.QPushButton(self)
+		self.pdfb=QtWidgets.QPushButton(self)
 		self.pdfb.setText("PDF")
 #		self.pdfb.setEnabled(False)
 		hbl0.addWidget(self.pdfb)
 
-		hbl01=QtGui.QHBoxLayout()
-		hbl01.setMargin(0)
+		hbl01=QtWidgets.QHBoxLayout()
+		hbl01.setContentsMargins(0, 0, 0, 0)
 		hbl01.setSpacing(6)
 		vbl.addLayout(hbl01)
 
-		self.stats=QtGui.QPushButton(self)
+		self.stats=QtWidgets.QPushButton(self)
 		self.stats.setText("Statistics")
 		hbl01.addWidget(self.stats)
 
-		self.regress=QtGui.QPushButton(self)
+		self.regress=QtWidgets.QPushButton(self)
 		self.regress.setText("Regression")
 		hbl01.addWidget(self.regress)
 
-		self.classb=QtGui.QPushButton(self)
+		self.classb=QtWidgets.QPushButton(self)
 		self.classb.setText("Classification")
 		hbl01.addWidget(self.classb)
 
-		hbl1 = QtGui.QHBoxLayout()
-		hbl1.setMargin(0)
+		hbl1 = QtWidgets.QHBoxLayout()
+		hbl1.setContentsMargins(0, 0, 0, 0)
 		hbl1.setSpacing(6)
 
-		self.color=QtGui.QComboBox(self)
+		self.color=QtWidgets.QComboBox(self)
 		self.color.addItem("black")
 		self.color.addItem("blue")
 		self.color.addItem("red")
@@ -2358,45 +2363,45 @@
 
 		vbl.addLayout(hbl1)
 
-		hbl2 = QtGui.QHBoxLayout()
-		hbl2.setMargin(0)
+		hbl2 = QtWidgets.QHBoxLayout()
+		hbl2.setContentsMargins(0, 0, 0, 0)
 		hbl2.setSpacing(6)
 		vbl.addLayout(hbl2)
 
 		# This is for line parms
-		vbl2a = QtGui.QVBoxLayout()
-		vbl2a.setMargin(0)
+		vbl2a = QtWidgets.QVBoxLayout()
+		vbl2a.setContentsMargins(0, 0, 0, 0)
 		vbl2a.setSpacing(6)
 		hbl2.addLayout(vbl2a)
 
-		self.lintog=QtGui.QPushButton(self)
+		self.lintog=QtWidgets.QPushButton(self)
 		self.lintog.setText("Line")
 		self.lintog.setCheckable(1)
 		vbl2a.addWidget(self.lintog)
 
-		self.linsel=QtGui.QComboBox(self)
+		self.linsel=QtWidgets.QComboBox(self)
 		self.linsel.addItem("------")
 		self.linsel.addItem("- - - -")
 		self.linsel.addItem(".......")
 		self.linsel.addItem("-.-.-.-")
 		vbl2a.addWidget(self.linsel)
 
-		self.linwid=QtGui.QSpinBox(self)
+		self.linwid=QtWidgets.QSpinBox(self)
 		self.linwid.setRange(1,10)
 		vbl2a.addWidget(self.linwid)
 
 		# This is for point parms
-		vbl2b = QtGui.QVBoxLayout()
-		vbl2b.setMargin(0)
+		vbl2b = QtWidgets.QVBoxLayout()
+		vbl2b.setContentsMargins(0, 0, 0, 0)
 		vbl2b.setSpacing(6)
 		hbl2.addLayout(vbl2b)
 
-		self.symtog=QtGui.QPushButton(self)
+		self.symtog=QtWidgets.QPushButton(self)
 		self.symtog.setText("Symbol")
 		self.symtog.setCheckable(1)
 		vbl2b.addWidget(self.symtog)
 
-		self.symsel=QtGui.QComboBox(self)
+		self.symsel=QtWidgets.QComboBox(self)
 		self.symsel.addItem("circle")
 		self.symsel.addItem("square")
 		self.symsel.addItem("plus")
@@ -2404,7 +2409,7 @@
 		self.symsel.addItem("tridown")
 		vbl2b.addWidget(self.symsel)
 
-		self.symsize=QtGui.QSpinBox(self)
+		self.symsize=QtWidgets.QSpinBox(self)
 		self.symsize.setRange(0,25)
 		vbl2b.addWidget(self.symsize)
 
@@ -2429,36 +2434,36 @@
 		#vbl2c.addWidget(self.hmbins)
 
 		# per plot column selectors
-		gl=QtGui.QGridLayout()
-		gl.addWidget(QtGui.QLabel("X Col:",self),0,0,Qt.AlignRight)
-		self.slidex=QtGui.QSpinBox(self)
+		gl=QtWidgets.QGridLayout()
+		gl.addWidget(QtWidgets.QLabel("X Col:",self),0,0,Qt.AlignRight)
+		self.slidex=QtWidgets.QSpinBox(self)
 		self.slidex.setRange(-1,1)
 		gl.addWidget(self.slidex,0,1,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("Y Col:",self),1,0,Qt.AlignRight)
-		self.slidey=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("Y Col:",self),1,0,Qt.AlignRight)
+		self.slidey=QtWidgets.QSpinBox(self)
 		self.slidey.setRange(-1,1)
 		gl.addWidget(self.slidey,1,1,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("C Col:",self),0,2,Qt.AlignRight)
-		self.slidec=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("C Col:",self),0,2,Qt.AlignRight)
+		self.slidec=QtWidgets.QSpinBox(self)
 		self.slidec.setRange(-2,1)
 		gl.addWidget(self.slidec,0,3,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("S Col:",self),1,2,Qt.AlignRight)
-		self.slides=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("S Col:",self),1,2,Qt.AlignRight)
+		self.slides=QtWidgets.QSpinBox(self)
 		self.slides.setRange(-2,1)
 		gl.addWidget(self.slides,1,3,Qt.AlignLeft)
 		vbl.addLayout(gl)
 
-		hbl2 = QtGui.QHBoxLayout()
+		hbl2 = QtWidgets.QHBoxLayout()
 
-		self.xlogtog=QtGui.QPushButton(self)
+		self.xlogtog=QtWidgets.QPushButton(self)
 		self.xlogtog.setText("X Log")
 		self.xlogtog.setCheckable(1)
 		hbl2.addWidget(self.xlogtog)
 
-		self.ylogtog=QtGui.QPushButton(self)
+		self.ylogtog=QtWidgets.QPushButton(self)
 		self.ylogtog.setText("Y Log")
 		self.ylogtog.setCheckable(1)
 		hbl2.addWidget(self.ylogtog)
@@ -2470,46 +2475,46 @@
 
 		vbl.addLayout(hbl2)
 
-		self.wrescale=QtGui.QPushButton(self)
+		self.wrescale=QtWidgets.QPushButton(self)
 		self.wrescale.setText("Rescale")
 		vbl.addWidget(self.wrescale)
 
 		xiangan_liu = False
 		if xiangan_liu:
-			hbl3 = QtGui.QHBoxLayout()
+			hbl3 = QtWidgets.QHBoxLayout()
 
-			self.good_button=QtGui.QPushButton(self)
+			self.good_button=QtWidgets.QPushButton(self)
 			self.good_button.setText("Good")
 			self.good_button.setCheckable(0)
 			hbl3.addWidget(self.good_button)
 
-			self.bad_button=QtGui.QPushButton(self)
+			self.bad_button=QtWidgets.QPushButton(self)
 			self.bad_button.setText("Bad")
 			self.bad_button.setCheckable(0)
 			hbl3.addWidget(self.bad_button)
 			vbl0.addLayout(hbl3)
-			QtCore.QObject.connect(self.good_button,QtCore.SIGNAL("clicked(bool)"),self.on_good_button)
-			QtCore.QObject.connect(self.bad_button,QtCore.SIGNAL("clicked(bool)"),self.on_bad_button)
+			self.good_button.clicked[bool].connect(self.on_good_button)
+			self.bad_button.clicked[bool].connect(self.on_bad_button)
 
 		vbl0.addLayout(hbl)
 
-		hbl2a=QtGui.QHBoxLayout()
+		hbl2a=QtWidgets.QHBoxLayout()
 
-		self.wl1=QtGui.QLabel("Min")
+		self.wl1=QtWidgets.QLabel("Min")
 		self.wl1.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl1)
-		self.wl2=QtGui.QLabel("Max")
+		self.wl2=QtWidgets.QLabel("Max")
 		self.wl2.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl2)
-		self.wl3=QtGui.QLabel("Min")
+		self.wl3=QtWidgets.QLabel("Min")
 		self.wl3.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl3)
-		self.wl4=QtGui.QLabel("Max")
+		self.wl4=QtWidgets.QLabel("Max")
 		self.wl4.setAlignment(Qt.AlignHCenter)
 		hbl2a.addWidget(self.wl4)
 		vbl0.addLayout(hbl2a)
 
-		hbl2=QtGui.QHBoxLayout()
+		hbl2=QtWidgets.QHBoxLayout()
 
 		#hbl2.addWidget(QtGui.QLabel("X:",self))
 		#self.wxmin=QtGui.QLineEdit(self)
@@ -2527,7 +2532,7 @@
 
 		vbl0.addLayout(hbl2)
 
-		hbl3=QtGui.QHBoxLayout()
+		hbl3=QtWidgets.QHBoxLayout()
 
 		self.wcmin=ValBox(label="C:")
 		hbl3.addWidget(self.wcmin)
@@ -2541,19 +2546,19 @@
 		vbl0.addLayout(hbl3)
 
 
-		hbl4 = QtGui.QHBoxLayout()
-		hbl4.addWidget(QtGui.QLabel("X Label:",self))
-		self.xlabel=QtGui.QLineEdit(self)
+		hbl4 = QtWidgets.QHBoxLayout()
+		hbl4.addWidget(QtWidgets.QLabel("X Label:",self))
+		self.xlabel=QtWidgets.QLineEdit(self)
 		hbl4.addWidget(self.xlabel)
 		vbl0.addLayout(hbl4)
 
-		hbl5 = QtGui.QHBoxLayout()
-		hbl5.addWidget(QtGui.QLabel("Y Label:",self))
-		self.ylabel=QtGui.QLineEdit(self)
+		hbl5 = QtWidgets.QHBoxLayout()
+		hbl5.addWidget(QtWidgets.QLabel("Y Label:",self))
+		self.ylabel=QtWidgets.QLineEdit(self)
 		hbl5.addWidget(self.ylabel)
 		vbl0.addLayout(hbl5)
 
-		hbl6 = QtGui.QHBoxLayout()
+		hbl6 = QtWidgets.QHBoxLayout()
 		#hbl6.addWidget(QtGui.QLabel("Transparency:",self))
 		self.alphaslider=ValSlider(self,(0,1),"Transparency:",0.5,50)
 		hbl6.addWidget(self.alphaslider)
@@ -2567,48 +2572,48 @@
 		self.statswin=None
 		self.regresswin=None
 
-		QtCore.QObject.connect(self.showslide, QtCore.SIGNAL("valueChanged"), self.selSlide)
-		QtCore.QObject.connect(self.allbut, QtCore.SIGNAL("clicked()"), self.selAll)
-		QtCore.QObject.connect(self.nonebut, QtCore.SIGNAL("clicked()"), self.selNone)
-
-		QtCore.QObject.connect(self.slidex, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slidey, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slidec, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slides, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.list_item_changed)
-		QtCore.QObject.connect(self.color,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotColor)
-		QtCore.QObject.connect(self.classb,QtCore.SIGNAL("clicked()"),self.openClassWin)
+		self.showslide.valueChanged.connect(self.selSlide)
+		self.allbut.clicked.connect(self.selAll)
+		self.nonebut.clicked.connect(self.selNone)
+
+		self.slidex.valueChanged[int].connect(self.newCols)
+		self.slidey.valueChanged[int].connect(self.newCols)
+		self.slidec.valueChanged[int].connect(self.newCols)
+		self.slides.valueChanged[int].connect(self.newCols)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.itemChanged[QListWidgetItem].connect(self.list_item_changed)
+		self.color.currentIndexChanged['QString'].connect(self.updPlotColor)
+		self.classb.clicked.connect(self.openClassWin)
 		#QtCore.QObject.connect(self.hmsel,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.symtog,QtCore.SIGNAL("clicked()"),self.updPlot)
+		self.symtog.clicked.connect(self.updPlot)
 		#QtCore.QObject.connect(self.hmsel,QtCore.SIGNAL("clicked()"),self.updPlotHmsel)
 		#QtCore.QObject.connect(self.hmbins,QtCore.SIGNAL("clicked()"),self.updPlotHmbins)
-		QtCore.QObject.connect(self.symsel,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotSymsel)
-		QtCore.QObject.connect(self.symsize,QtCore.SIGNAL("valueChanged(int)"),self.updPlotSymsize)
-		QtCore.QObject.connect(self.xlogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.ylogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
+		self.symsel.currentIndexChanged['QString'].connect(self.updPlotSymsel)
+		self.symsize.valueChanged[int].connect(self.updPlotSymsize)
+		self.xlogtog.clicked.connect(self.updPlot)
+		self.ylogtog.clicked.connect(self.updPlot)
 		#QtCore.QObject.connect(self.zlogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.lintog,QtCore.SIGNAL("clicked()"),self.updPlot)
+		self.lintog.clicked.connect(self.updPlot)
 		#QtCore.QObject.connect(self.hmtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.linsel,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotLinsel)
-		QtCore.QObject.connect(self.linwid,QtCore.SIGNAL("valueChanged(int)"),self.updPlotLinwid)
-		QtCore.QObject.connect(self.xlabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.ylabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.stats,QtCore.SIGNAL("clicked()"),self.openStatsWin)
-		QtCore.QObject.connect(self.regress,QtCore.SIGNAL("clicked()"),self.openRegrWin)
-		QtCore.QObject.connect(self.saveb,QtCore.SIGNAL("clicked()"),self.savePlot)
-		QtCore.QObject.connect(self.pdfb,QtCore.SIGNAL("clicked()"),self.savePdf)
-		QtCore.QObject.connect(self.concatb,QtCore.SIGNAL("clicked()"),self.saveConcatPlot)
-		QtCore.QObject.connect(self.wxmin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wxmax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wymin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wymax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wcmin,QtCore.SIGNAL("valueChanged"),self.newCLimits)
-		QtCore.QObject.connect(self.wcmax,QtCore.SIGNAL("valueChanged"),self.newCLimits)
-		QtCore.QObject.connect(self.wsmin,QtCore.SIGNAL("valueChanged"),self.newSLimits)
-		QtCore.QObject.connect(self.wsmax,QtCore.SIGNAL("valueChanged"),self.newSLimits)
-		QtCore.QObject.connect(self.wrescale,QtCore.SIGNAL("clicked()"),self.autoScale)
-		QtCore.QObject.connect(self.alphaslider,QtCore.SIGNAL("valueChanged"),self.updAlpha)
+		self.linsel.currentIndexChanged['QString'].connect(self.updPlotLinsel)
+		self.linwid.valueChanged[int].connect(self.updPlotLinwid)
+		self.xlabel.textChanged['QString'].connect(self.updPlot)
+		self.ylabel.textChanged['QString'].connect(self.updPlot)
+		self.stats.clicked.connect(self.openStatsWin)
+		self.regress.clicked.connect(self.openRegrWin)
+		self.saveb.clicked.connect(self.savePlot)
+		self.pdfb.clicked.connect(self.savePdf)
+		self.concatb.clicked.connect(self.saveConcatPlot)
+		self.wxmin.valueChanged.connect(self.newLimits)
+		self.wxmax.valueChanged.connect(self.newLimits)
+		self.wymin.valueChanged.connect(self.newLimits)
+		self.wymax.valueChanged.connect(self.newLimits)
+		self.wcmin.valueChanged.connect(self.newCLimits)
+		self.wcmax.valueChanged.connect(self.newCLimits)
+		self.wsmin.valueChanged.connect(self.newSLimits)
+		self.wsmax.valueChanged.connect(self.newSLimits)
+		self.wrescale.clicked.connect(self.autoScale)
+		self.alphaslider.valueChanged.connect(self.updAlpha)
 
 		self.newSet(0)
 		self.datachange()
@@ -3000,7 +3005,7 @@
 		parms = self.target().pparm # get the colors from this
 
 		for i,j in enumerate(keys) :
-			a = QtGui.QListWidgetItem(j)
+			a = QtWidgets.QListWidgetItem(j)
 			a.setFlags(flags)
 			try: a.setTextColor(qt_color_map[colortypes[parms[j][0]]])
 			except:
@@ -3057,20 +3062,20 @@
 	app.show()
 	app.execute()
 
-class EMDataFnPlotter(QtGui.QWidget):
+class EMDataFnPlotter(QtWidgets.QWidget):
 
 	def __init__(self, parent = None, data=None):
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		self.setWindowTitle("Plotter")
 
 		self.resize(780, 580)
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		self.plot = EMPlot2DWidget(parent=self)
 		self.gbl.addWidget(self.plot,0,0,1,1)
 
-		self.lplot = QtGui.QLabel("Plot")
+		self.lplot = QtWidgets.QLabel("Plot")
 		self.gbl.addWidget(self.plot,1,0)
 
 		if data!=None :
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emplot3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emplot3d.py	2017-10-21 17:14:59.000000000 -0500
@@ -32,6 +32,8 @@
 #
 #
 
+QStringList = list
+
 ploticon = [
     '15 14 2 1',
     'b c #000055',
@@ -56,10 +58,10 @@
 	try: return float(x)
 	except: return 0.0
 
-import PyQt4
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtOpenGL import QGLWidget
-from PyQt4.QtCore import Qt
+import PyQt5
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWebKitWidgets, QtWidgets
+from PyQt5.QtOpenGL import QGLWidget
+from PyQt5.QtCore import Qt
 from OpenGL import GL,GLU
 from OpenGL.GL import *
 import OpenGL.GL as gl
@@ -108,6 +110,7 @@
 class EMPlot3DWidget(EMGLWidget):
 	"""A QT widget for drawing 3-D plots using matplotlib
 	"""
+	selected = QtCore.pyqtSignal()
 
 	def __init__(self,application=None,winid=None,parent=None):
 
@@ -207,13 +210,13 @@
 		if event.key() == Qt.Key_C:
 			self.show_inspector(1)
 		elif event.key() == Qt.Key_F1:
-			try: from PyQt4 import QtWebKit
+			try: from PyQt5 import QtWebKit
 			except: return
 			try:
 				try:
 					test = self.browser
 				except:
-					self.browser = QtWebKit.QWebView()
+					self.browser = QtWebKitWidgets.QWebView()
 					self.browser.load(QtCore.QUrl("http://blake.bcm.edu/emanwiki/e2display"))
 					self.browser.resize(800,800)
 
@@ -855,7 +858,7 @@
 
 
 
-		self.emit(QtCore.SIGNAL("selected"),self.selected)
+		self.selected.emit(self.selected)
 
 	def mousePressEvent(self, event):
 #		lc=self.scr2plot(event.x(),event.y())
@@ -1004,7 +1007,7 @@
 		if self.inspector: self.inspector.update()
 
 	def wheelEvent(self, event):
-		if event.delta()<0: scale=1.05
+		if event.angleDelta().y()<0: scale=1.05
 		else: scale=1.0/1.05
 		
 		xrng=self.xlimits[1]-self.xlimits[0]
@@ -1028,29 +1031,29 @@
 		pass
 
 
-class EMPlot3DStatsInsp(QtGui.QWidget):
+class EMPlot3DStatsInsp(QtWidgets.QWidget):
 
 	"""This class implements the statistics pop-up from the EMPlot3DInspector"""
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
-		gbl0=QtGui.QGridLayout(self)
+		gbl0=QtWidgets.QGridLayout(self)
 
-		self.summary=QtGui.QPushButton(self)
+		self.summary=QtWidgets.QPushButton(self)
 		self.summary.setText("Summary Table")
 		gbl0.addWidget(self.summary,2,0,1,2)
 
-		hl1 = QtGui.QFrame()
-		hl1.setFrameStyle(QtGui.QFrame.HLine)
-		hl1.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl1 = QtWidgets.QFrame()
+		hl1.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl1.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl1,3,0,1,2)
 
-		self.wlnorm=QtGui.QLabel(self)
+		self.wlnorm=QtWidgets.QLabel(self)
 		self.wlnorm.setText("Test:")
 		gbl0.addWidget(self.wlnorm,4,0)
 
-		self.wcomb_test=QtGui.QComboBox(self)
+		self.wcomb_test=QtWidgets.QComboBox(self)
 		self.wcomb_test.addItem("Welch's t-test")
 		self.wcomb_test.addItem("Student's t-test")
 		self.wcomb_test.addItem("Hotelling's T-squared test")
@@ -1072,23 +1075,23 @@
 		self.wnround.intonly=1
 		gbl0.addWidget(self.wnround,6,1)
 
-		self.run=QtGui.QPushButton(self)
+		self.run=QtWidgets.QPushButton(self)
 		self.run.setText("Compute")
 		gbl0.addWidget(self.run,8,0,1,2)
 
-		hl2 = QtGui.QFrame()
-		hl2.setFrameStyle(QtGui.QFrame.HLine)
-		hl2.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl2 = QtWidgets.QFrame()
+		hl2.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl2.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl2,9,0,1,2)
 
-		self.table = QtGui.QTableWidget() #QtGui.QTextEdit()
+		self.table = QtWidgets.QTableWidget() #QtWidgets.QTextEdit()
 		self.table.setRowCount(1)
 		self.table.setColumnCount(1)
 		self.table.setSortingEnabled(True)
 		gbl0.addWidget(self.table,10,0,2,2)
 
-		QtCore.QObject.connect(self.summary,QtCore.SIGNAL("clicked()"),self.printSummary)
-		QtCore.QObject.connect(self.run,QtCore.SIGNAL("clicked()"),self.runTest)
+		self.summary.clicked.connect(self.printSummary)
+		self.run.clicked.connect(self.runTest)
 
 		self.imgwin=None
 
@@ -1140,7 +1143,7 @@
 			for s,stat in enumerate(stats):
 				if s == 0: item = str(int(stat))
 				else: item = str(round(stat,rnd))
-				self.table.setItem( c, s, QtGui.QTableWidgetItem(item) )
+				self.table.setItem( c, s, QtWidgets.QTableWidgetItem(item) )
 
 	def runTest(self):
 		stat = str(self.wcomb_test.currentText())
@@ -1175,25 +1178,25 @@
 		for i, r in enumerate(result):
 			for j, c in enumerate(r):
 				item = str(c)
-				self.table.setItem( j, i, QtGui.QTableWidgetItem(item) )
+				self.table.setItem( j, i, QtWidgets.QTableWidgetItem(item) )
 
 	def replaceRowLabels(self,rows):
-		self.table.setVerticalHeaderLabels(QtCore.QStringList(rows))
+		self.table.setVerticalHeaderLabels(QStringList(rows))
 
 	def replaceColumnLabels(self,cols):
-		self.table.setHorizontalHeaderLabels(QtCore.QStringList(cols))
+		self.table.setHorizontalHeaderLabels(QStringList(cols))
 
 	def replaceTableLabels(self,cols):
-		self.table.setHorizontalHeaderLabels(QtCore.QStringList(cols))
-		self.table.setVerticalHeaderLabels(QtCore.QStringList(cols))
+		self.table.setHorizontalHeaderLabels(QStringList(cols))
+		self.table.setVerticalHeaderLabels(QStringList(cols))
 
-class EMPlot3DRegrInsp(QtGui.QWidget):
+class EMPlot3DRegrInsp(QtWidgets.QWidget):
 	"""This class implements the regression pop-up from the EMPlot3DInspector"""
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
-		gbl0=QtGui.QGridLayout(self)
+		gbl0=QtWidgets.QGridLayout(self)
 
 		insp = self.target().get_inspector()
 
@@ -1217,21 +1220,21 @@
 		self.wnpts.intonly=1
 		gbl0.addWidget(self.wnpts,4,1)
 
-		self.wlnorm=QtGui.QLabel(self)
+		self.wlnorm=QtWidgets.QLabel(self)
 		self.wlnorm.setText("Normalization:")
 		gbl0.addWidget(self.wlnorm,6,0)
 
-		self.wcomb_norm=QtGui.QComboBox(self)
+		self.wcomb_norm=QtWidgets.QComboBox(self)
 		self.wcomb_norm.addItem("None")
 		self.wcomb_norm.addItem("Standardize")
 		self.wcomb_norm.addItem("Maxmin")
 		gbl0.addWidget(self.wcomb_norm,6,1)
 
-		self.regrb=QtGui.QPushButton(self)
+		self.regrb=QtWidgets.QPushButton(self)
 		self.regrb.setText("Regress")
 		gbl0.addWidget(self.regrb,8,0,1,2)
 
-		QtCore.QObject.connect(self.regrb,QtCore.SIGNAL("clicked()"),self.doRegression)
+		self.regrb.clicked.connect(self.doRegression)
 
 		self.imgwin=None
 
@@ -1255,7 +1258,7 @@
 			zaxes=[int(i) for i in zaxes.split(",")]
 			if max(zaxes)>=ncol : raise Exception
 		except:
-			pass #QtGui.QMessageBox.warning(self, "Axes must be a comma separated list of column numbers")
+			pass #QtWidgets.QMessageBox.warning(self, "Axes must be a comma separated list of column numbers")
 			#return
 
 		xs = ",".join([str(i) for i in xaxes])
@@ -1322,13 +1325,13 @@
 		elif norm == "None":
 			return x
 
-class EMPlot3DClassInsp(QtGui.QWidget):
+class EMPlot3DClassInsp(QtWidgets.QWidget):
 	"""This class implements the classification pop-up from the EMPlot3DInspector"""
 	def __init__(self,target) :
 
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.target=weakref.ref(target)
-		gbl0=QtGui.QGridLayout(self)
+		gbl0=QtWidgets.QGridLayout(self)
 
 		#self.wimgfile=StringBox(label="Images:")
 		#gbl0.addWidget(self.wimgfile,0,0)
@@ -1337,7 +1340,7 @@
 		#self.wimgfilebut.setText("Browse")
 		#gbl0.addWidget(self.wimgfilebut,0,1)
 
-		self.kmeansb=QtGui.QPushButton(self)
+		self.kmeansb=QtWidgets.QPushButton(self)
 		self.kmeansb.setText("K-means")
 		gbl0.addWidget(self.kmeansb,2,0,1,2)
 
@@ -1351,12 +1354,12 @@
 		self.wcbaxnorm=CheckBox(label="Eq Wt Axes:",value=0)
 		gbl0.addWidget(self.wcbaxnorm,6,0)
 
-		hl1 = QtGui.QFrame()
-		hl1.setFrameStyle(QtGui.QFrame.HLine)
-		hl1.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl1 = QtWidgets.QFrame()
+		hl1.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl1.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl1,7,0,1,2)
 
-		self.threshb=QtGui.QPushButton(self)
+		self.threshb=QtWidgets.QPushButton(self)
 		self.threshb.setText("Threshold")
 		gbl0.addWidget(self.threshb,8,0,1,2)
 
@@ -1367,7 +1370,7 @@
 		self.wnax_thresh=StringBox(label="Axes:",value="0")
 		gbl0.addWidget(self.wnax_thresh,10,1)
 
-		self.wcomb_threshtype=QtGui.QComboBox(self)
+		self.wcomb_threshtype=QtWidgets.QComboBox(self)
 		self.wcomb_threshtype.addItem("value")
 		self.wcomb_threshtype.addItem("sigma")
 		self.wcomb_threshtype.addItem("median")
@@ -1375,21 +1378,21 @@
 		self.wcomb_threshtype.addItem("percentile")
 		gbl0.addWidget(self.wcomb_threshtype,12,0)
 
-		hl2 = QtGui.QFrame()
-		hl2.setFrameStyle(QtGui.QFrame.HLine)
-		hl2.setSizePolicy(QtGui.QSizePolicy.Minimum,QtGui.QSizePolicy.Expanding)
+		hl2 = QtWidgets.QFrame()
+		hl2.setFrameStyle(QtWidgets.QFrame.HLine)
+		hl2.setSizePolicy(QtWidgets.QSizePolicy.Minimum,QtWidgets.QSizePolicy.Expanding)
 		gbl0.addWidget(hl2,13,0,1,2)
 
 		self.wspfix=StringBox(label="Prefix:",value="split")
 		gbl0.addWidget(self.wspfix,14,0)
 
-		self.wbmakeset=QtGui.QPushButton()
+		self.wbmakeset=QtWidgets.QPushButton()
 		self.wbmakeset.setText("New Sets")
 		gbl0.addWidget(self.wbmakeset,14,1)
 
-		QtCore.QObject.connect(self.kmeansb,QtCore.SIGNAL("clicked()"),self.doKMeans)
-		QtCore.QObject.connect(self.threshb,QtCore.SIGNAL("clicked()"),self.doThresh)
-		QtCore.QObject.connect(self.wbmakeset,QtCore.SIGNAL("clicked()"),self.doMakeSet)
+		self.kmeansb.clicked.connect(self.doKMeans)
+		self.threshb.clicked.connect(self.doThresh)
+		self.wbmakeset.clicked.connect(self.doMakeSet)
 
 		#QtCore.QObject.connect(self.wimgfilebut,QtCore.SIGNAL("clicked()"),self.selectImgFile)
 		#QtCore.QObject.connect(self.target(),QtCore.SIGNAL("selected"),self.imgSelect)
@@ -1413,10 +1416,10 @@
 		for name in names:
 			try: num=int(name.rsplit("_",1)[1])
 			except:
-				QtGui.QMessageBox.warning(self,"Error","Please hilight sets with names ending in _# !")
+				QtWidgets.QMessageBox.warning(self,"Error","Please hilight sets with names ending in _# !")
 				return
 			if num in nums:
-				QtGui.QMessageBox.warning(self, "Error","Please select only one group of sets at a time !")
+				QtWidgets.QMessageBox.warning(self, "Error","Please select only one group of sets at a time !")
 				return
 			nums.add(num)
 
@@ -1425,13 +1428,13 @@
 
 			try: comments=self.target().comments[name]
 			except:
-				QtGui.QMessageBox.warning(self,"Error", "No filenames stored in {}".format(name))
+				QtWidgets.QMessageBox.warning(self,"Error", "No filenames stored in {}".format(name))
 				return
 
 			for r in range(len(comments)):
 				try: imn,imf=comments[r].split(";")[:2]
 				except:
-					QtGui.QMessageBox.warning(self,"Error", "Invalid filename {} in {}, line {}".format(comments[r],name,r))
+					QtWidgets.QMessageBox.warning(self,"Error", "Invalid filename {} in {}, line {}".format(comments[r],name,r))
 					return
 
 				imn=int(imn)
@@ -1439,7 +1442,7 @@
 				val=lsx[imf][imn]
 				out[r]=val
 
-		QtGui.QMessageBox.information(None,"Finished","New sets created: "+", ".join(outs))
+		QtWidgets.QMessageBox.information(None,"Finished","New sets created: "+", ".join(outs))
 
 	def doKMeans(self):
 		"""Performs K-means classification, and produces nseg new data sets"""
@@ -1461,7 +1464,7 @@
 				axes=[int(i) for i in axes.split(",")]
 				if max(axes)>=ncol : raise Exception
 			except:
-				QtGui.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
+				QtWidgets.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
 				return
 
 		# Sometimes one axis dominates the classification improperly, this makes each axis equally weighted
@@ -1519,14 +1522,14 @@
 				axes=[int(i) for i in axes.split(",")]
 				if max(axes)>=ncol : raise Exception
 			except:
-				QtGui.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
+				QtWidgets.QMessageBox.warning(self, "Axes must be 'all' or a comma separated list of column numbers")
 				return
 
 		try:
 			vals=[float(i) for i in vals.split(",")]
 			if len(vals) != len(axes): raise Exception
 		except:
-			QtGui.QMessageBox.warning(self, "You must specify one (comma separated) value for each axis.")
+			QtWidgets.QMessageBox.warning(self, "You must specify one (comma separated) value for each axis.")
 			return
 
 		if thresh_type == "value":
@@ -1611,8 +1614,8 @@
 		from embrowser import EMBrowserWidget
 		self.browse = EMBrowserWidget(withmodal=True,multiselect=False)
 		self.browse.show()
-		QtCore.QObject.connect(self.browse, QtCore.SIGNAL("ok"),self.setImgFile)
-		QtCore.QObject.connect(self.browse, QtCore.SIGNAL("cancel"),self.canImgFile)
+		self.browse.ok.connect(self.setImgFile)
+		self.browse.cancel.connect(self.canImgFile)
 
 	def canImgFile(self,file=None):
 		return
@@ -1631,7 +1634,7 @@
 		try: self.imgwin.close()
 		except: pass
 
-class DragListWidget(QtGui.QListWidget):
+class DragListWidget(QtWidgets.QListWidget):
 	"This is a minor modification of the QListWidget to support drag-drop of data sets"
 	def setDataSource(self,trg):
 		"""We keep a weak reference to our data source so we can pull the data only when dragging actually starts"""
@@ -1641,7 +1644,7 @@
 		if event.key() == Qt.Key_Backspace:
 			name=str(self.currentItem().text())		# currently hilighted item
 			self.datasource().target().set_data(None,key=name)
-		else: QtGui.QListWidget.keyPressEvent(self,event)
+		else: QtWidgets.QListWidget.keyPressEvent(self,event)
 
 	def dragEnterEvent(self,e):
 		if e.mimeData().hasText() : e.acceptProposedAction()
@@ -1690,13 +1693,13 @@
 
 	def setMovement(self,x):
 		"""The ListView and ListWidget unfortunately make use of drag-drop for internal rearrangement, but we need to use it for widget->widget copy. This prevents the parent from disabling drag/drop."""
-		QtGui.QListWidget.setMovement(self,x)
+		QtWidgets.QListWidget.setMovement(self,x)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 
 	def setViewMode(self,x):
 		"""The ListView and ListWidget unfortunately make use of drag-drop for internal rearrangement, but we need to use it for widget->widget copy. This prevents the parent from disabling drag/drop."""
-		QtGui.QListWidget.setViewMode(self,x)
+		QtWidgets.QListWidget.setViewMode(self,x)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 
@@ -1730,23 +1733,23 @@
 #		print "Dropped ",dropact
 
 
-class EMPlot3DInspector(QtGui.QWidget):
+class EMPlot3DInspector(QtWidgets.QWidget):
 
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"plot.png"))
 		self.target=weakref.ref(target)
-		vbl0=QtGui.QVBoxLayout(self)
+		vbl0=QtWidgets.QVBoxLayout(self)
 
-		hbl = QtGui.QHBoxLayout()
-		hbl.setMargin(2)
+		hbl = QtWidgets.QHBoxLayout()
+		hbl.setContentsMargins(2, 2, 2, 2)
 		hbl.setSpacing(6)
 		hbl.setObjectName("hbl")
 
-		gbx = QtGui.QGroupBox("Data sets")
+		gbx = QtWidgets.QGroupBox("Data sets")
 
-		vbl3 = QtGui.QVBoxLayout()
-		vbl3.setMargin(4)
+		vbl3 = QtWidgets.QVBoxLayout()
+		vbl3.setContentsMargins(4, 4, 4, 4)
 		vbl3.setSpacing(6)
 		vbl3.setObjectName("vbl3")
 		gbx.setLayout(vbl3)
@@ -1756,21 +1759,21 @@
 		self.setlist=DragListWidget(self)
 		self.setlist.setDataSource(self)
 		self.setlist.setSelectionMode(3)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.setlist.setDragEnabled(True)
 		self.setlist.setAcceptDrops(True)
 		vbl3.addWidget(self.setlist)
 
 		# none and all buttons for turning plot display on and off
-		hbl6 = QtGui.QHBoxLayout()
+		hbl6 = QtWidgets.QHBoxLayout()
 		hbl.setObjectName("hbl6")
 		vbl3.addLayout(hbl6)
 
-		self.nonebut=QtGui.QPushButton(self)
+		self.nonebut=QtWidgets.QPushButton(self)
 		self.nonebut.setText("None")
 		hbl6.addWidget(self.nonebut)
 
-		self.allbut=QtGui.QPushButton(self)
+		self.allbut=QtWidgets.QPushButton(self)
 		self.allbut.setText("All")
 		hbl6.addWidget(self.allbut)
 
@@ -1780,7 +1783,7 @@
 		vbl3.addWidget(self.showslide)
 
 		# number and step for the slider
-		hbl7 = QtGui.QHBoxLayout()
+		hbl7 = QtWidgets.QHBoxLayout()
 		hbl.setObjectName("hbl7")
 		vbl3.addLayout(hbl7)
 
@@ -1790,52 +1793,52 @@
 		self.stepbox=ValBox(label="stp:",value=1)
 		hbl7.addWidget(self.stepbox)
 
-		vbl = QtGui.QVBoxLayout()
-		vbl.setMargin(0)
+		vbl = QtWidgets.QVBoxLayout()
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 		vbl.setObjectName("vbl")
 		hbl.addLayout(vbl)
 
-		hbl0=QtGui.QHBoxLayout()
-		hbl0.setMargin(0)
+		hbl0=QtWidgets.QHBoxLayout()
+		hbl0.setContentsMargins(0, 0, 0, 0)
 		hbl0.setSpacing(6)
 		vbl.addLayout(hbl0)
 
-		self.saveb=QtGui.QPushButton(self)
+		self.saveb=QtWidgets.QPushButton(self)
 		self.saveb.setText("Save")
 		hbl0.addWidget(self.saveb)
 
-		self.concatb=QtGui.QPushButton(self)
+		self.concatb=QtWidgets.QPushButton(self)
 		self.concatb.setText("Concat")
 		hbl0.addWidget(self.concatb)
 
-		self.pdfb=QtGui.QPushButton(self)
+		self.pdfb=QtWidgets.QPushButton(self)
 		self.pdfb.setText("PDF")
 #		self.pdfb.setEnabled(False)
 		hbl0.addWidget(self.pdfb)
 
-		hbl01=QtGui.QHBoxLayout()
-		hbl01.setMargin(0)
+		hbl01=QtWidgets.QHBoxLayout()
+		hbl01.setContentsMargins(0, 0, 0, 0)
 		hbl01.setSpacing(6)
 		vbl.addLayout(hbl01)
 
-		self.stats=QtGui.QPushButton(self)
+		self.stats=QtWidgets.QPushButton(self)
 		self.stats.setText("Statistics")
 		hbl01.addWidget(self.stats)
 
-		self.regress=QtGui.QPushButton(self)
+		self.regress=QtWidgets.QPushButton(self)
 		self.regress.setText("Regression")
 		hbl01.addWidget(self.regress)
 
-		self.classb=QtGui.QPushButton(self)
+		self.classb=QtWidgets.QPushButton(self)
 		self.classb.setText("Classification")
 		hbl01.addWidget(self.classb)
 
-		hbl1 = QtGui.QHBoxLayout()
-		hbl1.setMargin(0)
+		hbl1 = QtWidgets.QHBoxLayout()
+		hbl1.setContentsMargins(0, 0, 0, 0)
 		hbl1.setSpacing(6)
 
-		self.color=QtGui.QComboBox(self)
+		self.color=QtWidgets.QComboBox(self)
 		self.color.addItem("black")
 		self.color.addItem("blue")
 		self.color.addItem("red")
@@ -1848,45 +1851,45 @@
 
 		vbl.addLayout(hbl1)
 
-		hbl2 = QtGui.QHBoxLayout()
-		hbl2.setMargin(0)
+		hbl2 = QtWidgets.QHBoxLayout()
+		hbl2.setContentsMargins(0, 0, 0, 0)
 		hbl2.setSpacing(6)
 		vbl.addLayout(hbl2)
 
 		# This is for line parms
-		vbl2a = QtGui.QVBoxLayout()
-		vbl2a.setMargin(0)
+		vbl2a = QtWidgets.QVBoxLayout()
+		vbl2a.setContentsMargins(0, 0, 0, 0)
 		vbl2a.setSpacing(6)
 		hbl2.addLayout(vbl2a)
 
-		self.lintog=QtGui.QPushButton(self)
+		self.lintog=QtWidgets.QPushButton(self)
 		self.lintog.setText("Line")
 		self.lintog.setCheckable(1)
 		vbl2a.addWidget(self.lintog)
 
-		self.linsel=QtGui.QComboBox(self)
+		self.linsel=QtWidgets.QComboBox(self)
 		self.linsel.addItem("------")
 		self.linsel.addItem("- - - -")
 		self.linsel.addItem(".......")
 		self.linsel.addItem("-.-.-.-")
 		vbl2a.addWidget(self.linsel)
 
-		self.linwid=QtGui.QSpinBox(self)
+		self.linwid=QtWidgets.QSpinBox(self)
 		self.linwid.setRange(1,10)
 		vbl2a.addWidget(self.linwid)
 
 		# This is for point parms
-		vbl2b = QtGui.QVBoxLayout()
-		vbl2b.setMargin(0)
+		vbl2b = QtWidgets.QVBoxLayout()
+		vbl2b.setContentsMargins(0, 0, 0, 0)
 		vbl2b.setSpacing(6)
 		hbl2.addLayout(vbl2b)
 
-		self.symtog=QtGui.QPushButton(self)
+		self.symtog=QtWidgets.QPushButton(self)
 		self.symtog.setText("Symbol")
 		self.symtog.setCheckable(1)
 		vbl2b.addWidget(self.symtog)
 
-		self.symsel=QtGui.QComboBox(self)
+		self.symsel=QtWidgets.QComboBox(self)
 		self.symsel.addItem("circle")
 		self.symsel.addItem("square")
 		self.symsel.addItem("plus")
@@ -1894,7 +1897,7 @@
 		self.symsel.addItem("tridown")
 		vbl2b.addWidget(self.symsel)
 
-		self.symsize=QtGui.QSpinBox(self)
+		self.symsize=QtWidgets.QSpinBox(self)
 		self.symsize.setRange(0,25)
 		vbl2b.addWidget(self.symsize)
 
@@ -1919,46 +1922,46 @@
 		#vbl2c.addWidget(self.hmbins)
 
 		# per plot column selectors
-		gl=QtGui.QGridLayout()
-		gl.addWidget(QtGui.QLabel("X Col:",self),0,0,Qt.AlignRight)
-		self.slidex=QtGui.QSpinBox(self)
+		gl=QtWidgets.QGridLayout()
+		gl.addWidget(QtWidgets.QLabel("X Col:",self),0,0,Qt.AlignRight)
+		self.slidex=QtWidgets.QSpinBox(self)
 		self.slidex.setRange(-1,1)
 		gl.addWidget(self.slidex,0,1,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("Y Col:",self),1,0,Qt.AlignRight)
-		self.slidey=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("Y Col:",self),1,0,Qt.AlignRight)
+		self.slidey=QtWidgets.QSpinBox(self)
 		self.slidey.setRange(-1,1)
 		gl.addWidget(self.slidey,1,1,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("Z Col:",self),2,0,Qt.AlignRight)
-		self.slidez=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("Z Col:",self),2,0,Qt.AlignRight)
+		self.slidez=QtWidgets.QSpinBox(self)
 		self.slidez.setRange(-1,1)
 		gl.addWidget(self.slidez,2,1,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("C Col:",self),0,2,Qt.AlignRight)
-		self.slidec=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("C Col:",self),0,2,Qt.AlignRight)
+		self.slidec=QtWidgets.QSpinBox(self)
 		self.slidec.setRange(-2,1)
 		gl.addWidget(self.slidec,0,3,Qt.AlignLeft)
 
-		gl.addWidget(QtGui.QLabel("S Col:",self),1,2,Qt.AlignRight)
-		self.slides=QtGui.QSpinBox(self)
+		gl.addWidget(QtWidgets.QLabel("S Col:",self),1,2,Qt.AlignRight)
+		self.slides=QtWidgets.QSpinBox(self)
 		self.slides.setRange(-2,1)
 		gl.addWidget(self.slides,1,3,Qt.AlignLeft)
 		vbl.addLayout(gl)
 
-		hbl2 = QtGui.QHBoxLayout()
+		hbl2 = QtWidgets.QHBoxLayout()
 
-		self.xlogtog=QtGui.QPushButton(self)
+		self.xlogtog=QtWidgets.QPushButton(self)
 		self.xlogtog.setText("X Log")
 		self.xlogtog.setCheckable(1)
 		hbl2.addWidget(self.xlogtog)
 
-		self.ylogtog=QtGui.QPushButton(self)
+		self.ylogtog=QtWidgets.QPushButton(self)
 		self.ylogtog.setText("Y Log")
 		self.ylogtog.setCheckable(1)
 		hbl2.addWidget(self.ylogtog)
 
-		self.zlogtog=QtGui.QPushButton(self)
+		self.zlogtog=QtWidgets.QPushButton(self)
 		self.zlogtog.setText("Z Log")
 		self.zlogtog.setCheckable(1)
 		hbl2.addWidget(self.zlogtog)
@@ -1970,38 +1973,38 @@
 
 		vbl.addLayout(hbl2)
 
-		self.wrescale=QtGui.QPushButton(self)
+		self.wrescale=QtWidgets.QPushButton(self)
 		self.wrescale.setText("Rescale")
 		vbl.addWidget(self.wrescale)
 
 		vbl0.addLayout(hbl)
 
-		gblmm=QtGui.QGridLayout()
+		gblmm=QtWidgets.QGridLayout()
 
-		self.wl1=QtGui.QLabel("Min")
+		self.wl1=QtWidgets.QLabel("Min")
 #		self.wl1.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl1,1,0)
-		self.wl2=QtGui.QLabel("Max")
+		self.wl2=QtWidgets.QLabel("Max")
 #		self.wl2.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl2,2,0)
 
-		self.wl1h=QtGui.QLabel("X")
+		self.wl1h=QtWidgets.QLabel("X")
 		self.wl1h.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl1h,0,1)
 
-		self.wl2h=QtGui.QLabel("Y")
+		self.wl2h=QtWidgets.QLabel("Y")
 		self.wl2h.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl2h,0,2)
 
-		self.wl3h=QtGui.QLabel("Z")
+		self.wl3h=QtWidgets.QLabel("Z")
 		self.wl3h.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl3h,0,3)
 
-		self.wl4h=QtGui.QLabel("C")
+		self.wl4h=QtWidgets.QLabel("C")
 		self.wl4h.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl4h,0,4)
 
-		self.wl5h=QtGui.QLabel("S")
+		self.wl5h=QtWidgets.QLabel("S")
 		self.wl5h.setAlignment(Qt.AlignHCenter)
 		gblmm.addWidget(self.wl5h,0,5)
 
@@ -2034,28 +2037,28 @@
 		vbl0.addLayout(gblmm)
 
 
-		hbl4 = QtGui.QHBoxLayout()
-		hbl4.addWidget(QtGui.QLabel("X Label:",self))
-		self.xlabel=QtGui.QLineEdit(self)
+		hbl4 = QtWidgets.QHBoxLayout()
+		hbl4.addWidget(QtWidgets.QLabel("X Label:",self))
+		self.xlabel=QtWidgets.QLineEdit(self)
 		hbl4.addWidget(self.xlabel)
 		self.xlabel.setText("X")
 		vbl0.addLayout(hbl4)
 
-		hbl5 = QtGui.QHBoxLayout()
-		hbl5.addWidget(QtGui.QLabel("Y Label:",self))
-		self.ylabel=QtGui.QLineEdit(self)
+		hbl5 = QtWidgets.QHBoxLayout()
+		hbl5.addWidget(QtWidgets.QLabel("Y Label:",self))
+		self.ylabel=QtWidgets.QLineEdit(self)
 		hbl5.addWidget(self.ylabel)
 		self.ylabel.setText("Y")
 		vbl0.addLayout(hbl5)
 
-		hbl5a = QtGui.QHBoxLayout()
-		hbl5a.addWidget(QtGui.QLabel("Z Label:",self))
-		self.zlabel=QtGui.QLineEdit(self)
+		hbl5a = QtWidgets.QHBoxLayout()
+		hbl5a.addWidget(QtWidgets.QLabel("Z Label:",self))
+		self.zlabel=QtWidgets.QLineEdit(self)
 		hbl5a.addWidget(self.zlabel)
 		self.zlabel.setText("Z")
 		vbl0.addLayout(hbl5a)
 
-		hbl6 = QtGui.QHBoxLayout()
+		hbl6 = QtWidgets.QHBoxLayout()
 		#hbl6.addWidget(QtGui.QLabel("Transparency:",self))
 		self.alphaslider=ValSlider(self,(0,1),"Transparency:",0.5,50)
 		hbl6.addWidget(self.alphaslider)
@@ -2069,53 +2072,53 @@
 		self.statswin=None
 		self.regresswin=None
 
-		QtCore.QObject.connect(self.showslide, QtCore.SIGNAL("valueChanged"), self.selSlide)
-		QtCore.QObject.connect(self.allbut, QtCore.SIGNAL("clicked()"), self.selAll)
-		QtCore.QObject.connect(self.nonebut, QtCore.SIGNAL("clicked()"), self.selNone)
-
-		QtCore.QObject.connect(self.slidex, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slidey, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slidez, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slidec, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.slides, QtCore.SIGNAL("valueChanged(int)"), self.newCols)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.list_item_changed)
-		QtCore.QObject.connect(self.color,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotColor)
-		QtCore.QObject.connect(self.classb,QtCore.SIGNAL("clicked()"),self.openClassWin)
+		self.showslide.valueChanged.connect(self.selSlide)
+		self.allbut.clicked.connect(self.selAll)
+		self.nonebut.clicked.connect(self.selNone)
+
+		self.slidex.valueChanged[int].connect(self.newCols)
+		self.slidey.valueChanged[int].connect(self.newCols)
+		self.slidez.valueChanged[int].connect(self.newCols)
+		self.slidec.valueChanged[int].connect(self.newCols)
+		self.slides.valueChanged[int].connect(self.newCols)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.itemChanged[QListWidgetItem].connect(self.list_item_changed)
+		self.color.currentIndexChanged['QString'].connect(self.updPlotColor)
+		self.classb.clicked.connect(self.openClassWin)
 		#QtCore.QObject.connect(self.hmsel,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.symtog,QtCore.SIGNAL("clicked()"),self.updPlot)
+		self.symtog.clicked.connect(self.updPlot)
 		#QtCore.QObject.connect(self.hmsel,QtCore.SIGNAL("clicked()"),self.updPlotHmsel)
 		#QtCore.QObject.connect(self.hmbins,QtCore.SIGNAL("clicked()"),self.updPlotHmbins)
-		QtCore.QObject.connect(self.symsel,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotSymsel)
-		QtCore.QObject.connect(self.symsize,QtCore.SIGNAL("valueChanged(int)"),self.updPlotSymsize)
-		QtCore.QObject.connect(self.xlogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.ylogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.zlogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
+		self.symsel.currentIndexChanged['QString'].connect(self.updPlotSymsel)
+		self.symsize.valueChanged[int].connect(self.updPlotSymsize)
+		self.xlogtog.clicked.connect(self.updPlot)
+		self.ylogtog.clicked.connect(self.updPlot)
+		self.zlogtog.clicked.connect(self.updPlot)
 		#QtCore.QObject.connect(self.zlogtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.lintog,QtCore.SIGNAL("clicked()"),self.updPlot)
+		self.lintog.clicked.connect(self.updPlot)
 		#QtCore.QObject.connect(self.hmtog,QtCore.SIGNAL("clicked()"),self.updPlot)
-		QtCore.QObject.connect(self.linsel,QtCore.SIGNAL("currentIndexChanged(QString)"),self.updPlotLinsel)
-		QtCore.QObject.connect(self.linwid,QtCore.SIGNAL("valueChanged(int)"),self.updPlotLinwid)
-		QtCore.QObject.connect(self.xlabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.ylabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.zlabel,QtCore.SIGNAL("textChanged(QString)"),self.updPlot)
-		QtCore.QObject.connect(self.stats,QtCore.SIGNAL("clicked()"),self.openStatsWin)
-		QtCore.QObject.connect(self.regress,QtCore.SIGNAL("clicked()"),self.openRegrWin)
-		QtCore.QObject.connect(self.saveb,QtCore.SIGNAL("clicked()"),self.savePlot)
-		QtCore.QObject.connect(self.pdfb,QtCore.SIGNAL("clicked()"),self.savePdf)
-		QtCore.QObject.connect(self.concatb,QtCore.SIGNAL("clicked()"),self.saveConcatPlot)
-		QtCore.QObject.connect(self.wxmin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wxmax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wymin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wymax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wzmin,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wzmax,QtCore.SIGNAL("valueChanged"),self.newLimits)
-		QtCore.QObject.connect(self.wcmin,QtCore.SIGNAL("valueChanged"),self.newCLimits)
-		QtCore.QObject.connect(self.wcmax,QtCore.SIGNAL("valueChanged"),self.newCLimits)
-		QtCore.QObject.connect(self.wsmin,QtCore.SIGNAL("valueChanged"),self.newSLimits)
-		QtCore.QObject.connect(self.wsmax,QtCore.SIGNAL("valueChanged"),self.newSLimits)
-		QtCore.QObject.connect(self.wrescale,QtCore.SIGNAL("clicked()"),self.autoScale)
-		QtCore.QObject.connect(self.alphaslider,QtCore.SIGNAL("valueChanged"),self.updAlpha)
+		self.linsel.currentIndexChanged['QString'].connect(self.updPlotLinsel)
+		self.linwid.valueChanged[int].connect(self.updPlotLinwid)
+		self.xlabel.textChanged['QString'].connect(self.updPlot)
+		self.ylabel.textChanged['QString'].connect(self.updPlot)
+		self.zlabel.textChanged['QString'].connect(self.updPlot)
+		self.stats.clicked.connect(self.openStatsWin)
+		self.regress.clicked.connect(self.openRegrWin)
+		self.saveb.clicked.connect(self.savePlot)
+		self.pdfb.clicked.connect(self.savePdf)
+		self.concatb.clicked.connect(self.saveConcatPlot)
+		self.wxmin.valueChanged.connect(self.newLimits)
+		self.wxmax.valueChanged.connect(self.newLimits)
+		self.wymin.valueChanged.connect(self.newLimits)
+		self.wymax.valueChanged.connect(self.newLimits)
+		self.wzmin.valueChanged.connect(self.newLimits)
+		self.wzmax.valueChanged.connect(self.newLimits)
+		self.wcmin.valueChanged.connect(self.newCLimits)
+		self.wcmax.valueChanged.connect(self.newCLimits)
+		self.wsmin.valueChanged.connect(self.newSLimits)
+		self.wsmax.valueChanged.connect(self.newSLimits)
+		self.wrescale.clicked.connect(self.autoScale)
+		self.alphaslider.valueChanged.connect(self.updAlpha)
 
 		self.newSet(0)
 		self.datachange()
@@ -2519,7 +2522,7 @@
 		parms = self.target().pparm # get the colors from this
 
 		for i,j in enumerate(keys) :
-			a = QtGui.QListWidgetItem(j)
+			a = QtWidgets.QListWidgetItem(j)
 			a.setFlags(flags)
 			try: a.setTextColor(qt_color_map[colortypes[parms[j][0]]])
 			except:
@@ -2576,20 +2579,20 @@
 	app.show()
 	app.execute()
 
-class EMDataFnPlotter(QtGui.QWidget):
+class EMDataFnPlotter(QtWidgets.QWidget):
 
 	def __init__(self, parent = None, data=None):
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		self.setWindowTitle("Plotter")
 
 		self.resize(780, 580)
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		self.plot = EMPlot3DWidget(parent=self)
 		self.gbl.addWidget(self.plot,0,0,1,1)
 
-		self.lplot = QtGui.QLabel("Plot")
+		self.lplot = QtWidgets.QLabel("Plot")
 		self.gbl.addWidget(self.plot,1,0)
 
 		if data!=None :
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/empmtabwidgets.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/empmtabwidgets.py	2017-10-21 17:14:59.000000000 -0500
@@ -36,8 +36,8 @@
 from EMAN2 import *
 import os
 import re
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore
+from PyQt5.QtCore import Qt
 from embrowser import EMBrowserWidget, EMFileItemModel, EMDirEntry, nonone, safe_int,safe_float
 
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/empmwidgets.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/empmwidgets.py	2017-10-21 17:14:59.000000000 -0500
@@ -38,28 +38,28 @@
 
 from EMAN2db import db_check_dict
 import sys, math, weakref
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emselector import EMSelectorDialog	# This will be replaced by something more sensible in the future
 import re, os, glob
 from embrowser import EMBrowserWidget
 from empmtabwidgets import *
 from functools import reduce
 
-class PMComboBox(QtGui.QComboBox):
+class PMComboBox(QtWidgets.QComboBox):
 	""" Reimplment the QComboBox to remove wheel widget activation """
 	def __init__(self):
-		QtGui.QComboBox.__init__(self)
+		QtWidgets.QComboBox.__init__(self)
 
 	def wheelEvent(self, event):
 		""" Ignore wheelevents is not poped up """
 		event.ignore()
 
 
-class PMBaseWidget(QtGui.QWidget):
+class PMBaseWidget(QtWidgets.QWidget):
 	""" A base widget upon which all the other PM widgets are derived """
 	def __init__(self, name, mode="",returnNone=False):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 
 		self.postional = False
 		self.name = name
@@ -119,6 +119,7 @@
 
 class PMIntEntryWidget(PMBaseWidget):
 	""" A Widget for geting Int values. Type and range is checked """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -133,14 +134,14 @@
 		self.initdefault = initdefault
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
-		self.intbox = QtGui.QLineEdit()
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
+		self.intbox = QtWidgets.QLineEdit()
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.intbox, 0, 1)
 		self.setLayout(gridbox)
 
-		QtCore.QObject.connect(self.intbox,QtCore.SIGNAL("editingFinished()"),self._on_intchanged)
+		self.intbox.editingFinished.connect(self._on_intchanged)
 
 		self.setValue(value)
 
@@ -157,15 +158,15 @@
 		except ValueError:
 			self.intbox.setText("")
 			self.setErrorMessage("Invalid type, Int neeeded in %s"%self.getName())
-			if self.isVisible() and not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Invalid type, Int neeeded in %s"%self.getName())
+			if self.isVisible() and not quiet: self.pmmessage.emit("Invalid type, Int neeeded in %s"%self.getName())
 
 	def _confirm_bounds(self):
 		if self.lrange != None and (self.value < self.lrange):
 			self.intbox.setText(str(self.lrange))
-			if self.isVisible(): self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Value too low for '%s', clipping to '%d'"%(self.name,self.lrange))
+			if self.isVisible(): self.pmmessage.emit("Value too low for '%s', clipping to '%d'"%(self.name,self.lrange))
 		if self.urange != None and (self.value > self.urange):
 			self.intbox.setText(str(self.urange))
-			if self.isVisible(): self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Value too high for '%s', clipping to '%d'"%(self.name,self.urange))
+			if self.isVisible(): self.pmmessage.emit("Value too high for '%s', clipping to '%d'"%(self.name,self.urange))
 
 	def getValue(self):
 		return self.value
@@ -179,6 +180,7 @@
 
 class PMShrinkEntryWidget(PMIntEntryWidget):
 	""" A widget for shink options. If this entry is set to <= 1 then no argument is returned """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -202,7 +204,7 @@
 			self.value = self.lrange - 1
 			self.intbox.setText(str(self.lrange-1))
 			self.setErrorMessage("Invalid type, Int neeeded in %s"%self.getName())
-			if self.isVisible() and not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Invalid type, Int neeeded in %s"%self.getName())
+			if self.isVisible() and not quiet: self.pmmessage.emit("Invalid type, Int neeeded in %s"%self.getName())
 
 	def _confirm_bounds(self):
 		if self.lrange != None and (self.value < self.lrange):
@@ -214,6 +216,7 @@
 
 class PMFloatEntryWidget(PMBaseWidget):
 	""" A Widget for geting Float values. Type and range is checked """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -228,14 +231,14 @@
 		self.initdefault = initdefault
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
-		self.floatbox = QtGui.QLineEdit()
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
+		self.floatbox = QtWidgets.QLineEdit()
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.floatbox, 0, 1)
 		self.setLayout(gridbox)
 
-		QtCore.QObject.connect(self.floatbox,QtCore.SIGNAL("editingFinished()"),self._on_floatchanged)
+		self.floatbox.editingFinished.connect(self._on_floatchanged)
 
 		self.setValue(value)
 
@@ -251,15 +254,15 @@
 		except ValueError:
 			self.floatbox.setText("")
 			self.setErrorMessage("Invalid type, float needed in '%s'"%self.getName())
-			if self.isVisible() and not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Invalid type, float needed in '%s'"%self.getName())
+			if self.isVisible() and not quiet: self.pmmessage.emit("Invalid type, float needed in '%s'"%self.getName())
 
 	def _confirm_bounds(self):
 		if self.lrange and (self.value < self.lrange):
 			self.floatbox.setText(str(self.lrange))
-			if self.isVisible(): self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Value too low for '%s', clipping to '%f'"%(self.name,self.lrange))
+			if self.isVisible(): self.pmmessage.emit("Value too low for '%s', clipping to '%f'"%(self.name,self.lrange))
 		if self.urange and (self.value > self.urange):
 			self.floatbox.setText(str(self.urange))
-			if self.isVisible(): self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Value too high for '%s', clipping to '%f'"%(self.name,self.urange))
+			if self.isVisible(): self.pmmessage.emit("Value too high for '%s', clipping to '%f'"%(self.name,self.urange))
 
 	def getValue(self):
 		return self.value
@@ -284,14 +287,14 @@
 		self.initdefault = initdefault
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
-		self.stringbox = QtGui.QLineEdit()
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
+		self.stringbox = QtWidgets.QLineEdit()
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.stringbox, 0, 1)
 		self.setLayout(gridbox)
 
-		QtCore.QObject.connect(self.stringbox,QtCore.SIGNAL("editingFinished()"),self._on_stringchanged)
+		self.stringbox.editingFinished.connect(self._on_stringchanged)
 
 		self.setValue(string)
 
@@ -316,8 +319,8 @@
 	def __init__(self, name, header):
 		PMBaseWidget.__init__(self, name)
 
-		gridbox = QtGui.QGridLayout()
-		self.header = QtGui.QLabel()
+		gridbox = QtWidgets.QGridLayout()
+		self.header = QtWidgets.QLabel()
 		font = QtGui.QFont()
 		font.setBold(True)
 		self.header.setFont(font)
@@ -350,12 +353,12 @@
 		self.boolvalue = boolvalue
 		self.initdefault = initdefault
 
-		gridbox = QtGui.QGridLayout()
-		self.boolbox = QtGui.QCheckBox(name)
+		gridbox = QtWidgets.QGridLayout()
+		self.boolbox = QtWidgets.QCheckBox(name)
 		gridbox.addWidget(self.boolbox, 0, 0)
 		self.setLayout(gridbox)
 
-		QtCore.QObject.connect(self.boolbox,QtCore.SIGNAL("stateChanged(int)"),self._on_boolchanged)
+		self.boolbox.stateChanged[int].connect(self._on_boolchanged)
 
 		self.setValue(self.boolvalue)
 
@@ -379,6 +382,8 @@
 
 class PMFileNameWidget(PMBaseWidget):
 	""" A Widget for geting filenames. Type is checked """
+	pmfilename = QtCore.pyqtSignal('QString')
+	pmmessage = QtCore.pyqtSignal('QString')
 	@staticmethod
 	def copyWidget(widget):
 		""" Basically a copy constructor to get around QT and python limitations """
@@ -390,20 +395,20 @@
 		self.checkfileexist= checkfileexist
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
 		self.browser = browser
-		self.filenamebox = QtGui.QLineEdit()
-		self.browsebutton = QtGui.QPushButton("Browse")
-		self.infolabel = QtGui.QLabel("Num Images: None")
+		self.filenamebox = QtWidgets.QLineEdit()
+		self.browsebutton = QtWidgets.QPushButton("Browse")
+		self.infolabel = QtWidgets.QLabel("Num Images: None")
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.filenamebox, 0, 1)
 		gridbox.addWidget(self.browsebutton, 0, 2)
 		if infolabels: gridbox.addWidget(self.infolabel, 1, 1, 1, 2)
 		self.setLayout(gridbox)
 
-		QtCore.QObject.connect(self.filenamebox,QtCore.SIGNAL("editingFinished()"),self._on_filenamechanged)
-		QtCore.QObject.connect(self.browsebutton,QtCore.SIGNAL("clicked()"),self._on_clicked)
+		self.filenamebox.editingFinished.connect(self._on_filenamechanged)
+		self.browsebutton.clicked.connect(self._on_clicked)
 
 		self.setValue(filename)
 
@@ -423,8 +428,8 @@
 
 	def _on_clicked(self):
 		self.window = eval(self.browser)
-		QtCore.QObject.connect(self.window, QtCore.SIGNAL("ok"),self._on_ok)
-		QtCore.QObject.connect(self.window, QtCore.SIGNAL("cancel"),self._on_cancel)
+		self.window.ok.connect(self._on_ok)
+		self.window.cancel.connect(self._on_cancel)
 		self.window.setAttribute(QtCore.Qt.WA_DeleteOnClose)
 		self.window.show()
 
@@ -451,7 +456,7 @@
 		self.filename = filename
 		self.filenamebox.setText(filename)
 		self.setErrorMessage(None)
-		self.emit(QtCore.SIGNAL("pmfilename(QString)"),self.getValue())
+		self.pmfilename.emit(self.getValue())
 
 	def _checkfiles(self, filename):
 		# Posional arguments must be space delimted for multiple files, whereas options must be comma delimted
@@ -495,7 +500,7 @@
 	def _onBadFile(self, filename, quiet=False):
 		self.filename = None
 		self.setErrorMessage("File '%s' from field '%s' does not exist"%(filename,self.getName()))
-		if self.isVisible() and not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"File '%s' from field '%s' does not exist"%(filename,self.getName()))
+		if self.isVisible() and not quiet: self.pmmessage.emit("File '%s' from field '%s' does not exist"%(filename,self.getName()))
 
 class PMDirectoryWidget(PMBaseWidget):
 	""" A Widget for display dircories of a certian type """
@@ -511,14 +516,14 @@
 		self.initdefault = initdefault
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
 		self.combobox = PMComboBox()
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.combobox, 0, 1)
 		self.setLayout(gridbox)
 
-		self.connect(self.combobox, QtCore.SIGNAL("activated(const QString &)"), self.setValue)
+		self.combobox.activated['QString'].connect(self.setValue)
 
 		self.setValue(default)
 
@@ -545,6 +550,7 @@
 
 class PMComboWidget(PMBaseWidget):
 	""" A Widget for combo boxes. Type is checked """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -557,8 +563,8 @@
 		self.datatype=datatype	# Must be int, float or str
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
 		self.combobox = PMComboBox()
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.combobox, 0, 1)
@@ -568,7 +574,7 @@
 		for choice in self.choices:
 			self.combobox.addItem(str(choice))
 
-		self.connect(self.combobox, QtCore.SIGNAL("activated(const QString &)"), self.setValue)
+		self.combobox.activated['QString'].connect(self.setValue)
 
 		self.setValue(default)
 
@@ -587,12 +593,13 @@
 			return
 		else:
 			self.setErrorMessage("Value '%s' not found in combobox '%s'"%(value,self.getName()))
-			if not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Value '%s' not found in combobox '%s'"%(value,self.getName()))
+			if not quiet: self.pmmessage.emit("Value '%s' not found in combobox '%s'"%(value,self.getName()))
 			return
 
 
 class PMComboParamsWidget(PMBaseWidget):
 	""" A Widget for combo boxes. Type is checked. For the combobox with params the datatype is always str """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -604,11 +611,11 @@
 		self.initdefault = initdefault
 		self.setPositional(postional)
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
 		self.combobox = PMComboBox()
-		plabel = QtGui.QLabel("params:")
-		self.params = QtGui.QLineEdit()
+		plabel = QtWidgets.QLabel("params:")
+		self.params = QtWidgets.QLineEdit()
 		gridbox.addWidget(label, 0, 0)
 		gridbox.addWidget(self.combobox, 0, 1)
 		gridbox.addWidget(plabel, 0, 2)
@@ -620,7 +627,7 @@
 			self.combobox.addItem(str(choice))
 		self.combobox.addItem('None')
 
-		self.connect(self.combobox, QtCore.SIGNAL("activated(const QString &)"), self.setValue)
+		self.combobox.activated['QString'].connect(self.setValue)
 
 		self.setValue(default)
 
@@ -644,7 +651,7 @@
 			self.combobox.setCurrentIndex(idx)
 		else:
 			self.setErrorMessage("Value '%s' not found in combobox '%s'"%(values[0],self.getName()))
-			if not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Value '%s' not found in combobox '%s'"%(values[0],self.getName()))
+			if not quiet: self.pmmessage.emit("Value '%s' not found in combobox '%s'"%(values[0],self.getName()))
 			return
 		if len(values) == 2: self.params.setText(values[1])
 		self.setErrorMessage(None)
@@ -658,6 +665,7 @@
 
 class PMSymWidget(PMBaseWidget):
 	""" A widget for getting/setting symmetry input """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -668,8 +676,8 @@
 		PMBaseWidget.__init__(self, name, mode)
 		self.initdefault = initdefault
 
-		gridbox = QtGui.QGridLayout()
-		label = QtGui.QLabel(name)
+		gridbox = QtWidgets.QGridLayout()
+		label = QtWidgets.QLabel(name)
 		label.setAlignment(QtCore.Qt.AlignVCenter | QtCore.Qt.AlignRight)
 		self.combobox = PMComboBox()
 		self.symnumbox = PMIntEntryWidget("Symmetry Number", 0, mode, lrange=0)
@@ -680,12 +688,12 @@
 
 		for i in ['icos','oct','tet','c','d','h']: self.combobox.addItem(i)
 
-		self.connect(self.symnumbox,QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
+		self.symnumbox.pmmessage['QString'].connect(self._on_message)
 
 		self.setValue(default)
 
 	def _on_message(self, message):
-		self.emit(QtCore.SIGNAL("pmmessage(QString)"),message)
+		self.pmmessage.emit(message)
 
 	def getValue(self):
 		""" Return the symmetry value """
@@ -711,7 +719,7 @@
 			self.combobox.setCurrentIndex(idx)
 		else:
 			self.setErrorMessage("'%s' not a valid symmetry!!!"%value)
-			if not quiet: self.emit(QtCore.SIGNAL("pmmessage(QString)"),"'%s' not a valid symmetry!!!"%value)
+			if not quiet: self.pmmessage.emit("'%s' not a valid symmetry!!!"%value)
 			return
 		self.symnumbox.setValue(defsymnum)
 		self.setErrorMessage(None)
@@ -722,6 +730,7 @@
 
 class PMAutoMask3DWidget(PMBaseWidget):
 	""" A Widget for getting automask 3D input """
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -732,8 +741,8 @@
 		PMBaseWidget.__init__(self, name, mode)
 		self.initdefault = initdefault
 
-		gridbox = QtGui.QGridLayout()
-		self.automask3dbool = QtGui.QCheckBox("Auto Mask 3D")
+		gridbox = QtWidgets.QGridLayout()
+		self.automask3dbool = QtWidgets.QCheckBox("Auto Mask 3D")
 		self.params = []
 		self.params.append(PMFloatEntryWidget("Threshold", 0.8, mode))
 		self.params.append(PMIntEntryWidget("Radius", 30, mode))
@@ -748,12 +757,12 @@
 		gridbox.addWidget(self.params[4], 2, 1)
 		self.setLayout(gridbox)
 
-		QtCore.QObject.connect(self.automask3dbool,QtCore.SIGNAL("stateChanged(int)"),self._on_boolchanged)
-		self.connect(self.params[0],QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
-		self.connect(self.params[1],QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
-		self.connect(self.params[2],QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
-		self.connect(self.params[3],QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
-		self.connect(self.params[4],QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
+		self.automask3dbool.stateChanged[int].connect(self._on_boolchanged)
+		self.params[0].pmmessage['QString'].connect(self._on_message)
+		self.params[1].pmmessage['QString'].connect(self._on_message)
+		self.params[2].pmmessage['QString'].connect(self._on_message)
+		self.params[3].pmmessage['QString'].connect(self._on_message)
+		self.params[4].pmmessage['QString'].connect(self._on_message)
 
 		self.setValue(default)
 
@@ -762,7 +771,7 @@
 			widget.setEnabled(self.automask3dbool.isChecked())
 
 	def _on_message(self, message):
-		self.emit(QtCore.SIGNAL("pmmessage(QString)"),message)
+		self.pmmessage.emit(message)
 
 	def setValue(self, value, quiet=False):
 		# if value is "" of None, set bool to false
@@ -801,10 +810,10 @@
 		self.setPositional(postional)
 		self.initdefault = initdefault
 
-		gridbox = QtGui.QGridLayout()
-		self.tablewidget = QtGui.QTableWidget()
+		gridbox = QtWidgets.QGridLayout()
+		self.tablewidget = QtWidgets.QTableWidget()
 		gridbox.addWidget(self.tablewidget, 0, 0)
-		self.tablewidget.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)	# Readonly table
+		self.tablewidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)	# Readonly table
 		self.setLayout(gridbox)
 
 	def updateTable(self):
@@ -821,6 +830,7 @@
 
 class PMFSCTableWidget(PMTableBase):
 	""" A widget for generating FSC tables"""
+	pmmessage = QtCore.pyqtSignal('QString')
 
 	@staticmethod
 	def copyWidget(widget):
@@ -833,14 +843,14 @@
 		# table stuff
 		self.tablewidget.setColumnCount(4)
 		self.tablewidget.setHorizontalHeaderLabels(["Refine", "# Iter", "Masked .143", "Unmasked .143"])
-		self.tablewidget.horizontalHeader().setResizeMode(QtGui.QHeaderView.ResizeToContents)
+		self.tablewidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
 		self.tablewidget.horizontalHeader().setHighlightSections(False)
-		self.tablewidget.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)	# select rows
-		self.tablewidget.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)	# single selection
+		self.tablewidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)	# select rows
+		self.tablewidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)	# single selection
 
 		self.tablewidget.setRowCount(0)
 		self.patterns = ["refine","frealign","multi"]
-		self.connect(self.tablewidget,QtCore.SIGNAL("cellDoubleClicked(int,int)"),self.loadFSC)
+		self.tablewidget.cellDoubleClicked[int, int].connect(self.loadFSC)
 
 		#now update table
 		self.setValue(default)
@@ -851,7 +861,7 @@
 		if value:
 			return value.text()
 		else:
-			self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Warning NOTHING IS SELECTED IN THE TABLE!!!")
+			self.pmmessage.emit("Warning NOTHING IS SELECTED IN THE TABLE!!!")
 			return ""
 
 	def setValue(self, value, quiet=False):
@@ -867,7 +877,7 @@
 		if not self.tablewidget.item(row, 1):
 			msg = "Rubbish!!! No FSC curves to plot."
 			print(msg)
-			self.emit(QtCore.SIGNAL("pmmessage(QString)"),"Rubbish!!! No FSC curves to plot.")
+			self.pmmessage.emit("Rubbish!!! No FSC curves to plot.")
 			return
 		
 		fsccmd=["e2display.py --plot"]
@@ -879,7 +889,7 @@
 		# Now load the FSC curves
 		msg = "Loading FSC curves, please wait..."
 		print(msg)
-		self.emit(QtCore.SIGNAL("pmmessage(QString)"),msg)
+		self.pmmessage.emit(msg)
 		subprocess.Popen(fsccmd, shell=True)
 
 	def updateTable(self):
@@ -893,14 +903,14 @@
 
 		for i, directory in enumerate(sorted(dirs)):
 			# load each directory
-			qwi_dirname = QtGui.QTableWidgetItem(str(directory))
+			qwi_dirname = QtWidgets.QTableWidgetItem(str(directory))
 			self.tablewidget.setItem(i, 0, qwi_dirname)
 
 			fscs=sorted([ii for ii in os.listdir(directory) if ii[:11]=="fsc_masked_"])
 			niter=len(fscs)
 			if "fsc_masked_00.txt" in fscs : niter-=1
 			
-			self.tablewidget.setItem(i, 1, QtGui.QTableWidgetItem(str(niter)))
+			self.tablewidget.setItem(i, 1, QtWidgets.QTableWidgetItem(str(niter)))
 			
 			try:
 				# We use a running average of 5 points to compute the threshold
@@ -910,9 +920,9 @@
 					v=(xyd.get_y(ii-2)+xyd.get_y(ii-1)+xyd.get_y(ii)+xyd.get_y(ii+1)+xyd.get_y(ii+2))/5.0
 					if v<0.143 : break
 				
-				self.tablewidget.setItem(i,2,QtGui.QTableWidgetItem("{:1.1f}".format(1.0/xyd.get_x(ii-1))))
+				self.tablewidget.setItem(i,2,QtWidgets.QTableWidgetItem("{:1.1f}".format(1.0/xyd.get_x(ii-1))))
 			except:
-				self.tablewidget.setItem(i,2,QtGui.QTableWidgetItem("?"))
+				self.tablewidget.setItem(i,2,QtWidgets.QTableWidgetItem("?"))
 
 			try:
 				# We use a running average of 5 points to compute the threshold
@@ -922,9 +932,9 @@
 					v=(xyd.get_y(ii-2)+xyd.get_y(ii-1)+xyd.get_y(ii)+xyd.get_y(ii+1)+xyd.get_y(ii+2))/5.0
 					if v<0.143 : break
 				
-				self.tablewidget.setItem(i,3,QtGui.QTableWidgetItem("{:1.1f}".format(1.0/xyd.get_x(ii-1))))
+				self.tablewidget.setItem(i,3,QtWidgets.QTableWidgetItem("{:1.1f}".format(1.0/xyd.get_x(ii-1))))
 			except:
-				self.tablewidget.setItem(i,3,QtGui.QTableWidgetItem("?"))
+				self.tablewidget.setItem(i,3,QtWidgets.QTableWidgetItem("?"))
 
 			
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emrctboxergui.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emrctboxergui.py	2017-10-21 17:14:59.000000000 -0500
@@ -32,18 +32,18 @@
 #
 #
 from EMAN2 import get_image_directory, dump_processors_list
-from PyQt4 import QtCore, QtGui
+from PyQt5 import QtCore, QtGui, QtWidgets
 from emrctstrategy import Strategy2IMGMan, Strategy2IMGPair
 from EMAN2jsondb import js_open_dict
 from EMAN2 import *
 import os
 
-class ControlPannel(QtGui.QWidget):
+class ControlPannel(QtWidgets.QWidget):
 	'''This controls the RCT boxer. Normally this will not need to be midified. If a new pair pciking strategy is to be implmented, then
 	A new GUI class should be added as decribed below and the new tool needs to be added to __init__ and the functions: current_tool_combobox_changed 
 	and add_picker_tools'''
 	def __init__(self, mediator):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.mediator = mediator
 		self.db = js_open_dict("info/emboxerrctgui.json")
 		self.qualitydb = js_open_dict("e2boxercache/quality.json")
@@ -54,9 +54,9 @@
 		self.manual_tool = ManualPicker(self.mediator, self.db)
 		self.pair_picker_tool = PairPickerTool(self.mediator, self.db)
 		
-		vbox = QtGui.QVBoxLayout(self)
+		vbox = QtWidgets.QVBoxLayout(self)
 		
-		self.tab_widget = QtGui.QTabWidget()
+		self.tab_widget = QtWidgets.QTabWidget()
 		self.tab_widget.addTab(self.get_main_tab(),"Main")
 		self.tab_widget.addTab(self.get_processor_tab(),"Processor")
 		self.tab_widget.addTab(self.get_filter_tab(),"Filter")
@@ -78,14 +78,14 @@
 #		E2loadappwin("e2rctboxer","filtertab",self.wplot)
 		
 	def get_main_tab(self):
-		mainwidget = QtGui.QWidget()
-		vbox = QtGui.QVBoxLayout()
+		mainwidget = QtWidgets.QWidget()
+		vbox = QtWidgets.QVBoxLayout()
 		
 		# Make the main tools layout
-		mlayout = QtGui.QVBoxLayout()
+		mlayout = QtWidgets.QVBoxLayout()
 		self.get_main(mlayout)			# add the widgets const for all tools
-		msplitter = QtGui.QSplitter(QtCore.Qt.Vertical)
-		msplitter.setFrameShape(QtGui.QFrame.StyledPanel)
+		msplitter = QtWidgets.QSplitter(QtCore.Qt.Vertical)
+		msplitter.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		msplitter.setLayout(mlayout)
 		vbox.addWidget(msplitter)
 		
@@ -98,27 +98,27 @@
 	
 	def get_filter_tab(self):
 		
-		filterwidget = QtGui.QWidget()
-		vbox = QtGui.QVBoxLayout()
+		filterwidget = QtWidgets.QWidget()
+		vbox = QtWidgets.QVBoxLayout()
 		
-		hbl=QtGui.QHBoxLayout()
-		flabel = QtGui.QLabel("Filter Type:",self)
+		hbl=QtWidgets.QHBoxLayout()
+		flabel = QtWidgets.QLabel("Filter Type:",self)
 		hbl.addWidget(flabel)
-		self.filter_combobox = QtGui.QComboBox()
+		self.filter_combobox = QtWidgets.QComboBox()
 		hbl.addWidget(self.filter_combobox)
 		vbox.addLayout(hbl)
 		
-		hbl=QtGui.QHBoxLayout()
-		klabel = QtGui.QLabel("Kernal Size:",self)
+		hbl=QtWidgets.QHBoxLayout()
+		klabel = QtWidgets.QLabel("Kernal Size:",self)
 		hbl.addWidget(klabel)
-		self.kernel_combobox = QtGui.QComboBox()
+		self.kernel_combobox = QtWidgets.QComboBox()
 		hbl.addWidget(self.kernel_combobox)
 		vbox.addLayout(hbl)
 		
-		self.kernel_stacked_widget = QtGui.QStackedWidget()
+		self.kernel_stacked_widget = QtWidgets.QStackedWidget()
 		vbox.addWidget(self.kernel_stacked_widget)
 		
-		self.filter_but=QtGui.QPushButton("Filter")
+		self.filter_but=QtWidgets.QPushButton("Filter")
 		vbox.addWidget(self.filter_but)
 		
 		filterwidget.setLayout(vbox)
@@ -129,22 +129,22 @@
 		self.gridkernel.append(self.add_custom_kernels(7))
 		self.add_kernel_sizes()
 		
-		self.connect(self.filter_but,QtCore.SIGNAL("clicked(bool)"),self.on_filter)
-		QtCore.QObject.connect(self.kernel_combobox, QtCore.SIGNAL("activated(int)"), self.kernel_combobox_changed)
-		QtCore.QObject.connect(self.filter_combobox, QtCore.SIGNAL("activated(int)"), self.filter_combobox_changed)
+		self.filter_but.clicked[bool].connect(self.on_filter)
+		self.kernel_combobox.activated[int].connect(self.kernel_combobox_changed)
+		self.filter_combobox.activated[int].connect(self.filter_combobox_changed)
 		
 		return filterwidget
 	
 	def get_processor_tab(self):
 		
-		processorwidget = QtGui.QWidget()
-		vboxa = QtGui.QVBoxLayout()
+		processorwidget = QtWidgets.QWidget()
+		vboxa = QtWidgets.QVBoxLayout()
 		
-		vbox1 = QtGui.QVBoxLayout()
-		hbl=QtGui.QHBoxLayout()
-		flabel = QtGui.QLabel("Filter:",self)
+		vbox1 = QtWidgets.QVBoxLayout()
+		hbl=QtWidgets.QHBoxLayout()
+		flabel = QtWidgets.QLabel("Filter:",self)
 		hbl.addWidget(flabel)
-		self.processor_combobox = QtGui.QComboBox()
+		self.processor_combobox = QtWidgets.QComboBox()
 		proc_data = dump_processors_list()
 		for key in proc_data.keys():
 			if len(key) >= 5 and key[:7] == "filter.":
@@ -154,25 +154,25 @@
 		hbl.addWidget(self.processor_combobox)
 		vbox1.addLayout(hbl)
 		
-		hbl2=QtGui.QHBoxLayout()
-		plabel = QtGui.QLabel("Parameters:",self)
+		hbl2=QtWidgets.QHBoxLayout()
+		plabel = QtWidgets.QLabel("Parameters:",self)
 		hbl2.addWidget(plabel)
-		self.params_listbox = QtGui.QLineEdit(str(self.db.getdefault("processorparams",dfl="")), self)
+		self.params_listbox = QtWidgets.QLineEdit(str(self.db.getdefault("processorparams",dfl="")), self)
 		hbl2.addWidget(self.params_listbox)
 		vbox1.addLayout(hbl2)
 		vbox1.setAlignment(QtCore.Qt.AlignTop)
 		vboxa.addLayout(vbox1)
 		
-		vbox2 = QtGui.QVBoxLayout()
-		self.processor_but=QtGui.QPushButton("Filter")
+		vbox2 = QtWidgets.QVBoxLayout()
+		self.processor_but=QtWidgets.QPushButton("Filter")
 		vbox2.addWidget(self.processor_but)
 		vboxa.addLayout(vbox2)
 		
 		processorwidget.setLayout(vboxa)
 		
-		self.connect(self.processor_but,QtCore.SIGNAL("clicked(bool)"),self.on_processor)
-		QtCore.QObject.connect(self.processor_combobox, QtCore.SIGNAL("activated(int)"), self.processor_combobox_changed)
-		QtCore.QObject.connect(self.params_listbox, QtCore.SIGNAL("editingFinished()"), self.params_listbox_changed)
+		self.processor_but.clicked[bool].connect(self.on_processor)
+		self.processor_combobox.activated[int].connect(self.processor_combobox_changed)
+		self.params_listbox.editingFinished.connect(self.params_listbox_changed)
 		
 		return processorwidget
 	
@@ -262,12 +262,12 @@
 					self.gridkernel[2][i].setText("1")	
 			
 	def add_custom_kernels(self, size):
-		self.kernelwidget = QtGui.QWidget()
-		grid3 = QtGui.QGridLayout()
+		self.kernelwidget = QtWidgets.QWidget()
+		grid3 = QtWidgets.QGridLayout()
 		kernelwidgetidx = []
 		for i in range(size):
 			for j in range(size):
-				kw = QtGui.QLineEdit("",self)
+				kw = QtWidgets.QLineEdit("",self)
 				kw.setFixedSize(40,25)	# This could be an issue......
 				kernelwidgetidx.append(kw)
 				grid3.addWidget(kw, i, j)
@@ -279,59 +279,59 @@
 		return kernelwidgetidx
 		
 	def get_main(self, layout):
-		hbl=QtGui.QHBoxLayout()
-		self.box_size_label = QtGui.QLabel("Box Size:",self)
+		hbl=QtWidgets.QHBoxLayout()
+		self.box_size_label = QtWidgets.QLabel("Box Size:",self)
 		hbl.addWidget(self.box_size_label)
 		
 		self.pos_int_validator = QtGui.QIntValidator(2,5000, self)	#Anything bigger than 5,000 is crazy!!!!
-		self.boxsize = QtGui.QLineEdit(str(self.mediator.boxsize),self)
+		self.boxsize = QtWidgets.QLineEdit(str(self.mediator.boxsize),self)
 		self.boxsize.setValidator(self.pos_int_validator)
 		
 		hbl.addWidget(self.boxsize)
 		layout.addLayout(hbl)
 		
-		self.connect(self.boxsize,QtCore.SIGNAL("editingFinished()"),self.new_boxsize)
+		self.boxsize.editingFinished.connect(self.new_boxsize)
 		
 	def add_boxing_button_group(self,layout):
-		self.tool_button_group_box = QtGui.QGroupBox("Tools")
+		self.tool_button_group_box = QtWidgets.QGroupBox("Tools")
 		
-		grid = QtGui.QGridLayout()
-		self.current_tool_combobox = QtGui.QComboBox()
-		grid.addWidget(QtGui.QLabel("Current Boxing Tool:"),0,0)
+		grid = QtWidgets.QGridLayout()
+		self.current_tool_combobox = QtWidgets.QComboBox()
+		grid.addWidget(QtWidgets.QLabel("Current Boxing Tool:"),0,0)
 		grid.addWidget(self.current_tool_combobox,0,1)
 		# Add stacked widget
-		self.tools_stacked_widget = QtGui.QStackedWidget()
+		self.tools_stacked_widget = QtWidgets.QStackedWidget()
 		grid.addWidget(self.tools_stacked_widget,1,0,1,2)
 		# Add quality combobox
-		self.quality = QtGui.QComboBox()
+		self.quality = QtWidgets.QComboBox()
 		for i in range(5): self.quality.addItem(str(i))
 		# check full path then check basename
 		if self.mediator.windowlist[0].filename not in self.qualitydb:
 			self.quality.setCurrentIndex(self.qualitydb.getdefault(self.mediator.windowlist[0].filename,dfl=0))
 		else:
 			self.quality.setCurrentIndex(self.qualitydb.getdefault(os.path.basename(self.mediator.windowlist[0].filename),dfl=0))
-		grid.addWidget(QtGui.QLabel("Quality Score"),2,0)
+		grid.addWidget(QtWidgets.QLabel("Quality Score"),2,0)
 		grid.addWidget(self.quality, 2,1)
 		# add to layout
 		self.tool_button_group_box.setLayout(grid)
 		layout.addWidget(self.tool_button_group_box,0,)
 		
-		QtCore.QObject.connect(self.current_tool_combobox, QtCore.SIGNAL("activated(int)"), self.current_tool_combobox_changed)
-		QtCore.QObject.connect(self.quality, QtCore.SIGNAL("activated(int)"), self.quality_score_changed)
+		self.current_tool_combobox.activated[int].connect(self.current_tool_combobox_changed)
+		self.quality.activated[int].connect(self.quality_score_changed)
 	
 	def add_controls(self, layout):
-		butbox = QtGui.QHBoxLayout()
-		self.write_box_but=QtGui.QPushButton("Write Boxes")
+		butbox = QtWidgets.QHBoxLayout()
+		self.write_box_but=QtWidgets.QPushButton("Write Boxes")
 		butbox.addWidget(self.write_box_but)
-		self.write_but=QtGui.QPushButton("Write Ptcls")
+		self.write_but=QtWidgets.QPushButton("Write Ptcls")
 		butbox.addWidget(self.write_but)
 		layout.addLayout(butbox)
-		self.done_but=QtGui.QPushButton("Done")
+		self.done_but=QtWidgets.QPushButton("Done")
 		layout.addWidget(self.done_but)
 		
-		self.connect(self.write_box_but,QtCore.SIGNAL("clicked(bool)"),self.on_write_box)
-		self.connect(self.write_but,QtCore.SIGNAL("clicked(bool)"),self.on_write)
-		self.connect(self.done_but,QtCore.SIGNAL("clicked(bool)"),self.on_done)
+		self.write_box_but.clicked[bool].connect(self.on_write_box)
+		self.write_but.clicked[bool].connect(self.on_write)
+		self.done_but.clicked[bool].connect(self.on_done)
 	
 	# This function configures the tools up tool change
 	def current_tool_combobox_changed(self, idx):
@@ -393,26 +393,26 @@
 
 # Current tools. Other tools can be added by simply adding a Pciker GUi and then building a 
 # corresponding Strategy based by subclassing Strategy in emrctstrategy
-class ManualPicker(QtGui.QWidget):
+class ManualPicker(QtWidgets.QWidget):
 	def __init__(self, mediator, db):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.mediator = mediator
 		self.db=db
-		vbl = QtGui.QVBoxLayout()
-		label = QtGui.QLabel("Manual Picker", self)
+		vbl = QtWidgets.QVBoxLayout()
+		label = QtWidgets.QLabel("Manual Picker", self)
 		boldfont = QtGui.QFont()
 		boldfont.setBold(True)
 		label.setFont(boldfont)
 		label.setAlignment(QtCore.Qt.AlignTop)
-		self.clr_but = QtGui.QPushButton("Clear", self)
+		self.clr_but = QtWidgets.QPushButton("Clear", self)
 		vbl.addWidget(label)
 		vbl.addWidget(self.clr_but)
 		self.setLayout(vbl)
 		
-		self.mpsplitter = QtGui.QSplitter(QtCore.Qt.Vertical)
-		self.mpsplitter.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.mpsplitter = QtWidgets.QSplitter(QtCore.Qt.Vertical)
+		self.mpsplitter.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		self.mpsplitter.addWidget(self)
-		self.connect(self.clr_but,QtCore.SIGNAL("clicked(bool)"),self.on_clear)
+		self.clr_but.clicked[bool].connect(self.on_clear)
 	
 	def on_clear(self):
 		for window in self.mediator.windowlist:
@@ -425,9 +425,9 @@
 	def get_widget(self):	
 		return self.mpsplitter
 		
-class PairPickerTool(QtGui.QWidget):
+class PairPickerTool(QtWidgets.QWidget):
 	def __init__(self, mediator, db):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.mediator = mediator
 		self.db = db
 		self.updateboxes = False
@@ -435,88 +435,88 @@
 		self.centertilts = False
 		
 		# GUI code below here
-		ppwidget = QtGui.QWidget()
+		ppwidget = QtWidgets.QWidget()
 		
-		vbl = QtGui.QVBoxLayout()
-		label = QtGui.QLabel("Pair Picker", self)
+		vbl = QtWidgets.QVBoxLayout()
+		label = QtWidgets.QLabel("Pair Picker", self)
 		boldfont = QtGui.QFont()
 		boldfont.setBold(True)
 		label.setFont(boldfont)
 		vbl.addWidget(label)
 
-		self.updateboxes_cb = QtGui.QCheckBox("Update box positions")
+		self.updateboxes_cb = QtWidgets.QCheckBox("Update box positions")
 		self.updateboxes_cb.setChecked(False)
 		vbl.addWidget(self.updateboxes_cb)
 		
-		self.centertilts_cb = QtGui.QCheckBox("Center opposite box position")
+		self.centertilts_cb = QtWidgets.QCheckBox("Center opposite box position")
 		self.centertilts_cb.setChecked(False)
 		vbl.addWidget(self.centertilts_cb)
 		
-		hbl = QtGui.QHBoxLayout()
-		slabel = QtGui.QLabel("Min pairs for xform", self)
+		hbl = QtWidgets.QHBoxLayout()
+		slabel = QtWidgets.QLabel("Min pairs for xform", self)
 		hbl.addWidget(slabel)
-		self.spinbox = QtGui.QSpinBox(self)
+		self.spinbox = QtWidgets.QSpinBox(self)
 		self.spinbox.setMinimum(self.minpp_for_xform)
 		self.spinbox.setMaximum(1000)
 		hbl.addWidget(self.spinbox)
 		vbl.addLayout(hbl)
 		
-		hta = QtGui.QHBoxLayout()
-		tlabel = QtGui.QLabel("Computed tilt angle", self)
+		hta = QtWidgets.QHBoxLayout()
+		tlabel = QtWidgets.QLabel("Computed tilt angle", self)
 		hta.addWidget(tlabel)
-		self.tiltangle = QtGui.QLineEdit("", self)
+		self.tiltangle = QtWidgets.QLineEdit("", self)
 		self.tiltangle.setReadOnly(True)
 		hta.addWidget(self.tiltangle)
 		vbl.addLayout(hta)
 		
-		htax = QtGui.QHBoxLayout()
-		talabel = QtGui.QLabel("Computed tilt axis (Y)", self)
+		htax = QtWidgets.QHBoxLayout()
+		talabel = QtWidgets.QLabel("Computed tilt axis (Y)", self)
 		htax.addWidget(talabel)
-		self.tiltaxis = QtGui.QLineEdit("", self)
+		self.tiltaxis = QtWidgets.QLineEdit("", self)
 		self.tiltaxis.setReadOnly(True)
 		htax.addWidget(self.tiltaxis)
 		vbl.addLayout(htax)
 		
-		hgamma = QtGui.QHBoxLayout()
-		gammalabel = QtGui.QLabel("Gamma angle", self)
+		hgamma = QtWidgets.QHBoxLayout()
+		gammalabel = QtWidgets.QLabel("Gamma angle", self)
 		hgamma.addWidget(gammalabel)
-		self.gamma = QtGui.QLineEdit("", self)
+		self.gamma = QtWidgets.QLineEdit("", self)
 		self.gamma.setReadOnly(True)
 		hgamma.addWidget(self.gamma)
 		vbl.addLayout(hgamma)
 		
-		hmb = QtGui.QHBoxLayout()
-		mlabel = QtGui.QLabel("Mask Type", self)
+		hmb = QtWidgets.QHBoxLayout()
+		mlabel = QtWidgets.QLabel("Mask Type", self)
 		hmb.addWidget(mlabel)
-		self.mask_combobox = QtGui.QComboBox()
+		self.mask_combobox = QtWidgets.QComboBox()
 		self.mask_combobox.setEnabled(False)
 		hmb.addWidget(self.mask_combobox)
 		vbl.addLayout(hmb)
 		
-		hbb = QtGui.QHBoxLayout()
-		self.upboxes_but = QtGui.QPushButton("Update Boxes", self)
+		hbb = QtWidgets.QHBoxLayout()
+		self.upboxes_but = QtWidgets.QPushButton("Update Boxes", self)
 		self.upboxes_but.setEnabled(False)
 		hbb.addWidget(self.upboxes_but)
 		
-		self.centerboxes_but = QtGui.QPushButton("Center Boxes", self)
+		self.centerboxes_but = QtWidgets.QPushButton("Center Boxes", self)
 		self.centerboxes_but.setEnabled(False)
 		hbb.addWidget(self.centerboxes_but)
 		vbl.addLayout(hbb)
 		
-		self.clr_but = QtGui.QPushButton("Clear", self)
+		self.clr_but = QtWidgets.QPushButton("Clear", self)
 		vbl.addWidget(self.clr_but)
 		self.setLayout(vbl)
 		
-		self.ppsplitter = QtGui.QSplitter(QtCore.Qt.Vertical)
-		self.ppsplitter.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.ppsplitter = QtWidgets.QSplitter(QtCore.Qt.Vertical)
+		self.ppsplitter.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		self.ppsplitter.addWidget(self)
 		
-		self.connect(self.spinbox,QtCore.SIGNAL("valueChanged(int)"),self.on_spinbox)
-		self.connect(self.updateboxes_cb,QtCore.SIGNAL("stateChanged(int)"),self.on_updateboxes)
-		self.connect(self.centertilts_cb,QtCore.SIGNAL("stateChanged(int)"),self.on_centertilts)
-		self.connect(self.clr_but,QtCore.SIGNAL("clicked(bool)"),self.on_clear)
-		self.connect(self.centerboxes_but,QtCore.SIGNAL("clicked(bool)"),self.on_centerboxes_but)
-		self.connect(self.upboxes_but,QtCore.SIGNAL("clicked(bool)"),self.on_upboxes_but)
+		self.spinbox.valueChanged[int].connect(self.on_spinbox)
+		self.updateboxes_cb.stateChanged[int].connect(self.on_updateboxes)
+		self.centertilts_cb.stateChanged[int].connect(self.on_centertilts)
+		self.clr_but.clicked[bool].connect(self.on_clear)
+		self.centerboxes_but.clicked[bool].connect(self.on_centerboxes_but)
+		self.upboxes_but.clicked[bool].connect(self.on_upboxes_but)
 	
 		# Initialize
 		self.spinbox.setValue(self.db.getdefault("ppspinbox",dfl=self.minpp_for_xform))
@@ -530,7 +530,7 @@
 		self.mask_combobox.addItem("SolidMask")
 		self.mask_combobox.setCurrentIndex(self.db.getdefault("masktype",dfl=0))
 		
-		QtCore.QObject.connect(self.mask_combobox, QtCore.SIGNAL("activated(int)"), self.mask_combobox_changed)
+		self.mask_combobox.activated[int].connect(self.mask_combobox_changed)
 		
 	def mask_combobox_changed(self, idx):
 		self.db["masktype"] = idx
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emsave.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emsave.py	2017-10-21 17:15:00.000000000 -0500
@@ -32,8 +32,8 @@
 #
 #
 
-from PyQt4.QtCore import Qt
-from PyQt4 import QtGui,QtCore
+from PyQt5.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
 from EMAN2 import EMData, file_exists, gimme_image_dimensions3D,get_image_directory,EMUtil,base_name,gm_time_string
 from EMAN2db import db_check_dict, db_remove_dict
 import os
@@ -56,7 +56,7 @@
 		@return 0 if something went wrong, for example, the file is not valid
 		'''
 		
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 		vals = file_name.split(".")
 		if len(vals) < 2 or vals[-1] != self.type:
 			# error is therefore a string
@@ -107,7 +107,7 @@
 				return 1
 				
 			except:
-				msg = QtGui.QMessageBox()
+				msg = QtWidgets.QMessageBox()
 				msg.setText("%s is not a valid coordinate file" %file_name)
 				msg.exec_()
 				return 0
@@ -253,7 +253,7 @@
 		try:
 			self.__item.write_image(out_file, -1)
 		except:
-			msg = QtGui.QMessageBox()
+			msg = QtWidgets.QMessageBox()
 			msg.setText("An exception occured while writing %s, please try again" %out_file)
 			msg.exec_()
 			tmp_file_object.remove_tmp_file()
@@ -329,7 +329,7 @@
 		@return 0 if something went wrong (e.g. the user cancelled), 1 if it's okay to call save now
 		'''
 		
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 		error = self.__validate_file_name(file_name)
 		if error != None:
 			# error is therefore a string
@@ -412,7 +412,7 @@
 		@return 0 if there was an error, 1 if there was not
 		@exception NotImplementedError raised when the EMFileExistsDialog returns an unknown code
 		'''
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 			
 		tmp_file_object = EMDummyTmpFileHandle(file)
 		if self.validator.is_overwriting():
@@ -421,7 +421,7 @@
 		total_images = len(self.__item_list)
 
 		out_file = tmp_file_object.get_tmp_file_name()
-		progress = QtGui.QProgressDialog("Writing files", "abort", 0, 2*total_images,None)
+		progress = QtWidgets.QProgressDialog("Writing files", "abort", 0, 2*total_images,None)
 		progress.show()
 		tally = 0
 		exc_list = None
@@ -487,7 +487,7 @@
 		'''
 		return self.file_name_used
 
-class EMFileExistsDialog(QtGui.QDialog):
+class EMFileExistsDialog(QtWidgets.QDialog):
 	'''
 	Runs a dialog asking if the user wants to overwrite,append to, or cancel the operation.
 	Appending may not be possible in which case nly the Overwrite and Cancel buttons are available.
@@ -511,7 +511,7 @@
 		@param item_list a list - the first object must have supply the get_attr_dict function, the keys "nx", "ny" and "nz therein
 		If you want to use this function for a single EMData object then just put it in a list
 		'''
-		QtGui.QDialog.__init__(self,None)
+		QtWidgets.QDialog.__init__(self,None)
 		self.resize(480,320)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "/eman.png"))
 		self.setWindowTitle("File already exists")
@@ -531,15 +531,15 @@
 				append_enable=True
 		
 		# some widgets
-		vbl = QtGui.QVBoxLayout(self)
-		hbl = QtGui.QHBoxLayout()
-		overwrite = QtGui.QPushButton("Overwrite")
-		cancel = QtGui.QPushButton("Cancel")
+		vbl = QtWidgets.QVBoxLayout(self)
+		hbl = QtWidgets.QHBoxLayout()
+		overwrite = QtWidgets.QPushButton("Overwrite")
+		cancel = QtWidgets.QPushButton("Cancel")
 		
 		# add Widgets to Layouts
 		hbl.addWidget(cancel)
 		if append_enable:
-			append = QtGui.QPushButton("Append")
+			append = QtWidgets.QPushButton("Append")
 			hbl.addWidget(append)
 		hbl.addWidget(overwrite)
 		if (len(filename) > 3 and filename[:4] == "bdb:"):
@@ -547,8 +547,8 @@
 			overwrite.setToolTip("Overwriting bdb files is currently disabled.")
 		
 		# Text to alert the user
-		hbl2 = QtGui.QHBoxLayout()
-		text_edit = QtGui.QTextEdit("",self)
+		hbl2 = QtWidgets.QHBoxLayout()
+		text_edit = QtWidgets.QTextEdit("",self)
 		text_edit.setReadOnly(True)
 		text_edit.setWordWrapMode(QtGui.QTextOption.WordWrap)
 		if (filename == ""):
@@ -567,16 +567,16 @@
 		text_edit.setText(help)
 		hbl2.addWidget(text_edit,0)
 		
-		groupbox = QtGui.QGroupBox("Warning")
+		groupbox = QtWidgets.QGroupBox("Warning")
 		groupbox.setLayout(hbl2)
 		vbl.addWidget(groupbox)
 		
 		vbl.addLayout(hbl)
 		
 		if append_enable:
-			QtCore.QObject.connect(append, QtCore.SIGNAL("clicked(bool)"), self.append_clicked)
-		QtCore.QObject.connect(overwrite, QtCore.SIGNAL("clicked(bool)"), self.overwrite_clicked)
-		QtCore.QObject.connect(cancel, QtCore.SIGNAL("clicked(bool)"), self.cancel_clicked)
+			append.clicked[bool].connect(self.append_clicked)
+		overwrite.clicked[bool].connect(self.overwrite_clicked)
+		cancel.clicked[bool].connect(self.cancel_clicked)
 		
 		self.__result = 0
 		
@@ -613,7 +613,7 @@
 		1 - The user hit overwrite
 		2 - The user hit append 
 		'''
-		QtGui.QDialog.exec_(self)
+		QtWidgets.QDialog.exec_(self)
 		return self.__result
 	
 class EMTmpFileHandle(object):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emscene3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emscene3d.py	2017-10-21 17:15:00.000000000 -0500
@@ -49,12 +49,14 @@
 
 from OpenGL import GLU
 from OpenGL.GL import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 
 
 #from emdataitem3d import EMDataItem3D, EMIsosurface, EMSliceItem3D, EMVolumeItem3D
 # XPM format Cursors
+QStringList = list
+
 visibleicon = [
     '16 12 3 1',
     'a c #0000ff',
@@ -727,6 +729,9 @@
 	"""
 	Widget for rendering 3D objects. Uses a scne graph for rendering
 	"""
+	sgmousepress = QtCore.pyqtSignal()
+	sgmousemove = QtCore.pyqtSignal()
+	sgmouserelease = QtCore.pyqtSignal()
 	name = "SG"
 	def __init__(self, parentwidget=None, SGactivenodeset=set(), scalestep=0.5):
 		"""
@@ -988,11 +993,11 @@
 		self.first_y = self.previous_y
 		# Process mouse events
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "app"):
-			QtGui.qApp.setOverrideCursor(self.appcursor)
-			self.emit(QtCore.SIGNAL("sgmousepress()"), [event.x(), event.y()])
+			QtWidgets.QApplication.setOverrideCursor(self.appcursor)
+			self.sgmousepress.emit([event.x(), event.y()])
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "data"):
-			QtGui.qApp.setOverrideCursor(self.datacursor)
-			filename = QtGui.QFileDialog.getOpenFileName(self, 'Get file', os.getcwd())
+			QtWidgets.QApplication.setOverrideCursor(self.datacursor)
+			filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Get file', os.getcwd())[0]
 			if not filename: return
 			name = os.path.basename(str(filename))
 			self.newnode = EMDataItem3D(filename, transform=self._gettransformbasedonscreen(event, rescale=False))
@@ -1004,45 +1009,45 @@
 			self.insertNewNode("Isosurface", self.isonode, parentnode=self.newnode)
 			self.updateSG()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "text"):
-			QtGui.qApp.setOverrideCursor(self.textcursor)
-			text, ok = QtGui.QInputDialog.getText(self, 'Enter Text', '')
+			QtWidgets.QApplication.setOverrideCursor(self.textcursor)
+			text, ok = QtWidgets.QInputDialog.getText(self, 'Enter Text', '')
 			if ok:
 				self.newnode = EM3DText(str(text), 32.0, transform=self._gettransformbasedonscreen(event))
 				self._insert_shape(text, self.newnode)
 				self.updateSG()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "line"):
-			QtGui.qApp.setOverrideCursor(self.linecursor)
+			QtWidgets.QApplication.setOverrideCursor(self.linecursor)
 			self.newnode = EMLine(0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 20.0, transform=self._gettransformbasedonscreen(event))
 			self._insert_shape("Line", self.newnode)
 			self.updateSG()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "cube"):
-			QtGui.qApp.setOverrideCursor(self.cubecursor)
+			QtWidgets.QApplication.setOverrideCursor(self.cubecursor)
 			self.newnode = EMCube(2.0, transform=self._gettransformbasedonscreen(event))
 			self._insert_shape("Cube", self.newnode)
 			self.updateSG()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "sphere"):
-			QtGui.qApp.setOverrideCursor(self.spherecursor)
+			QtWidgets.QApplication.setOverrideCursor(self.spherecursor)
 			self.newnode = EMSphere(2.0, transform=self._gettransformbasedonscreen(event))
 			self._insert_shape("Sphere", self.newnode)
 			self.updateSG()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "cylinder"):
-			QtGui.qApp.setOverrideCursor(self.cylindercursor)
+			QtWidgets.QApplication.setOverrideCursor(self.cylindercursor)
 			self.newnode = EMCylinder(2.0,2.0, transform=self._gettransformbasedonscreen(event))
 			self._insert_shape("Cylinder", self.newnode)
 			self.newnode.updateMatrices([90,1,0,0], "rotate")
 			self.updateSG()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "cone"):
-			QtGui.qApp.setOverrideCursor(self.conecursor)
+			QtWidgets.QApplication.setOverrideCursor(self.conecursor)
 			self.newnode = EMCone(2.0,2.0, transform=self._gettransformbasedonscreen(event))
 			self._insert_shape("Cone", self.newnode)
 			self.newnode.updateMatrices([90,1,0,0], "rotate")
 			self.updateSG()	
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "rotate"):
 			if  event.y() > 0.95*self.size().height(): # The lowest 5% of the screen is reserved from the Z spin virtual slider
-				QtGui.qApp.setOverrideCursor(self.zrotatecursor)
+				QtWidgets.QApplication.setOverrideCursor(self.zrotatecursor)
 				self.zrotate = True
 			else:
-				QtGui.qApp.setOverrideCursor(self.xyrotatecursor)
+				QtWidgets.QApplication.setOverrideCursor(self.xyrotatecursor)
 				self.zrotate = False
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "ruler"):
 			self.newnode = EMRuler(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, self.getAPix(), self.camera.getViewPortWidthScaling(), transform=self._gettransformbasedonscreen(event))
@@ -1050,7 +1055,7 @@
 			#self.newnode.updateMatrices([90,1,0,0], "rotate")
 			self.updateSG()
 		if event.buttons()&Qt.LeftButton and self.mousemode == "scale":
-			QtGui.qApp.setOverrideCursor(self.scalecursor)
+			QtWidgets.QApplication.setOverrideCursor(self.scalecursor)
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "selection"): 
 			#QtGui.qApp.setOverrideCursor(self.selectorcursor)
 			self.multiselect = False
@@ -1073,9 +1078,9 @@
 			if event.modifiers()&Qt.ShiftModifier:
 				self.appendselection = True
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "ztranslate"):
-			QtGui.qApp.setOverrideCursor(self.zhaircursor)
+			QtWidgets.QApplication.setOverrideCursor(self.zhaircursor)
 		if event.buttons()&Qt.RightButton or (event.buttons()&Qt.LeftButton and self.mousemode == "xytranslate"):
-			QtGui.qApp.setOverrideCursor(self.crosshaircursor)
+			QtWidgets.QApplication.setOverrideCursor(self.crosshaircursor)
 		if event.buttons()&Qt.MidButton or (event.buttons()&Qt.LeftButton and event.modifiers()&Qt.AltModifier):
 			self.showInspector()
 	
@@ -1106,7 +1111,7 @@
 		x = event.x()
 		y = event.y()
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "app"):
-			self.emit(QtCore.SIGNAL("sgmousemove()"), [event.x(), event.y()])
+			self.sgmousemove.emit([event.x(), event.y()])
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "line"):
 			self.newnode.setEndAndWidth(0.0, 0.0, 0.0, x - self.first_x, self.first_y - y, 0.0, 20.0)
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "ruler"):
@@ -1149,9 +1154,9 @@
 		Qt event handler. Returns the cursor to arrow unpon mouse button release
 		"""
 		if (event.buttons()&Qt.LeftButton and self.mousemode == "app"):
-			self.emit(QtCore.SIGNAL("sgmouserelease()"), [event.x(), event.y()])
+			self.sgmouserelease.emit([event.x(), event.y()])
 			
-		QtGui.qApp.setOverrideCursor(Qt.ArrowCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.ArrowCursor)
 		# Select using the selection box
 		if self.toggle_render_selectedarea:
 			self.pickItem()
@@ -1166,7 +1171,7 @@
 		# The 25 is a fudge factor that controls the speed of scaling, lower if slower scaling
 		if event.orientation() & Qt.Vertical:
 			self.cameraNeedsanUpdate()
-			if event.delta() > 0:
+			if event.angleDelta().y() > 0:
 				if self.camera.getUseOrtho():
 					self.camera.setPseudoFovy(self.camera.getPseudoFovyWidth()+(self.camera.getPseudoFovyWidth()+self.camera.getWidth())/25)
 				else:
@@ -1665,7 +1670,7 @@
 		EMGLWidget.closeEvent(self,event)
 	
 	def showEvent(self, event):
-		QtGui.QWidget.showEvent(self, event)
+		QtWidgets.QWidget.showEvent(self, event)
 		# if desired scale viewport to a chosen scale so that initialviewportdims fills the screen
 		if self.initialviewportdims != None:
 			self.camera.scaleToDims(self.initialviewportdims)
@@ -2047,29 +2052,29 @@
 		
 ###################################### Inspector Code #########################################################################################
 
-class EMInspector3D(QtGui.QWidget):
+class EMInspector3D(QtWidgets.QWidget):
 	def __init__(self, scenegraph):
 		"""
 		The inspector for the 3D widget. The inspector is a strict observer of the SceneGraph, and is updated by calling update inspector
 		"""
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.scenegraph = weakref.ref(scenegraph)
 		self.mintreewidth = 250		# minimum width of the tree
 		self.mincontrolwidth = 0
 		
-		vbox = QtGui.QVBoxLayout(self)
-		self.inspectortab = QtGui.QTabWidget()
+		vbox = QtWidgets.QVBoxLayout(self)
+		self.inspectortab = QtWidgets.QTabWidget()
 		self.inspectortab.addTab(self.getTreeWidget(), "Tree View")
 		self.inspectortab.addTab(self.getLightsWidget(), "Lights")
 		self.inspectortab.addTab(self.getCameraWidget(), "Camera")
 		self.inspectortab.addTab(self.getUtilsWidget(), "Utils")
-		toolframe = QtGui.QFrame()
-		toolframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		toolframe = QtWidgets.QFrame()
+		toolframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		toolframe.setLayout(self._get_toolbox_layout())
 		vbox.addWidget(self.inspectortab)
 		vbox.addWidget(toolframe)
 		
-		QtCore.QObject.connect(self.inspectortab, QtCore.SIGNAL("currentChanged(int)"), self._on_load_camera)
+		self.inspectortab.currentChanged[int].connect(self._on_load_camera)
 		
 		self.setLayout(vbox)
 		self.updateGeometry()
@@ -2085,15 +2090,15 @@
 		"""
 		This returns the treeview-control panel widget
 		"""
-		widget = QtGui.QWidget()
-		hbox = QtGui.QHBoxLayout(widget)
-		treeframe = QtGui.QFrame()
-		treeframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		widget = QtWidgets.QWidget()
+		hbox = QtWidgets.QHBoxLayout(widget)
+		treeframe = QtWidgets.QFrame()
+		treeframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		treeframe.setLayout(self._get_tree_layout(widget))
 		treeframe.setMinimumWidth(self.mintreewidth)
 		hbox.addWidget(treeframe)
-		self.stacked_widget = QtGui.QStackedWidget()
-		self.stacked_widget.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.stacked_widget = QtWidgets.QStackedWidget()
+		self.stacked_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		hbox.addWidget(self.stacked_widget)
 		widget.setLayout(hbox)
 		
@@ -2103,12 +2108,12 @@
 		"""
 		Returns the tree layout
 		"""
-		tvbox = QtGui.QVBoxLayout()
+		tvbox = QtWidgets.QVBoxLayout()
 		self.tree_widget = EMQTreeWidget(parent)
 		self.tree_widget.setHeaderLabel("Choose a item")
 		tvbox.addWidget(self.tree_widget)
-		self.tree_node_button_add = QtGui.QPushButton("Add Object")
-		self.tree_node_button_remove = QtGui.QPushButton("Remove Object")
+		self.tree_node_button_add = QtWidgets.QPushButton("Add Object")
+		self.tree_node_button_remove = QtWidgets.QPushButton("Remove Object")
 		self.tree_node_slider = ValSlider(label="Seq:")
 		self.tree_node_slider.setIntonly(True)
 		self.tree_node_slider.setRange(0,1)
@@ -2117,12 +2122,12 @@
 		tvbox.addWidget(self.tree_node_button_remove)
 		tvbox.addWidget(self.tree_node_slider)
 		
-		QtCore.QObject.connect(self.tree_widget, QtCore.SIGNAL("itemClicked(QTreeWidgetItem*,int)"), self._tree_widget_click)
-		QtCore.QObject.connect(self.tree_widget, QtCore.SIGNAL("visibleItem(QTreeWidgetItem*)"), self._tree_widget_visible)
-		QtCore.QObject.connect(self.tree_widget, QtCore.SIGNAL("editItem(QTreeWidgetItem*)"), self._tree_widget_edit)
-		QtCore.QObject.connect(self.tree_node_button_remove, QtCore.SIGNAL("clicked()"), self._tree_widget_remove)
-		QtCore.QObject.connect(self.tree_node_button_add, QtCore.SIGNAL("clicked()"), self._on_add_button)
-		QtCore.QObject.connect(self.tree_node_slider, QtCore.SIGNAL("valueChanged"), self._slider_change)
+		self.tree_widget.itemClicked[QTreeWidgetItem, int].connect(self._tree_widget_click)
+		self.tree_widget.visibleItem[QTreeWidgetItem].connect(self._tree_widget_visible)
+		self.tree_widget.editItem[QTreeWidgetItem].connect(self._tree_widget_edit)
+		self.tree_node_button_remove.clicked.connect(self._tree_widget_remove)
+		self.tree_node_button_add.clicked.connect(self._on_add_button)
+		self.tree_node_slider.valueChanged.connect(self._slider_change)
 		
 		return tvbox
 	
@@ -2194,7 +2199,7 @@
 		The Treeitem also needs to know the node, so it can talk to the node.
 		You can think of this as a three way conversation (the alterative it to use a mediator, but that is not worth it w/ only three players)
 		"""
-		tree_item = EMQTreeWidgetItem(QtCore.QStringList(name), item3d, parentitem)	# Make a QTreeItem widget, and let the TreeItem talk to the scenegraph node and its GUI
+		tree_item = EMQTreeWidgetItem(QStringList(name), item3d, parentitem)	# Make a QTreeItem widget, and let the TreeItem talk to the scenegraph node and its GUI
 		item3d.setEMQTreeWidgetItem(tree_item)				# Reference to the EMQTreeWidgetItem
 		item_inspector = item3d.getItemInspector()				# Get the node GUI controls 
 		#return tree_item
@@ -2275,10 +2280,10 @@
 			print("Error cannot remove root node!!")
 			
 	def _get_toolbox_layout(self):
-		tvbox = QtGui.QHBoxLayout()
+		tvbox = QtWidgets.QHBoxLayout()
 		font = QtGui.QFont()
 		font.setBold(True)
-		toollabel = QtGui.QLabel("Tools")
+		toollabel = QtWidgets.QLabel("Tools")
 		toollabel.setFont(font)
 		self.rotatetool = EMANToolButton()
 		self.rotatetool.setIcon(QtGui.QIcon(QtGui.QPixmap(rotateicon)))
@@ -2344,21 +2349,21 @@
 		tvbox.addWidget(self.apptool)
 		tvbox.setAlignment(QtCore.Qt.AlignLeft)
 		
-		QtCore.QObject.connect(self.rotatetool, QtCore.SIGNAL("clicked(int)"), self._rotatetool_clicked)
-		QtCore.QObject.connect(self.translatetool, QtCore.SIGNAL("clicked(int)"), self._transtool_clicked)
-		QtCore.QObject.connect(self.ztranslate, QtCore.SIGNAL("clicked(int)"), self._ztranstool_clicked)
-		QtCore.QObject.connect(self.scaletool, QtCore.SIGNAL("clicked(int)"), self._scaletool_clicked)
-		QtCore.QObject.connect(self.rulertool, QtCore.SIGNAL("clicked(int)"), self._rulertool_clicked)
-		QtCore.QObject.connect(self.selectiontool, QtCore.SIGNAL("clicked(int)"), self._seltool_clicked)
-		QtCore.QObject.connect(self.multiselectiontool, QtCore.SIGNAL("clicked(int)"), self._multiseltool_clicked)
-		QtCore.QObject.connect(self.linetool, QtCore.SIGNAL("clicked(int)"), self._linetool_clicked)
-		QtCore.QObject.connect(self.cubetool, QtCore.SIGNAL("clicked(int)"), self._cubetool_clicked)
-		QtCore.QObject.connect(self.spheretool, QtCore.SIGNAL("clicked(int)"), self._spheretool_clicked)
-		QtCore.QObject.connect(self.cylindertool, QtCore.SIGNAL("clicked(int)"), self._cylindertool_clicked)
-		QtCore.QObject.connect(self.conetool, QtCore.SIGNAL("clicked(int)"), self._conetool_clicked)
-		QtCore.QObject.connect(self.texttool, QtCore.SIGNAL("clicked(int)"), self._texttool_clicked)
-		QtCore.QObject.connect(self.datatool, QtCore.SIGNAL("clicked(int)"), self._datatool_clicked)
-		QtCore.QObject.connect(self.apptool, QtCore.SIGNAL("clicked(int)"), self._apptool_clicked)
+		self.rotatetool.clicked[int].connect(self._rotatetool_clicked)
+		self.translatetool.clicked[int].connect(self._transtool_clicked)
+		self.ztranslate.clicked[int].connect(self._ztranstool_clicked)
+		self.scaletool.clicked[int].connect(self._scaletool_clicked)
+		self.rulertool.clicked[int].connect(self._rulertool_clicked)
+		self.selectiontool.clicked[int].connect(self._seltool_clicked)
+		self.multiselectiontool.clicked[int].connect(self._multiseltool_clicked)
+		self.linetool.clicked[int].connect(self._linetool_clicked)
+		self.cubetool.clicked[int].connect(self._cubetool_clicked)
+		self.spheretool.clicked[int].connect(self._spheretool_clicked)
+		self.cylindertool.clicked[int].connect(self._cylindertool_clicked)
+		self.conetool.clicked[int].connect(self._conetool_clicked)
+		self.texttool.clicked[int].connect(self._texttool_clicked)
+		self.datatool.clicked[int].connect(self._datatool_clicked)
+		self.apptool.clicked[int].connect(self._apptool_clicked)
 			
 		return tvbox
 	
@@ -2412,9 +2417,9 @@
 		Returns the lights control widget
 		"""
 		self.lighttab_open = False
-		lwidget = QtGui.QWidget()
-		lvbox = QtGui.QVBoxLayout()
-		lightslabel = QtGui.QLabel("Lights", lwidget)
+		lwidget = QtWidgets.QWidget()
+		lvbox = QtWidgets.QVBoxLayout()
+		lightslabel = QtWidgets.QLabel("Lights", lwidget)
 		lightslabel.setAlignment(QtCore.Qt.AlignCenter)
 		lightslabel.setMaximumHeight(30.0)
 		font = QtGui.QFont()
@@ -2422,13 +2427,13 @@
 		lightslabel.setFont(font)
 		lvbox.addWidget(lightslabel)
 		self.lightwidget = EMLightControls(GL_LIGHT1)
-		positionlabel = QtGui.QLabel("Position", lwidget)
+		positionlabel = QtWidgets.QLabel("Position", lwidget)
 		positionlabel.setMaximumHeight(20.0)
 		positionlabel.setAlignment(QtCore.Qt.AlignCenter)
-		valslidersplitter = QtGui.QFrame()
-		valslidersplitter.setFrameShape(QtGui.QFrame.StyledPanel)
+		valslidersplitter = QtWidgets.QFrame()
+		valslidersplitter.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		valslidersplitter.setMaximumHeight(80)
-		valvbox = QtGui.QVBoxLayout()
+		valvbox = QtWidgets.QVBoxLayout()
 		self.hvalslider = ValSlider(lwidget,(0.0,360.0),"Horizontal")
 		self.vvalslider = ValSlider(lwidget,(0.0,360.0),"Vertical")
 		valvbox.addWidget(self.hvalslider)
@@ -2442,10 +2447,10 @@
 		lvbox.addWidget(self.ambientlighting)
 		lwidget.setLayout(lvbox)
 		
-		QtCore.QObject.connect(self.lightwidget, QtCore.SIGNAL("lightPositionMoved"), self._light_position_moved)
-		QtCore.QObject.connect(self.hvalslider,QtCore.SIGNAL("valueChanged"),self._on_light_slider)
-		QtCore.QObject.connect(self.vvalslider,QtCore.SIGNAL("valueChanged"),self._on_light_slider)
-		QtCore.QObject.connect(self.ambientlighting,QtCore.SIGNAL("valueChanged"),self._on_light_ambient)
+		self.lightwidget.lightPositionMoved.connect(self._light_position_moved)
+		self.hvalslider.valueChanged.connect(self._on_light_slider)
+		self.vvalslider.valueChanged.connect(self._on_light_slider)
+		self.ambientlighting.valueChanged.connect(self._on_light_ambient)
 
 		return lwidget
 	
@@ -2469,12 +2474,12 @@
 		Returns the camera control widget
 		"""
 		self.cameratab_open = False
-		cwidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
+		cwidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
 		grid.setContentsMargins(11,5,11,5)
 		self.camerawidget = CameraControls(scenegraph=self.scenegraph())
 		grid.addWidget(self.camerawidget, 0, 0, 1, 3)
-		nlabel = QtGui.QLabel("Near clipping plane", cwidget)
+		nlabel = QtWidgets.QLabel("Near clipping plane", cwidget)
 		nlabel.setMaximumHeight(30.0)
 		nlabel.setAlignment(QtCore.Qt.AlignCenter)
 		self.near = EMSpinWidget(self.scenegraph().camera.getClipNear(), 1.0)
@@ -2482,7 +2487,7 @@
 		self.near.setMaximumHeight(40.0)
 		grid.addWidget(nlabel, 1, 0)
 		grid.addWidget(self.near ,1, 1)
-		flabel = QtGui.QLabel("Far clipping plane", cwidget)
+		flabel = QtWidgets.QLabel("Far clipping plane", cwidget)
 		flabel.setMaximumHeight(30.0)
 		flabel.setAlignment(QtCore.Qt.AlignCenter)
 		self.far = EMSpinWidget(self.scenegraph().camera.getClipFar(), 1.0)
@@ -2492,16 +2497,16 @@
 		grid.addWidget(self.far, 2, 1)
 		
 		# The frame for linking capping, etc
-		cframe = QtGui.QFrame()
-		cframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		cframegrid = QtGui.QGridLayout()
-		self.linkcb = QtGui.QCheckBox("Link clipping planes")
+		cframe = QtWidgets.QFrame()
+		cframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		cframegrid = QtWidgets.QGridLayout()
+		self.linkcb = QtWidgets.QCheckBox("Link clipping planes")
 		self.linkcb.setMinimumHeight(40.0)
 		cframegrid.addWidget(self.linkcb, 0, 0, 1, 2)
-		self.capcb = QtGui.QCheckBox("Cap clipping planes")
+		self.capcb = QtWidgets.QCheckBox("Cap clipping planes")
 		self.capcb.setMinimumHeight(40.0)
 		cframegrid.addWidget(self.capcb, 1, 0, 1, 2)
-		capcolorlabel = QtGui.QLabel("Cap Color")
+		capcolorlabel = QtWidgets.QLabel("Cap Color")
 		cframegrid.addWidget(capcolorlabel, 2, 0, 1, 1)
 		self.cappingcolor = EMQTColorWidget(parent=self)
 		cframegrid.addWidget(self.cappingcolor, 2, 1, 1, 1)
@@ -2510,13 +2515,13 @@
 		grid.addWidget(cframe, 1, 2, 3, 1)
 		
 		# The frame for project matrices
-		frame = QtGui.QFrame()
+		frame = QtWidgets.QFrame()
 		frame.setMaximumHeight(40.0)
-		frame.setFrameShape(QtGui.QFrame.StyledPanel)
-		hbox = QtGui.QHBoxLayout()
-		vvlabel = QtGui.QLabel("Viewing Volume")
-		self.orthoradio = QtGui.QRadioButton("Orthographic")
-		self.perspectiveradio = QtGui.QRadioButton("Perspective")
+		frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		hbox = QtWidgets.QHBoxLayout()
+		vvlabel = QtWidgets.QLabel("Viewing Volume")
+		self.orthoradio = QtWidgets.QRadioButton("Orthographic")
+		self.perspectiveradio = QtWidgets.QRadioButton("Perspective")
 		hbox.addWidget(vvlabel)
 		hbox.addWidget(self.orthoradio)
 		hbox.addWidget(self.perspectiveradio)
@@ -2524,15 +2529,15 @@
 		grid.addWidget(frame, 3, 0, 1, 2)
 		cwidget.setLayout(grid)
 
-		QtCore.QObject.connect(self.near,QtCore.SIGNAL("valueChanged(int)"),self._on_near)
-		QtCore.QObject.connect(self.far,QtCore.SIGNAL("valueChanged(int)"),self._on_far)
-		QtCore.QObject.connect(self.camerawidget,QtCore.SIGNAL("nearMoved(float)"),self._on_near_move)
-		QtCore.QObject.connect(self.camerawidget,QtCore.SIGNAL("farMoved(float)"),self._on_far_move)
-		QtCore.QObject.connect(self.orthoradio,QtCore.SIGNAL("clicked()"),self._on_radio_click)
-		QtCore.QObject.connect(self.perspectiveradio,QtCore.SIGNAL("clicked()"),self._on_radio_click)
-		QtCore.QObject.connect(self.capcb,QtCore.SIGNAL("clicked()"),self._on_capping)
-		QtCore.QObject.connect(self.linkcb,QtCore.SIGNAL("clicked()"),self._on_linking)
-		QtCore.QObject.connect(self.cappingcolor,QtCore.SIGNAL("newcolor(QColor)"),self._on_cap_color)
+		self.near.valueChanged[int].connect(self._on_near)
+		self.far.valueChanged[int].connect(self._on_far)
+		self.camerawidget.nearMoved[float].connect(self._on_near_move)
+		self.camerawidget.farMoved[float].connect(self._on_far_move)
+		self.orthoradio.clicked.connect(self._on_radio_click)
+		self.perspectiveradio.clicked.connect(self._on_radio_click)
+		self.capcb.clicked.connect(self._on_capping)
+		self.linkcb.clicked.connect(self._on_linking)
+		self.cappingcolor.newcolor[QColor].connect(self._on_cap_color)
 		
 		return cwidget
 		
@@ -2618,18 +2623,18 @@
 		"""
 		Return the utilites widget
 		"""
-		uwidget = QtGui.QWidget()
-		uvbox = QtGui.QVBoxLayout()
+		uwidget = QtWidgets.QWidget()
+		uvbox = QtWidgets.QVBoxLayout()
 		font = QtGui.QFont()
 		font.setBold(True)
 		# Controls frame
-		frame = QtGui.QFrame()
-		frame.setFrameShape(QtGui.QFrame.StyledPanel)
-		gridbox = QtGui.QGridLayout()
-		backgroundcolor_label = QtGui.QLabel("Background Color", frame)
+		frame = QtWidgets.QFrame()
+		frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		gridbox = QtWidgets.QGridLayout()
+		backgroundcolor_label = QtWidgets.QLabel("Background Color", frame)
 		backgroundcolor_label.setFont(font)
 		self.backgroundcolor = EMQTColorWidget(parent=frame)
-		self.hideselectionbutton = QtGui.QCheckBox("Hide Display Selections")
+		self.hideselectionbutton = QtWidgets.QCheckBox("Hide Display Selections")
 		self.hideselectionbutton.setMinimumHeight(100)
 		self.hideselectionbutton.setFont(font)
 		gridbox.addWidget(backgroundcolor_label, 0, 0)
@@ -2640,22 +2645,22 @@
 		frame.setLayout(gridbox)
 		# Buttons frame
 		uvbox.addWidget(frame)
-		self.opensession_button = QtGui.QPushButton("Open Session")
-		self.savesession_button = QtGui.QPushButton("Save Session")
-		self.savebutton = QtGui.QPushButton("Save Image Snapshot")
-		self.moviebutton = QtGui.QPushButton("Save GIF Movie")
+		self.opensession_button = QtWidgets.QPushButton("Open Session")
+		self.savesession_button = QtWidgets.QPushButton("Save Session")
+		self.savebutton = QtWidgets.QPushButton("Save Image Snapshot")
+		self.moviebutton = QtWidgets.QPushButton("Save GIF Movie")
 		uvbox.addWidget(self.opensession_button)
 		uvbox.addWidget(self.savesession_button)
 		uvbox.addWidget(self.savebutton)
 		uvbox.addWidget(self.moviebutton)
 		uwidget.setLayout(uvbox)
 		
-		QtCore.QObject.connect(self.backgroundcolor,QtCore.SIGNAL("newcolor(QColor)"),self._on_bg_color)
-		QtCore.QObject.connect(self.hideselectionbutton, QtCore.SIGNAL("clicked()"),self._on_hide)
-		QtCore.QObject.connect(self.savebutton, QtCore.SIGNAL("clicked()"),self._on_save)
-		QtCore.QObject.connect(self.moviebutton, QtCore.SIGNAL("clicked()"),self._on_save_movie)
-		QtCore.QObject.connect(self.savesession_button, QtCore.SIGNAL("clicked()"),self._on_save_session)
-		QtCore.QObject.connect(self.opensession_button, QtCore.SIGNAL("clicked()"),self._on_open_session)
+		self.backgroundcolor.newcolor[QColor].connect(self._on_bg_color)
+		self.hideselectionbutton.clicked.connect(self._on_hide)
+		self.savebutton.clicked.connect(self._on_save)
+		self.moviebutton.clicked.connect(self._on_save_movie)
+		self.savesession_button.clicked.connect(self._on_save_session)
+		self.opensession_button.clicked.connect(self._on_open_session)
 		
 		return uwidget
 	
@@ -2672,7 +2677,7 @@
 		Open a session
 		"""
 		# Open the file
-		filename = QtGui.QFileDialog.getOpenFileName(self, 'Open Session', os.getcwd(), "*.eman")
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Session', os.getcwd(), "*.eman")[0]
 		if filename:
 			self.scenegraph().loadSession(filename)
 		
@@ -2680,7 +2685,7 @@
 		"""
 		Return a list of all the child items (actually a tree of sorts)
 		"""
-		filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Session', os.getcwd(), "*.eman")
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Session', os.getcwd(), "*.eman")[0]
 		if filename: # if we cancel
 			self.scenegraph().saveSession(filename)
 
@@ -2688,7 +2693,7 @@
 		"""
 		Save a snapshot of the scene
 		"""
-		filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.tiff *.jpeg *.png)")
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.tiff *.jpeg *.png)")[0]
 		if filename: # if we cancel
 			self.scenegraph().saveSnapShot(filename)
 	
@@ -2696,7 +2701,7 @@
 		"""
 		Save a movie of the scene
 		"""
-		filename = QtGui.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.gif)")
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.gif)")[0]
 		if filename: # if we cancel
 			self.scenegraph().saveMovie(filename)
 	
@@ -2789,8 +2794,8 @@
 	def __init__(self, name, item3d):
 		EMItem3DInspector.__init__(self, name, item3d)
 		if name=="All Objects":
-			tabwidget = QtGui.QWidget()
-			gridbox = QtGui.QGridLayout()
+			tabwidget = QtWidgets.QWidget()
+			gridbox = QtWidgets.QGridLayout()
 			
 			EMSGNodeInspector.addExtraTabAllObjects(self, gridbox)
 			
@@ -2798,11 +2803,11 @@
 			self.addTab(tabwidget, "misc")
 		
 	def addExtraTabAllObjects(self,gridbox):
-		self.getthresh = QtGui.QLabel("Iso-threshod")
-		self.isothr_box=QtGui.QLineEdit("0.0")
+		self.getthresh = QtWidgets.QLabel("Iso-threshod")
+		self.isothr_box=QtWidgets.QLineEdit("0.0")
 		gridbox.addWidget(self.getthresh, 1, 0, 1, 1)
 		gridbox.addWidget(self.isothr_box, 1, 1, 1, 1)
-		QtCore.QObject.connect(self.isothr_box,QtCore.SIGNAL("returnPressed()"),self._on_change_threshold)
+		self.isothr_box.returnPressed.connect(self._on_change_threshold)
 		#QtCore.QObject.connect(self.getthresh, QtCore.SIGNAL("clicked()"), self._on_get_thresh)
 		
 	def _on_change_threshold(self):
@@ -2828,15 +2833,15 @@
 
 	def addControls(self, gridbox):
 		super(EMSGNodeInspector, self).addControls(gridbox)
-		buttonframe = QtGui.QFrame()
-		buttonframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		buttongrid = QtGui.QGridLayout()
+		buttonframe = QtWidgets.QFrame()
+		buttonframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		buttongrid = QtWidgets.QGridLayout()
 		# Make buttons
-		centerall = QtGui.QPushButton("Center All")
-		distributeall =  QtGui.QPushButton("Distribute All")
+		centerall = QtWidgets.QPushButton("Center All")
+		distributeall =  QtWidgets.QPushButton("Distribute All")
 		distributeall.setToolTip('Only works for data objects')
-		selectall = QtGui.QPushButton("Select All")
-		addaxes = QtGui.QPushButton("Add Axes")
+		selectall = QtWidgets.QPushButton("Select All")
+		addaxes = QtWidgets.QPushButton("Add Axes")
 		# Set layouts
 		buttongrid.addWidget(centerall, 0, 0)
 		buttongrid.addWidget(distributeall, 0, 1)
@@ -2845,10 +2850,10 @@
 		buttonframe.setLayout(buttongrid)
 		gridbox.addWidget(buttonframe, 3, 0, 1, 1)
 		# Add connections
-		QtCore.QObject.connect(centerall, QtCore.SIGNAL("clicked()"), self._on_centerall)
-		QtCore.QObject.connect(distributeall, QtCore.SIGNAL("clicked()"), self._on_distributeall)
-		QtCore.QObject.connect(selectall, QtCore.SIGNAL("clicked()"), self._on_selectall)
-		QtCore.QObject.connect(addaxes, QtCore.SIGNAL("clicked()"), self._on_addaxes)
+		centerall.clicked.connect(self._on_centerall)
+		distributeall.clicked.connect(self._on_distributeall)
+		selectall.clicked.connect(self._on_selectall)
+		addaxes.clicked.connect(self._on_addaxes)
 		
 	def _on_centerall(self):
 		for child in self.item3d().getChildren():
@@ -2920,28 +2925,31 @@
 		if tp: tt = tp.inverse()*t
 		child.getTransform().set_trans(tt.get_trans())
 		
-class EMQTreeWidget(QtGui.QTreeWidget):
+class EMQTreeWidget(QtWidgets.QTreeWidget):
 	"""
 	Subclassing the QTreeWidget to enable is_visible toggling
 	"""
+	visibleItem = QtCore.pyqtSignal(QTreeWidgetItem)
+	editItem = QtCore.pyqtSignal(QTreeWidgetItem)
+
 	def __init__(self, parent=None):
-		QtGui.QTreeWidget.__init__(self, parent)
+		QtWidgets.QTreeWidget.__init__(self, parent)
 			
 	def mousePressEvent(self, e):
-		QtGui.QTreeWidget.mousePressEvent(self, e)
+		QtWidgets.QTreeWidget.mousePressEvent(self, e)
 		if e.button()==Qt.RightButton:
-			self.emit(QtCore.SIGNAL("visibleItem(QTreeWidgetItem*)"), self.currentItem())
+			self.visibleItem.emit(self.currentItem())
 		if e.button()==Qt.MidButton or (e.buttons()&Qt.LeftButton and e.modifiers()&Qt.AltModifier):
-			self.emit(QtCore.SIGNAL("editItem(QTreeWidgetItem*)"), self.currentItem())
+			self.editItem.emit(self.currentItem())
 			
 			
-class EMQTreeWidgetItem(QtGui.QTreeWidgetItem):
+class EMQTreeWidgetItem(QtWidgets.QTreeWidgetItem):
 	"""
 	Subclass of QTreeWidgetItem
 	adds functionality
 	"""
 	def __init__(self, qstring, item3d, parentnode):
-		QtGui.QTreeWidgetItem.__init__(self, qstring)
+		QtWidgets.QTreeWidgetItem.__init__(self, qstring)
 		self.name = qstring.join('')
 		self.item3d = weakref.ref(item3d)
 		if parentnode: self.parent = weakref.ref(parentnode)
@@ -2995,27 +3003,27 @@
 			self.child(0).removeAllChildren(inspector)
 			inspector.removeTreeNode(self, 0) 
 
-class NodeEditDialog(QtGui.QDialog):
+class NodeEditDialog(QtWidgets.QDialog):
 	"""
 	A dialog for editing the node
 	"""
 	def __init__(self, inspector, item):
-		QtGui.QDialog.__init__(self)
+		QtWidgets.QDialog.__init__(self)
 		self.item = item
 		self.inspector = weakref.ref(inspector)
-		grid = QtGui.QGridLayout(self)
-		label = QtGui.QLabel("Node Name")
-		self.nodename = QtGui.QLineEdit(self.item.item3d().getLabel())
+		grid = QtWidgets.QGridLayout(self)
+		label = QtWidgets.QLabel("Node Name")
+		self.nodename = QtWidgets.QLineEdit(self.item.item3d().getLabel())
 		grid.addWidget(label, 0, 0, 1, 2)
 		grid.addWidget(self.nodename, 1, 0, 1, 2)
-		self.ok_button = QtGui.QPushButton("Ok")
-		self.cancel_button = QtGui.QPushButton("Cancel")
+		self.ok_button = QtWidgets.QPushButton("Ok")
+		self.cancel_button = QtWidgets.QPushButton("Cancel")
 		grid.addWidget(self.ok_button, 2, 0, 1, 1)
 		grid.addWidget(self.cancel_button, 2, 1, 1, 1)
 		self.setLayout(grid)
 		
-		self.connect(self.ok_button, QtCore.SIGNAL('clicked()'), self._on_ok)
-		self.connect(self.cancel_button, QtCore.SIGNAL('clicked()'), self._on_cancel)
+		self.ok_button.clicked.connect(self._on_ok)
+		self.cancel_button.clicked.connect(self._on_cancel)
 	
 	def _on_ok(self):
 		self.item.item3d().setLabel(self.nodename.text())
@@ -3026,28 +3034,28 @@
 	def _on_cancel(self):
 		self.done(1)
 	
-class NodeDialog(QtGui.QDialog):
+class NodeDialog(QtWidgets.QDialog):
 	"""
 	Generate a dialog to add or remove node. If reome is chosen 'item' node is removed
 	If add node is chosen, a node is inserted just below this node.
 	"""
 	def __init__(self, inspector, item):
-		QtGui.QDialog.__init__(self)
+		QtWidgets.QDialog.__init__(self)
 		self.item = item
 		self.inspector = weakref.ref(inspector)
 		self.setWindowTitle('Node Controler')
 		self.setMaximumWidth(300)
 		self.transformgroup = {}
-		vbox = QtGui.QVBoxLayout(self)
+		vbox = QtWidgets.QVBoxLayout(self)
 		# Stuff within the frame
-		frame = QtGui.QFrame()
-		frame.setFrameStyle(QtGui.QFrame.StyledPanel)
-		fvbox = QtGui.QVBoxLayout(frame)
-		label = QtGui.QLabel("Node Type to add")
-		self.node_type_combo = QtGui.QComboBox() 
-		self.node_stacked_widget = QtGui.QStackedWidget()
-		self.node_stacked_widget.setFrameStyle(QtGui.QFrame.StyledPanel)
-		self.addnode_button = QtGui.QPushButton("Add Node")
+		frame = QtWidgets.QFrame()
+		frame.setFrameStyle(QtWidgets.QFrame.StyledPanel)
+		fvbox = QtWidgets.QVBoxLayout(frame)
+		label = QtWidgets.QLabel("Node Type to add")
+		self.node_type_combo = QtWidgets.QComboBox() 
+		self.node_stacked_widget = QtWidgets.QStackedWidget()
+		self.node_stacked_widget.setFrameStyle(QtWidgets.QFrame.StyledPanel)
+		self.addnode_button = QtWidgets.QPushButton("Add Node")
 		fvbox.addWidget(label)
 		fvbox.addWidget(self.node_type_combo)
 		fvbox.addWidget(self.node_stacked_widget)
@@ -3055,7 +3063,7 @@
 		frame.setLayout(fvbox)
 		# vbox widgets
 		vbox.addWidget(frame)
-		self.cancel_button = QtGui.QPushButton("Cancel")
+		self.cancel_button = QtWidgets.QPushButton("Cancel")
 		vbox.addWidget(self.cancel_button)
 		self.setLayout(vbox)
 		
@@ -3104,9 +3112,9 @@
 			self.volumewidgetdict = {}
 			self.node_stacked_widget.addWidget(EMVolumeItem3D.getNodeDialogWidget(self.volumewidgetdict))
 		
-		self.connect(self.addnode_button, QtCore.SIGNAL('clicked()'), self._on_add_node)
-		self.connect(self.cancel_button, QtCore.SIGNAL('clicked()'), self._on_cancel)
-		self.connect(self.node_type_combo, QtCore.SIGNAL("activated(int)"), self._node_combobox_changed)
+		self.addnode_button.clicked.connect(self._on_add_node)
+		self.cancel_button.clicked.connect(self._on_cancel)
+		self.node_type_combo.activated[int].connect(self._node_combobox_changed)
 	
 	def _on_add_node(self):
 		insertion_node = None
@@ -3193,9 +3201,9 @@
 		
 # All object that are rendered inherit from abstractSGnode and implement the render method
 
-class GLdemo(QtGui.QWidget):
+class GLdemo(QtWidgets.QWidget):
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		
 		self.widget = EMScene3D()
 		#self.widget.camera.usePrespective(50, 0.5)
@@ -3207,7 +3215,7 @@
 		self.widget.addChild(self.cylider)
 		
 		# QT stuff to display the widget
-		vbox = QtGui.QVBoxLayout()
+		vbox = QtWidgets.QVBoxLayout()
 		vbox.addWidget(self.widget)
 		self.setLayout(vbox)
 		self.setGeometry(300, 300, 600, 600)
@@ -3220,7 +3228,7 @@
 if __name__ == "__main__":
 	import sys
 	#from pmwidgets import PMIntEntryWidget, PMStringEntryWidget, PMBoolWidget, PMFileNameWidget, PMComboWidget
-	app = QtGui.QApplication(sys.argv)
+	app = QtWidgets.QApplication(sys.argv)
 	window = GLdemo()
 	window.show()
 	app.exec_()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emselector.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emselector.py	2017-10-21 17:15:01.000000000 -0500
@@ -37,8 +37,8 @@
 	remove_directories_from_name, Util, EMUtil, IMAGE_UNKNOWN, base_name, \
 	file_exists, base_name
 from EMAN2db import EMAN2DB, db_convert_path, db_open_dict, db_check_dict, e2getcwd
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import ModuleEventsManager, EMApp, get_application
 from emimage2d import EMImage2DWidget
 from emimagemx import EMImageMXWidget
@@ -50,7 +50,7 @@
 from emplot2d import EMPlot2DWidget
 #from e2simmxxplor import EMSimmxExplorer
 from emsave import save_data
-import PyQt4
+import PyQt5
 import math
 import os
 import re
@@ -105,15 +105,15 @@
 		self.__delete_items( [item] )
 
 	def __delete_items(self,items):
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 		msg.setText("Deletion will be permanent. Are you sure you want to delete the selected file(s)?")
 		s = ""
 		for i in items: s+=i.text()+"\n"
 		msg.setInformativeText(s)
-		msg.setStandardButtons(QtGui.QMessageBox.Cancel | QtGui.QMessageBox.Ok )
-		msg.setDefaultButton(QtGui.QMessageBox.Cancel)
+		msg.setStandardButtons(QtWidgets.QMessageBox.Cancel | QtWidgets.QMessageBox.Ok )
+		msg.setDefaultButton(QtWidgets.QMessageBox.Cancel)
 		ret = msg.exec_()
-		if ret == QtGui.QMessageBox.Cancel: return False
+		if ret == QtWidgets.QMessageBox.Cancel: return False
 		
 		for item in items:
 			delegate= item.get_delegate()
@@ -280,6 +280,10 @@
 	Types currently in use are the QtGui.QWidget and the QtGui.QDialog
 	'''
 	class EMSelectorBase(Type):
+		ok = QtCore.pyqtSignal()
+		oky = QtCore.pyqtSignal()
+		cancel = QtCore.pyqtSignal()
+
 		def __init__(self, single_selection=False):
 			'''
 			@param single_selection - should selections be limited to singles?
@@ -290,8 +294,8 @@
 			self.single_selection = single_selection # Flag indicating single selection in interface
 			self.browse_delegates = [EMBDBDelegate(self), EMFileSystemDelegate(self)] # Object capable of returning listed items based on url- Add your own
 			
-			self.hbl = QtGui.QVBoxLayout(self)
-			self.hbl.setMargin(0)
+			self.hbl = QtWidgets.QVBoxLayout(self)
+			self.hbl.setContentsMargins(0, 0, 0, 0)
 			self.hbl.setSpacing(6)
 			self.hbl.setObjectName("hbl")
 			
@@ -307,7 +311,7 @@
 			self.previews = [] # keeps track of all of the preview windows
 #			self.module_events = [] # used to coordinate signals from the modules, especially close events, to free memory
 			self.list_widget_data= [] # entries should be tuples containing (current folder item)
-			self.splitter = QtGui.QSplitter(self)
+			self.splitter = QtWidgets.QSplitter(self)
 			self.splitter.setChildrenCollapsible(False)
 
 			self.add_list_widget()
@@ -317,7 +321,7 @@
 			
 			self.__load_url(e2getcwd(),self.list_widgets[0])
 	
-			self.bottom_hbl = QtGui.QHBoxLayout()
+			self.bottom_hbl = QtWidgets.QHBoxLayout()
 			self.bottom_hbl.addWidget(self.filter_text,0)
 			self.bottom_hbl.addWidget(self.filter_combo,1)
 			self.__init_buttons()
@@ -331,7 +335,7 @@
 			
 			self.timer_interval = 500 # half a second
 			self.timer = QtCore.QTimer()
-			QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.time_out) # for auto refresh
+			self.timer.timeout.connect(self.time_out)
 			
 			self.timer.start(self.timer_interval)
 			
@@ -340,25 +344,25 @@
 			get_application().attach_child(self)
 			
 		def __init_buttons(self):
-			self.ok_button = QtGui.QPushButton("Ok")
+			self.ok_button = QtWidgets.QPushButton("Ok")
 			self.ok_button.adjustSize()
 			
-			self.cancel_button = QtGui.QPushButton("Cancel")
+			self.cancel_button = QtWidgets.QPushButton("Cancel")
 			self.cancel_button.adjustSize()
 		
-			QtCore.QObject.connect(self.ok_button, QtCore.SIGNAL("clicked(bool)"),self.ok_button_clicked)
-			QtCore.QObject.connect(self.cancel_button, QtCore.SIGNAL("clicked(bool)"),self.cancel_button_clicked)
+			self.ok_button.clicked[bool].connect(self.ok_button_clicked)
+			self.cancel_button.clicked[bool].connect(self.cancel_button_clicked)
 		
 		def ok_button_clicked(self,bool):
 			''' Slot for OK button '''
 			#print "EMSelectorBase.ok_button_clicked"
-			self.emit(QtCore.SIGNAL("ok"),self.selections)
-			self.emit(QtCore.SIGNAL("oky"))
+			self.ok.emit(self.selections)
+			self.oky.emit()
 		
 		def cancel_button_clicked(self,bool):
 			''' Slot for Cancel button '''
 			#print "EMSelectorBase.cancel_button_clicked"
-			self.emit(QtCore.SIGNAL("cancel"),self.selections)
+			self.cancel.emit(self.selections)
 		
 		
 		def __del__(self):
@@ -418,8 +422,8 @@
 			self.lock = False
 					
 		def __init_filter_combo(self):
-			self.filter_text = QtGui.QLabel("Filter:",self)
-			self.filter_combo = QtGui.QComboBox(None)
+			self.filter_text = QtWidgets.QLabel("Filter:",self)
+			self.filter_combo = QtWidgets.QComboBox(None)
 			self.filter_combo.addItem("EM types")
 			self.filter_combo.addItem("Databases") # this doesn't really do anything
 			self.filter_combo.addItem("*.spi,*.hdf,*.img, bdb:")
@@ -428,7 +432,7 @@
 			self.filter_combo.addItem("*")
 			self.filter_combo.setEditable(True)
 		
-			QtCore.QObject.connect(self.filter_combo, QtCore.SIGNAL("currentIndexChanged(int)"),self.filter_index_changed)
+			self.filter_combo.currentIndexChanged[int].connect(self.filter_index_changed)
 	#		QtCore.QObject.connect(self.filter_combo, QtCore.SIGNAL("currentIndexChanged(QString&)"),self.filter_index_changed)
 	
 		def filter_index_changed(self):
@@ -451,19 +455,19 @@
 			
 			#list_widget.contextMenuEvent = self.list_widget_context_menu_event
 			
-			if self.single_selection:list_widget.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
-			else: list_widget.setSelectionMode(QtGui.QAbstractItemView.ExtendedSelection)
+			if self.single_selection:list_widget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
+			else: list_widget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
 			list_widget.setMouseTracking(True)	
 			self.list_widgets.append(list_widget)
 			self.splitter.addWidget(list_widget)
 			
 			self.list_widget_data.append(None)
 			
-			QtCore.QObject.connect(list_widget, QtCore.SIGNAL("itemDoubleClicked(QListWidgetItem*)"),self.list_widget_dclicked)
+			list_widget.itemDoubleClicked[QListWidgetItem].connect(self.list_widget_dclicked)
 			#QtCore.QObject.connect(list_widget, QtCore.SIGNAL("itemPressed(QListWidgetItem*)"),self.list_widget_clicked)
 			#QtCore.QObject.connect(list_widget, QtCore.SIGNAL("currentRowChanged (int)"),self.list_widget_row_changed)
 			#QtCore.QObject.connect(list_widget, QtCore.SIGNAL("paintEvent (int)"),self.list_widget_row_changed)
-			QtCore.QObject.connect(list_widget, QtCore.SIGNAL("itemEntered(QListWidgetItem*)"),self.list_widget_item_entered)
+			list_widget.itemEntered[QListWidgetItem].connect(self.list_widget_item_entered)
 			#QtCore.QObject.connect(list_widget, QtCore.SIGNAL("currentItemChanged(QListWidgetItem*,QListWidgetItem*)"),self.list_widget_current_changed)
 			#QtCore.QObject.connect(list_widget, QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.list_widget_item_changed)
 			#\QtCore.QObject.connect(list_widget, QtCore.SIGNAL("itemActivated(QListWidgetItem*)"),self.list_widget_item_activated)
@@ -571,9 +575,9 @@
 			list_widget = item.listWidget()
 			if list_widget != self.current_list_widget:
 				if self.current_list_widget != None:
-					QtCore.QObject.disconnect(self.current_list_widget,QtCore.SIGNAL("itemSelectionChanged()"), self.current_item_changed)
+					self.current_list_widget.itemSelectionChanged.disconnect(self.current_item_changed)
 				self.current_list_widget = item.listWidget()
-				QtCore.QObject.connect(self.current_list_widget,QtCore.SIGNAL("itemSelectionChanged()"), self.current_item_changed)
+				self.current_list_widget.itemSelectionChanged.connect(self.current_item_changed)
 #				
 		def current_item_changed(self):
 			'''
@@ -701,7 +705,7 @@
 	y=x.rsplit(".",1)
 	return y[1]+"."+y[0]
 
-EMBrowserType = EMSelectorBaseTemplate(QtGui.QWidget)
+EMBrowserType = EMSelectorBaseTemplate(QtWidgets.QWidget)
 class EMBrowser(EMBrowserType):
 	def __init__(self, single_selection=False, usescenegraph=False):
 		EMBrowserType.__init__(self,single_selection)
@@ -711,17 +715,17 @@
 		
 		self.__init_action_delegates()
 		
-		bottom_hbl2 = QtGui.QHBoxLayout()
+		bottom_hbl2 = QtWidgets.QHBoxLayout()
 		self.__init_preview_options()
 		bottom_hbl2.addWidget(self.preview_options,0)
 		self.hbl.addLayout(bottom_hbl2)
 				
-		bottom_hbl3 = QtGui.QHBoxLayout()
+		bottom_hbl3 = QtWidgets.QHBoxLayout()
 		self.__init_plot_options()
 		bottom_hbl3.addWidget(self.replace,0)
 		bottom_hbl3.addWidget(self.include,0)
 		
-		self.groupbox = QtGui.QGroupBox("Plot/3D options")
+		self.groupbox = QtWidgets.QGroupBox("Plot/3D options")
 		self.groupbox.setLayout(bottom_hbl3)
 		self.groupbox.setEnabled(False)
 		
@@ -774,18 +778,18 @@
 		self.action_delegates[SAVE_SUBSET] = EMSaveStackSaveAction()
 		
 	def __init_plot_options(self):
-		self.replace = QtGui.QRadioButton("Replace")
-		self.include = QtGui.QRadioButton("Include")
+		self.replace = QtWidgets.QRadioButton("Replace")
+		self.include = QtWidgets.QRadioButton("Include")
 		self.include.setChecked(True)
 
 	def __init_preview_options(self):
-		self.preview_options = QtGui.QComboBox(self)
+		self.preview_options = QtWidgets.QComboBox(self)
 		#self.preview_options.addItem("No preview")
 		self.preview_options.addItem("Single preview")
 		self.preview_options.addItem("Multi preview")
 		#self.preview_options.setCurrentIndex(0)
 		
-		QtCore.QObject.connect(self.preview_options, QtCore.SIGNAL("currentIndexChanged(QString)"), self.preview_options_changed)
+		self.preview_options.currentIndexChanged['QString'].connect(self.preview_options_changed)
 	
 	def preview_options_changed(self,qstring):
 		if str(qstring) == "Single preview":
@@ -830,7 +834,7 @@
 		selected_items = l.selectedItems()
 		if len(selected_items) == 0: return
 		
-		menu = QtGui.QMenu()
+		menu = QtWidgets.QMenu()
 		self.menu_selected_items = selected_items
 		if len(selected_items) == 1:
 			first_item = selected_items[0]
@@ -882,7 +886,7 @@
 					menu.addAction(SAVE_SUBSET)
 				
 
-		QtCore.QObject.connect(menu,QtCore.SIGNAL("triggered(QAction*)"),self.menu_action_triggered)
+		menu.triggered[QAction].connect(self.menu_action_triggered)
 		self.action_list_widget = l # only set if the menu acutally triggers
 		menu.exec_(event.globalPos())
 		
@@ -905,17 +909,17 @@
 			get_application().setOverrideCursor(Qt.ArrowCursor)
 			return
 
-EMSelectorDialogType = EMSelectorBaseTemplate(QtGui.QDialog)
+EMSelectorDialogType = EMSelectorBaseTemplate(QtWidgets.QDialog)
 class EMSelectorDialog(EMSelectorDialogType):
 	def __init__(self,single_selection=False,save_as_mode=True): #TODO: figure out whether save_as_mode is needed (unused)
 		EMSelectorDialogType.__init__(self,single_selection)	
 
-		hbl2=QtGui.QHBoxLayout()
-		hbl2.setMargin(0)
+		hbl2=QtWidgets.QHBoxLayout()
+		hbl2.setContentsMargins(0, 0, 0, 0)
 		hbl2.setSpacing(2)
-		self.selection_label = QtGui.QLabel(SAVE_AS,self)
+		self.selection_label = QtWidgets.QLabel(SAVE_AS,self)
 		hbl2.addWidget(self.selection_label)
-		self.save_as_line_edit = QtGui.QLineEdit("",self)
+		self.save_as_line_edit = QtWidgets.QLineEdit("",self)
 		hbl2.addWidget(self.save_as_line_edit,0)
 		self.hbl.insertLayout(1,hbl2)
 		self.dialog_mode = True
@@ -932,7 +936,7 @@
 		Wraps QtGui.QDialog.exec_
 		@return a list of selected filenames
 		'''
-		QtGui.QDialog.exec_(self)
+		QtWidgets.QDialog.exec_(self)
 		return self.dialog_result
 	
 	def set_validator(self,validator):
@@ -997,7 +1001,7 @@
 		
 		directory = self.get_current_directory()
 		if directory == None:
-			msg = QtGui.QMessageBox()
+			msg = QtWidgets.QMessageBox()
 			msg.setText("Can not deduce the current directory. Please update your selection")
 			msg.exec_()
 			return
@@ -1044,18 +1048,18 @@
 		return ret
 	
 	
-class EMListWidget(QtGui.QListWidget):
+class EMListWidget(QtWidgets.QListWidget):
 	'''
 	Customized ListWidget as displayed in the browser
 	'''
 	def __init__(self,target,*args):
 		self.target = weakref.ref(target)
-		QtGui.QListWidget.__init__(self,*args)
+		QtWidgets.QListWidget.__init__(self,*args)
 		self.reset_vars()
 	
 	def clear(self):
 		self.reset_vars()
-		QtGui.QListWidget.clear(self)
+		QtWidgets.QListWidget.clear(self)
 		
 	def contextMenuEvent(self,event):
 		self.target().list_widget_context_menu_event(event)
@@ -1410,7 +1414,7 @@
 
 		return item
 
-class EMListItem(QtGui.QListWidgetItem):
+class EMListItem(QtWidgets.QListWidgetItem):
 	'''
 	Base class definition providing the pubic interface of list widget items as 
 	required by the EMSelector
@@ -1421,7 +1425,7 @@
 		@param delegate an instance of an EMBrowseDelegate - a strong reference is made to this
 		@param text the string that will be displayed in the QtGui.QListWidgetItem
 		'''
-		QtGui.QListWidgetItem.__init__(self,self.get_icon(),text)
+		QtWidgets.QListWidgetItem.__init__(self,self.get_icon(),text)
 		self.delegate = delegate
 		self.context_menu_options = {} # this is used for running context menu actions
 		self.icon = None
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emshapeitem3d.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emshapeitem3d.py	2017-10-21 17:15:01.000000000 -0500
@@ -42,7 +42,7 @@
 
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
 
 import numpy as np
 
@@ -254,12 +254,12 @@
 		"""
 		Return a cube control widget for the stacked_widget
 		"""
-		cubewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		cube_dim_label = QtGui.QLabel("Cube Dimension")
-		attribdict["cube_dim"] = QtGui.QLineEdit("50")
-		node_name_label = QtGui.QLabel("Cube Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMCube.name))
+		cubewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		cube_dim_label = QtWidgets.QLabel("Cube Dimension")
+		attribdict["cube_dim"] = QtWidgets.QLineEdit("50")
+		node_name_label = QtWidgets.QLabel("Cube Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMCube.name))
 		grid.addWidget(cube_dim_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["cube_dim"], 0, 2, 1, 2)
 		grid.addWidget(node_name_label , 1, 0, 1, 2)
@@ -360,12 +360,12 @@
 		"""
 		Return a sphere control widget for the stacked_widget
 		"""
-		spherewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		sphere_dim_label = QtGui.QLabel("Sphere Dimension")
-		attribdict["sphere_dim"] = QtGui.QLineEdit("50")
-		node_name_label = QtGui.QLabel("Sphere Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMSphere.name))
+		spherewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		sphere_dim_label = QtWidgets.QLabel("Sphere Dimension")
+		attribdict["sphere_dim"] = QtWidgets.QLineEdit("50")
+		node_name_label = QtWidgets.QLabel("Sphere Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMSphere.name))
 		grid.addWidget(sphere_dim_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["sphere_dim"], 0, 2, 1, 2)
 		grid.addWidget(node_name_label , 1, 0, 1, 2)
@@ -480,16 +480,16 @@
 		"""
 		Return a cylinder control widget for the stacked_widget
 		"""
-		cyliderwidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		cylider_radius_label = QtGui.QLabel("Cylider Radius")
-		attribdict["cylider_radius"] = QtGui.QLineEdit("50")
+		cyliderwidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		cylider_radius_label = QtWidgets.QLabel("Cylider Radius")
+		attribdict["cylider_radius"] = QtWidgets.QLineEdit("50")
 		grid.addWidget(cylider_radius_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["cylider_radius"], 0, 2, 1, 2)
-		cylider_height_label = QtGui.QLabel("Cylider Height")
-		attribdict["cylider_height"] = QtGui.QLineEdit("50")
-		node_name_label = QtGui.QLabel("Cylider Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMCylinder.name))
+		cylider_height_label = QtWidgets.QLabel("Cylider Height")
+		attribdict["cylider_height"] = QtWidgets.QLineEdit("50")
+		node_name_label = QtWidgets.QLabel("Cylider Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMCylinder.name))
 		grid.addWidget(cylider_height_label, 1, 0, 1, 2)
 		grid.addWidget(attribdict["cylider_height"], 1, 2, 1, 2)
 		grid.addWidget(node_name_label , 2, 0, 1, 2)
@@ -561,31 +561,31 @@
 		"""
 		Return a line control widget for the stacked_widget
 		"""
-		linewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		line_xyzi_label = QtGui.QLabel("Line start, X, Y, Z")
-		attribdict["linexi"] = QtGui.QLineEdit("0.0")
-		attribdict["lineyi"] = QtGui.QLineEdit("0.0")
-		attribdict["linezi"] = QtGui.QLineEdit("0.0")
+		linewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		line_xyzi_label = QtWidgets.QLabel("Line start, X, Y, Z")
+		attribdict["linexi"] = QtWidgets.QLineEdit("0.0")
+		attribdict["lineyi"] = QtWidgets.QLineEdit("0.0")
+		attribdict["linezi"] = QtWidgets.QLineEdit("0.0")
 		grid.addWidget(line_xyzi_label, 0, 0, 1, 3)
 		grid.addWidget(attribdict["linexi"], 1, 0, 1, 1)
 		grid.addWidget(attribdict["lineyi"], 1, 1, 1, 1)
 		grid.addWidget(attribdict["linezi"], 1, 2, 1, 1)
-		line_xyzf_label = QtGui.QLabel("Line end, X, Y, Z")
-		attribdict["linexf"] = QtGui.QLineEdit("0.0")
-		attribdict["lineyf"] = QtGui.QLineEdit("0.0")
-		attribdict["linezf"] = QtGui.QLineEdit("0.0")
+		line_xyzf_label = QtWidgets.QLabel("Line end, X, Y, Z")
+		attribdict["linexf"] = QtWidgets.QLineEdit("0.0")
+		attribdict["lineyf"] = QtWidgets.QLineEdit("0.0")
+		attribdict["linezf"] = QtWidgets.QLineEdit("0.0")
 		grid.addWidget(line_xyzf_label, 2, 0, 1, 3)
 		grid.addWidget(attribdict["linexf"], 3, 0, 1, 1)
 		grid.addWidget(attribdict["lineyf"], 3, 1, 1, 1)
 		grid.addWidget(attribdict["linezf"], 3, 2, 1, 1)
-		line_width = QtGui.QLabel("Line Width")
+		line_width = QtWidgets.QLabel("Line Width")
 		line_width.setAlignment(QtCore.Qt.AlignCenter)
-		attribdict["linewidth"] = QtGui.QLineEdit("10.0")
+		attribdict["linewidth"] = QtWidgets.QLineEdit("10.0")
 		grid.addWidget(line_width, 4, 0, 1, 2)
 		grid.addWidget(attribdict["linewidth"], 4, 2, 1, 1)
-		node_name_label = QtGui.QLabel("Line Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMLine.name))
+		node_name_label = QtWidgets.QLabel("Line Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMLine.name))
 		grid.addWidget(node_name_label , 5, 0, 1, 3)
 		grid.addWidget(attribdict["node_name"], 6, 0, 1, 3)
 		linewidget.setLayout(grid)
@@ -764,16 +764,16 @@
 		"""
 		Return a cone control widget for the stacked_widget
 		"""
-		conewidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		cone_radius_label = QtGui.QLabel("Cone Radius")
-		attribdict["cone_radius"] = QtGui.QLineEdit("50")
+		conewidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		cone_radius_label = QtWidgets.QLabel("Cone Radius")
+		attribdict["cone_radius"] = QtWidgets.QLineEdit("50")
 		grid.addWidget(cone_radius_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["cone_radius"], 0, 2, 1, 2)
-		cone_height_label = QtGui.QLabel("Cone Height")
-		attribdict["cone_height"] = QtGui.QLineEdit("50")
-		node_name_label = QtGui.QLabel("Cone Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EMCone.name))
+		cone_height_label = QtWidgets.QLabel("Cone Height")
+		attribdict["cone_height"] = QtWidgets.QLineEdit("50")
+		node_name_label = QtWidgets.QLabel("Cone Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EMCone.name))
 		grid.addWidget(cone_height_label, 1, 0, 1, 2)
 		grid.addWidget(attribdict["cone_height"], 1, 2, 1, 2)
 		grid.addWidget(node_name_label , 2, 0, 1, 2)
@@ -843,18 +843,18 @@
 		"""
 		Return a text control widget for the stacked_widget
 		"""
-		textwidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
-		text_label = QtGui.QLabel("Text")
-		attribdict["text_content"] = QtGui.QLineEdit()
+		textwidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
+		text_label = QtWidgets.QLabel("Text")
+		attribdict["text_content"] = QtWidgets.QLineEdit()
 		grid.addWidget(text_label, 0, 0, 1, 2)
 		grid.addWidget(attribdict["text_content"], 0, 2, 1, 2)
-		fontsize_label = QtGui.QLabel("Font Size")
-		attribdict["fontsize"] = QtGui.QLineEdit("32.0")
+		fontsize_label = QtWidgets.QLabel("Font Size")
+		attribdict["fontsize"] = QtWidgets.QLineEdit("32.0")
 		grid.addWidget(fontsize_label , 1, 0, 1, 2)
 		grid.addWidget(attribdict["fontsize"], 1, 2, 1, 2)
-		node_name_label = QtGui.QLabel("Text Name")
-		attribdict["node_name"] = QtGui.QLineEdit(str(EM3DText.name))
+		node_name_label = QtWidgets.QLabel("Text Name")
+		attribdict["node_name"] = QtWidgets.QLineEdit(str(EM3DText.name))
 		grid.addWidget(node_name_label , 2, 0, 1, 2)
 		grid.addWidget(attribdict["node_name"], 2, 2, 1, 2)
 		EMItem3D.get_transformlayout(grid, 4, attribdict)
@@ -971,8 +971,8 @@
 	
 	def addTabs(self):
 		""" Add a tab for each 'column' """
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		
 		EMInspectorControlShape.addControls(self, gridbox)
 		
@@ -982,26 +982,26 @@
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
 		super(EMInspectorControlShape, self).addControls(gridbox)
-		colorframe = QtGui.QFrame()
-		colorframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		colorvbox = QtGui.QVBoxLayout()
+		colorframe = QtWidgets.QFrame()
+		colorframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		colorvbox = QtWidgets.QVBoxLayout()
 		lfont = QtGui.QFont()
 		lfont.setBold(True)
-		colorlabel = QtGui.QLabel("Color",colorframe)
+		colorlabel = QtWidgets.QLabel("Color",colorframe)
 		colorlabel.setFont(lfont)
 		colorlabel.setAlignment(QtCore.Qt.AlignCenter)
 
 		# These boxes are a pain maybe I should use a Grid?
-		cdialoghbox = QtGui.QHBoxLayout()
-		cabox = QtGui.QHBoxLayout()
+		cdialoghbox = QtWidgets.QHBoxLayout()
+		cabox = QtWidgets.QHBoxLayout()
 		self.ambcolorbox = EMQTColorWidget(parent=colorframe)
 		cabox.addWidget(self.ambcolorbox)
 		cabox.setAlignment(QtCore.Qt.AlignCenter)
-		cdbox = QtGui.QHBoxLayout()
+		cdbox = QtWidgets.QHBoxLayout()
 		self.diffusecolorbox = EMQTColorWidget(parent=colorframe)
 		cdbox.addWidget(self.diffusecolorbox)
 		cdbox.setAlignment(QtCore.Qt.AlignCenter)
-		csbox = QtGui.QHBoxLayout()
+		csbox = QtWidgets.QHBoxLayout()
 		self.specularcolorbox = EMQTColorWidget(parent=colorframe)
 		csbox.addWidget(self.specularcolorbox)
 		csbox.setAlignment(QtCore.Qt.AlignCenter)
@@ -1009,12 +1009,12 @@
 		cdialoghbox.addLayout(cdbox)
 		cdialoghbox.addLayout(csbox)
 		
-		colorhbox = QtGui.QHBoxLayout()
-		self.ambient = QtGui.QLabel("Ambient", colorframe)
+		colorhbox = QtWidgets.QHBoxLayout()
+		self.ambient = QtWidgets.QLabel("Ambient", colorframe)
 		self.ambient.setAlignment(QtCore.Qt.AlignCenter)
-		self.diffuse = QtGui.QLabel("Diffuse", colorframe)
+		self.diffuse = QtWidgets.QLabel("Diffuse", colorframe)
 		self.diffuse.setAlignment(QtCore.Qt.AlignCenter)
-		self.specular = QtGui.QLabel("Specular", colorframe)
+		self.specular = QtWidgets.QLabel("Specular", colorframe)
 		self.specular.setAlignment(QtCore.Qt.AlignCenter)
 		colorhbox.addWidget(self.ambient)
 		colorhbox.addWidget(self.diffuse)
@@ -1034,10 +1034,10 @@
 		# Set to default, but do not run if being inherited
 		if type(self) == EMInspectorControlShape: self.updateItemControls()
 		
-		QtCore.QObject.connect(self.ambcolorbox,QtCore.SIGNAL("newcolor(QColor)"),self._on_ambient_color)
-		QtCore.QObject.connect(self.diffusecolorbox,QtCore.SIGNAL("newcolor(QColor)"),self._on_diffuse_color)
-		QtCore.QObject.connect(self.specularcolorbox,QtCore.SIGNAL("newcolor(QColor)"),self._on_specular_color)
-		QtCore.QObject.connect(self.shininess,QtCore.SIGNAL("valueChanged"),self._on_shininess)
+		self.ambcolorbox.newcolor[QColor].connect(self._on_ambient_color)
+		self.diffusecolorbox.newcolor[QColor].connect(self._on_diffuse_color)
+		self.specularcolorbox.newcolor[QColor].connect(self._on_specular_color)
+		self.shininess.valueChanged.connect(self._on_shininess)
 		
 	def _on_ambient_color(self, color):
 		rgb = color.getRgb()
@@ -1077,8 +1077,8 @@
 	def addTabs(self):
 		""" Add a tab for each 'column' """
 		super(EMInspectorControlScatterPlot, self).addTabs()
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		
 		EMInspectorControlScatterPlot.addControls(self, gridbox)
 		
@@ -1088,15 +1088,15 @@
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
 		
-		scatterframe = QtGui.QFrame()
-		scatterframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		scatterframe = QtWidgets.QFrame()
+		scatterframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		lfont = QtGui.QFont()
 		lfont.setBold(True)
-		scattergridbox = QtGui.QGridLayout()
+		scattergridbox = QtWidgets.QGridLayout()
 		scattergridbox.setAlignment(QtCore.Qt.AlignTop)
 		
 		# Add widgets to frame
-		pslabel = QtGui.QLabel("Point Size")
+		pslabel = QtWidgets.QLabel("Point Size")
 		pslabel.setFont(lfont)
 		pslabel.setAlignment(QtCore.Qt.AlignCenter)
 		scattergridbox.addWidget(pslabel, 0, 0, 1, 1)
@@ -1112,7 +1112,7 @@
 		if type(self) == EMInspectorControlScatterPlot: 
 			self.updateItemControls()
 		
-		QtCore.QObject.connect(self.pointsize,QtCore.SIGNAL("valueChanged(int)"),self.onPointSizeChanged)
+		self.pointsize.valueChanged[int].connect(self.onPointSizeChanged)
 	
 	def onPointSizeChanged(self):
 		self.item3d().setPointSize(self.pointsize.getValue())
@@ -1146,8 +1146,8 @@
 	def addTabs(self):
 		""" Add a tab for each 'column' """
 		super(EMInspectorControl3DText, self).addTabs()
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		
 		EMInspectorControl3DText.addControls(self, gridbox)
 		
@@ -1157,23 +1157,23 @@
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
 	
-		textframe = QtGui.QFrame()
-		textframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		textframe = QtWidgets.QFrame()
+		textframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		lfont = QtGui.QFont()
 		lfont.setBold(True)
-		textgridbox = QtGui.QGridLayout()
+		textgridbox = QtWidgets.QGridLayout()
 		
 		# Add widgets to textframe
-		textlabel = QtGui.QLabel("3D Font Mode")
+		textlabel = QtWidgets.QLabel("3D Font Mode")
 		textlabel.setFont(lfont)
 		textlabel.setAlignment(QtCore.Qt.AlignCenter)
 		textgridbox.addWidget(textlabel, 0, 0, 1, 1)
 		
-		self.textModeBox = QtGui.QComboBox()
+		self.textModeBox = QtWidgets.QComboBox()
 		self.textModeBox.addItems(["EXTRUDE", "TEXTURE", "POLYGON", "OUTLINE"])
 		textgridbox.addWidget(self.textModeBox, 0, 1, 1, 1)
 			
-		textlabel2 = QtGui.QLabel("3D Font Depth")
+		textlabel2 = QtWidgets.QLabel("3D Font Depth")
 		textlabel2.setFont(lfont)
 		textlabel2.setAlignment(QtCore.Qt.AlignCenter)
 		textgridbox.addWidget(textlabel2, 1, 0, 1, 1)
@@ -1182,7 +1182,7 @@
 		self.fontDepth.setMinimumWidth(120)
 		textgridbox.addWidget(self.fontDepth, 1, 1, 1, 1)
 		
-		textlabel2 = QtGui.QLabel("3D Font Size")
+		textlabel2 = QtWidgets.QLabel("3D Font Size")
 		textlabel2.setFont(lfont)
 		textlabel2.setAlignment(QtCore.Qt.AlignCenter)
 		textgridbox.addWidget(textlabel2, 2, 0, 1, 1)
@@ -1195,15 +1195,15 @@
 		gridbox.addWidget(textframe, 2, 0)
 		
 		# Add text
-		text3dframe = QtGui.QFrame()
-		text3dframe.setFrameShape(QtGui.QFrame.StyledPanel)
-		text3dgridbox = QtGui.QGridLayout()
+		text3dframe = QtWidgets.QFrame()
+		text3dframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		text3dgridbox = QtWidgets.QGridLayout()
 		
-		textlabel3 = QtGui.QLabel("3D Text")
+		textlabel3 = QtWidgets.QLabel("3D Text")
 		textlabel3.setFont(lfont)
 		text3dgridbox.addWidget(textlabel3, 3, 0, 2, 1)
 		
-		self.text3d = QtGui.QLineEdit(self.item3d().getRenderString())
+		self.text3d = QtWidgets.QLineEdit(self.item3d().getRenderString())
 		text3dgridbox.addWidget(self.text3d, 3, 1, 2, 1)
 		
 		text3dframe.setLayout(text3dgridbox)
@@ -1215,9 +1215,9 @@
 			self.updateMetaData()
 			
 		self.textModeBox.currentIndexChanged.connect(self.on3DTextModeChanged)
-		QtCore.QObject.connect(self.fontDepth,QtCore.SIGNAL("valueChanged(int)"),self.on3DTextDepthChanged)
-		QtCore.QObject.connect(self.fontSize,QtCore.SIGNAL("valueChanged(int)"),self.on3DTextFontChanged)
-		QtCore.QObject.connect(self.text3d,QtCore.SIGNAL("textChanged(const QString&)"),self.on3DTextChanged)
+		self.fontDepth.valueChanged[int].connect(self.on3DTextDepthChanged)
+		self.fontSize.valueChanged[int].connect(self.on3DTextFontChanged)
+		self.text3d.textChanged['QString'].connect(self.on3DTextChanged)
 		
 	def on3DTextModeChanged(self):
 		textMode = str(self.textModeBox.currentText())
@@ -1268,8 +1268,8 @@
 	def addTabs(self):
 		""" Add a tab for each 'column' """
 		super(EMInspectorControlLine, self).addTabs()
-		tabwidget = QtGui.QWidget()
-		gridbox = QtGui.QGridLayout()
+		tabwidget = QtWidgets.QWidget()
+		gridbox = QtWidgets.QGridLayout()
 		
 		EMInspectorControlLine.addControls(self, gridbox)
 		
@@ -1279,28 +1279,28 @@
 	def addControls(self, gridbox):
 		""" Construct all the widgets in this Item Inspector """
 		#frame to control properties of left/right arrows
-		lineframe = QtGui.QFrame()
-		lineframe.setFrameShape(QtGui.QFrame.StyledPanel)
+		lineframe = QtWidgets.QFrame()
+		lineframe.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		lfont = QtGui.QFont()
 		lfont.setBold(True)
-		linegridbox = QtGui.QGridLayout()
+		linegridbox = QtWidgets.QGridLayout()
 		
-		leftlabel = QtGui.QLabel("Left arrow")
+		leftlabel = QtWidgets.QLabel("Left arrow")
 		leftlabel.setFont(lfont)
 		leftlabel.setAlignment(QtCore.Qt.AlignCenter)
 		linegridbox.addWidget(leftlabel, 0, 1, 1, 1)
 		
-		sidelabel1 = QtGui.QLabel("Size")
+		sidelabel1 = QtWidgets.QLabel("Size")
 		sidelabel1.setFont(lfont)
 		sidelabel1.setAlignment(QtCore.Qt.AlignVCenter)
 		linegridbox.addWidget(sidelabel1, 2, 0, 1, 1)
 		
-		sidelabel2 = QtGui.QLabel("Length")
+		sidelabel2 = QtWidgets.QLabel("Length")
 		sidelabel2.setFont(lfont)
 		sidelabel2.setAlignment(QtCore.Qt.AlignVCenter)
 		linegridbox.addWidget(sidelabel2, 3, 0, 1, 1)
 		
-		self.leftShowArrow = QtGui.QCheckBox("Show")
+		self.leftShowArrow = QtWidgets.QCheckBox("Show")
 		self.leftShowArrow.setChecked(self.item3d().showLeftArrow)
 		linegridbox.addWidget(self.leftShowArrow, 1, 1, 1, 1)
 		
@@ -1312,12 +1312,12 @@
 		self.leftArrowLength.setMinimumWidth(120)
 		linegridbox.addWidget(self.leftArrowLength, 3, 1, 1, 1)
 		
-		rightlabel = QtGui.QLabel("Right arrow")
+		rightlabel = QtWidgets.QLabel("Right arrow")
 		rightlabel.setFont(lfont)
 		rightlabel.setAlignment(QtCore.Qt.AlignCenter)
 		linegridbox.addWidget(rightlabel, 0, 2, 1, 1)
 		
-		self.rightShowArrow = QtGui.QCheckBox("Show")
+		self.rightShowArrow = QtWidgets.QCheckBox("Show")
 		self.rightShowArrow.setChecked(self.item3d().showRightArrow)
 		linegridbox.addWidget(self.rightShowArrow, 1, 2, 1, 1)
 		
@@ -1329,7 +1329,7 @@
 		self.rightArrowLength.setMinimumWidth(120)
 		linegridbox.addWidget(self.rightArrowLength, 3, 2, 1, 1)
 		
-		linelengthlabel = QtGui.QLabel("Line Length")
+		linelengthlabel = QtWidgets.QLabel("Line Length")
 		linelengthlabel.setFont(lfont)
 		linelengthlabel.setAlignment(QtCore.Qt.AlignCenter)
 		linegridbox.addWidget(linelengthlabel, 4, 0, 2, 2)
@@ -1337,7 +1337,7 @@
 		self.linelength = EMSpinWidget(int(self.item3d().length), 1.0, rounding=0)
 		linegridbox.addWidget(self.linelength, 4, 2, 2, 2)
 		
-		linewidthlabel = QtGui.QLabel("Line Width")
+		linewidthlabel = QtWidgets.QLabel("Line Width")
 		linewidthlabel.setFont(lfont)
 		linewidthlabel.setAlignment(QtCore.Qt.AlignCenter)
 		linegridbox.addWidget(linewidthlabel, 5, 0, 1, 2)
@@ -1349,9 +1349,9 @@
 		gridbox.addWidget(lineframe, 2, 0)
 		
 		#frame to control slice/stack of the line
-		lineframe2 = QtGui.QFrame()
-		lineframe2.setFrameShape(QtGui.QFrame.StyledPanel)
-		linehbox = QtGui.QVBoxLayout()
+		lineframe2 = QtWidgets.QFrame()
+		lineframe2.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		linehbox = QtWidgets.QVBoxLayout()
 				
 		self.slice = ValSlider(lineframe2, (1, 100), "Slice", rounding=0)
 		self.slice.setValue(self.item3d().slices)
@@ -1370,17 +1370,17 @@
 			self.updateItemControls()
 			self.updateMetaData()
 		
-		QtCore.QObject.connect(self.leftShowArrow, QtCore.SIGNAL("stateChanged(int)"), self.redraw)
-		QtCore.QObject.connect(self.rightShowArrow, QtCore.SIGNAL("stateChanged(int)"), self.redraw)
-		QtCore.QObject.connect(self.leftArrowSize,QtCore.SIGNAL("valueChanged(int)"),self.redraw)
-		QtCore.QObject.connect(self.leftArrowLength,QtCore.SIGNAL("valueChanged(int)"),self.redraw)
-		QtCore.QObject.connect(self.rightArrowSize,QtCore.SIGNAL("valueChanged(int)"),self.redraw)
-		QtCore.QObject.connect(self.rightArrowLength,QtCore.SIGNAL("valueChanged(int)"),self.redraw)
-		QtCore.QObject.connect(self.linelength,QtCore.SIGNAL("valueChanged(int)"),self.redraw)
-		QtCore.QObject.connect(self.linewidth,QtCore.SIGNAL("valueChanged(int)"),self.redraw)
+		self.leftShowArrow.stateChanged[int].connect(self.redraw)
+		self.rightShowArrow.stateChanged[int].connect(self.redraw)
+		self.leftArrowSize.valueChanged[int].connect(self.redraw)
+		self.leftArrowLength.valueChanged[int].connect(self.redraw)
+		self.rightArrowSize.valueChanged[int].connect(self.redraw)
+		self.rightArrowLength.valueChanged[int].connect(self.redraw)
+		self.linelength.valueChanged[int].connect(self.redraw)
+		self.linewidth.valueChanged[int].connect(self.redraw)
 		
-		QtCore.QObject.connect(self.slice,QtCore.SIGNAL("valueChanged"),self.redraw)
-		QtCore.QObject.connect(self.stack,QtCore.SIGNAL("valueChanged"),self.redraw)
+		self.slice.valueChanged.connect(self.redraw)
+		self.stack.valueChanged.connect(self.redraw)
 	
 	def redraw(self):
 		self.item3d().setShowLeftArrow(self.leftShowArrow.isChecked())
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emsprworkflow.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emsprworkflow.py	2017-10-21 17:15:02.000000000 -0500
@@ -33,8 +33,8 @@
 
 from emform import EMFormWidget,EMParamTable,EMTableFormWidget
 from emdatastorage import ParamDef
-from PyQt4 import QtGui,QtCore
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from EMAN2db import db_check_dict, db_open_dict,db_remove_dict,db_list_dicts,db_close_dict, e2getcwd
 from EMAN2 import *
 import os
@@ -100,6 +100,10 @@
 		pass
 
 class WorkFlowTask:
+	display_file = QtCore.pyqtSignal()
+	task_idle = QtCore.pyqtSignal()
+	process_started = QtCore.pyqtSignal()
+
 	def __init__(self):
 		self.window_title = "Set me please" # inheriting classes should set this
 		self.preferred_size = (480,640) # inheriting classes can change this if they choose
@@ -119,15 +123,15 @@
 		self.form.resize(*self.preferred_size)
 		self.form.setWindowTitle(self.window_title)
 		get_application().show_specific(self.form)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("display_file"),self.on_display_file)
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
+		self.form.display_file.connect(self.on_display_file)
 	
 	def get_params(self): raise NotImplementedError
 	
 	def on_display_file(self,filename):
-		self.emit(QtCore.SIGNAL("display_file"),filename)	
+		self.display_file.emit(filename)
 		
 	def on_form_ok(self,params):
 		for k,v in params.items():
@@ -137,19 +141,19 @@
 		self.form.close()
 		self.form = None
 	
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		
 	def on_form_cancel(self):
 		self.disconnect_form()
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 	def disconnect_form(self):
-		QtCore.QObject.disconnect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.disconnect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.disconnect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
-		QtCore.QObject.disconnect(self.form,QtCore.SIGNAL("display_file"),self.on_display_file)
+		self.form.emform_ok.disconnect(self.on_form_ok)
+		self.form.emform_cancel.disconnect(self.on_form_cancel)
+		self.form.emform_close.disconnect(self.on_form_close)
+		self.form.display_file.disconnect(self.on_display_file)
 	
 	
 	def emit(self,*args,**kargs):
@@ -157,12 +161,12 @@
 		
 	def on_form_close(self):
 		self.disconnect_form()
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 
 	def close(self):
 		if self.form != None: 
 			self.form.close()
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
         
 	def closeEvent(self,event):
 		self.close()
@@ -283,7 +287,7 @@
 #			process = subprocess.Popen(args_adjusted,stdout=file,stderr=subprocess.STDOUT)
 			process = subprocess.Popen(cmdstr, shell=True)
 			print("started process",process.pid)
-			self.emit(QtCore.SIGNAL("process_started"),process.pid)
+			self.process_started.emit(process.pid)
 			
 		#db_close_dict("bdb:project")
 	
@@ -329,7 +333,7 @@
 #		process = subprocess.Popen(args_adjusted,stdout=file,stderr=subprocess.STDOUT)
 		process = subprocess.Popen(cmdstr, shell=True)
 		print("started process",process.pid)
-		self.emit(QtCore.SIGNAL("process_started"),process.pid)
+		self.process_started.emit(process.pid)
 		
 		#db_close_dict("bdb:project")
 		
@@ -337,7 +341,7 @@
 		'''
 		Runs a QMessageBox asking for the user to select files for processing
 		'''
-		msg = QtGui.QMessageBox()
+		msg = QtWidgets.QMessageBox()
 		msg.setWindowTitle("Almost")
 		msg.setText("Please select files for processing")
 		msg.exec_()
@@ -447,9 +451,9 @@
 		self.form.setWindowTitle(self.window_title)
 		self.form.setWindowIcon(QtGui.QIcon(os.getenv("EMAN2DIR")+"/images/feather.png"))
 		get_application().show_specific(self.form)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
 		
 class ChangeDirectoryTask(WorkFlowTask):
 	def __init__(self):
@@ -458,7 +462,7 @@
 	
 	def run_form(self):	
 		
-		fsp=QtGui.QFileDialog.getExistingDirectory(None, "Choose a directory")
+		fsp=QtWidgets.QFileDialog.getExistingDirectory(None, "Choose a directory")
 		fsp = str(fsp)
 		if os.path.exists(fsp):
 			os.chdir(fsp)
@@ -927,6 +931,8 @@
 				data_dict.add_names(list_of_names)
 		
 		class AddFilesToProjectViaContext:
+			task_idle = QtCore.pyqtSignal()
+
 			def __init__(self,project_list):
 				self.project_list = project_list
 				self.validator = AddFilesToProjectValidator(self.project_list)
@@ -980,7 +986,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 	def recover_original_raw_data_list(self):
 		'''
@@ -1026,6 +1032,7 @@
 		return 1
 
 class EMFilterRawDataTask(WorkFlowTask):	
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = """This tool allows you to import micrographs/ccd frames into the project. This copies the files into the internal \
 project database, and gives an opportunity to apply a number of common filters to the data before importing:
 - Invert - EMAN2 expects particle data to be positive, ie - particles should appear white. If particles are dark, select this.
@@ -1115,7 +1122,7 @@
 		self.form.close()
 		self.form = None
 	
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		
 		self.write_db_entries(params)
 		
@@ -1523,6 +1530,8 @@
 
 class EMParticleReportTask(ParticleWorkFlowTask):
 	'''This tool is for displaying the particles that are currently associated with this project.'''
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
 		self.window_title = "Project Particles"
@@ -1551,7 +1560,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 	def recover_original_raw_data_list(self):
 		'''
@@ -1588,6 +1597,8 @@
 	
 class EMParticleImportTask(ParticleWorkFlowTask):
 	'''This task is for importing particle into the project. The data will be copied into the particles directory. This is essential if you wish to use the data to generating sets'''
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
 		self.window_title = "Import Particles"
@@ -1664,14 +1675,14 @@
 			print(params["name_map"].values())
 			data_dict.add_names(params["name_map"].values(),use_file_tag=True)
 		
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 		
 	def import_data(self,params):
 
 		get_application().setOverrideCursor(Qt.BusyCursor)
-		progress = QtGui.QProgressDialog("Importing files into database...", "Abort import", 0, len(params["name_map"]),None)
+		progress = QtWidgets.QProgressDialog("Importing files into database...", "Abort import", 0, len(params["name_map"]),None)
 		progress.show()
 		i = 0
 		progress.setValue(i)
@@ -1811,6 +1822,8 @@
 
 class EMParticleCoordImportTask(WorkFlowTask):
 	"""Use this task for importing coordinate files directly into the project database. Generally you do this after you have associated raw data with the project. Coordinate files are matched with input (raw data) files according to name. For example, if your micrograph is called "321a.mrc" then your coordinate file should be called "321a.box" or "321a.data" (both will work). After you import the coordinates you can run the "Generate Output - e2boxer" task to write particle image data."""
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		WorkFlowTask.__init__(self)
 		self.window_title = "Import Particle Coordinates"
@@ -1854,7 +1867,7 @@
 		self.disconnect_form()
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		
 from os.path import commonprefix
 def best_match(name,lst):
@@ -1894,6 +1907,8 @@
 #	get_particle_dims_project = staticmethod(get_particle_dims_project)
 	
 	class ParticleColumns:
+		task_idle = QtCore.pyqtSignal()
+
 		def __init__(self,project_dict=spr_ptcls_dict):
 			self.header_cache = {}
 			self.translation_cache = {}
@@ -2073,10 +2088,12 @@
 			self.report_task.recover_original_raw_data_list()
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 
 
 class E2BoxerGenericTask(ParticleWorkFlowTask):
+	replace_task = QtCore.pyqtSignal()
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = "Fill me in"
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
@@ -2094,21 +2111,21 @@
 
 	def on_form_ok(self,params):
 		if params["running_mode"] == "Interactive boxing":
-			self.emit(QtCore.SIGNAL("replace_task"),E2BoxerGuiTaskGeneral(),"e2boxer interface launcher")
+			self.replace_task.emit(E2BoxerGuiTaskGeneral(), "e2boxer interface launcher")
 			self.form.close()
 			self.form = None
 		elif params["running_mode"] == "Autoboxing":
-			self.emit(QtCore.SIGNAL("replace_task"),E2BoxerAutoTaskGeneral(),"e2boxer automated boxing")
+			self.replace_task.emit(E2BoxerAutoTaskGeneral(), "e2boxer automated boxing")
 			self.form.close()
 			self.form = None
 		elif params["running_mode"] == "Write output":
-			self.emit(QtCore.SIGNAL("replace_task"),E2BoxerOutputTaskGeneral(),"e2boxer write output")
+			self.replace_task.emit(E2BoxerOutputTaskGeneral(), "e2boxer write output")
 			self.form.close()
 			self.form = None	
 		else:
 			self.form.close()
 			self.form = None
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			return
 		
 		self.write_db_entries(params)
@@ -2121,6 +2138,8 @@
 	DO NOT USE THIS !
 	'''
 	
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		E2BoxerTask.__init__(self)
 		self.window_title = "e2boxer Autoboxing"
@@ -2239,7 +2258,7 @@
 			bool_args = []
 			temp_file_name = "e2boxer_autobox_stdout.txt"
 			self.spawn_task("e2boxer.py",options,string_args,bool_args,additional_args,temp_file_name)
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			self.form.close()
 			self.form = None
 
@@ -2270,32 +2289,32 @@
 		return params
 
 
-class OldBoxerRecoveryDialog(QtGui.QDialog):
+class OldBoxerRecoveryDialog(QtWidgets.QDialog):
 	def __init__(self):
 		'''
 		@param sym some kind of symmetry, such as "d7", "icos" etc
 		'''
-		QtGui.QDialog.__init__(self)
+		QtWidgets.QDialog.__init__(self)
 		self.setWindowTitle("Old Boxer Recovery")
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "green_boxes.png"))
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		
-		text_edit = QtGui.QTextEdit("")
+		text_edit = QtWidgets.QTextEdit("")
 		text_edit.setReadOnly(True)
 		text_edit.setWordWrapMode(QtGui.QTextOption.WordWrap)
 		text_edit.setText("The workflow has detected you have data stored in the local database that was generated with an old version of e2boxer. You can recover it (recommended), in which case the old data is converted so it can be interpreted within the current framework. Alternatively you can just delete it, which means the box coordinates will be lost forever.")
 		self.vbl.addWidget(text_edit)
-		self.button_hbl = QtGui.QHBoxLayout()
-		self.recover = QtGui.QPushButton("Recover")
+		self.button_hbl = QtWidgets.QHBoxLayout()
+		self.recover = QtWidgets.QPushButton("Recover")
 		self.recover.setToolTip("The old database will be converted to a format recognized by the new boxer. The old database will then be deleted.")
 		self.recover.setDefault(True)
-		self.remove = QtGui.QPushButton("Remove")
+		self.remove = QtWidgets.QPushButton("Remove")
 		self.remove.setToolTip("The old database will be removed and all previous boxing results will be deleted from disk.")
-		self.cancel = QtGui.QPushButton("Cancel")
+		self.cancel = QtWidgets.QPushButton("Cancel")
 		self.cancel.setToolTip("The operation will be cancelled.")
 		self.button_hbl.addWidget(self.cancel )
 		self.button_hbl.addWidget(self.remove )
@@ -2303,9 +2322,9 @@
 		self.vbl.addLayout(self.button_hbl)
 
 	
-		QtCore.QObject.connect(self.recover, QtCore.SIGNAL("clicked(bool)"), self.on_recover)
-		QtCore.QObject.connect(self.remove, QtCore.SIGNAL("clicked(bool)"), self.on_remove)
-		QtCore.QObject.connect(self.cancel, QtCore.SIGNAL("clicked(bool)"), self.on_cancel)
+		self.recover.clicked[bool].connect(self.on_recover)
+		self.remove.clicked[bool].connect(self.on_remove)
+		self.cancel.clicked[bool].connect(self.on_cancel)
 		self.ret_code = 0
 	def on_cancel(self,int):
 		self.ret_code = 0
@@ -2324,7 +2343,7 @@
 		Customized exec_ function
 		@return None if the user hit cancel or a dictionary containing important parameters if the user hit ok
 		'''
-		QtGui.QDialog.exec_(self)
+		QtWidgets.QDialog.exec_(self)
 		return self.ret_code
 
 def recover_old_boxer_database():
@@ -2382,6 +2401,9 @@
 			
 
 class E2BoxerGuiTask(E2BoxerTask):	
+	gui_running = QtCore.pyqtSignal()
+	task_idle = QtCore.pyqtSignal()
+	gui_exit = QtCore.pyqtSignal()
 	documentation_string = """Select the frames you want to select boxes from, enter your boxsize, and hit OK.
 NOTE - SELECTING A GOOD BOX SIZE IS CRITICAL. See the wiki for a list of good sizes. Make sure the box is ~2x the size of your particle. \
 Changing box size later can be very painful, and CTF correction relies on a sufficiently large box (larger than used with EMAN1.
@@ -2438,9 +2460,9 @@
 			
 #			from e2boxer import EMBoxerModule
 #			self.boxer_module = EMBoxerModule(get_application(),options)
-			self.emit(QtCore.SIGNAL("gui_running"),"Boxer",self.boxer_module) # The controlled program should intercept this signal and keep the E2BoxerTask instance in memory, else signals emitted internally in boxer won't work
+			self.gui_running.emit("Boxer", self.boxer_module)
 			
-			QtCore.QObject.connect(self.boxer_module, QtCore.SIGNAL("module_closed"), self.on_boxer_closed)
+			self.boxer_module.module_closed.connect(self.on_boxer_closed)
 			self.form.close()
 #			self.boxer_module.show_guis()
 			self.boxer_module.show_interfaces()
@@ -2449,13 +2471,13 @@
 	def on_form_close(self):
 		# this is to avoid a task_idle signal, which would be incorrect if e2boxer is running
 		if self.boxer_module == None:
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 		else: pass
 	
 	def on_boxer_closed(self):
 		if self.boxer_module != None:
 			self.boxer_module = None
-			self.emit(QtCore.SIGNAL("gui_exit"))
+			self.gui_exit.emit()
 	
 
 class E2BoxerGuiTaskGeneral(E2BoxerGuiTask):	
@@ -2478,6 +2500,8 @@
 	"""This task will write the selected particles to output files. The default format is 'BDB', which should be used if you plan to continue processing using the workflow interface. HDF is the only other format which will preserve full metadata. img (IMAGIC) and spi (SPIDER) will lose metadata if used.
 	
 	Select the images you wish to generate output for, enter the box size and normalization etc, and then hit OK."""
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		E2BoxerTask.__init__(self)
 		self.window_title = "Generate e2boxer Output"
@@ -2551,7 +2575,7 @@
 			additional_args = ["--dbls=%s" %spr_ptcls_dict]
 			temp_file_name = "e2boxer_autobox_stdout.txt"
 			self.spawn_single_task("e2boxer.py",options,string_args,bool_args,additional_args,temp_file_name)
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			self.form.close()
 			self.form = None
 
@@ -2627,6 +2651,7 @@
 	'''
 	This task is called from e2boxer itself. Not from the workflow
 	'''
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = "Use this form to write output file from within the e2boxer interface.\nYou can choose to write image files in a number of formats. The bdb file format is most useful if you are using EMAN2. If you plan to use your data with other programs, including EMAN1, you must choose either the hdf or img output formats.\nYou can also choose to write EMAN1 style .box files"
 	def __init__(self,application,filenames,target,exclusions=[]):
 		E2BoxerOutputTask.__init__(self)
@@ -2671,7 +2696,7 @@
 					normproc=True
 				self.target().write_box_image_files(params["filenames"],params["output_boxsize"],params["force"],params["format"],normproc,params["norm"],params["invert"])
 				
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			self.form.close()
 			self.form = None
 
@@ -2823,6 +2848,8 @@
 		pass		
 
 class E2CTFGenericTask(ParticleWorkFlowTask):
+	replace_task = QtCore.pyqtSignal()
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = "Fill me in"
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
@@ -2841,26 +2868,27 @@
 
 	def on_form_ok(self,params):
 		if params["running_mode"] == "auto params":
-			self.emit(QtCore.SIGNAL("replace_task"),E2CTFAutoFitTaskGeneral(),"ctf auto fit")
+			self.replace_task.emit(E2CTFAutoFitTaskGeneral(), "ctf auto fit")
 			self.form.close()
 			self.form = None
 		elif params["running_mode"] == "interactively fine tune":
-			self.emit(QtCore.SIGNAL("replace_task"),E2CTFGuiTaskGeneral(),"fine tune ctf")
+			self.replace_task.emit(E2CTFGuiTaskGeneral(), "fine tune ctf")
 			self.form.close()
 			self.form = None
 		elif params["running_mode"] == "write output":
-			self.emit(QtCore.SIGNAL("replace_task"),E2CTFOutputTaskGeneral(),"ctf output")
+			self.replace_task.emit(E2CTFOutputTaskGeneral(), "ctf output")
 			self.form.close()
 			self.form = None	
 		else:
 			self.form.close()
 			self.form = None
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			return
 		
 		self.write_db_entries(params)
 			
 class E2CTFAutoFitTask(E2CTFWorkFlowTask):	
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = """Select the particles you wish to generate CTF parameters for, enter the appropriate parameters such as microscope voltage etc, and hit OK.\nThis will cause the \
 workflow to spawn processes based on the available CPUs. Once finished the automatically determined CTF parameters will be stored in the EMAN2 database. It is often worthwhile to follow \
 the following pattern:
@@ -3004,14 +3032,14 @@
 			self.spawn_task("e2ctf.py",options,string_args,bool_args,additional_args,temp_file_name)
 			
 			self.form.close()
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			
 		else:
 			return
 		
 	def on_form_close(self):
 		# this is to avoid a task_idle signal, which would be incorrect if e2boxer is running
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 			
 class E2CTFAutoFitTaskGeneral(E2CTFAutoFitTask):
 	'''
@@ -3074,6 +3102,8 @@
 
 class E2CTFOutputTask(E2CTFWorkFlowTask):	
 	"""Select the particle data for which you wish to generate phase flipped and/or Wiener filtered output and hit OK.\nThis will cause the workflow to spawn processes based on the available CPUs that write the output into a predefined location in the EMAN2 database.\nNote that the Wiener filtered output images are also phase flipped."""
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		E2CTFWorkFlowTask.__init__(self)
 		self.window_title = "Generate e2ctf Output"
@@ -3151,12 +3181,14 @@
 			
 
 			self.form.close()
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 		else:
 			return
 		
 class E2CTFSFOutputTask(E2CTFWorkFlowTask):	
 	"""This task is for generating a structure factor file using e2ctf.py. Select the files you wish to use as the basis of the the structure factor approximation and hit OK. This will spawn e2ctf as a process, the output of which will be a file called 'strucfac.txt' """
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		E2CTFWorkFlowTask.__init__(self)
 		self.window_title = "Generate e2ctf Structure Factor"
@@ -3191,13 +3223,14 @@
 		self.spawn_single_task("e2ctf.py",options,string_args,bool_args,additional_args,temp_file_name)
 		
 		self.form.close()
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.write_db_entries(params)
 
 
 class E2CTFOutputTaskGeneral(E2CTFOutputTask):
 	''' Use this form for generating CTF-related output. 
 	'''
+	task_idle = QtCore.pyqtSignal()
 	warning_string = "\n\n\nNOTE: There are no CTF parameters currently stored for any images in the local database. You can change this by running automated fitting with e2ctf."
 	
 	def __init__(self):
@@ -3287,18 +3320,21 @@
 			
 
 			self.form.close()
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 		else:
 			self.form.close()
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			
 	def on_form_cancel(self):
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 class E2CTFGuiTask(E2CTFWorkFlowTask):	
+	gui_running = QtCore.pyqtSignal()
+	gui_exit = QtCore.pyqtSignal()
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = "Autofitting tends to either work very well or get the defocus completely wrong. It is wise to at least quickly go through the data and insure that \
 defocus values are reasonable. If not, roughly adjust the defocus and press the refit button. If you manually vary parameters, press save for each set, or your changes will \
 be lost. B-factors are not as important as in EMAN1, and use the X-ray convention (4x the EMAN1 values). Try to get them in a reasonable range, at least. This is particularly \
@@ -3356,9 +3392,9 @@
 		
 			init_sfcurve("auto")
 			self.gui=GUIctf(get_application(),img_sets)
-			self.emit(QtCore.SIGNAL("gui_running"), "CTF", self.gui) # so the desktop can prepare some space!
+			self.gui_running.emit("CTF", self.gui)
 			self.form.close()
-			QtCore.QObject.connect(self.gui,QtCore.SIGNAL("module_closed"), self.on_ctf_closed)
+			self.gui.module_closed.connect(self.on_ctf_closed)
 			self.gui.show_guis()
 		else:
 			return
@@ -3366,12 +3402,12 @@
 	def on_ctf_closed(self):
 		if self.gui != None:
 			self.gui = None
-			self.emit(QtCore.SIGNAL("gui_exit")) #
+			self.gui_exit.emit()
 		
 	def on_form_close(self):
 		# this is to avoid a task_idle signal, which would be incorrect if e2boxer is running
 		if self.gui == None:
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 		else: pass
 		
 class E2CTFGuiTaskGeneral(E2CTFGuiTask):
@@ -3478,6 +3514,7 @@
  		 	
 class E2ParticleExamineChooseDataTask(ParticleWorkFlowTask):
 	"""Choose the particle data you wish to examine. This will pop a second form listing the particles stacks along with other relevant information"""
+	replace_task = QtCore.pyqtSignal()
 	documentation_string = "On the next screen you will have the opportunity to eliminate 'bad' particles. This page selects which type of particles you \
 want to look at for doing this. Normally Wiener filtered particles are used for this purpose. The selection here has no impact on the output generated from \
 this stage. It is used for display purposes only !" 
@@ -3515,7 +3552,7 @@
 #				else:
 #					name_map[name] = base_name(name)
 					
-			self.emit(QtCore.SIGNAL("replace_task"),E2ParticleExamineTask(particles,self.name_map),"Particle Set Examination")
+			self.replace_task.emit(E2ParticleExamineTask(particles,self.name_map), "Particle Set Examination")
 		
 		self.form.close()
 		self.form = None
@@ -3548,6 +3585,8 @@
 		return params
 	
 	class BadParticlesColumn:
+		task_idle = QtCore.pyqtSignal()
+
 		def __init__(self,name_map):
 			self.name_map = name_map
 	
@@ -3568,21 +3607,22 @@
 	def on_form_ok(self,params):
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		
 	def on_form_close(self):
 		# this is to avoid a task_idle signal, which would be incorrect if e2boxer is running
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		
 	def on_form_cancel(self):
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 
  		 	
 class E2MakeSetChooseDataTask(E2ParticleExamineChooseDataTask):
 	"""Choose the particle data you wish to examine. This will pop a second form listing the particles stacks along with other relevant information"""
+	replace_task = QtCore.pyqtSignal()
 	documentation_string = "Choose the data for particle examination" 
 	def __init__(self):
 		E2ParticleExamineChooseDataTask.__init__(self)
@@ -3604,7 +3644,7 @@
 						name_map[name] = base_name(name)
 			particles = self.particles_map[self.particles_name_map[choice]]
 			
-			self.emit(QtCore.SIGNAL("replace_task"),E2MakeSetTask(particles,name_map,self.name_map),"Make Particle Sets")
+			self.replace_task.emit(E2MakeSetTask(particles,name_map,self.name_map), "Make Particle Sets")
 		
 		self.form.close()
 		self.form = None
@@ -3613,6 +3653,8 @@
 		
 class E2MakeSetTask(E2ParticleExamineTask):
 	'''This task is for making agglomerated particle sets which function as input for the 2D and 3D refinement tasks. Sets for any linked particle sets (such as phase flipped or Wiener filtered data) are automatically generated. You can choose to exclude any bad particles that you have defined.'''
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self,particle_stacks=[],name_map={},data_name_map={}):
 		E2ParticleExamineTask.__init__(self,particle_stacks,data_name_map)
 		self.window_title = "Make Particle Sets"
@@ -3686,7 +3728,7 @@
 				return False
 			
 		stacks_map = {}
-		progress = QtGui.QProgressDialog("Making virtual stacks...", "Abort import", 0, 1000,None)
+		progress = QtWidgets.QProgressDialog("Making virtual stacks...", "Abort import", 0, 1000,None)
 		progress.setWindowIcon(QtGui.QIcon(get_image_directory() + "/eman.png"))
 		progress.show()
 		n=-1
@@ -3770,7 +3812,7 @@
 		'''
 
 			
-		progress = QtGui.QProgressDialog("Importing files into database...", "Abort import", 0, len(filenames),None)
+		progress = QtWidgets.QProgressDialog("Importing files into database...", "Abort import", 0, len(filenames),None)
 		progress.setWindowIcon(QtGui.QIcon(get_image_directory() + "/eman.png"))
 		progress.show()
 
@@ -3801,7 +3843,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 		self.write_db_entries(params)
 
@@ -3848,6 +3890,8 @@
 		return table
 	
 	class FilteredSetInfo:
+		task_idle = QtCore.pyqtSignal()
+
 		def __init__(self,filt):
 			self.filt = filt
 			data_dict = EMProjectDataDict(spr_sets_dict)
@@ -3865,7 +3909,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 	def recover_original_raw_data_list(self):
 		'''
@@ -3889,6 +3933,8 @@
 class E2Refine2DReportTask(ParticleWorkFlowTask):
 	"""This form displays reference free class averages that are associated with the project."""
 	
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
 		self.window_title = "2D Class Averages "
@@ -3909,7 +3955,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 
 
 class EMClassificationTools(ParticleWorkFlowTask):
@@ -4338,6 +4384,7 @@
 		self.image_count = False
 
 class E2Refine2DChooseParticlesTask(ParticleWorkFlowTask):
+	replace_task = QtCore.pyqtSignal()
 	documentation_string = "Select the type of particles you wish to run e2refine2d on. Typically the phase_flipped_hp particles will give the \
  best results, followed by the phase_flipped particles. Wiener filtered particles have strong contrast, but tend to produce blurry class-averages, \
  since it is the particles that are filtered, not the averages. After you hit OK, you will be prompted for specific refinement options." 
@@ -4368,9 +4415,9 @@
 		choice = params["particle_set_choice"]
 		
 		if choice == "Specify":
-			self.emit(QtCore.SIGNAL("replace_task"),E2Refine2DWithGenericTask(),"e2refine2d arguments")
+			self.replace_task.emit(E2Refine2DWithGenericTask(), "e2refine2d arguments")
 		else:
-			self.emit(QtCore.SIGNAL("replace_task"),E2Refine2DRunTask(self.particles_map[self.particles_name_map[choice]]),"e2refine2d arguments")
+			self.replace_task.emit(E2Refine2DRunTask(self.particles_map[self.particles_name_map[choice]]), "e2refine2d arguments")
 		self.form.close()
 		self.form = None
 		
@@ -4379,6 +4426,7 @@
 
 		 	
 class E2Refine2DChooseSetsTask(ParticleWorkFlowTask):
+	replace_task = QtCore.pyqtSignal()
 	documentation_string = "Choose the data you wish to use for use for running e2refine2d from the list of options below and hit OK. This will pop up a second form asking you to fill in more details.\n\nNote that usually you should have 4 options to choose from below. If you are not seeing all 4 options it means you should go back in the work flow, import particles, and generate phase flipped and Wiener filtered output." 
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
@@ -4407,11 +4455,11 @@
 		choice = params["particle_set_choice_stack"]
 		
 		if choice == "Specify":
-			self.emit(QtCore.SIGNAL("replace_task"),E2Refine2DWithGenericTask(),"e2refine2d arguments")
+			self.replace_task.emit(E2Refine2DWithGenericTask(), "e2refine2d arguments")
 		else:
 			task = E2Refine2DRunTask(self.particles_map[self.particles_name_map[choice]])
 			task.single_selection = True
-			self.emit(QtCore.SIGNAL("replace_task"),task,"e2refine2d arguments")
+			self.replace_task.emit(task, "e2refine2d arguments")
 		self.form.close()
 		self.form = None
 		
@@ -4446,6 +4494,7 @@
 		
 
 class E2Refine2DRunTask(E2Refine2DTask):
+	task_idle = QtCore.pyqtSignal()
 	documentation_string = "Select a particle set to use for 2-D refinement.  Select how many classes you want to generate. The other options on this page will generally produce \
 reasonably good results with default settings. Normalize projection vectors can make a dramatic improvement on some data sets, but is bad for others. See the e2refine2d.py \
 documentation for other details. Don't forget the other tabs !\
@@ -4464,10 +4513,10 @@
 		self.form.resize(*self.preferred_size)
 		self.form.setWindowTitle(self.window_title)
 		get_application().show_specific(self.form)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("display_file"),self.on_display_file)
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
+		self.form.display_file.connect(self.on_display_file)
 		
 	def get_params(self):
 		params = []
@@ -4537,7 +4586,7 @@
 			additional_args = []
 		temp_file_name = "e2refine2d_stdout.txt"
 		self.spawn_single_task("e2refine2d.py",options,string_args,bool_args,additional_args,temp_file_name)
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 
@@ -4592,6 +4641,7 @@
 	
 class EMInitialModelReportTask(ParticleWorkFlowTask):
 	"""This form displays the initial models currently associated with the project. You can associate initial models with the project using e2makeinitialmodel or by importing them directly, see the options below."""
+	task_idle = QtCore.pyqtSignal()
 	warning_string = "\n\n\nNOTE: There are no initial models currently associated with the project."
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
@@ -4613,11 +4663,13 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		
 
 class E2InitialModel(ParticleWorkFlowTask):
 	"""Use this form for creating initial model with e2initialmodel."""
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self):
 		ParticleWorkFlowTask.__init__(self)
 		self.window_title = "Run e2initialmodel"
@@ -4654,7 +4706,7 @@
 		
 		if "filenames" not in params:
 			# THERE ARE no classes to choose from and the user has hit ok
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			self.form.close()
 			self.form = None
 			return
@@ -4690,7 +4742,7 @@
 			additional_args = ["--dbls=%s" %spr_init_models_dict]
 			temp_file_name = "e2initialmodel_stdout.txt"
 			self.spawn_single_task("e2initialmodel.py",options,string_args,bool_args,additional_args,temp_file_name)
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 			self.form.close()
 			self.form = None
 	def on_form_cancel(self):
@@ -4698,7 +4750,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 
 class RefinementReportTask(ParticleWorkFlowTask):
 	documentation_string = "This form displays the models produced at the end of each refinement."
@@ -4958,6 +5010,8 @@
 		self.single_selection = False
 
 	class UsefiltColumn:
+		task_idle = QtCore.pyqtSignal()
+
 		def __init__(self,ptcls,usefilt_ptcls):
 			if len(ptcls) != len(usefilt_ptcls):
 				raise RuntimeError("The usefilt and raw particle lists must be the same length")
@@ -4974,10 +5028,10 @@
 		self.form.resize(*self.preferred_size)
 		self.form.setWindowTitle(self.window_title)
 		get_application().show_specific(self.form)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("display_file"),self.on_display_file)
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
+		self.form.display_file.connect(self.on_display_file)
 		
 	def get_params(self):
 		params = []
@@ -4997,7 +5051,7 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 	
 	def on_form_ok(self,params):
 		
@@ -5030,7 +5084,7 @@
 
 		self.spawn_single_task("e2refine.py",options,string_args,bool_args,additional_args,temp_file_name)
 		
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 
@@ -5260,7 +5314,7 @@
 				
 			if fail: # we can't make a vstack
 				# potentially lots of e2proc2d
-				progress = QtGui.QProgressDialog("Importing files into database...", "Abort import", 0, len(filenames),None)
+				progress = QtWidgets.QProgressDialog("Importing files into database...", "Abort import", 0, len(filenames),None)
 				progress.show()
 	
 				i = 0
@@ -5562,6 +5616,8 @@
 post-process - This is an optional filter to apply to the model as a final step, filter.lowpass.gauss with 'cutoff_freq=<1/resolution>' is good with set SF. If set SF is not used, note that the model will already \
  be somewhat filtered even without this."""
  
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self,ptcls_list,usefilt_ptcls_list):
 		E2RefineParticlesTaskBase.__init__(self,ptcls_list,usefilt_ptcls_list) 
 		
@@ -5623,7 +5679,7 @@
 		
 		self.spawn_single_task("e2refinemulti.py",options,string_args,bool_args,additional_args,temp_file_name)
 		
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 		
@@ -5642,7 +5698,7 @@
 		
 		self.imt = E2InitialModelsTool()
 		p1,n1 = self.imt.get_initial_models_table(makebutton=0) # Do not add a Browse to Add button, it just created a headache
-		QtCore.QObject.connect(p1,QtCore.SIGNAL("updateform"),self.updateform)
+		p1.updateform.connect(self.updateform)
 		
 		p1.enable_multiple_selection = False
 		params.append(p1)
@@ -5943,6 +5999,7 @@
 		
 class EMChooseTask(ParticleWorkFlowTask):
 	'''Fill me in'''
+	replace_task = QtCore.pyqtSignal()
 	documentation_string = "This selects the type of data to use for the refinement. Normally phase_flipped or phase_flipped_hp will be selected in the top \
 section. Usefilt permits you to use one set of data for alignment and classification, and the set above when actually building a model. This can provide significant \
 benefits in some cases. Normally the wiener_filtered set or None will be selected here. If you are using the 'prefilt' option in the refinement parameters, you \
@@ -6042,7 +6099,7 @@
 			
 			task = self.task_to_use(intersection_ptcls,intersection_usefilt_ptcls)
 			task.single_selection = self.single_selection
-			self.emit(QtCore.SIGNAL("replace_task"),task,"e2refine2d arguments")
+			self.replace_task.emit(task, "e2refine2d arguments")
 			self.form.close()
 			self.form = None
 		
@@ -6294,10 +6351,10 @@
 		self.form.resize(*self.preferred_size)
 		self.form.setWindowTitle(self.window_title)
 		get_application().show_specific(self.form)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("display_file"),self.on_display_file)
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
+		self.form.display_file.connect(self.on_display_file)
 		
 	
 	def get_params(self):
@@ -6393,6 +6450,7 @@
 		plowmem = ParamDef(name="lowmem",vartype="boolean",desc_short="Low mem",desc_long="Causes various programs to restrict memory usage but results in increased CPU time.",property=None,defaultunits=db.get("lowmem",dfl=False),choices=None)
 		pusefilt = ParamDef(name="usefilt",vartype="boolean",desc_short="Usefilt",desc_long="Will use the 'usefilt' data for class alignment if it exists in the refinement directory",property=None,defaultunits=db.get("usefilt",dfl=False),choices=None)
 		
+		task_idle = QtCore.pyqtSignal()
 		syms = ["icos","oct","tet","d","c","h"]
 		
 		psym =  ParamDef(name="symname",vartype="string",desc_short="Symmetry",desc_long="Symmetry to be imposed during refinement",property=None,defaultunits=db.get("symname",dfl="c"),choices=syms)
@@ -6477,7 +6535,7 @@
 #		
 		options.filenames = [] # spawn single task expects a filenames attribute
 		self.spawn_single_task("e2eotest.py",options,string_args,bool_args,additional_args,temp_file_name)
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 #	
@@ -6486,6 +6544,7 @@
 
 	'''
 	 
+	task_idle = QtCore.pyqtSignal()
 	general_documentation = "These are parameters required to run an e2resolution.py."
 	warning_string = "\n\n\nThere are no refinement results available to use as the basis of running e2resolution"
 	def __init__(self):
@@ -6572,7 +6631,7 @@
 		temp_file_name = "e2resolution_stdout.txt"
 		options.filenames = [] # spawn single task expects a filenames attribute
 		self.spawn_single_task("e2resolution.py",options,string_args,bool_args,additional_args,temp_file_name)
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 #	
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emtprworkflow.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emtprworkflow.py	2017-10-21 17:15:02.000000000 -0500
@@ -33,6 +33,7 @@
 
 
 from emsprworkflow import *
+from PyQt5.QtWidgets import *
 from emform import *
 from emsave import EMFileTypeValidator
 from emapplication import error, EMErrorMessageDisplay
@@ -70,6 +71,8 @@
 
 class EMTomoChooseFilteredPtclsTask(EMBaseTomoChooseFilteredPtclsTask):
 	"""Choose the particle set you wish to filter. The available sets inlcude the raw particles, and any filtered sets you have previously generated.""" 
+	replace_task = QtCore.pyqtSignal()
+
 	def __init__(self):
 		EMBaseTomoChooseFilteredPtclsTask.__init__(self)
 		self.form_db_name ="bdb:tomo.choose.filtered"
@@ -81,7 +84,7 @@
 		choice = params["tomo_filt_choice"]
 		
 		task = EMTomoGenericReportTask(self.particles_map[self.particles_name_map[choice]])
-		self.emit(QtCore.SIGNAL("replace_task"),task,"Filter Tomo Particles")
+		self.replace_task.emit(task, "Filter Tomo Particles")
 		self.form.close()
 		self.form = None
 		
@@ -92,6 +95,7 @@
 class E2TomoFilterParticlesTask(WorkFlowTask):	
 	"""This task is for Fourier filtering and/or rotating your data. If you choose to perform both of these operations, the Fourier filtering is performed before the rotation."""
 	
+	task_idle = QtCore.pyqtSignal()
 	preprocessor_cache = None
 	def __init__(self,ptcls_list=[],name_map={}):
 		WorkFlowTask.__init__(self)
@@ -211,7 +215,7 @@
 			error("You have to supply a filter or a non zero rotation for any filtering to occur")
 			return
 		
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 	
@@ -299,6 +303,8 @@
 
 class EMTomoChooseFilteredPtclsForFiltTask(EMBaseTomoChooseFilteredPtclsTask):
 	"""Choose the data you wish to filter""" 
+	replace_task = QtCore.pyqtSignal()
+
 	def __init__(self,task_type=E2TomoFilterParticlesTask):
 		EMBaseTomoChooseFilteredPtclsTask.__init__(self)
 		self.form_db_name ="bdb:tomo.choose.filtered.forfilt"
@@ -311,7 +317,7 @@
 		choice = params["tomo_filt_choice"]
 		
 		task = self.task_type(self.particles_map[self.particles_name_map[choice]],self.name_map)
-		self.emit(QtCore.SIGNAL("replace_task"),task,"Filter Tomo Particles")
+		self.replace_task.emit(task, "Filter Tomo Particles")
 		self.form.close()
 		self.form = None
 		
@@ -319,6 +325,7 @@
 
 class EMTomoBootStapChoosePtclsTask(EMBaseTomoChooseFilteredPtclsTask):
 	"""Choose the particle set you wish to use to generate the bootstrapped probe. The sets available will include the raw particles and any filtered sets you have generated.""" 
+	replace_task = QtCore.pyqtSignal()
 
 	def __init__(self):
 		EMBaseTomoChooseFilteredPtclsTask.__init__(self)
@@ -330,7 +337,7 @@
 			return
 		choice = params["tomo_filt_choice"]
 		task = EMTomoBootstrapTask(self.particles_map[self.particles_name_map[choice]],self.name_map)
-		self.emit(QtCore.SIGNAL("replace_task"),task,"Filter Tomo Particles")
+		self.replace_task.emit(task, "Filter Tomo Particles")
 		self.form.close()
 		self.form = None
 		
@@ -419,10 +426,10 @@
 		self.form.resize(*self.preferred_size)
 		self.form.setWindowTitle(self.window_title)
 		get_application().show_specific(self.form)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("display_file"),self.on_display_file)	
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
+		self.form.display_file.connect(self.on_display_file)
 		
 	def get_params(self):
 		table_params = []
@@ -592,6 +599,9 @@
 		
 class E2TomoBoxerGuiTask(WorkFlowTask):
 	"""Select the file you want to process and hit okay, this will launch e2spt_boxer. The yshort option sets the Z axis normal to the screen, and inmemory load the tomo into memory for fast access"""
+	task_idle = QtCore.pyqtSignal()
+	gui_exit = QtCore.pyqtSignal()
+
 	def __init__(self):
 		WorkFlowTask.__init__(self)
 		self.tomo_boxer_module = None
@@ -668,20 +678,20 @@
 	def on_form_close(self):
 		# this is to avoid a task_idle signal, which would be incorrect if e2boxer is running
 		if self.tomo_boxer_module == None:
-			self.emit(QtCore.SIGNAL("task_idle"))
+			self.task_idle.emit()
 		else: pass
 	
 	def on_boxer_closed(self): 
 		if self.tomo_boxer_module != None:
 			self.tomo_boxer_module = None
-			self.emit(QtCore.SIGNAL("gui_exit"))
+			self.gui_exit.emit()
 	
 	def on_boxer_idle(self):
 		'''
 		Presently this means boxer did stuff but never opened any guis, so it's safe just to emit the signal
 		'''
 		self.tomo_boxer_module = None
-		self.emit(QtCore.SIGNAL("gui_exit"))
+		self.gui_exit.emit()
 		
 	def on_form_cancel(self):
 		if self.report_task:
@@ -689,4 +699,4 @@
 		
 		self.form.close()
 		self.form = None
-		self.emit(QtCore.SIGNAL("task_idle"))
+		self.task_idle.emit()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/valslider.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/valslider.py	2017-10-21 17:15:03.000000000 -0500
@@ -34,8 +34,8 @@
 import sys, math, weakref
 from OpenGL.GL import *
 from OpenGL import GLU
-from PyQt4 import QtCore, QtGui, QtOpenGL 
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 
 leftarrow = [
     '12 10 2 1',
@@ -72,15 +72,21 @@
 def clamp(x0,val,x1):
 	return int(max(min(val,x1),x0))
 
-class ValSlider(QtGui.QWidget):
+class ValSlider(QtWidgets.QWidget):
 	"""The valslider class represents a connected text widget and horizontal slider.
 	showenable - if -1, no enable box shown, if 0, shown unchecked, if 1 shown and checked
 	setValue(float) - to programatically change the value
 	emit valueChanged(float)
 	"""
+	enableChanged = QtCore.pyqtSignal()
+	valueChanged = QtCore.pyqtSignal()
+	textChanged = QtCore.pyqtSignal()
+	sliderReleased = QtCore.pyqtSignal()
+	sliderPressed = QtCore.pyqtSignal()
+
 	def __init__(self, parent=None, rng=None, label=None, value=0,labelwidth=30,showenable=-1,rounding=3):
 		#if not parent: raise Exception,"ValSliders must have parents"
-		QtGui.QWidget.__init__(self,parent)
+		QtWidgets.QWidget.__init__(self,parent)
 		
 		#print label, "allocated"
 		
@@ -93,22 +99,22 @@
 		self.intonly=0
 		self.rounding = rounding
 		
-		self.hboxlayout = QtGui.QHBoxLayout(self)
-		self.hboxlayout.setMargin(0)
+		self.hboxlayout = QtWidgets.QHBoxLayout(self)
+		self.hboxlayout.setContentsMargins(0, 0, 0, 0)
 		self.hboxlayout.setSpacing(6)
 		self.hboxlayout.setObjectName("hboxlayout")
 		
 		if showenable>=0 :
-			self.enablebox=QtGui.QCheckBox(self)
+			self.enablebox=QtWidgets.QCheckBox(self)
 			self.enablebox.setChecked(showenable)
 			self.hboxlayout.addWidget(self.enablebox)
-			QtCore.QObject.connect(self.enablebox, QtCore.SIGNAL("toggled(bool)"), self.setEnabled)
+			self.enablebox.toggled[bool].connect(self.setEnabled)
 		
 		if label:
-			self.label = QtGui.QLabel(self)
+			self.label = QtWidgets.QLabel(self)
 			self.setLabel(label)
 			
-			sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(0),QtGui.QSizePolicy.Policy(0))
+			sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(0),QtWidgets.QSizePolicy.Policy(0))
 #			sizePolicy.setHorizontalStretch(1)
 #			sizePolicy.setVerticalStretch(0)
 #			sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -120,9 +126,9 @@
 			self.hboxlayout.addWidget(self.label)
 		
 		
-		self.text = QtGui.QLineEdit(self)
+		self.text = QtWidgets.QLineEdit(self)
 		
-		sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(7),QtGui.QSizePolicy.Policy(0))
+		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(7),QtWidgets.QSizePolicy.Policy(0))
 		sizePolicy.setHorizontalStretch(1)
 		sizePolicy.setVerticalStretch(0)
 		sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -131,9 +137,9 @@
 		self.text.setObjectName("text")
 		self.hboxlayout.addWidget(self.text)
 		
-		self.slider = QtGui.QSlider(self)
+		self.slider = QtWidgets.QSlider(self)
 		
-		sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(7),QtGui.QSizePolicy.Policy(0))
+		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(7),QtWidgets.QSizePolicy.Policy(0))
 		sizePolicy.setHorizontalStretch(7)
 		sizePolicy.setVerticalStretch(0)
 		sizePolicy.setHeightForWidth(self.slider.sizePolicy().hasHeightForWidth())
@@ -146,10 +152,10 @@
 		self.slider.setObjectName("slider")
 		self.hboxlayout.addWidget(self.slider)
 		
-		QtCore.QObject.connect(self.text, QtCore.SIGNAL("editingFinished()"), self.textChange)
-		QtCore.QObject.connect(self.slider, QtCore.SIGNAL("valueChanged(int)"), self.sliderChange)
-		QtCore.QObject.connect(self.slider, QtCore.SIGNAL("sliderReleased()"), self.sliderReleased)
-		QtCore.QObject.connect(self.slider, QtCore.SIGNAL("sliderPressed()"), self.sliderPressed)
+		self.text.editingFinished.connect(self.textChange)
+		self.slider.valueChanged[int].connect(self.sliderChange)
+		self.slider.sliderReleased.connect(self.sliderReleased)
+		self.slider.sliderPressed.connect(self.sliderPressed)
 		
 		self.updateboth()
 		if showenable>=0 : self.setEnabled(showenable)
@@ -163,7 +169,7 @@
 		self.text.setEnabled(ena)
 		try : return self.enablebox.setChecked(ena)
 		except: pass
-		self.emit(QtCore.SIGNAL("enableChanged"),ena) 
+		self.enableChanged.emit(ena)
 
 	def getEnabled(self):
 		try : return self.enablebox.isChecked()
@@ -197,7 +203,7 @@
 
 #		if self.intonly : print self.value,val
 		self.updateboth()
-		if not quiet and self.value!=self.oldvalue: self.emit(QtCore.SIGNAL("valueChanged"),self.value)
+		if not quiet and self.value!=self.oldvalue: self.valueChanged.emit(self.value)
 		self.oldvalue=self.value
 	
 	def getValue(self):
@@ -241,8 +247,8 @@
 				
 				self.updates()
 				if self.value!=self.oldvalue:
-					self.emit(QtCore.SIGNAL("valueChanged"),self.value)
-					self.emit(QtCore.SIGNAL("textChanged"),self.value)
+					self.valueChanged.emit(self.value)
+					self.textChanged.emit(self.value)
 				self.oldvalue=self.value
 			except:
 				self.updateboth()
@@ -255,14 +261,14 @@
 			self.value=int(self.value+.5)
 			if self.value==ov : return
 		self.updatet()
-		if self.value!=self.oldvalue: self.emit(QtCore.SIGNAL("valueChanged"),self.value)
+		if self.value!=self.oldvalue: self.valueChanged.emit(self.value)
 		self.oldvalue=self.value
 	
 	def sliderReleased(self):
-		self.emit(QtCore.SIGNAL("sliderReleased"),self.value)
+		self.sliderReleased.emit(self.value)
 		
 	def sliderPressed(self):
-		self.emit(QtCore.SIGNAL("sliderPressed"),self.value)
+		self.sliderPressed.emit(self.value)
 	
 	def setLabel(self,label):
 		self.label.setText(label)
@@ -287,13 +293,17 @@
 		self.updates()
 		self.updatet()
 
-class ValBox(QtGui.QWidget):
+class ValBox(QtWidgets.QWidget):
 	"""A ValSlider without the slider part. Everything is the same except that the slider doesn't exist,
 	so for virtually all purposes it could be used as a drop-in replacement.
 	"""
+	enableChanged = QtCore.pyqtSignal()
+	valueChanged = QtCore.pyqtSignal()
+	textChanged = QtCore.pyqtSignal()
+
 	def __init__(self, parent=None, rng=None, label=None, value=0,labelwidth=30,showenable=-1):
 		#if not parent: raise Exception,"ValSliders must have parents"
-		QtGui.QWidget.__init__(self,parent)
+		QtWidgets.QWidget.__init__(self,parent)
 		
 		if rng : self.rng=list(rng)
 		else : self.rng=[0,1.0]
@@ -303,22 +313,22 @@
 		self.intonly=0
 		self.digits=5		# digits of precision to display
 		
-		self.hboxlayout = QtGui.QHBoxLayout(self)
-		self.hboxlayout.setMargin(0)
+		self.hboxlayout = QtWidgets.QHBoxLayout(self)
+		self.hboxlayout.setContentsMargins(0, 0, 0, 0)
 		self.hboxlayout.setSpacing(6)
 		self.hboxlayout.setObjectName("hboxlayout")
 		
 		if showenable>=0 :
-			self.enablebox=QtGui.QCheckBox(self)
+			self.enablebox=QtWidgets.QCheckBox(self)
 			self.enablebox.setChecked(showenable)
 			self.hboxlayout.addWidget(self.enablebox)
-			QtCore.QObject.connect(self.enablebox, QtCore.SIGNAL("toggled(bool)"), self.setEnabled)
+			self.enablebox.toggled[bool].connect(self.setEnabled)
 			
 		if label:
-			self.label = QtGui.QLabel(self)
+			self.label = QtWidgets.QLabel(self)
 			self.setLabel(label)
 			
-			sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(0),QtGui.QSizePolicy.Policy(0))
+			sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(0),QtWidgets.QSizePolicy.Policy(0))
 #			sizePolicy.setHorizontalStretch(1)
 #			sizePolicy.setVerticalStretch(0)
 #			sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -330,9 +340,9 @@
 			self.hboxlayout.addWidget(self.label)
 		
 		
-		self.text = QtGui.QLineEdit(self)
+		self.text = QtWidgets.QLineEdit(self)
 		
-		sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(7),QtGui.QSizePolicy.Policy(0))
+		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(7),QtWidgets.QSizePolicy.Policy(0))
 		sizePolicy.setHorizontalStretch(1)
 		sizePolicy.setVerticalStretch(0)
 		sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -341,14 +351,14 @@
 		self.text.setObjectName("text")
 		self.hboxlayout.addWidget(self.text)
 		
-		QtCore.QObject.connect(self.text, QtCore.SIGNAL("editingFinished()"), self.textChange)
+		self.text.editingFinished.connect(self.textChange)
 		
 		if showenable>=0 : self.setEnabled(showenable)
 		self.updateboth()
 
 	def setEnabled(self,ena):
 		self.text.setEnabled(ena)
-		self.emit(QtCore.SIGNAL("enableChanged"),ena) 
+		self.enableChanged.emit(ena)
 
 	def getEnabled(self):
 		try : return self.enablebox.isChecked()
@@ -385,7 +395,7 @@
 
 #		if self.intonly : print self.value,val
 		self.updateboth()
-		if not quiet : self.emit(QtCore.SIGNAL("valueChanged"),self.value)
+		if not quiet : self.valueChanged.emit(self.value)
 	
 	def getValue(self):
 		if self.intonly : return int(self.value)
@@ -415,8 +425,8 @@
 				else : 
 					self.value=float(x)
 #				print "new text ",self.value
-				self.emit(QtCore.SIGNAL("valueChanged"),self.value)
-				self.emit(QtCore.SIGNAL("textChanged"),self.value)
+				self.valueChanged.emit(self.value)
+				self.textChanged.emit(self.value)
 			except:
 				self.updateboth()
 				
@@ -435,32 +445,36 @@
 	def updateboth(self):
 		self.updatet()
 
-class StringBox(QtGui.QWidget):
+class StringBox(QtWidgets.QWidget):
 	"""A ValBox but it takes arbitrary text. Basically maintains the label/enable functionality for a QLineEdit widget
 	"""
+	enableChanged = QtCore.pyqtSignal()
+	valueChanged = QtCore.pyqtSignal()
+	textChanged = QtCore.pyqtSignal()
+
 	def __init__(self, parent=None, label=None, value="",labelwidth=30,showenable=-1):
 		#if not parent: raise Exception,"ValSliders must have parents"
-		QtGui.QWidget.__init__(self,parent)
+		QtWidgets.QWidget.__init__(self,parent)
 		
 		if value==None : value=""
 		self.ignore=0
 		
-		self.hboxlayout = QtGui.QHBoxLayout(self)
-		self.hboxlayout.setMargin(0)
+		self.hboxlayout = QtWidgets.QHBoxLayout(self)
+		self.hboxlayout.setContentsMargins(0, 0, 0, 0)
 		self.hboxlayout.setSpacing(6)
 		self.hboxlayout.setObjectName("hboxlayout")
 		
 		if showenable>=0 :
-			self.enablebox=QtGui.QCheckBox(self)
+			self.enablebox=QtWidgets.QCheckBox(self)
 			self.enablebox.setChecked(showenable)
 			self.hboxlayout.addWidget(self.enablebox)
-			QtCore.QObject.connect(self.enablebox, QtCore.SIGNAL("toggled(bool)"), self.setEnabled)
+			self.enablebox.toggled[bool].connect(self.setEnabled)
 			
 		if label:
-			self.label = QtGui.QLabel(self)
+			self.label = QtWidgets.QLabel(self)
 			self.setLabel(label)
 			
-			sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(0),QtGui.QSizePolicy.Policy(0))
+			sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(0),QtWidgets.QSizePolicy.Policy(0))
 #			sizePolicy.setHorizontalStretch(1)
 #			sizePolicy.setVerticalStretch(0)
 #			sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -472,10 +486,10 @@
 			self.hboxlayout.addWidget(self.label)
 		
 		
-		self.text = QtGui.QLineEdit(self)
+		self.text = QtWidgets.QLineEdit(self)
 		self.text.setText(value)
 		
-		sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(7),QtGui.QSizePolicy.Policy(0))
+		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(7),QtWidgets.QSizePolicy.Policy(0))
 		sizePolicy.setHorizontalStretch(1)
 		sizePolicy.setVerticalStretch(0)
 		sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -484,13 +498,13 @@
 		self.text.setObjectName("text")
 		self.hboxlayout.addWidget(self.text)
 		
-		QtCore.QObject.connect(self.text, QtCore.SIGNAL("editingFinished()"), self.textChange)
+		self.text.editingFinished.connect(self.textChange)
 		
 		if showenable>=0 : self.setEnabled(showenable)
 
 	def setEnabled(self,ena):
 #		self.text.setEnabled(ena)
-		self.emit(QtCore.SIGNAL("enableChanged"),ena) 
+		self.enableChanged.emit(ena)
 
 	def getEnabled(self):
 		try : return self.enablebox.isChecked()
@@ -499,15 +513,15 @@
 	def setValue(self,val,quiet=0):
 		if self.getValue()==val : return
 		self.text.setText(val)
-		if not quiet : self.emit(QtCore.SIGNAL("valueChanged"),val)
+		if not quiet : self.valueChanged.emit(val)
 	
 	def getValue(self):
 		return str(self.text.text())
 		
 	def textChange(self):
 		if self.ignore : return
-		self.emit(QtCore.SIGNAL("valueChanged"),self.getValue())
-		self.emit(QtCore.SIGNAL("textChanged"),self.getValue())
+		self.valueChanged.emit(self.getValue())
+		self.textChanged.emit(self.getValue())
 				
 	def setLabel(self,label):
 		self.label.setText(label)
@@ -516,34 +530,37 @@
 		return str(self.label.text())
 		
 
-class CheckBox(QtGui.QWidget):
+class CheckBox(QtWidgets.QWidget):
 	"""A QCheckBox with a label
 	"""
+	enableChanged = QtCore.pyqtSignal()
+	valueChanged = QtCore.pyqtSignal()
+
 	def __init__(self, parent=None, label=None, value="",labelwidth=30,showenable=-1):
 		#if not parent: raise Exception,"ValSliders must have parents"
-		QtGui.QWidget.__init__(self,parent)
+		QtWidgets.QWidget.__init__(self,parent)
 		
 		if value==None : value=False
 		if value!=False and value!=True : value=True
 		
 		self.ignore=0
 		
-		self.hboxlayout = QtGui.QHBoxLayout(self)
-		self.hboxlayout.setMargin(0)
+		self.hboxlayout = QtWidgets.QHBoxLayout(self)
+		self.hboxlayout.setContentsMargins(0, 0, 0, 0)
 		self.hboxlayout.setSpacing(6)
 		self.hboxlayout.setObjectName("hboxlayout")
 		
 		if showenable>=0 :
-			self.enablebox=QtGui.QCheckBox(self)
+			self.enablebox=QtWidgets.QCheckBox(self)
 			self.enablebox.setChecked(showenable)
 			self.hboxlayout.addWidget(self.enablebox)
-			QtCore.QObject.connect(self.enablebox, QtCore.SIGNAL("toggled(bool)"), self.setEnabled)
+			self.enablebox.toggled[bool].connect(self.setEnabled)
 			
 		if label:
-			self.label = QtGui.QLabel(self)
+			self.label = QtWidgets.QLabel(self)
 			self.setLabel(label)
 			
-			sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(0),QtGui.QSizePolicy.Policy(0))
+			sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(0),QtWidgets.QSizePolicy.Policy(0))
 #			sizePolicy.setHorizontalStretch(1)
 #			sizePolicy.setVerticalStretch(0)
 #			sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
@@ -555,18 +572,18 @@
 			self.hboxlayout.addWidget(self.label)
 		
 		
-		self.check = QtGui.QCheckBox(self)
+		self.check = QtWidgets.QCheckBox(self)
 #		print "'%s'"%str(value)
 		self.check.setChecked(value)
 		self.hboxlayout.addWidget(self.check)
 		
-		QtCore.QObject.connect(self.check, QtCore.SIGNAL("stateChanged(int)"), self.boolChanged)
+		self.check.stateChanged[int].connect(self.boolChanged)
 		
 		if showenable>=0 : self.setEnabled(showenable)
 
 	def setEnabled(self,ena):
 		self.check.setEnabled(ena)
-		self.emit(QtCore.SIGNAL("enableChanged"),ena) 
+		self.enableChanged.emit(ena)
 		
 	def getEnabled(self):
 		try : return self.enablebox.isChecked()
@@ -583,7 +600,7 @@
 				
 		if self.getValue()==val : return
 		self.check.setChecked(val)
-		if not quiet : self.emit(QtCore.SIGNAL("valueChanged"),val)
+		if not quiet : self.valueChanged.emit(val)
 	
 	def getValue(self):
 		return bool(self.check.isChecked())
@@ -591,7 +608,7 @@
 		
 	def boolChanged(self,newv):
 		if self.ignore : return
-		self.emit(QtCore.SIGNAL("valueChanged"),bool(self.check.isChecked()))
+		self.valueChanged.emit(bool(self.check.isChecked()))
 				
 	def setLabel(self,label):
 		self.label.setText(label)
@@ -600,21 +617,23 @@
 		return str(self.label.text())
 
 
-class RangeSlider(QtGui.QWidget):
+class RangeSlider(QtWidgets.QWidget):
 	"""This is an int slider with two values in a fixed range (v0,v1) in a fixed range (min,max). Each value
 	can be set individually or the pair can be moved up and down together. The values are displayed at
 	the top and bottom of the vertical slider.
 	"""
+	valueChanged = QtCore.pyqtSignal()
+
 	def __init__(self, parent=None, rng=(0,100), value=(25,75)):
 		#if not parent: raise Exception,"ValSliders must have parents"
-		QtGui.QWidget.__init__(self,parent)
+		QtWidgets.QWidget.__init__(self,parent)
 		
 		self.rng=tuple(rng)
 		self.value=tuple(value)
 		self.mdownloc=None
 		if len(rng)!=2 or len(value)!=2 : raise Exception("RangeSlider needs a valid range and value)")
 
-		sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Policy(0),QtGui.QSizePolicy.Policy(7))
+		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy(0),QtWidgets.QSizePolicy.Policy(7))
 		sizePolicy.setHorizontalStretch(0)
 		sizePolicy.setVerticalStretch(7)
 		sizePolicy.setHeightForWidth(False)
@@ -735,12 +754,12 @@
 		if v1<=v0 : v1=v0+1
 		self.value=(v0,v1)
 		self.update()
-		if not quiet : self.emit(QtCore.SIGNAL("valueChanged"), self.value)
+		if not quiet : self.valueChanged.emit(self.value)
 
 	def getValue(self):
 		return self.value
 		
-class EMSpinWidget(QtGui.QWidget):
+class EMSpinWidget(QtWidgets.QWidget):
 	"""
 	Widget for a unbounded spin box using left and right arrow keys. When the value is changed
 	valueChanged(int) is emited
@@ -748,8 +767,10 @@
 	@param coeff is controls the exponential growth rate when the arrow is held down
 	@param maxarrowwidth is the size of the arrow buttons
 	"""
+	valueChanged = QtCore.pyqtSignal(int)
+
 	def __init__(self, value, coeff, rounding=2, maxarrowwidth=20, postivemode=False, wheelstep=1):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.value = value
 		self.coeff = coeff
 		self.powercoeff = 0.0
@@ -758,17 +779,17 @@
 		self.wheelstep=wheelstep
 		self.rounding = rounding
 		
-		shbox = QtGui.QHBoxLayout()
-		self.lbutton = QtGui.QPushButton("",self)
+		shbox = QtWidgets.QHBoxLayout()
+		self.lbutton = QtWidgets.QPushButton("",self)
 		self.lbutton.setIcon(QtGui.QIcon(QtGui.QPixmap(leftarrow)))
 		self.lbutton.setAutoRepeat(True)
 		self.lbutton.setAutoRepeatDelay(200)
 		shbox.addWidget(self.lbutton)
-		self.numbox = QtGui.QLineEdit(str(self.value), self)
+		self.numbox = QtWidgets.QLineEdit(str(self.value), self)
 		shbox.addWidget(self.numbox)
 		self.lbutton.setMaximumHeight(self.numbox.height())
 		self.lbutton.setMaximumWidth(self.maxarrowwidth)
-		self.rbutton = QtGui.QPushButton("",self)
+		self.rbutton = QtWidgets.QPushButton("",self)
 		self.rbutton.setIcon(QtGui.QIcon(QtGui.QPixmap(rightarrow)))
 		self.rbutton.setAutoRepeat(True)
 		self.rbutton.setAutoRepeatDelay(200)
@@ -777,16 +798,16 @@
 		shbox.addWidget(self.rbutton)
 		self.setLayout(shbox)
 		
-		QtCore.QObject.connect(self.numbox,QtCore.SIGNAL("editingFinished()"),self._on_editfinish)
-		QtCore.QObject.connect(self.lbutton,QtCore.SIGNAL("clicked()"),self._on_clickleft)
-		QtCore.QObject.connect(self.rbutton,QtCore.SIGNAL("clicked()"),self._on_clickright)
-		QtCore.QObject.connect(self.lbutton,QtCore.SIGNAL("released()"),self._on_unclickleft)
-		QtCore.QObject.connect(self.rbutton,QtCore.SIGNAL("released()"),self._on_unclickright)
+		self.numbox.editingFinished.connect(self._on_editfinish)
+		self.lbutton.clicked.connect(self._on_clickleft)
+		self.rbutton.clicked.connect(self._on_clickright)
+		self.lbutton.released.connect(self._on_unclickleft)
+		self.rbutton.released.connect(self._on_unclickright)
 	
 	def setValue(self, value, quiet=1):
 		self.value = value
 		self.numbox.setText(str(round(self.value, self.rounding)))
-		if not quiet: self.emit(QtCore.SIGNAL("valueChanged(int)"),self.value)
+		if not quiet: self.valueChanged.emit(self.value)
 	
 	def getValue(self):
 		return self.value
@@ -798,7 +819,7 @@
 		self.coeff = incr
 		
 	def wheelEvent(self, event):
-		if event.delta() > 0:
+		if event.angleDelta().y() > 0:
 			self.setValue(self.value+self.wheelstep)
 		else:
 			value = self.value-self.wheelstep
@@ -807,19 +828,19 @@
 					self.setValue(value)
 			else:
 				self.setValue(value)
-		self.emit(QtCore.SIGNAL("valueChanged(int)"),self.value)
+		self.valueChanged.emit(self.value)
 		
 	def _on_clickleft(self):
 		self.value = self.value - self.coeff*(2**self.powercoeff)
 		self.numbox.setText(str(round(self.value, self.rounding)))
 		self.powercoeff += 0.1
-		self.emit(QtCore.SIGNAL("valueChanged(int)"),self.value)
+		self.valueChanged.emit(self.value)
 		
 	def _on_clickright(self):
 		self.value = self.value + self.coeff*(2**self.powercoeff)
 		self.numbox.setText(str(round(self.value,self.rounding)))
 		self.powercoeff += 0.1
-		self.emit(QtCore.SIGNAL("valueChanged(int)"),self.value)
+		self.valueChanged.emit(self.value)
 	
 	def _on_unclickleft(self):
 		if not self.lbutton.isDown():
@@ -833,19 +854,22 @@
 		try:
 			oldvalue = self.value
 			self.value = float(self.numbox.text())
-			if self.value != oldvalue: self.emit(QtCore.SIGNAL("valueChanged(int)"),float(self.numbox.text()))
+			if self.value != oldvalue: self.valueChanged.emit(float(self.numbox.text()))
 			
 		except ValueError:
 			self.numbox.setText(str(self.value))
 			print("ERROR!!! You must enter a number")
 		
-class EMQTColorWidget(QtGui.QWidget):
+class EMQTColorWidget(QtWidgets.QWidget):
 	"""
 	A widget displaying a color box that is used to control colors
 	multiple boxes can be implemented
 	"""
+	newcolor = QtCore.pyqtSignal(QColor)
+	newconnection = QtCore.pyqtSignal()
+
 	def __init__(self, parent=None, red=255, green=255, blue=255, width=30, height=30):
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 		self.width = width
 		self.height = height
 		self.color = QtGui.QColor(red,green,blue)
@@ -879,7 +903,7 @@
 	def dropEvent(self, e):
 		self.color = QtGui.QColor(e.mimeData().colorData())
 		self.update()
-		self.emit(QtCore.SIGNAL("newcolor(QColor)"), self.color)
+		self.newcolor.emit(self.color)
 
 	def mouseMoveEvent(self, e):
 
@@ -900,10 +924,10 @@
 		if event.buttons() != QtCore.Qt.RightButton:
 			self.inicolor = self.color
 			self.colrodialog = EMQtColorDialog(self.color)
-			QtCore.QObject.connect(self.colrodialog,QtCore.SIGNAL("currentColorChanged(const QColor &)"),self._on_colorchange)
-			QtCore.QObject.connect(self.colrodialog,QtCore.SIGNAL("colorSelected(const QColor &)"),self._on_colorselect)
-			QtCore.QObject.connect(self.colrodialog,QtCore.SIGNAL("canceled()"),self._on_cancel)
-			QtCore.QObject.connect(self.colrodialog,QtCore.SIGNAL("newconnection()"), self._on_additonal_connect)
+			self.colrodialog.currentColorChanged[QColor].connect(self._on_colorchange)
+			self.colrodialog.colorSelected[QColor].connect(self._on_colorselect)
+			self.colrodialog.canceled.connect(self._on_cancel)
+			self.colrodialog.newconnection.connect(self._on_additonal_connect)
 		else:
 			self._dragdrop(event)
 			
@@ -911,24 +935,24 @@
 		if color.isValid():
 			self.color = color
 			self.update()
-			self.emit(QtCore.SIGNAL("newcolor(QColor)"), self.color)
+			self.newcolor.emit(self.color)
 			
 	def _on_colorselect(self, color):
 		if color.isValid():
 			self.color = color
 			self.update()
-			self.emit(QtCore.SIGNAL("newcolor(QColor)"), self.color)
+			self.newcolor.emit(self.color)
 			
 	def _on_cancel(self):
 		self.color = self.inicolor
 		self.update()
-		self.emit(QtCore.SIGNAL("newcolor(QColor)"), self.color)
+		self.newcolor.emit(self.color)
 		
 	def _on_additonal_connect(self):
-		QtCore.QObject.disconnect(self.colrodialog,QtCore.SIGNAL("currentColorChanged(const QColor &)"),self._on_colorchange)
-		QtCore.QObject.disconnect(self.colrodialog,QtCore.SIGNAL("colorSelected(const QColor &)"),self._on_colorselect)
-		QtCore.QObject.disconnect(self.colrodialog,QtCore.SIGNAL("canceled()"),self._on_cancel)
-		QtCore.QObject.disconnect(self.colrodialog,QtCore.SIGNAL("newconnection()"), self._on_additonal_connect)
+		self.colrodialog.currentColorChanged[QColor].disconnect(self._on_colorchange)
+		self.colrodialog.colorSelected[QColor].disconnect(self._on_colorselect)
+		self.colrodialog.canceled.disconnect(self._on_cancel)
+		self.colrodialog.newconnection.disconnect(self._on_additonal_connect)
 
 def singleton(cls):
 	instances = {}
@@ -936,7 +960,7 @@
 		if cls not in instances:
 			instances[cls] = cls(inicolor)
 		else:
-			instances[cls].emit(QtCore.SIGNAL("newconnection()"))
+			instances[cls].newconnection.emit()
 			instances[cls].setCurrentColor(inicolor)
 			if instances[cls].hidden:
 				instances[cls].show()
@@ -944,19 +968,21 @@
 	return getinstance
     
 @singleton
-class EMQtColorDialog(QtGui.QColorDialog):
+class EMQtColorDialog(QtWidgets.QColorDialog):
 	"""
 	The Is to create a non-modal color dialog. Only one color dialog is allowed at once, so I use the singltion pattern
 	"""
+	canceled = QtCore.pyqtSignal()
+
 	def __init__(self, inicolor):
-		QtGui.QColorDialog.__init__(self, inicolor)
+		QtWidgets.QColorDialog.__init__(self, inicolor)
 		self.hidden = False
 		self.setWindowFlags(QtCore.Qt.Window)
 		self.show()
 	
 	def hideEvent(self, e):
-		QtGui.QColorDialog.hideEvent(self, e)
-		self.emit(QtCore.SIGNAL("canceled()"))
+		QtWidgets.QColorDialog.hideEvent(self, e)
+		self.canceled.emit()
 		self.hidden = True
 
 class EMLightControls(QtOpenGL.QGLWidget):
@@ -966,6 +992,8 @@
 	Its position can be set via: setAngularPosition
 	@param light, the glLight the this widget uses
 	"""
+	lightPositionMoved = QtCore.pyqtSignal()
+
 	def __init__(self, light, parent=None):
 		QtOpenGL.QGLWidget.__init__(self, parent)
 		self.light = light
@@ -1047,7 +1075,7 @@
 		self.init_x = event.x()
 		self.init_y = event.y()
 		self.update()
-		self.emit(QtCore.SIGNAL("lightPositionMoved"), [self.theta, self.phi])
+		self.lightPositionMoved.emit([self.theta, self.phi])
 		
 	def setPosition(self, x, y, z, w, quiet=False):
 		self.lightposition = [x, y, z, w]
@@ -1095,6 +1123,9 @@
 	This widget is an observer of the Camera object (used in the Scenegraph). To update call updateWidget
 	@param scenegraph, the scenegraph this widget oberrves
 	"""
+	farMoved = QtCore.pyqtSignal(float)
+	nearMoved = QtCore.pyqtSignal(float)
+
 	def __init__(self, parent=None, scenegraph=None):
 		QtOpenGL.QGLWidget.__init__(self, parent)
 		self.scenegraph = weakref.ref(scenegraph)
@@ -1135,9 +1166,9 @@
 		""" Move the clipping planes"""
 		self.movement = float(event.x() - self.init_x)*self.scale
 		if math.fabs(event.x()-(self.near_clipping + self.width/2)) > math.fabs(event.x()-(self.far_clipping + self.width/2)):
-			self.emit(QtCore.SIGNAL("farMoved(float)"), self.movement)
+			self.farMoved.emit(self.movement)
 		else:
-			self.emit(QtCore.SIGNAL("nearMoved(float)"), self.movement)
+			self.nearMoved.emit(self.movement)
 		self.init_x = event.x()
 		
 	def _drawViewingVolume(self):
@@ -1197,15 +1228,16 @@
 	def updateWidget(self):
 		self.update()
 		
-class EMANToolButton(QtGui.QToolButton):
+class EMANToolButton(QtWidgets.QToolButton):
 	"""
 	This widget is a toolbutton that is toogleable. Only one button can be down at any given point.
 	The only weakness is only one of these button groups can be used at any given time. It is possible 
 	to fix this, but when I need such functionality
 	"""
+	clicked = QtCore.pyqtSignal(int)
 	toolpanellist = []
 	def __init__(self):
-		QtGui.QToolButton.__init__(self)
+		QtWidgets.QToolButton.__init__(self)
 		self.setMinimumWidth(30)
 		self.setMinimumHeight(30)
 		self.weakrefself = weakref.ref(self)
@@ -1220,9 +1252,9 @@
 				tool().setDown(False)
 	
 	def setDown(self, state, quiet=True):
-		QtGui.QToolButton.setDown(self, state)
+		QtWidgets.QToolButton.setDown(self, state)
 		if state: self.setSelfAsUnique()
-		if not quiet: self.emit(QtCore.SIGNAL("clicked(int)"), self.isDown())
+		if not quiet: self.clicked.emit(self.isDown())
 		
 	def mousePressEvent(self, event):
 		# Toggle the button on and off
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e22.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e22.py	2017-10-21 17:15:03.000000000 -0500
@@ -35,8 +35,8 @@
 import EMAN2
 from EMAN2 import *
 from emimage import image_update
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 import threading
 from emapplication import EMApp
 
@@ -57,7 +57,7 @@
 	global ttx
 	
 	if ttx :
-		QtGui.qApp.quit()
+		QtWidgets.QApplication.quit()
 
 ipythr=threading.Thread(target=IPY)
 ipythr.run()
@@ -67,7 +67,7 @@
 EMAN2.GUIMode=True
 EMAN2.app=app
 mytimer = QtCore.QTimer()
-QtCore.QObject.connect( mytimer, QtCore.SIGNAL( 'timeout()' ), on_timer )
+mytimer.timeout.connect(on_timer)
 mytimer.start(500)
 
 app.exec_()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2RCTboxer.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2RCTboxer.py	2017-10-21 17:15:03.000000000 -0500
@@ -34,7 +34,7 @@
 #
 from EMAN2 import *
 from EMAN2db import db_open_dict, db_close_dict, db_remove_dict
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from emapplication import EMApp
 from emimagemx import EMImageMXWidget
 from emimage2d import EMImage2DWidget
@@ -322,11 +322,11 @@
 			self.window.updateGL()
 			
 	def connect_signals(self):
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mx_image_selected"),self.box_selected)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mx_mousedrag"),self.box_moved)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mx_mouseup"),self.box_released)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mx_boxdeleted"),self.box_image_deleted)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("module_closed"),self.module_closed)
+		self.window.mx_image_selected.connect(self.box_selected)
+		self.window.mx_mousedrag.connect(self.box_moved)
+		self.window.mx_mouseup.connect(self.box_released)
+		self.window.mx_boxdeleted.connect(self.box_image_deleted)
+		self.window.module_closed.connect(self.module_closed)
 			
 	def box_selected(self,event,lc):
 		if lc == None or lc[0] == None: return
@@ -383,13 +383,13 @@
 		self.masktype = "None"
 		
 	def connect_signals(self):
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mousedown"),self.mouse_down)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mousedrag"),self.mouse_drag)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mouseup")  ,self.mouse_up  )
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("keypress"),self.key_press)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mousewheel"),self.mouse_wheel)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("mousemove"),self.mouse_move)
-		QtCore.QObject.connect(self.window,QtCore.SIGNAL("module_closed"),self.module_closed)
+		self.window.mousedown.connect(self.mouse_down)
+		self.window.mousedrag.connect(self.mouse_drag)
+		self.window.mouseup.connect(self.mouse_up)
+		self.window.keypress.connect(self.key_press)
+		self.window.mousewheel.connect(self.mouse_wheel)
+		self.window.mousemove.connect(self.mouse_move)
+		self.window.module_closed.connect(self.module_closed)
 	
 	def paint_mask(self,v1x,v1y,v2x,v2y,v3x,v3y,v4x,v4y):
 		if self.masktype == "None":
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2_real.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2_real.py	2017-10-21 17:15:03.000000000 -0500
@@ -43,7 +43,7 @@
 try:
 	if get_platform()=="Linux" and os.getenv("DISPLAY")==None: raise Exception
 
-	from PyQt4 import QtCore, QtGui, QtOpenGL
+	from PyQt5 import QtCore, QtOpenGL
 	from emapplication import EMApp
 	#import IPython.lib.inputhook
 #	import IPython.lib.guisupport
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2boxer.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2boxer.py	2017-10-21 17:15:04.000000000 -0500
@@ -44,8 +44,8 @@
 		return
 
 try: 
-	from PyQt4 import QtCore, QtGui
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtWidgets
+	from PyQt5.QtCore import Qt
 	from emimage2d import EMImage2DWidget
 	from emplot2d import EMPlot2DWidget
 	from emimagemx import EMImageMXWidget
@@ -68,7 +68,7 @@
 	
 	n=EMUtil.get_image_count(filename)
 	if n==0 :
-		QtGui.QMessageBox.warning(None,"Error","The file {} contains no images".format(newfilename))
+		QtWidgets.QMessageBox.warning(None,"Error","The file {} contains no images".format(newfilename))
 		return
 	elif n==1 :
 		img=EMData(filename,0)		# single image
@@ -261,7 +261,7 @@
 	if options.gui :
 		if isinstance(QtGui,nothing) :
 			print("=====================================")
-			print("ERROR: GUI mode unavailable without PyQt4")
+			print("ERROR: GUI mode unavailable without PyQt5")
 			sys.exit(1)
 		from emapplication import EMApp
 		app=EMApp()
@@ -678,10 +678,10 @@
 	@staticmethod
 	def setup_gui(gridlay, boxerwindow=None):
 		boxerConvNet.boxerwindow=boxerwindow
-		boxerConvNet.bt_train=QtGui.QPushButton("Train")
+		boxerConvNet.bt_train=QtWidgets.QPushButton("Train")
 		boxerConvNet.bt_train.setToolTip("Train the network using references")
 		gridlay.addWidget(boxerConvNet.bt_train)
-		QtCore.QObject.connect(boxerConvNet.bt_train,QtCore.SIGNAL("clicked(bool)"),boxerConvNet.do_training)
+		boxerConvNet.bt_train.clicked[bool].connect(boxerConvNet.do_training)
 		#boxerConvNet.ck_train=QtGui.QCheckBox("Train from scratch")
 		#gridlay.addWidget(boxerConvNet.ck_train)
 		
@@ -1077,7 +1077,7 @@
 	     ("NeuralNet", "auto_convnet", boxerConvNet)]
 boxcolors = { "selected":(0.9,0.9,0.9), "manual":(0,0,0.7), "refgood":(0,0.8,0), "refbad":(0.8,0,0), "unknown":[.4,.4,.1], "auto_local":(.3,.1,.4), "auto_ref":(.1,.1,.4), "auto_gauss":(.4,.1,.4),  "auto_convnet":(.4,.1,.1)}
 
-class GUIBoxer(QtGui.QWidget):
+class GUIBoxer(QtWidgets.QWidget):
 	# Dictionary of autopickers
 	# to add a new one, provide name:(Qt_setup_function,picker_execution_function)
 	# Qt_setup_function(self,empty_grid_layout)
@@ -1088,7 +1088,7 @@
 		"""The 'new' e2boxer interface.
 		"""
 
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 #		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "ctf.png"))
 
 		self.boxcolors=boxcolors
@@ -1133,22 +1133,22 @@
 		#self.wplot=EMPlot2DWidget()
 		#self.wplot.setWindowTitle("e2evalimage - Plot")
 
-		self.wimage.connect(self.wimage,QtCore.SIGNAL("mousedown"),self.imgmousedown)
-		self.wimage.connect(self.wimage,QtCore.SIGNAL("mousedrag"),self.imgmousedrag)
-		self.wimage.connect(self.wimage,QtCore.SIGNAL("mouseup")  ,self.imgmouseup)
-		self.wparticles.connect(self.wparticles,QtCore.SIGNAL("mx_image_selected"),self.ptclmousedown)
-		self.wparticles.connect(self.wparticles,QtCore.SIGNAL("mx_mousedrag"),self.ptclmousedrag)
-		self.wparticles.connect(self.wparticles,QtCore.SIGNAL("mx_mouseup")  ,self.ptclmouseup)
+		self.wimage.mousedown.connect(self.imgmousedown)
+		self.wimage.mousedrag.connect(self.imgmousedrag)
+		self.wimage.mouseup.connect(self.imgmouseup)
+		self.wparticles.mx_image_selected.connect(self.ptclmousedown)
+		self.wparticles.mx_mousedrag.connect(self.ptclmousedrag)
+		self.wparticles.mx_mouseup.connect(self.ptclmouseup)
 #		self.wrefs.connect(self.wparticles,QtCore.SIGNAL("mx_image_selected"),self.refmousedown)
 #		self.wrefs.connect(self.wparticles,QtCore.SIGNAL("mx_mousedrag"),self.ptclmousedrag)
-		self.wrefs.connect(self.wrefs,QtCore.SIGNAL("mx_mouseup")  ,self.refmouseup)
+		self.wrefs.mx_mouseup.connect(self.refmouseup)
 #		self.wbadrefs.connect(self.wparticles,QtCore.SIGNAL("mx_image_selected"),self.badrefmousedown)
 #		self.wbadrefs.connect(self.wparticles,QtCore.SIGNAL("mx_mousedrag"),self.badrefmousedrag)
-		self.wbadrefs.connect(self.wbadrefs,QtCore.SIGNAL("mx_mouseup")  ,self.badrefmouseup)
+		self.wbadrefs.mx_mouseup.connect(self.badrefmouseup)
 
 		# This object is itself a widget we need to set up
-		self.gbl = QtGui.QGridLayout(self)
-		self.gbl.setMargin(8)
+		self.gbl = QtWidgets.QGridLayout(self)
+		self.gbl.setContentsMargins(8, 8, 8, 8)
 		self.gbl.setSpacing(6)
 		self.gbl.setColumnStretch(0,2)
 		self.gbl.setColumnStretch(1,2)
@@ -1157,73 +1157,73 @@
 		self.gbl.setColumnStretch(4,1)
 
 		# Micrograph list
-		self.setlist=QtGui.QListWidget(self)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist=QtWidgets.QListWidget(self)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		for i in imagenames:
 			self.setlist.addItem(i)
 		self.gbl.addWidget(self.setlist,0,0,12,2)
 
-		self.setlist.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		self.setlist.connect(self.setlist,QtCore.SIGNAL("keypress"),self.listKey)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.keypress.connect(self.listKey)
 		
 		# Mouse Modes
 		self.mmode="manual"
-		self.boxmm=QtGui.QGroupBox("Mouse Mode",self)
+		self.boxmm=QtWidgets.QGroupBox("Mouse Mode",self)
 		self.boxmm.setFlat(False)
 		self.gbl.addWidget(self.boxmm,0,2,2,2)
 		
-		self.hbl0=QtGui.QHBoxLayout(self.boxmm)
+		self.hbl0=QtWidgets.QHBoxLayout(self.boxmm)
 		
-		self.bmmanual=QtGui.QPushButton("Manual")
+		self.bmmanual=QtWidgets.QPushButton("Manual")
 		self.bmmanual.setToolTip("Manual selection of particles. No impact on autoselection.")
 		self.bmmanual.setAutoExclusive(True)
 		self.bmmanual.setCheckable(True)
 		self.bmmanual.setChecked(True)
 		self.hbl0.addWidget(self.bmmanual)
 		
-		self.bmdel=QtGui.QPushButton("Delete")
+		self.bmdel=QtWidgets.QPushButton("Delete")
 		self.bmdel.setToolTip("Delete particles from any mode. Can also shift-click in other mouse modes.")
 		self.bmdel.setAutoExclusive(True)
 		self.bmdel.setCheckable(True)
 		self.hbl0.addWidget(self.bmdel)
 		
-		self.bmgref=QtGui.QPushButton("Good Refs")
+		self.bmgref=QtWidgets.QPushButton("Good Refs")
 		self.bmgref.setToolTip("Identify some good particles. Available to all autoboxers.")
 		self.bmgref.setAutoExclusive(True)
 		self.bmgref.setCheckable(True)
 		self.hbl0.addWidget(self.bmgref)
 
-		self.bmbref=QtGui.QPushButton("Bad Refs")
+		self.bmbref=QtWidgets.QPushButton("Bad Refs")
 		self.bmbref.setToolTip("Identify regions which should not be selected as particles.")
 		self.bmbref.setAutoExclusive(True)
 		self.bmbref.setCheckable(True)
 		self.hbl0.addWidget(self.bmbref)
 
-		QtCore.QObject.connect(self.bmmanual,QtCore.SIGNAL("clicked(bool)"),self.setMouseManual)
-		QtCore.QObject.connect(self.bmdel,QtCore.SIGNAL("clicked(bool)"),self.setMouseDel)
-		QtCore.QObject.connect(self.bmgref,QtCore.SIGNAL("clicked(bool)"),self.setMouseGoodRef)
-		QtCore.QObject.connect(self.bmbref,QtCore.SIGNAL("clicked(bool)"),self.setMouseBadRef)
+		self.bmmanual.clicked[bool].connect(self.setMouseManual)
+		self.bmdel.clicked[bool].connect(self.setMouseDel)
+		self.bmgref.clicked[bool].connect(self.setMouseGoodRef)
+		self.bmbref.clicked[bool].connect(self.setMouseBadRef)
 
-		self.bfilter=QtGui.QPushButton("Filter Disp.")
+		self.bfilter=QtWidgets.QPushButton("Filter Disp.")
 		self.bfilter.setToolTip("Filter micrograph (display only)")
 		self.bfilter.setCheckable(True)
 		self.gbl.addWidget(self.bfilter,0,4,1,1)
-		QtCore.QObject.connect(self.bfilter,QtCore.SIGNAL("clicked(bool)"),self.filterToggle)
+		self.bfilter.clicked[bool].connect(self.filterToggle)
 
-		self.binvert=QtGui.QPushButton("Invert")
+		self.binvert=QtWidgets.QPushButton("Invert")
 		self.binvert.setToolTip("Invert Micrograph (also output)")
 		self.binvert.setCheckable(True)
 		self.binvert.setChecked(invert_on_read)		# in truly bad form, this is a global
 		self.gbl.addWidget(self.binvert,1,4,1,1)
-		QtCore.QObject.connect(self.binvert,QtCore.SIGNAL("clicked(bool)"),self.invertToggle)
+		self.binvert.clicked[bool].connect(self.invertToggle)
 
 		# Global parameters
-		self.boxparm=QtGui.QGroupBox("Parameters",self)
+		self.boxparm=QtWidgets.QGroupBox("Parameters",self)
 		self.boxparm.setFlat(False)
 		self.gbl.addWidget(self.boxparm,2,2,3,3)
 		
-		self.gbl1=QtGui.QGridLayout(self.boxparm)
-		self.gbl1.setMargin(8)
+		self.gbl1=QtWidgets.QGridLayout(self.boxparm)
+		self.gbl1.setContentsMargins(8, 8, 8, 8)
 		self.gbl1.setSpacing(6)
 		
 		self.vbbsize = ValBox(label="Box Size:",value=box)
@@ -1249,56 +1249,56 @@
 		self.gbl1.addWidget(self.vbthreads,1,3)
 
 		# Reference tools
-		self.reftools=QtGui.QGroupBox("Box Refs",self)
+		self.reftools=QtWidgets.QGroupBox("Box Refs",self)
 		self.boxparm.setFlat(False)
 		self.gbl.addWidget(self.reftools,5,2,2,2)
 		
-		self.hbl1=QtGui.QHBoxLayout(self.reftools)
+		self.hbl1=QtWidgets.QHBoxLayout(self.reftools)
 		
-		self.rtload3d=QtGui.QPushButton("From 3D")
+		self.rtload3d=QtWidgets.QPushButton("From 3D")
 		self.rtload3d.setToolTip("Load box refs from 3-D volume")
 		self.hbl1.addWidget(self.rtload3d)
 		
-		self.rtload2d=QtGui.QPushButton("From 2D")
+		self.rtload2d=QtWidgets.QPushButton("From 2D")
 		self.rtload2d.setToolTip("Load box refs from 2-D stack")
 		self.hbl1.addWidget(self.rtload2d)
 
-		self.rtclear=QtGui.QPushButton("Clear")
+		self.rtclear=QtWidgets.QPushButton("Clear")
 		self.rtclear.setToolTip("Clear all current good and bad refs")
 		self.hbl1.addWidget(self.rtclear)
 
-		QtCore.QObject.connect(self.rtload3d,QtCore.SIGNAL("clicked(bool)"),self.reftoolLoad3D)
-		QtCore.QObject.connect(self.rtload2d,QtCore.SIGNAL("clicked(bool)"),self.reftoolLoad2D)
-		QtCore.QObject.connect(self.rtclear,QtCore.SIGNAL("clicked(bool)"),self.reftoolClear)
+		self.rtload3d.clicked[bool].connect(self.reftoolLoad3D)
+		self.rtload2d.clicked[bool].connect(self.reftoolLoad2D)
+		self.rtclear.clicked[bool].connect(self.reftoolClear)
 		
 		
 		# Autoboxing Tabs
-		self.autolbl = QtGui.QLabel("Autoboxing Methods:")
+		self.autolbl = QtWidgets.QLabel("Autoboxing Methods:")
 		self.gbl.addWidget(self.autolbl,7,2)
-		self.autotab = QtGui.QTabWidget()
+		self.autotab = QtWidgets.QTabWidget()
 		self.gbl.addWidget(self.autotab,8,2,5,3)
 		
 		# Individual tabs from Dictionary
 		self.abwid=[]
 		for name,bname,cls in aboxmodes:
-			w=QtGui.QWidget()
-			gl=QtGui.QGridLayout(w)
+			w=QtWidgets.QWidget()
+			gl=QtWidgets.QGridLayout(w)
 			self.abwid.append((w,gl))
 			cls.setup_gui(gl, self)
 			self.autotab.addTab(w,name)
 			
-		self.bbclear=QtGui.QPushButton("Clear Boxes")
+		self.bbclear=QtWidgets.QPushButton("Clear Boxes")
 		self.bbclear.setToolTip("Clear all boxes in current micrograph")
 		self.gbl.addWidget(self.bbclear,13,2)
-		QtCore.QObject.connect(self.bbclear,QtCore.SIGNAL("clicked(bool)"),self.boxClear)
+		self.bbclear.clicked[bool].connect(self.boxClear)
 
-		self.bautoboxa = QtGui.QPushButton("Autobox All")
+		self.bautoboxa = QtWidgets.QPushButton("Autobox All")
 		self.gbl.addWidget(self.bautoboxa,13,3)
-		QtCore.QObject.connect(self.bautoboxa,QtCore.SIGNAL("clicked(bool)"),self.doAutoBoxAll)
+		self.bautoboxa.clicked[bool].connect(self.doAutoBoxAll)
 		
-		self.bautobox = QtGui.QPushButton("Autobox")
+		self.bautobox = QtWidgets.QPushButton("Autobox")
 		self.gbl.addWidget(self.bautobox,13,4)
-		QtCore.QObject.connect(self.bautobox,QtCore.SIGNAL("clicked(bool)"),self.doAutoBox)
+		self.bautobox.clicked[bool].connect(self.doAutoBox)
 
 		self.setWindowTitle("e2boxer21 - Control Panel")
 
@@ -1339,10 +1339,10 @@
 		self.mmode="refbad"
 	
 	def reftoolLoad3D(self,x):
-		fsp=str(QtGui.QFileDialog.getOpenFileName(self, "Select 3-D Volume"))
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select 3-D Volume"))[0]
 		if fsp==None or len(fsp)<4 : return
 
-		symname=str(QtGui.QInputDialog.getText(None,"Symmetry","Please specify the symmetry of the map, or c1 for none")[0])
+		symname=str(QtWidgets.QInputDialog.getText(None,"Symmetry","Please specify the symmetry of the map, or c1 for none")[0])
 #		print symname
 		try:
 			sym = Symmetries.get(symname)
@@ -1350,7 +1350,7 @@
 			print("Error: Unknown symmetry")
 			return
 		orts=sym.gen_orientations("eman",{"delta":15,"inc_mirror":1})
-		prog=QtGui.QProgressDialog("Making Projections","Abort",0,len(orts))
+		prog=QtWidgets.QProgressDialog("Making Projections","Abort",0,len(orts))
 		prog.setWindowModality(Qt.WindowModal)
 		prog.setValue(0)
 		
@@ -1391,7 +1391,7 @@
 		self.goodrefchg=True
 		
 	def reftoolLoad2D(self,x):
-		fsp=str(QtGui.QFileDialog.getOpenFileName(self, "Select 2-D Stack"))
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select 2-D Stack"))[0]
 		if fsp==None or len(fsp)<4 : return
 		
 		refs=EMData.read_images(fsp)
@@ -1426,8 +1426,8 @@
 	
 		
 	def reftoolClear(self,x):
-		r=QtGui.QMessageBox.question(None,"Are you sure ?","WARNING: this will remove all good and bad box references. Are you sure?",QtGui.QMessageBox.Yes|QtGui.QMessageBox.Cancel)
-		if r==QtGui.QMessageBox.Cancel : return
+		r=QtWidgets.QMessageBox.question(None,"Are you sure ?","WARNING: this will remove all good and bad box references. Are you sure?",QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.Cancel)
+		if r==QtWidgets.QMessageBox.Cancel : return
 
 		self.goodrefs=[]
 		self.goodrefchg=True
@@ -1438,8 +1438,8 @@
 		self.wbadrefs.set_data(self.badrefs)
 
 	def boxClear(self,x):
-		r=QtGui.QMessageBox.question(None,"Are you sure ?","WARNING: this will erase all box locations in the current micrograph. Are you sure?",QtGui.QMessageBox.Yes|QtGui.QMessageBox.Cancel)
-		if r==QtGui.QMessageBox.Cancel : return
+		r=QtWidgets.QMessageBox.question(None,"Are you sure ?","WARNING: this will erase all box locations in the current micrograph. Are you sure?",QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.Cancel)
+		if r==QtWidgets.QMessageBox.Cancel : return
 
 		self.boxes=[]
 		self.__updateBoxes()
@@ -1772,7 +1772,7 @@
 		
 		name,bname,cls=aboxmodes[self.autotab.currentIndex()]
 		
-		prog=QtGui.QProgressDialog("Autoboxing","Abort",0,len(self.filenames))
+		prog=QtWidgets.QProgressDialog("Autoboxing","Abort",0,len(self.filenames))
 		prog.setWindowModality(Qt.WindowModal)
 		prog.setValue(0)
 		prog.show()
@@ -1832,7 +1832,7 @@
 
 		#self.writeCurParm()
 		event.accept()
-		QtGui.qApp.exit(0)
+		QtWidgets.QApplication.exit(0)
 		#app=QtGui.qApp			if b[2] not in ("refgood","refbad"):
 		#if self.wimage != None:
 			#app.close_specific(self.wimage)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2boxer_old.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2boxer_old.py	2017-10-21 17:15:04.000000000 -0500
@@ -517,77 +517,77 @@
 
 	def get_widget(self):
 		if self.widget == None:
-			from PyQt4 import QtCore, QtGui, Qt
-			self.widget = QtGui.QWidget()
-			vbl = QtGui.QVBoxLayout(self.widget)
-			vbl.setMargin(0)
+			from PyQt5 import Qt, QtCore, QtGui, QtWidgets
+			self.widget = QtWidgets.QWidget()
+			vbl = QtWidgets.QVBoxLayout(self.widget)
+			vbl.setContentsMargins(0, 0, 0, 0)
 			vbl.setSpacing(6)
 			vbl.setObjectName("vbl")
 
 			db = js_open_dict(SwarmPanel.DB_NAME)
 
-			hbl = QtGui.QHBoxLayout()
-			ptcl_diam_label = QtGui.QLabel("Particle Diameter:")
+			hbl = QtWidgets.QHBoxLayout()
+			ptcl_diam_label = QtWidgets.QLabel("Particle Diameter:")
 			ptcl_diam_label.setToolTip("An estimate of the particle diameter - this used by Swarm for automatically shrinking and for determining automatic picking parameters.\nA value that is slightly larger than the particle is generally good. Err on the side of being too large, not too small.")
 			hbl.addWidget(ptcl_diam_label)
 
-			self.ptcl_diam_edit = QtGui.QLineEdit(str(self.particle_diameter))
+			self.ptcl_diam_edit = QtWidgets.QLineEdit(str(self.particle_diameter))
 			hbl.addWidget(self.ptcl_diam_edit)
-			self.clear=QtGui.QPushButton("Clear Boxes")
+			self.clear=QtWidgets.QPushButton("Clear Boxes")
 			self.clear.setToolTip("Clear boxes generated by the Swarm mode.")
 			hbl.addWidget(self.clear)
 
 			vbl.addLayout(hbl)
 
-			self.thrbut = QtGui.QRadioButton(SwarmBoxer.THRESHOLD)
-			self.selbut = QtGui.QRadioButton(SwarmBoxer.SELECTIVE)
+			self.thrbut = QtWidgets.QRadioButton(SwarmBoxer.THRESHOLD)
+			self.selbut = QtWidgets.QRadioButton(SwarmBoxer.SELECTIVE)
 			self.selbut.setChecked(True)
-			self.morselbut = QtGui.QRadioButton(SwarmBoxer.MORESELECTIVE)
+			self.morselbut = QtWidgets.QRadioButton(SwarmBoxer.MORESELECTIVE)
 
-			self.method_group = QtGui.QButtonGroup()
+			self.method_group = QtWidgets.QButtonGroup()
 			self.method_group.addButton(self.thrbut)
 			self.method_group.addButton(self.selbut)
 			self.method_group.addButton(self.morselbut)
 
-			self.methodhbox = QtGui.QHBoxLayout()
+			self.methodhbox = QtWidgets.QHBoxLayout()
 			self.methodhbox.addWidget(self.thrbut)
 			self.methodhbox.addWidget(self.selbut)
 			self.methodhbox.addWidget(self.morselbut)
 
-			self.groupbox = QtGui.QGroupBox("Auto Box Method")
+			self.groupbox = QtWidgets.QGroupBox("Auto Box Method")
 			self.groupbox.setToolTip("Tell Swarm what criteria to use for selecting particles.")
 			self.groupbox.setLayout(self.methodhbox)
 			vbl.addWidget(self.groupbox)
 
-			hbl_ww = QtGui.QHBoxLayout()
-			self.view_template=QtGui.QPushButton( QtGui.QIcon(get_image_directory() + "pp_boxer_icon.png"),"View Template")
+			hbl_ww = QtWidgets.QHBoxLayout()
+			self.view_template=QtWidgets.QPushButton( QtGui.QIcon(get_image_directory() + "pp_boxer_icon.png"),"View Template")
 			self.view_template.setEnabled(False)
 			self.view_template.setToolTip("View the template that is being used (if more than one template is shown, it is the last one).")
 			hbl_ww.addWidget(self.view_template)
 
-			self.autobox=QtGui.QPushButton(QtGui.QIcon(get_image_directory() + "green_boxes.png"),"Autobox")
+			self.autobox=QtWidgets.QPushButton(QtGui.QIcon(get_image_directory() + "green_boxes.png"),"Autobox")
 			self.autobox.setEnabled(False)
 			self.autobox.setToolTip("Force Swarm to autobox the current image")
 			hbl_ww.addWidget(self.autobox)
 
 			vbl.addLayout(hbl_ww)
 
-			hbl_aa = QtGui.QHBoxLayout()
-			self.update_template = QtGui.QCheckBox("Refresh Template")
+			hbl_aa = QtWidgets.QHBoxLayout()
+			self.update_template = QtWidgets.QCheckBox("Refresh Template")
 			self.update_template.setToolTip("Whether or not the act of adding a reference should force an update of the template being used by Swarm.\nOnce you have an adequate template you can turn this off and interactive picking will be faster.")
 			self.update_template.setChecked(True)
 			hbl_aa.addWidget(self.update_template)
 
 
-			self.auto_update = QtGui.QCheckBox("Auto Update")
+			self.auto_update = QtWidgets.QCheckBox("Auto Update")
 			self.auto_update.setToolTip("Whether or not autoboxing should occur every time you change a parameter or select a different image. This is the old dynapix button.")
 			self.auto_update.setChecked(db.setdefault("auto_update",True))
 			hbl_aa.addWidget(self.auto_update)
 			vbl.addLayout(hbl_aa)
 
 
-			self.advanced_hbl2 = QtGui.QHBoxLayout()
-			self.enable_interactive_threshold  = QtGui.QCheckBox("Interactive Threshold")
+			self.advanced_hbl2 = QtWidgets.QHBoxLayout()
+			self.enable_interactive_threshold  = QtWidgets.QCheckBox("Interactive Threshold")
 			self.enable_interactive_threshold.setToolTip("Tweak the correlation threshold that is used to select particles.")
 			self.enable_interactive_threshold.setChecked(False)
 			from valslider import ValSlider
@@ -598,8 +598,8 @@
 			self.advanced_hbl2.addWidget(self.thr)
 			vbl.addLayout(self.advanced_hbl2)
 
-			self.overlap_hbl = QtGui.QHBoxLayout()
-			self.enable_overlap_removal  = QtGui.QCheckBox("Proximity Threshold")
+			self.overlap_hbl = QtWidgets.QHBoxLayout()
+			self.enable_overlap_removal  = QtWidgets.QCheckBox("Proximity Threshold")
 			self.enable_overlap_removal.setToolTip("Remove closely positioned particles.")
 			self.enable_overlap_removal.setChecked(False)
 			self.proximity_thr = ValSlider(None,(0,self.particle_diameter*2),"")
@@ -609,33 +609,33 @@
 			self.overlap_hbl.addWidget(self.proximity_thr)
 			vbl.addLayout(self.overlap_hbl)
 
-			hbl_bb = QtGui.QHBoxLayout()
-			self.step_back=QtGui.QPushButton("Step Back")
+			hbl_bb = QtWidgets.QHBoxLayout()
+			self.step_back=QtWidgets.QPushButton("Step Back")
 			self.step_back.setToolTip("Recall the previous Swarm states")
 			self.step_back.setEnabled(False)
 			hbl_bb.addWidget(self.step_back)
-			self.step_forward=QtGui.QPushButton("Step Forward")
+			self.step_forward=QtWidgets.QPushButton("Step Forward")
 			self.step_forward.setToolTip("Undo a step back")
 			self.step_forward.setEnabled(False)
 			hbl_bb.addWidget(self.step_forward)
 			vbl.addLayout(hbl_bb)
 
 
-			QtCore.QObject.connect(self.ptcl_diam_edit,QtCore.SIGNAL("editingFinished()"),self.new_ptcl_diam)
-			QtCore.QObject.connect(self.update_template,QtCore.SIGNAL("clicked(bool)"),self.update_template_checked)
-			QtCore.QObject.connect(self.auto_update,QtCore.SIGNAL("clicked(bool)"),self.auto_update_checked)
-			QtCore.QObject.connect(self.clear, QtCore.SIGNAL("clicked(bool)"), self.clear_clicked)
-			QtCore.QObject.connect(self.view_template, QtCore.SIGNAL("clicked(bool)"), self.view_template_clicked)
-			QtCore.QObject.connect(self.autobox, QtCore.SIGNAL("clicked(bool)"), self.auto_box_clicked)
-			QtCore.QObject.connect(self.method_group,QtCore.SIGNAL("buttonClicked (QAbstractButton *)"),self.method_group_clicked)
-			QtCore.QObject.connect(self.enable_interactive_threshold, QtCore.SIGNAL("clicked(bool)"), self.interact_thresh_clicked)
-			QtCore.QObject.connect(self.thr,QtCore.SIGNAL("sliderReleased"),self.new_threshold_release)
-			QtCore.QObject.connect(self.thr,QtCore.SIGNAL("textChanged"),self.new_threshold_text_changed)
-			QtCore.QObject.connect(self.step_back, QtCore.SIGNAL("clicked(bool)"), self.step_back_clicked)
-			QtCore.QObject.connect(self.step_forward, QtCore.SIGNAL("clicked(bool)"), self.step_forward_clicked)
-			QtCore.QObject.connect(self.proximity_thr,QtCore.SIGNAL("sliderReleased"),self.proximity_threshold_release)
-			QtCore.QObject.connect(self.proximity_thr,QtCore.SIGNAL("textChanged"),self.proximity_threshold_text_changed)
-			QtCore.QObject.connect(self.enable_overlap_removal, QtCore.SIGNAL("clicked(bool)"), self.enable_overlap_removal_clicked)
+			self.ptcl_diam_edit.editingFinished.connect(self.new_ptcl_diam)
+			self.update_template.clicked[bool].connect(self.update_template_checked)
+			self.auto_update.clicked[bool].connect(self.auto_update_checked)
+			self.clear.clicked[bool].connect(self.clear_clicked)
+			self.view_template.clicked[bool].connect(self.view_template_clicked)
+			self.autobox.clicked[bool].connect(self.auto_box_clicked)
+			self.method_group.buttonClicked [QAbstractButton].connect(self.method_group_clicked)
+			self.enable_interactive_threshold.clicked[bool].connect(self.interact_thresh_clicked)
+			self.thr.sliderReleased.connect(self.new_threshold_release)
+			self.thr.textChanged.connect(self.new_threshold_text_changed)
+			self.step_back.clicked[bool].connect(self.step_back_clicked)
+			self.step_forward.clicked[bool].connect(self.step_forward_clicked)
+			self.proximity_thr.sliderReleased.connect(self.proximity_threshold_release)
+			self.proximity_thr.textChanged.connect(self.proximity_threshold_text_changed)
+			self.enable_overlap_removal.clicked[bool].connect(self.enable_overlap_removal_clicked)
 		return self.widget
 
 	def update_states(self,swarm_boxer):
@@ -1139,7 +1139,7 @@
 			self.proximity_threshold = val
 			self.__remove_proximal_particles()
 		else:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.BusyCursor)
 			self.proximity_threshold = val
 			if len(self.proximal_boxes) == 0: return
@@ -1180,7 +1180,7 @@
 #
 	def __remove_proximal_particles(self):
 		if self.gui_mode:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.BusyCursor)
 		boxes = self.target().get_boxes()
 		proximal_boxes_idxs = self.get_proximal_boxes(boxes)
@@ -1192,7 +1192,7 @@
 		self.proximal_boxes.extend(conv)
 		self.target().remove_boxes(proximal_boxes_idxs)
 		if self.gui_mode:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.ArrowCursor)
 
 	def check_proximity_add_boxes(self,boxes):
@@ -1263,8 +1263,8 @@
 
 			self.template_viewer.set_data(self.templates,soft_delete=True) # should work if self.templates is None
 			self.template_viewer.setWindowTitle("Templates")
-			from PyQt4 import QtCore
-			QtCore.QObject.connect(self.template_viewer,QtCore.SIGNAL("module_closed"),self.template_viewer_closed)
+			from PyQt5 import QtCore, QtWidgets
+			self.template_viewer.module_closed.connect(self.template_viewer_closed)
 
 		get_application().show_specific(self.template_viewer)
 
@@ -1474,7 +1474,7 @@
 		'''
 		self.proximal_boxes = [] # this is always res
 		if self.gui_mode:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.BusyCursor)
 
 		if self.signal_template_update or force_remove_auto_boxes:
@@ -1534,7 +1534,7 @@
 		if parameter_update:
 			if not self.update_opt_picking_data():
 				if self.gui_mode:
-					from PyQt4 import QtCore
+					from PyQt5 import QtCore, QtWidgets
 					get_application().setOverrideCursor(QtCore.Qt.ArrowCursor)
 				print("funny error")
 				return
@@ -1618,7 +1618,7 @@
 			self.cache_to_database()
 
 		if self.gui_mode:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			self.panel_object.enable_auto_box(False)
 			get_application().setOverrideCursor(QtCore.Qt.ArrowCursor)
 			self.target().set_status_message("Autoboxed %d Particles" %len(boxes), 10000)
@@ -1777,7 +1777,7 @@
 		return self.panel_object.get_widget()
 
 	def icon(self):
-		from PyQt4 import QtGui
+		from PyQt5 import QtGui, QtWidgets
 		return QtGui.QIcon(get_image_directory() + "swarm_icon.png")
 
 
@@ -1801,7 +1801,7 @@
 	def mouse_down(self,event):
 		m = self.get_2d_window().scr_to_img((event.x(),event.y()))
 		box_num = self.target().detect_box_collision(m)
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if box_num == -1:
 			if event.modifiers()&Qt.ShiftModifier :
 				return # the user tried to delete nothing
@@ -1811,7 +1811,7 @@
 		else:
 			box = self.target().get_box(box_num)
 			if box.type in [SwarmBoxer.REF_NAME,SwarmBoxer.AUTO_NAME,SwarmBoxer.WEAK_REF_NAME]:
-				from PyQt4.QtCore import Qt
+				from PyQt5.QtCore import Qt
 				if event.modifiers()&Qt.ShiftModifier :
 					self.handle_box_delete(box,box_num)
 				else:
@@ -1834,7 +1834,7 @@
 
 	def mouse_drag(self,event) :
 		m=self.get_2d_window().scr_to_img((event.x(),event.y()))
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if event.modifiers()&Qt.ShiftModifier:
 			box_num = self.target().detect_box_collision(m)
 			box = self.target().get_box(box_num)
@@ -1967,48 +1967,48 @@
 
 			gbdb = js_open_dict(GaussPanel.GDB_NAME)
 
-			from PyQt4 import QtCore, QtGui, Qt
-			self.widget = QtGui.QWidget()
-			vbl = QtGui.QVBoxLayout(self.widget)
-			vbl.setMargin(0)
+			from PyQt5 import Qt, QtCore, QtGui, QtWidgets
+			self.widget = QtWidgets.QWidget()
+			vbl = QtWidgets.QVBoxLayout(self.widget)
+			vbl.setContentsMargins(0, 0, 0, 0)
 			vbl.setSpacing(6)
 			vbl.setObjectName("vbl")
 
-			hgc = QtGui.QHBoxLayout()
-			gconvheader = QtGui.QLabel("<b>Parameters of Gauss convolution</b>")
+			hgc = QtWidgets.QHBoxLayout()
+			gconvheader = QtWidgets.QLabel("<b>Parameters of Gauss convolution</b>")
 			hgc.addWidget(gconvheader)
 			vbl.addLayout(hgc)
 
-			hbl = QtGui.QHBoxLayout()
-			pixel_input_label = QtGui.QLabel("Input Pixel Size:")
+			hbl = QtWidgets.QHBoxLayout()
+			pixel_input_label = QtWidgets.QLabel("Input Pixel Size:")
 			pixel_input_label.setToolTip("Input pixel size")
 			hbl.addWidget(pixel_input_label)
 
 			pixin = gbdb.setdefault('pixel_input',None)
 			if pixin == None:
-				self.pixel_input_edit = QtGui.QLineEdit('1.0')
+				self.pixel_input_edit = QtWidgets.QLineEdit('1.0')
 			else:
-				self.pixel_input_edit = QtGui.QLineEdit(str(gbdb['pixel_input']))
+				self.pixel_input_edit = QtWidgets.QLineEdit(str(gbdb['pixel_input']))
 			hbl.addWidget(self.pixel_input_edit)
 
 			#vbl.addLayout(hbl)
 
-			pixel_output_label = QtGui.QLabel("Output Pixel Size:")
+			pixel_output_label = QtWidgets.QLabel("Output Pixel Size:")
 			pixel_output_label.setToolTip("Output pixel size")
 			hbl.addWidget(pixel_output_label)
 
 			pixout_cache = gbdb.setdefault('pixel_output',None)
 			if pixout_cache == None:
-				self.pixel_output_edit = QtGui.QLineEdit('1.0')
+				self.pixel_output_edit = QtWidgets.QLineEdit('1.0')
 			else:
-				self.pixel_output_edit = QtGui.QLineEdit(str(gbdb['pixel_output']))
+				self.pixel_output_edit = QtWidgets.QLineEdit(str(gbdb['pixel_output']))
 			hbl.addWidget(self.pixel_output_edit)
 			self.new_pixel_output()
 			self.new_pixel_input()
 			vbl.addLayout(hbl)
 
-			hbl_invcont = QtGui.QHBoxLayout()
-			self.invert_contrast_chk = QtGui.QCheckBox("Invert Contrast")
+			hbl_invcont = QtWidgets.QHBoxLayout()
+			self.invert_contrast_chk = QtWidgets.QCheckBox("Invert Contrast")
 			self.invert_contrast_chk.setToolTip("Invert contrast")
 			invert_cache = gbdb.setdefault('invert_contrast',None)
 			if invert_cache == None:
@@ -2019,7 +2019,7 @@
 				self.invert_contrast_checked(invert_cache)
 			hbl_invcont.addWidget(self.invert_contrast_chk)
 
-			self.use_variance_chk = QtGui.QCheckBox("Use Variance")
+			self.use_variance_chk = QtWidgets.QCheckBox("Use Variance")
 			self.use_variance_chk.setToolTip("Use the variance image")
 			use_variance_cache = gbdb.setdefault('use_variance',None)
 			if use_variance_cache == None:
@@ -2032,16 +2032,16 @@
 
 			vbl.addLayout(hbl_invcont)
 
-			hbl_gwidth = QtGui.QHBoxLayout()
-			self.gauss_width_slider = QtGui.QSlider(QtCore.Qt.Horizontal)
+			hbl_gwidth = QtWidgets.QHBoxLayout()
+			self.gauss_width_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
 			self.gauss_width_slider.setRange( -100, 100 )
 			self.gauss_width_slider.setValue( self.SLVAL )
 			hbl_gwidth.addWidget( self.gauss_width_slider)
-			hbl_gwidth.addWidget(QtGui.QLabel("Gauss Width Adjust:"))
-			self.gauss_width = QtGui.QLineEdit(self.GW)
+			hbl_gwidth.addWidget(QtWidgets.QLabel("Gauss Width Adjust:"))
+			self.gauss_width = QtWidgets.QLineEdit(self.GW)
 			gauss_width_cache = gbdb.setdefault('gauss_width',None)
 			if not(gauss_width_cache == None):
-				self.gauss_width = QtGui.QLineEdit(str(gauss_width_cache))
+				self.gauss_width = QtWidgets.QLineEdit(str(gauss_width_cache))
 			hbl_gwidth.addWidget( self.gauss_width)
 
 
@@ -2049,33 +2049,33 @@
 			self.gauss_width_edited()
 			vbl.addLayout(hbl_gwidth)
 
-			hbl_thr = QtGui.QHBoxLayout()
-			thr_low_label = QtGui.QLabel("Threshold Low:")
+			hbl_thr = QtWidgets.QHBoxLayout()
+			thr_low_label = QtWidgets.QLabel("Threshold Low:")
 			hbl_thr.addWidget(thr_low_label)
-			self.thr_low_edit = QtGui.QLineEdit(self.THRNA)
+			self.thr_low_edit = QtWidgets.QLineEdit(self.THRNA)
 			thrlow_cache = gbdb.setdefault('thr_low',None)
 			if not(thrlow_cache == None):
-				self.thr_low_edit = QtGui.QLineEdit(str(thrlow_cache))
+				self.thr_low_edit = QtWidgets.QLineEdit(str(thrlow_cache))
 			self.new_thr_low()
 			hbl_thr.addWidget(self.thr_low_edit)
-			thr_hi_label = QtGui.QLabel("Threshold High:")
+			thr_hi_label = QtWidgets.QLabel("Threshold High:")
 			hbl_thr.addWidget(thr_hi_label)
 
 			thrhi_cache = gbdb.setdefault('thr_hi',None)
 			if thrhi_cache == None:
-				self.thr_hi_edit = QtGui.QLineEdit(self.THRNA)
+				self.thr_hi_edit = QtWidgets.QLineEdit(self.THRNA)
 			else:
-				self.thr_hi_edit = QtGui.QLineEdit(str(thrhi_cache))
+				self.thr_hi_edit = QtWidgets.QLineEdit(str(thrhi_cache))
 			self.new_thr_hi()
 			hbl_thr.addWidget(self.thr_hi_edit)
 			vbl.addLayout(hbl_thr)
 
-			hbl_ww = QtGui.QHBoxLayout()
-			self.clear=QtGui.QPushButton("Clear Boxes")
+			hbl_ww = QtWidgets.QHBoxLayout()
+			self.clear=QtWidgets.QPushButton("Clear Boxes")
 			self.clear.setToolTip("Clear boxes generated by the Gauss mode.")
 			hbl_ww.addWidget(self.clear)
 
-			self.autobox=QtGui.QPushButton(QtGui.QIcon(get_image_directory() + "green_boxes.png"),"Run")
+			self.autobox=QtWidgets.QPushButton(QtGui.QIcon(get_image_directory() + "green_boxes.png"),"Run")
 			self.autobox.setEnabled(True)
 			self.autobox.setToolTip("Autobox using Gauss method")
 			hbl_ww.addWidget(self.autobox)
@@ -2083,115 +2083,115 @@
 			vbl.addLayout(hbl_ww)
 
 			# add input fields for CTF estimation
-			hgctf = QtGui.QHBoxLayout()
-			ctftitle = QtGui.QLabel("<b>Parameters of CTF estimation</b>")
+			hgctf = QtWidgets.QHBoxLayout()
+			ctftitle = QtWidgets.QLabel("<b>Parameters of CTF estimation</b>")
 			hgctf.addWidget(ctftitle)
 			vbl.addLayout(hgctf)
 
-			hbl_wscs = QtGui.QHBoxLayout()
+			hbl_wscs = QtWidgets.QHBoxLayout()
 
-			window_size_label = QtGui.QLabel("Window size:")
+			window_size_label = QtWidgets.QLabel("Window size:")
 			hbl_wscs.addWidget(window_size_label)
-			self.ctf_window_size = QtGui.QLineEdit(str(gbdb.setdefault('ctf_window',"512")))
+			self.ctf_window_size = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_window',"512")))
 
 			hbl_wscs.addWidget(self.ctf_window_size)
 
-			cs_label = QtGui.QLabel("Cs:")
+			cs_label = QtWidgets.QLabel("Cs:")
 			hbl_wscs.addWidget(cs_label)
-			self.ctf_cs = QtGui.QLineEdit(str(gbdb.setdefault('ctf_cs',"2.0")))
+			self.ctf_cs = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_cs',"2.0")))
 
 			hbl_wscs.addWidget(self.ctf_cs)
 
 			vbl.addLayout(hbl_wscs)
 
-			hbl_esv = QtGui.QHBoxLayout()
+			hbl_esv = QtWidgets.QHBoxLayout()
 
-			edge_size_label = QtGui.QLabel("Edge size:")
+			edge_size_label = QtWidgets.QLabel("Edge size:")
 			hbl_esv.addWidget(edge_size_label)
-			self.ctf_edge_size = QtGui.QLineEdit(str(gbdb.setdefault('ctf_edge',"0")))
+			self.ctf_edge_size = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_edge',"0")))
 			hbl_esv.addWidget(self.ctf_edge_size)
 
-			voltage_label = QtGui.QLabel("Voltage:")
+			voltage_label = QtWidgets.QLabel("Voltage:")
 			hbl_esv.addWidget(voltage_label)
-			self.ctf_volt = QtGui.QLineEdit(str(gbdb.setdefault('ctf_volt',"200.0")))
+			self.ctf_volt = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_volt',"200.0")))
 			hbl_esv.addWidget(self.ctf_volt)
 
 			vbl.addLayout(hbl_esv)
 
-			hbl_oac = QtGui.QHBoxLayout()
+			hbl_oac = QtWidgets.QHBoxLayout()
 
-			overlap_label = QtGui.QLabel("Overlap:")
+			overlap_label = QtWidgets.QLabel("Overlap:")
 			hbl_oac.addWidget(overlap_label)
-			self.ctf_overlap_size = QtGui.QLineEdit(str(gbdb.setdefault('ctf_overlap',"50")))
+			self.ctf_overlap_size = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_overlap',"50")))
 			hbl_oac.addWidget(self.ctf_overlap_size)
 
-			amplitude_contrast_label = QtGui.QLabel("Amplitude Contrast:")
+			amplitude_contrast_label = QtWidgets.QLabel("Amplitude Contrast:")
 			hbl_oac.addWidget(amplitude_contrast_label)
-			self.ctf_ampcont = QtGui.QLineEdit(str(gbdb.setdefault('ctf_ampcont',"10.0")))
+			self.ctf_ampcont = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_ampcont',"10.0")))
 			hbl_oac.addWidget(self.ctf_ampcont)
 
 			vbl.addLayout(hbl_oac)
 
 			# cter kboot
-			hbl_kboot = QtGui.QHBoxLayout()
-			kboot_label = QtGui.QLabel("kboot:")
+			hbl_kboot = QtWidgets.QHBoxLayout()
+			kboot_label = QtWidgets.QLabel("kboot:")
 			hbl_kboot.addWidget(kboot_label)
 
-			self.ctf_kboot = QtGui.QLineEdit(str(gbdb.setdefault('ctf_kboot',"16")))
+			self.ctf_kboot = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_kboot',"16")))
 			hbl_kboot.addWidget(self.ctf_kboot)
 			vbl.addLayout(hbl_kboot)
 
-			hbl_estdef = QtGui.QHBoxLayout()
-			hbl_fed = QtGui.QHBoxLayout()
+			hbl_estdef = QtWidgets.QHBoxLayout()
+			hbl_fed = QtWidgets.QHBoxLayout()
 
-			fstart_label = QtGui.QLabel("F_start:")
+			fstart_label = QtWidgets.QLabel("F_start:")
 			hbl_fed.addWidget(fstart_label)
-			self.ctf_f_start = QtGui.QLineEdit(str(gbdb.setdefault('ctf_fstart',"0.020")))
+			self.ctf_f_start = QtWidgets.QLineEdit(str(gbdb.setdefault('ctf_fstart',"0.020")))
 			hbl_fed.addWidget(self.ctf_f_start)
 
-			estimated_defocus_label = QtGui.QLabel("Estimated defocus:")
+			estimated_defocus_label = QtWidgets.QLabel("Estimated defocus:")
 			hbl_estdef.addWidget(estimated_defocus_label)
-			self.estdef = QtGui.QLineEdit('')
+			self.estdef = QtWidgets.QLineEdit('')
 			hbl_estdef.addWidget(self.estdef)
 			vbl.addLayout(hbl_estdef)
 
-			hbl_estdeferr = QtGui.QHBoxLayout()
-			deferr_label = QtGui.QLabel("Estimated defocus error:")
+			hbl_estdeferr = QtWidgets.QHBoxLayout()
+			deferr_label = QtWidgets.QLabel("Estimated defocus error:")
 			hbl_estdeferr.addWidget(deferr_label)
-			self.deferr = QtGui.QLineEdit('')
+			self.deferr = QtWidgets.QLineEdit('')
 			hbl_estdeferr.addWidget(self.deferr)
 			vbl.addLayout(hbl_estdeferr)
 
-			hbl_astamp = QtGui.QHBoxLayout()
-			astig_amp_label = QtGui.QLabel("Estimated astigmatism \namplitude:")
+			hbl_astamp = QtWidgets.QHBoxLayout()
+			astig_amp_label = QtWidgets.QLabel("Estimated astigmatism \namplitude:")
 			hbl_astamp.addWidget(astig_amp_label)
-			self.astamp = QtGui.QLineEdit('')
+			self.astamp = QtWidgets.QLineEdit('')
 			hbl_astamp.addWidget(self.astamp)
 			vbl.addLayout(hbl_astamp)
 
-			hbl_astamperr = QtGui.QHBoxLayout()
-			astamperr_label = QtGui.QLabel("Estimated astigmatism \namplitude error:")
+			hbl_astamperr = QtWidgets.QHBoxLayout()
+			astamperr_label = QtWidgets.QLabel("Estimated astigmatism \namplitude error:")
 			hbl_astamperr.addWidget(astamperr_label)
-			self.astamperr = QtGui.QLineEdit('')
+			self.astamperr = QtWidgets.QLineEdit('')
 			hbl_astamperr.addWidget(self.astamperr)
 			vbl.addLayout(hbl_astamperr)
 
-			hbl_astagl = QtGui.QHBoxLayout()
-			astig_angle_label = QtGui.QLabel("Estimated astigmatism \nangle")
+			hbl_astagl = QtWidgets.QHBoxLayout()
+			astig_angle_label = QtWidgets.QLabel("Estimated astigmatism \nangle")
 			hbl_astagl.addWidget(astig_angle_label)
-			self.astagl = QtGui.QLineEdit('')
+			self.astagl = QtWidgets.QLineEdit('')
 			hbl_astagl.addWidget(self.astagl)
 			vbl.addLayout(hbl_astagl)
 
-			hbl_astaglerr = QtGui.QHBoxLayout()
-			astaglerr_label = QtGui.QLabel("Estimated astigmatism \nangle error:")
+			hbl_astaglerr = QtWidgets.QHBoxLayout()
+			astaglerr_label = QtWidgets.QLabel("Estimated astigmatism \nangle error:")
 			hbl_astaglerr.addWidget(astaglerr_label)
-			self.astaglerr = QtGui.QLineEdit('')
+			self.astaglerr = QtWidgets.QLineEdit('')
 			hbl_astaglerr.addWidget(self.astaglerr)
 			vbl.addLayout(hbl_astaglerr)
 
-			hbl_ctf_cter = QtGui.QHBoxLayout()
-			self.estimate_ctf_cter =QtGui.QPushButton("Estimate CTF using CTER")
+			hbl_ctf_cter = QtWidgets.QHBoxLayout()
+			self.estimate_ctf_cter =QtWidgets.QPushButton("Estimate CTF using CTER")
 			hbl_ctf_cter.addWidget(self.estimate_ctf_cter)
 			vbl.addLayout(hbl_ctf_cter)
 
@@ -2219,27 +2219,27 @@
 			#vbl.addLayout(hbl_ctf)
 
 
-			QtCore.QObject.connect(self.pixel_input_edit,QtCore.SIGNAL("editingFinished()"),self.new_pixel_input)
-			QtCore.QObject.connect(self.pixel_output_edit,QtCore.SIGNAL("editingFinished()"),self.new_pixel_output)
-			QtCore.QObject.connect(self.autobox, QtCore.SIGNAL("clicked(bool)"), self.auto_box_clicked)
-			QtCore.QObject.connect(self.clear, QtCore.SIGNAL("clicked(bool)"), self.clear_clicked)
-			QtCore.QObject.connect(self.invert_contrast_chk,QtCore.SIGNAL("clicked(bool)"),self.invert_contrast_checked)
-			QtCore.QObject.connect(self.use_variance_chk,QtCore.SIGNAL("clicked(bool)"),self.use_variance_checked)
-			QtCore.QObject.connect(self.gauss_width_slider, QtCore.SIGNAL("valueChanged(int)"), self.gauss_width_changed)
-			QtCore.QObject.connect(self.gauss_width, QtCore.SIGNAL("editingFinished()"), self.gauss_width_edited)
-			QtCore.QObject.connect(self.thr_low_edit,QtCore.SIGNAL("editingFinished()"),self.new_thr_low)
-			QtCore.QObject.connect(self.thr_hi_edit,QtCore.SIGNAL("editingFinished()"),self.new_thr_hi)
+			self.pixel_input_edit.editingFinished.connect(self.new_pixel_input)
+			self.pixel_output_edit.editingFinished.connect(self.new_pixel_output)
+			self.autobox.clicked[bool].connect(self.auto_box_clicked)
+			self.clear.clicked[bool].connect(self.clear_clicked)
+			self.invert_contrast_chk.clicked[bool].connect(self.invert_contrast_checked)
+			self.use_variance_chk.clicked[bool].connect(self.use_variance_checked)
+			self.gauss_width_slider.valueChanged[int].connect(self.gauss_width_changed)
+			self.gauss_width.editingFinished.connect(self.gauss_width_edited)
+			self.thr_low_edit.editingFinished.connect(self.new_thr_low)
+			self.thr_hi_edit.editingFinished.connect(self.new_thr_hi)
 #			QtCore.QObject.connect(self.estimate_ctf,QtCore.SIGNAL("clicked(bool)"), self.calc_ctf)
 #			QtCore.QObject.connect(self.inspect_button,QtCore.SIGNAL("clicked(bool)"), self.inspect_ctf)
-			QtCore.QObject.connect(self.ctf_window_size,QtCore.SIGNAL("editingFinished()"),self.new_ctf_window)
-			QtCore.QObject.connect(self.ctf_cs,QtCore.SIGNAL("editingFinished()"),self.new_ctf_cs)
-			QtCore.QObject.connect(self.ctf_edge_size,QtCore.SIGNAL("editingFinished()"),self.new_ctf_edge)
-			QtCore.QObject.connect(self.ctf_volt,QtCore.SIGNAL("editingFinished()"),self.new_ctf_volt)
-			QtCore.QObject.connect(self.ctf_overlap_size,QtCore.SIGNAL("editingFinished()"),self.new_ctf_overlap_size)
-			QtCore.QObject.connect(self.ctf_ampcont,QtCore.SIGNAL("editingFinished()"),self.new_ctf_ampcont)
-			QtCore.QObject.connect(self.ctf_kboot,QtCore.SIGNAL("editingFinished()"),self.new_ctf_kboot)
+			self.ctf_window_size.editingFinished.connect(self.new_ctf_window)
+			self.ctf_cs.editingFinished.connect(self.new_ctf_cs)
+			self.ctf_edge_size.editingFinished.connect(self.new_ctf_edge)
+			self.ctf_volt.editingFinished.connect(self.new_ctf_volt)
+			self.ctf_overlap_size.editingFinished.connect(self.new_ctf_overlap_size)
+			self.ctf_ampcont.editingFinished.connect(self.new_ctf_ampcont)
+			self.ctf_kboot.editingFinished.connect(self.new_ctf_kboot)
 
-			QtCore.QObject.connect(self.estimate_ctf_cter,QtCore.SIGNAL("clicked(bool)"), self.calc_ctf_cter)
+			self.estimate_ctf_cter.clicked[bool].connect(self.calc_ctf_cter)
 
 		return self.widget
 
@@ -2722,7 +2722,7 @@
 		from sparx import filt_gaussl
 		print("Gauss method............start auto boxing")
 		if self.gui_mode:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.BusyCursor)
 
 		# user pawelautoboxer (gauss method) to compute soln
@@ -2792,7 +2792,7 @@
 		self.target().add_boxes(boxes, True)
 
 		if self.gui_mode:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.ArrowCursor)
 			self.target().set_status_message("Autoboxed %d Particles" %len(boxes), 10000)
 		else:
@@ -3087,7 +3087,7 @@
 		return self.panel_object.get_widget()
 
 	def icon(self):
-		from PyQt4 import QtGui
+		from PyQt5 import QtGui, QtWidgets
 		return QtGui.QIcon(get_image_directory() + "swarm_icon.png")
 
 	def get_2d_window(self): return self.target().get_2d_window()
@@ -3113,7 +3113,7 @@
 
 	def mouse_drag(self,event) :
 		m=self.get_2d_window().scr_to_img((event.x(),event.y()))
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if event.modifiers()&Qt.ShiftModifier:
 			box_num = self.target().detect_box_collision(m)
 			box = self.target().get_box(box_num)
@@ -3184,10 +3184,10 @@
 		GaussBoxer.boxes_erased(self,list_of_boxes,self.target().current_file())
 
 # this is class CTFInspector from sxboxer.py with very slight modifications
-class CTFInspectorWidget(QtGui.QWidget):
+class CTFInspectorWidget(QtWidgets.QWidget):
 
 	def __init__(self,parent,data=None) :
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		# we need to keep track of our parent to signal when we are gone again....
 		self.parent = weakref.ref(parent) # this needs to be a weakref ask David Woolford for details, but otherwise just call self.parent() in place of self.parent
 		self.setGeometry(300, 300, 250, 150)
@@ -3217,12 +3217,12 @@
 		return True
 
 	def update(self):
-		QtGui.QWidget.update(self) #self.paintEvent(None)
+		QtWidgets.QWidget.update(self) #self.paintEvent(None)
 		# print "update..."
 
 	def paintEvent(self,event):
-		from PyQt4 import QtCore
-		from PyQt4.QtCore import Qt
+		from PyQt5 import QtCore, QtWidgets
+		from PyQt5.QtCore import Qt
 		if (self.i_start is None and (i_start_initial > 0)):
 			self.i_start = i_start_initial
 		if (self.i_stop is None and (i_stop_initial > 0)):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2cmpxplor.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2cmpxplor.py	2017-10-21 17:15:05.000000000 -0500
@@ -36,7 +36,7 @@
 from emimage3dsym import EM3DSymModel,EMSymInspector
 import os,sys
 from EMAN2 import *
-from PyQt4 import QtGui,QtCore
+from PyQt5 import QtCore, QtGui, QtWidgets
 from emimagemx import EMImageMXModule
 
 	
@@ -122,8 +122,8 @@
 		if self.ptcl_display==None : 
 			self.ptcl_display = EMImageMXModule()
 			self.ptcl_display.set_mouse_mode("App")
-			QtCore.QObject.connect(self.ptcl_display,QtCore.SIGNAL("mx_image_selected"),self.ptcl_selected)		
-			QtCore.QObject.connect(self.ptcl_display,QtCore.SIGNAL("module_closed"),self.on_mx_display_closed)
+			self.ptcl_display.mx_image_selected.connect(self.ptcl_selected)
+			self.ptcl_display.module_closed.connect(self.on_mx_display_closed)
 		self.ptcl_display.set_data(self.ptcl_data)
 
 		# deal with projections
@@ -153,7 +153,7 @@
 		resize_necessary = False
 		if self.mx_display == None:
 			self.mx_display = EMImageMXModule()
-			QtCore.QObject.connect(self.mx_display,QtCore.SIGNAL("module_closed"),self.on_mx_display_closed)
+			self.mx_display.module_closed.connect(self.on_mx_display_closed)
 			resize_necessary = True
 
 		#if self.frc_display == None:
@@ -243,7 +243,7 @@
 		if self.current_particle<0 : return
 		ptcl=self.ptcl_data[self.current_particle]
 		
-		progress = QtGui.QProgressDialog("Computing alignments", "Abort", 0, len(self.proj_data),None)
+		progress = QtWidgets.QProgressDialog("Computing alignments", "Abort", 0, len(self.proj_data),None)
 		progress.show()
 		# redetermines particle alignments
 		# then we can quickly compute a series of different similarity values
@@ -259,7 +259,7 @@
 					ali=p.align(ropt[0],ptcl,ropt[1],rcmp[0],rcmp[1])
 			except:
 				print(traceback.print_exc())
-				QtGui.QMessageBox.warning(None,"Error","Problem with alignment parameters")
+				QtWidgets.QMessageBox.warning(None,"Error","Problem with alignment parameters")
 				progress.close()
 				return
 			p["ptcl.align2d"]=ali["xform.align2d"]
@@ -278,7 +278,7 @@
 	def update_cmp(self):
 		cmpopt=parsemodopt(self.simcmp)
 		
-		progress = QtGui.QProgressDialog("Computing similarities", "Abort", 0, len(self.proj_data),None)
+		progress = QtWidgets.QProgressDialog("Computing similarities", "Abort", 0, len(self.proj_data),None)
 		progress.show()
 		ptcl=self.ptcl_data[self.current_particle]
 		for i,p in enumerate(self.proj_data):
@@ -287,11 +287,11 @@
 			try : p["cmp"]=-ptcl.cmp(cmpopt[0],ali,cmpopt[1])
 			except:
 				print(traceback.print_exc())
-				QtGui.QMessageBox.warning(None,"Error","Invalid similarity metric string, or other comparison error")
+				QtWidgets.QMessageBox.warning(None,"Error","Invalid similarity metric string, or other comparison error")
 				progress.close()
 				return
 			progress.setValue(i)
-			QtGui.qApp.processEvents()
+			QtWidgets.QApplication.processEvents()
 			
 		progress.close()
 		self.set_emdata_list_as_data(self.proj_data,"cmp")
@@ -307,33 +307,33 @@
 #		print "simmx xplor died"
 		
 	def add_cmp_options(self):
-		self.cmp_tab= QtGui.QWidget()
-		gridl = QtGui.QGridLayout(self.cmp_tab)
+		self.cmp_tab= QtWidgets.QWidget()
+		gridl = QtWidgets.QGridLayout(self.cmp_tab)
 		
-		self.cmp_shrinkl=QtGui.QLabel("Shrink:")
+		self.cmp_shrinkl=QtWidgets.QLabel("Shrink:")
 		gridl.addWidget(self.cmp_shrinkl,0,1)
 		
-		self.cmp_shrink=QtGui.QSpinBox()
+		self.cmp_shrink=QtWidgets.QSpinBox()
 		self.cmp_shrink.setRange(1,5)
 		self.cmp_shrink.setValue(1)
 		gridl.addWidget(self.cmp_shrink,0,2)
 		
-		self.cmp_ali=QtGui.QLineEdit("rotate_translate_flip")
+		self.cmp_ali=QtWidgets.QLineEdit("rotate_translate_flip")
 		gridl.addWidget(self.cmp_ali,1,0,1,2)
 		
-		self.cmp_alicmp=QtGui.QLineEdit("dot")
+		self.cmp_alicmp=QtWidgets.QLineEdit("dot")
 		gridl.addWidget(self.cmp_alicmp,1,2,1,2)
 		
-		self.cmp_refine=QtGui.QLineEdit("refine")
+		self.cmp_refine=QtWidgets.QLineEdit("refine")
 		gridl.addWidget(self.cmp_refine,2,0,1,2)
 		
-		self.cmp_refinecmp=QtGui.QLineEdit("dot:normalize=1")
+		self.cmp_refinecmp=QtWidgets.QLineEdit("dot:normalize=1")
 		gridl.addWidget(self.cmp_refinecmp,2,2,1,2)
 		
-		self.cmp_realignb=QtGui.QPushButton("Set Alignment")
+		self.cmp_realignb=QtWidgets.QPushButton("Set Alignment")
 		gridl.addWidget(self.cmp_realignb,3,2)
 		
-		self.cmp_combo=QtGui.QComboBox()
+		self.cmp_combo=QtWidgets.QComboBox()
 		self.cmp_combo.setEditable(True)
 		self.cmp_combo.setInsertPolicy(self.cmp_combo.InsertAlphabetically)
 		self.cmp_combo.addItem("dot:normalize=1")
@@ -352,8 +352,8 @@
 		self.tabwidget.insertTab(0,self.cmp_tab,"Cmp")
 		self.tabwidget.setCurrentIndex(0)
 		
-		self.connect(self.cmp_combo, QtCore.SIGNAL("currentIndexChanged(QString)"), self.cmp_changed)
-		self.connect(self.cmp_realignb, QtCore.SIGNAL("clicked(bool)"), self.cmp_realign)
+		self.cmp_combo.currentIndexChanged['QString'].connect(self.cmp_changed)
+		self.cmp_realignb.clicked[bool].connect(self.cmp_realign)
 #		self.connect(self.cmp_shrink, QtCore.SIGNAL("valueChanged(int)"), self.ali_changed)
 
 		
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2ctf.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2ctf.py	2017-10-21 17:15:05.000000000 -0500
@@ -2234,13 +2234,13 @@
 #	return ret
 
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
 	from OpenGL import GL,GLUT
 	from emshape import *
 	from valslider import ValSlider,CheckBox
 except:
-	print("Warning: PyQt4 must be installed to use the --gui option")
+	print("Warning: PyQt5 must be installed to use the --gui option")
 	class dummy:
 		pass
 	class QWidget:
@@ -2259,20 +2259,23 @@
 	if x==0 : return 1.0
 	return x
 
-class MyListWidget(QtGui.QListWidget):
+class MyListWidget(QtWidgets.QListWidget):
 	"""Exactly like a normal list widget but intercepts a few keyboard events"""
+	keypress = QtCore.pyqtSignal()
 
 	def keyPressEvent(self,event):
 
 		if event.key() in (Qt.Key_Up,Qt.Key_Down) :
-			QtGui.QListWidget.keyPressEvent(self,event)
+			QtWidgets.QListWidget.keyPressEvent(self,event)
 			return
 
-		self.emit(QtCore.SIGNAL("keypress"),event)
+		self.keypress.emit(event)
 #		event.key()==Qt.Key_I
 
 
-class GUIctf(QtGui.QWidget):
+class GUIctf(QtWidgets.QWidget):
+	module_closed = QtCore.pyqtSignal()
+
 	def __init__(self,application,data,autohp=True,nosmooth=False,highdensity=False):
 		"""Implements the CTF fitting dialog using various EMImage and EMPlot2D widgets
 		'data' is a list of (filename,EMAN2CTF,im_1d,bg_1d,im_2d,bg_2d,qual,bg_1d_low)
@@ -2293,7 +2296,7 @@
 		self.nosmooth=nosmooth
 		self.highdensity=highdensity
 
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "ctf.png"))
 
 		self.data=data
@@ -2306,29 +2309,29 @@
 		self.guirealim=EMImage2DWidget(application=self.app())	# This will show the original particle images
 		self.flipim=None
 
-		self.guirealim.connect(self.guirealim,QtCore.SIGNAL("keypress"),self.realimgkey)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mousedown"),self.imgmousedown)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mousedrag"),self.imgmousedrag)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mouseup")  ,self.imgmouseup)
-		self.guiplot.connect(self.guiplot,QtCore.SIGNAL("mousedown"),self.plotmousedown)
+		self.guirealim.keypress.connect(self.realimgkey)
+		self.guiim.mousedown.connect(self.imgmousedown)
+		self.guiim.mousedrag.connect(self.imgmousedrag)
+		self.guiim.mouseup.connect(self.imgmouseup)
+		self.guiplot.mousedown.connect(self.plotmousedown)
 
 
 
 		self.guiim.mmode="app"
 
 		# This object is itself a widget we need to set up
-		self.hbl = QtGui.QHBoxLayout(self)
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout(self)
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 
 		# plot list and plot mode combobox
-		self.vbl2 = QtGui.QVBoxLayout()
+		self.vbl2 = QtWidgets.QVBoxLayout()
 		self.setlist=MyListWidget(self)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.vbl2.addWidget(self.setlist)
 
-		self.splotmode=QtGui.QComboBox(self)
+		self.splotmode=QtWidgets.QComboBox(self)
 		self.splotmode.addItem("Bgsub & fit")
 		self.splotmode.addItem("Ptcl & BG power")
 		self.splotmode.addItem("SNR")
@@ -2344,8 +2347,8 @@
 		self.hbl.addLayout(self.vbl2)
 
 		# ValSliders for CTF parameters
-		self.vbl = QtGui.QVBoxLayout()
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout()
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		self.hbl.addLayout(self.vbl)
@@ -2353,7 +2356,7 @@
 		#self.samp = ValSlider(self,(0,5.0),"Amp:",0)
 		#self.vbl.addWidget(self.samp)
 
-		self.imginfo=QtGui.QLabel("Info",self)
+		self.imginfo=QtWidgets.QLabel("Info",self)
 		self.vbl.addWidget(self.imginfo)
 
 		self.sdefocus=ValSlider(self,(0,5),"Defocus:",0,90)
@@ -2388,42 +2391,42 @@
 		self.vbl.addWidget(self.squality)
 
 
-		self.hbl_buttons = QtGui.QHBoxLayout()
-		self.saveparms = QtGui.QPushButton("Save parms")
-		self.recallparms = QtGui.QPushButton("Recall")
-		self.refit = QtGui.QPushButton("Refit")
+		self.hbl_buttons = QtWidgets.QHBoxLayout()
+		self.saveparms = QtWidgets.QPushButton("Save parms")
+		self.recallparms = QtWidgets.QPushButton("Recall")
+		self.refit = QtWidgets.QPushButton("Refit")
 		self.show2dfit = CheckBox(label="Show 2D Sim:",value=False)
 		self.showzerorings = CheckBox(label="Show Zeroes:",value=False)
-		self.output = QtGui.QPushButton("Output")
+		self.output = QtWidgets.QPushButton("Output")
 		self.hbl_buttons.addWidget(self.refit)
 		self.hbl_buttons.addWidget(self.saveparms)
 		self.hbl_buttons.addWidget(self.recallparms)
-		self.hbl_buttons2 = QtGui.QHBoxLayout()
+		self.hbl_buttons2 = QtWidgets.QHBoxLayout()
 		self.hbl_buttons2.addWidget(self.show2dfit)
 		self.hbl_buttons2.addWidget(self.showzerorings)
 		self.hbl_buttons2.addWidget(self.output)
 		self.vbl.addLayout(self.hbl_buttons)
 		self.vbl.addLayout(self.hbl_buttons2)
 
-		QtCore.QObject.connect(self.sdefocus, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sbfactor, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sdfdiff, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sdfang, QtCore.SIGNAL("valueChanged"), self.newCTF)
+		self.sdefocus.valueChanged.connect(self.newCTF)
+		self.sbfactor.valueChanged.connect(self.newCTF)
+		self.sdfdiff.valueChanged.connect(self.newCTF)
+		self.sdfang.valueChanged.connect(self.newCTF)
 #		QtCore.QObject.connect(self.sapix, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sampcont, QtCore.SIGNAL("valueChanged"), self.newCTFac)
-		QtCore.QObject.connect(self.sphase, QtCore.SIGNAL("valueChanged"), self.newCTFpha)
-		QtCore.QObject.connect(self.svoltage, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.scs, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.squality, QtCore.SIGNAL("valueChanged"), self.newQual)
-		QtCore.QObject.connect(self.showzerorings, QtCore.SIGNAL("valueChanged"), self.update_plot)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("keypress"),self.listkey)
-		QtCore.QObject.connect(self.splotmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.newPlotMode)
-
-		QtCore.QObject.connect(self.saveparms,QtCore.SIGNAL("clicked(bool)"),self.on_save_params)
-		QtCore.QObject.connect(self.recallparms,QtCore.SIGNAL("clicked(bool)"),self.on_recall_params)
-		QtCore.QObject.connect(self.refit,QtCore.SIGNAL("clicked(bool)"),self.on_refit)
-		QtCore.QObject.connect(self.output,QtCore.SIGNAL("clicked(bool)"),self.on_output)
+		self.sampcont.valueChanged.connect(self.newCTFac)
+		self.sphase.valueChanged.connect(self.newCTFpha)
+		self.svoltage.valueChanged.connect(self.newCTF)
+		self.scs.valueChanged.connect(self.newCTF)
+		self.squality.valueChanged.connect(self.newQual)
+		self.showzerorings.valueChanged.connect(self.update_plot)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.keypress.connect(self.listkey)
+		self.splotmode.currentIndexChanged[int].connect(self.newPlotMode)
+
+		self.saveparms.clicked[bool].connect(self.on_save_params)
+		self.recallparms.clicked[bool].connect(self.on_recall_params)
+		self.refit.clicked[bool].connect(self.on_refit)
+		self.output.clicked[bool].connect(self.on_output)
 
 		self.neednewps=False
 		self.update_data()
@@ -2569,7 +2572,7 @@
 
 		event.accept()
 		self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+		self.module_closed.emit()
 
 	def newData(self,data):
 		self.data=data
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2ctfsim.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2ctfsim.py	2017-10-21 17:15:06.000000000 -0500
@@ -76,28 +76,31 @@
 
 
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
 	from emshape import *
 	from valslider import ValSlider
 except:
-	print("Error: PyQt4 must be installed")
+	print("Error: PyQt5 must be installed")
 	sys.exit(1)
 
-class MyListWidget(QtGui.QListWidget):
+class MyListWidget(QtWidgets.QListWidget):
 	"""Exactly like a normal list widget but intercepts a few keyboard events"""
+	keypress = QtCore.pyqtSignal()
 
 	def keyPressEvent(self,event):
 
 		if event.key() in (Qt.Key_Up,Qt.Key_Down) :
-			QtGui.QListWidget.keyPressEvent(self,event)
+			QtWidgets.QListWidget.keyPressEvent(self,event)
 			return
 
-		self.emit(QtCore.SIGNAL("keypress"),event)
+		self.keypress.emit(event)
 #		event.key()==Qt.Key_I
 
 
-class GUIctfsim(QtGui.QWidget):
+class GUIctfsim(QtWidgets.QWidget):
+	module_closed = QtCore.pyqtSignal()
+
 	def __init__(self,application,apix=1.0,voltage=300.0,cs=4.1,ac=10.0,samples=256,apply=None):
 		"""CTF simulation dialog
 		"""
@@ -130,7 +133,7 @@
 			print("A/pix reset to ",self.df_apix)
 			self.applyim=EMImage2DWidget(application=self.app())
 
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "ctf.png"))
 
 		self.data=[]
@@ -143,26 +146,26 @@
 #		self.guirealim=EMImage2DWidget(application=self.app())	# This will show the original particle images
 
 #		self.guirealim.connect(self.guirealim,QtCore.SIGNAL("keypress"),self.realimgkey)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mousedown"),self.imgmousedown)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mousedrag"),self.imgmousedrag)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mouseup")  ,self.imgmouseup)
-		self.guiplot.connect(self.guiplot,QtCore.SIGNAL("mousedown"),self.plotmousedown)
+		self.guiim.mousedown.connect(self.imgmousedown)
+		self.guiim.mousedrag.connect(self.imgmousedrag)
+		self.guiim.mouseup.connect(self.imgmouseup)
+		self.guiplot.mousedown.connect(self.plotmousedown)
 
 		self.guiim.mmode="app"
 
 		# This object is itself a widget we need to set up
-		self.hbl = QtGui.QHBoxLayout(self)
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout(self)
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 
 		# plot list and plot mode combobox
-		self.vbl2 = QtGui.QVBoxLayout()
+		self.vbl2 = QtWidgets.QVBoxLayout()
 		self.setlist=MyListWidget(self)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.vbl2.addWidget(self.setlist)
 
-		self.splotmode=QtGui.QComboBox(self)
+		self.splotmode=QtWidgets.QComboBox(self)
 		self.splotmode.addItem("Amplitude")
 		self.splotmode.addItem("Intensity")
 		self.splotmode.addItem("Int w sum")
@@ -171,8 +174,8 @@
 		self.hbl.addLayout(self.vbl2)
 
 		# ValSliders for CTF parameters
-		self.vbl = QtGui.QVBoxLayout()
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout()
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		self.hbl.addLayout(self.vbl)
@@ -180,7 +183,7 @@
 		#self.samp = ValSlider(self,(0,5.0),"Amp:",0)
 		#self.vbl.addWidget(self.samp)
 
-		self.imginfo=QtGui.QLabel("Info",self)
+		self.imginfo=QtWidgets.QLabel("Info",self)
 		self.vbl.addWidget(self.imginfo)
 
 		self.sdefocus=ValSlider(self,(0,5),"Defocus:",0,90)
@@ -215,28 +218,28 @@
 		self.vbl.addWidget(self.ssamples)
 
 
-		self.hbl_buttons = QtGui.QHBoxLayout()
-		self.newbut = QtGui.QPushButton("New")
+		self.hbl_buttons = QtWidgets.QHBoxLayout()
+		self.newbut = QtWidgets.QPushButton("New")
 		self.hbl_buttons.addWidget(self.newbut)
 		self.vbl.addLayout(self.hbl_buttons)
 
 		self.on_new_but()
 
-		QtCore.QObject.connect(self.sdefocus, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sbfactor, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sdfdiff, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sdfang, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sapix, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sampcont, QtCore.SIGNAL("valueChanged"), self.newCTFac)
-		QtCore.QObject.connect(self.sphase, QtCore.SIGNAL("valueChanged"), self.newCTFpha)
-		QtCore.QObject.connect(self.svoltage, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.scs, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.ssamples, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("keypress"),self.listkey)
-		QtCore.QObject.connect(self.splotmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.newPlotMode)
+		self.sdefocus.valueChanged.connect(self.newCTF)
+		self.sbfactor.valueChanged.connect(self.newCTF)
+		self.sdfdiff.valueChanged.connect(self.newCTF)
+		self.sdfang.valueChanged.connect(self.newCTF)
+		self.sapix.valueChanged.connect(self.newCTF)
+		self.sampcont.valueChanged.connect(self.newCTFac)
+		self.sphase.valueChanged.connect(self.newCTFpha)
+		self.svoltage.valueChanged.connect(self.newCTF)
+		self.scs.valueChanged.connect(self.newCTF)
+		self.ssamples.valueChanged.connect(self.newCTF)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.keypress.connect(self.listkey)
+		self.splotmode.currentIndexChanged[int].connect(self.newPlotMode)
 
-		QtCore.QObject.connect(self.newbut,QtCore.SIGNAL("clicked(bool)"),self.on_new_but)
+		self.newbut.clicked[bool].connect(self.on_new_but)
 
 
 		self.resize(720,380) # figured these values out by printing the width and height in resize event
@@ -308,7 +311,7 @@
 
 		event.accept()
 		self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+		self.module_closed.emit()
 
 	def update_data(self):
 		"""This will make sure the various widgets properly show the current data sets"""
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2display.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2display.py	2017-10-21 17:15:06.000000000 -0500
@@ -42,8 +42,8 @@
 import sys
 
 from OpenGL import GL, GLU, GLUT
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtOpenGL
+from PyQt5.QtCore import Qt
 
 def main():
 	progname = os.path.basename(sys.argv[0])
@@ -107,7 +107,7 @@
 		imgs=EMData.read_images(args[0])
 		display(imgs,app,args[0])
 
-		QtCore.QObject.connect(win[0].child,QtCore.SIGNAL("mousedown"),lambda a,b:selectclass(options.classes[0],options.classes[1],a,b))
+		win[0].child.mousedown.connect(lambda a,b:selectclass(options.classes[0],options.classes[1],a,b))
 		try:
 			out=open("selected.lst","w")
 			out.write("#LST\n")
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2eulerxplor.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2eulerxplor.py	2017-10-21 17:15:06.000000000 -0500
@@ -37,8 +37,8 @@
 from OpenGL import GL,GLU,GLUT
 from OpenGL.GL import *
 from OpenGL.GLU import *
-from PyQt4 import QtGui,QtCore
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emanimationutil import OrientationListAnimation,Animator
 from emapplication import EMApp, get_application, error
 from emglobjects import EM3DModel
@@ -112,6 +112,7 @@
 	return d+"/"+a+b
 
 class EMEulerExplorer(EM3DSymModel,Animator):
+	point_selected = QtCore.pyqtSignal()
 
 	def mousePressEvent(self,event):
 		if self.events_mode == "inspect":
@@ -127,7 +128,7 @@
 				self.updateGL() # there needs to be a clear or something  in order for the picking to work. This is  bit of hack but our rendering function doesn't take long anyhow
 				hit = self.get_hit(event)
 				if hit == self.current_hit:
-					self.emit(QtCore.SIGNAL("point_selected"),self.current_hit,event)
+					self.point_selected.emit(self.current_hit, event)
 			else:
 				#EM3DSymModel.mouseReleaseEvent(self,event)
 				EM3DModel.mouseReleaseEvent(self, event) #behavior in EM3DSymModel is not what we want (needed in sibling classes?)
@@ -248,6 +249,7 @@
 		self.class_idx = None # This is the idx of the current class being studied in the interface
 
 		self.previous_len = -1 # To keep track of the number of class averages that were previously viewable. This helps to make sure we can switch to the same class average in the context of a different refinement iteration
+		module_closed = QtCore.pyqtSignal()
 		self.mirror_eulers = False
 		if sparse_mode:
 			self.mirror_eulers = True # If True the drawn Eulers are are also rendered on the opposite side of the sphere - see EM3DSymModel.make_sym_dl_lis
@@ -276,7 +278,7 @@
 		self.init_lock = False
 		self.force_update=True # Force a display udpdate in EMImage3DSymModule
 
-		QtCore.QObject.connect(self, QtCore.SIGNAL("point_selected"), self.au_point_selected)
+		self.point_selected.connect(self.au_point_selected)
 
 	def __del__(self):
 		EM3DSymModel.__del__(self) # this is here for documentation purposes - beware that the del function is important
@@ -369,7 +371,7 @@
 				self.inspector=EMAsymmetricUnitInspector(self,True,True)
 			else:
 				self.inspector=EMAsymmetricUnitInspector(self)
-			QtCore.QObject.connect(self.inspector,QtCore.SIGNAL("au_selected"),self.au_selected)
+			self.inspector.au_selected.connect(self.au_selected)
 		return self.inspector
 
 
@@ -476,13 +478,13 @@
 			first = True
 			self.proj_class_viewer = EMImageMXWidget(data=None,application=get_application())
 #			self.proj_class_viewer = EMImage2DWidget(image=None,application=get_application())
-			QtCore.QObject.connect(self.proj_class_viewer,QtCore.SIGNAL("module_closed"),self.on_mx_view_closed)
+			self.proj_class_viewer.module_closed.connect(self.on_mx_view_closed)
 #			self.proj_class_viewer.set_mouse_mode("App" )
-			QtCore.QObject.connect(self.proj_class_viewer,QtCore.SIGNAL("mx_image_selected"), self.mx_image_selected)
+			self.proj_class_viewer.mx_image_selected.connect(self.mx_image_selected)
 			get_application().show_specific(self.proj_class_viewer)
 
 			self.proj_class_single = EMImage2DWidget(image=None,application=get_application())
-			QtCore.QObject.connect(self.proj_class_single,QtCore.SIGNAL("module_closed"),self.on_mx_view_closed)
+			self.proj_class_single.module_closed.connect(self.on_mx_view_closed)
 #			QtCore.QObject.connect(self.proj_class_single,QtCore.SIGNAL("mx_image_selected"), self.mx_image_selected)
 			get_application().show_specific(self.proj_class_single)
 
@@ -610,8 +612,8 @@
 				first = True
 				self.particle_viewer = EMImageMXWidget(data=None,application=get_application())
 				self.particle_viewer.set_mouse_mode("App" )
-				QtCore.QObject.connect(self.particle_viewer,QtCore.SIGNAL("module_closed"),self.on_particle_mx_view_closed)
-				QtCore.QObject.connect(self.particle_viewer,QtCore.SIGNAL("mx_image_selected"), self.particle_selected)
+				self.particle_viewer.module_closed.connect(self.on_particle_mx_view_closed)
+				self.particle_viewer.mx_image_selected.connect(self.particle_selected)
 				get_application().show_specific(self.particle_viewer)
 
 
@@ -691,7 +693,7 @@
 		if self.proj_class_single !=None: self.proj_class_single.close()
 		if self.particle_viewer != None: self.particle_viewer.close()
 		get_application().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is
+		self.module_closed.emit()
 
 
 def set_included_1(e):
@@ -705,6 +707,8 @@
 
 
 class EMAsymmetricUnitInspector(EMSymInspector):
+	au_selected = QtCore.pyqtSignal()
+
 	def __init__(self,target,enable_trace=False,enable_og=False) :
 		EMSymInspector.__init__(self,target,enable_trace=enable_trace,enable_og=enable_og)
 
@@ -713,28 +717,28 @@
 
 	def add_au_table(self):
 
-		self.au_tab= QtGui.QWidget()
-		self.au_tab.vbl = QtGui.QVBoxLayout(self.au_tab)
+		self.au_tab= QtWidgets.QWidget()
+		self.au_tab.vbl = QtWidgets.QVBoxLayout(self.au_tab)
 
 		self.au_data = self.target().au_data
 		combo_entries = self.au_data.keys()
 		combo_entries.sort()
 		combo_entries.reverse()
-		self.combo = QtGui.QComboBox(self)
+		self.combo = QtWidgets.QComboBox(self)
 		for e in combo_entries:
 			self.combo.addItem(e)
 
-		self.connect(self.combo,QtCore.SIGNAL("currentIndexChanged(QString&)"),self.on_combo_change)
-		self.connect(self.combo,QtCore.SIGNAL("currentIndexChanged(const QString&)"),self.on_combo_change)
+		self.combo.currentIndexChanged['QString'].connect(self.on_combo_change)
+		self.combo.currentIndexChanged['QString'].connect(self.on_combo_change)
 
 		self.au_tab.vbl.addWidget(self.combo)
 		self.refine_dir = combo_entries[0]
 
-		self.list_widget = QtGui.QListWidget(None)
+		self.list_widget = QtWidgets.QListWidget(None)
 
-		self.list_widget.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
+		self.list_widget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
 		self.list_widget.setMouseTracking(True)
-		QtCore.QObject.connect(self.list_widget,QtCore.SIGNAL("itemClicked(QListWidgetItem *)"),self.list_widget_item_clicked)
+		self.list_widget.itemClicked[QListWidgetItem].connect(self.list_widget_item_clicked)
 
 		self.update_classes_list(first_time=True)
 		self.au_tab.vbl.addWidget(self.list_widget)
@@ -757,7 +761,7 @@
 		for i,vals in enumerate(self.au_data[self.refine_dir]):
 			choice = vals[0]
 
-			a = QtGui.QListWidgetItem(str(choice),self.list_widget)
+			a = QtWidgets.QListWidgetItem(str(choice),self.list_widget)
 			if first_time and i == 0:
 				self.list_widget.setItemSelected(a,True)
 			elif len(choice) > 4 and (choice[-4:] == s_text):
@@ -765,10 +769,10 @@
 
 		selected_items = self.list_widget.selectedItems() # need to preserve the selection
 		if len(selected_items) == 1:
-			self.emit(QtCore.SIGNAL("au_selected"),self.refine_dir,str(selected_items[0].text()))
+			self.au_selected.emit(self.refine_dir, str(selected_items[0].text()))
 
 	def list_widget_item_clicked(self,item):
-		self.emit(QtCore.SIGNAL("au_selected"),self.refine_dir,str(item.text()))
+		self.au_selected.emit(self.refine_dir, str(item.text()))
 
 	def on_mouse_mode_clicked(self,bool):
 		for button in self.mouse_mode_buttons:
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2evalimage.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2evalimage.py	2017-10-21 17:15:06.000000000 -0500
@@ -45,13 +45,13 @@
 import traceback
 
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
-	from PyQt4.QtCore import QTimer
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
+	from PyQt5.QtCore import QTimer
 	from emshape import *
 	from valslider import *
 except:
-	print("Warning: PyQt4 must be installed")
+	print("Warning: PyQt5 must be installed")
 	sys.exit(1)
 
 from Simplex import Simplex
@@ -114,7 +114,7 @@
 
 
 
-class GUIEvalImage(QtGui.QWidget):
+class GUIEvalImage(QtWidgets.QWidget):
 	def __init__(self,images,voltage=None,apix=None,cs=None,ac=10.0,box=512,usefoldername=False,constbfactor=-1,fitastig=False):
 		"""Implements the CTF fitting dialog using various EMImage and EMPlot2D widgets
 		'data' is a list of (filename,ctf,im_1d,bg_1d,quality)
@@ -131,7 +131,7 @@
 			print("Cannot import EMAN plot GUI objects (is matplotlib installed?)")
 			sys.exit(1)
 
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "ctf.png"))
 
 		self.fitastig=fitastig
@@ -212,52 +212,52 @@
 		self.wplot.setWindowTitle("e2evalimage - Plot")
 
 
-		self.wimage.connect(self.wimage,QtCore.SIGNAL("mousedown"),self.imgmousedown)
-		self.wimage.connect(self.wimage,QtCore.SIGNAL("mousedrag"),self.imgmousedrag)
-		self.wimage.connect(self.wimage,QtCore.SIGNAL("mouseup")  ,self.imgmouseup)
-		self.wfft.connect(self.wfft,QtCore.SIGNAL("mousedown"),self.fftmousedown)
-		self.wfft.connect(self.wfft,QtCore.SIGNAL("mousedrag"),self.fftmousedrag)
-		self.wfft.connect(self.wfft,QtCore.SIGNAL("mouseup")  ,self.fftmouseup)
-		self.wplot.connect(self.wplot,QtCore.SIGNAL("mousedown"),self.plotmousedown)
+		self.wimage.mousedown.connect(self.imgmousedown)
+		self.wimage.mousedrag.connect(self.imgmousedrag)
+		self.wimage.mouseup.connect(self.imgmouseup)
+		self.wfft.mousedown.connect(self.fftmousedown)
+		self.wfft.mousedrag.connect(self.fftmousedrag)
+		self.wfft.mouseup.connect(self.fftmouseup)
+		self.wplot.mousedown.connect(self.plotmousedown)
 
 		self.wimage.mmode="app"
 		self.wfft.mmode="app"
 
 		# This object is itself a widget we need to set up
-		self.gbl = QtGui.QGridLayout(self)
-		self.gbl.setMargin(8)
+		self.gbl = QtWidgets.QGridLayout(self)
+		self.gbl.setContentsMargins(8, 8, 8, 8)
 		self.gbl.setSpacing(6)
 
 		# plot list and plot mode combobox
 		self.setlist=e2ctf.MyListWidget(self)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		for i in images:
 			self.setlist.addItem(i)
 		self.gbl.addWidget(self.setlist,0,0,10,2)
 
-		self.lcalcmode=QtGui.QLabel("Region:",self)
+		self.lcalcmode=QtWidgets.QLabel("Region:",self)
 		self.gbl.addWidget(self.lcalcmode,10,0)
 
-		self.scalcmode=QtGui.QComboBox(self)
+		self.scalcmode=QtWidgets.QComboBox(self)
 		self.scalcmode.addItem("Single Region")
 		self.scalcmode.addItem("Tiled Boxes")
 		self.scalcmode.setCurrentIndex(1)
 		self.gbl.addWidget(self.scalcmode,10,1)
 
 
-		self.lcalcmode=QtGui.QLabel("2D FFT:",self)
+		self.lcalcmode=QtWidgets.QLabel("2D FFT:",self)
 		self.gbl.addWidget(self.lcalcmode,11,0)
 
-		self.s2dmode=QtGui.QComboBox(self)
+		self.s2dmode=QtWidgets.QComboBox(self)
 		self.s2dmode.addItem("Power Spectrum")
 		self.s2dmode.addItem("Bg Subtracted")
 		self.s2dmode.addItem("Background")
 		self.gbl.addWidget(self.s2dmode,11,1)
 
-		self.lcalcmode=QtGui.QLabel("Annotate:",self)
+		self.lcalcmode=QtWidgets.QLabel("Annotate:",self)
 		self.gbl.addWidget(self.lcalcmode,12,0)
 
-		self.s2danmode=QtGui.QComboBox(self)
+		self.s2danmode=QtWidgets.QComboBox(self)
 		self.s2danmode.addItem("Ctf Zeroes")
 		self.s2danmode.addItem("Resolution Ring")
 		self.s2danmode.addItem("2-D Xtal")
@@ -265,10 +265,10 @@
 		self.gbl.addWidget(self.s2danmode,12,1)
 
 
-		self.lcalcmode=QtGui.QLabel("Plot:",self)
+		self.lcalcmode=QtWidgets.QLabel("Plot:",self)
 		self.gbl.addWidget(self.lcalcmode,13,0)
 
-		self.splotmode=QtGui.QComboBox(self)
+		self.splotmode=QtWidgets.QComboBox(self)
 		self.splotmode.addItem("Bgsub and Fit")
 		self.splotmode.addItem("Fg and Bg")
 		self.splotmode.addItem("Bgsub, 45 deg slices")
@@ -304,7 +304,7 @@
 		self.squality.setIntonly(True)
 		self.gbl.addWidget(self.squality,6,2,1,3)
 
-		self.brefit=QtGui.QPushButton("Refit")
+		self.brefit=QtWidgets.QPushButton("Refit")
 		self.gbl.addWidget(self.brefit,7,2)
 
 		self.cbgadj=CheckBox(None,"CTF BG Adj",1)
@@ -338,13 +338,13 @@
 		# this is just a spacer
 		self.gbl.setColumnStretch(3,2)
 
-		self.bbox=QtGui.QGroupBox("Project")
+		self.bbox=QtWidgets.QGroupBox("Project")
 		self.gbl.addWidget(self.bbox,10,4,4,1)
 
-		self.bvbl=QtGui.QVBoxLayout()
+		self.bvbl=QtWidgets.QVBoxLayout()
 		self.bbox.setLayout(self.bvbl)
 
-		self.bimport=QtGui.QPushButton("Import")
+		self.bimport=QtWidgets.QPushButton("Import")
 		self.bvbl.addWidget(self.bimport)
 
 		self.cinvert=CheckBox(None,"Invert")
@@ -353,27 +353,27 @@
 		self.cxray=CheckBox(None,"X-ray Pixels")
 		self.bvbl.addWidget(self.cxray)
 
-		QtCore.QObject.connect(self.bimport, QtCore.SIGNAL("clicked(bool)"),self.doImport)
-		QtCore.QObject.connect(self.brefit, QtCore.SIGNAL("clicked(bool)"),self.doRefit)
-		QtCore.QObject.connect(self.cbgadj, QtCore.SIGNAL("valueChanged"),self.bgAdj)
-		QtCore.QObject.connect(self.sdefocus, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sbfactor, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sdfdiff, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sdfang, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sapix, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sampcont, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.svoltage, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.scs, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sboxsize, QtCore.SIGNAL("valueChanged"), self.newBox)
+		self.bimport.clicked[bool].connect(self.doImport)
+		self.brefit.clicked[bool].connect(self.doRefit)
+		self.cbgadj.valueChanged.connect(self.bgAdj)
+		self.sdefocus.valueChanged.connect(self.newCTF)
+		self.sbfactor.valueChanged.connect(self.newCTF)
+		self.sdfdiff.valueChanged.connect(self.newCTF)
+		self.sdfang.valueChanged.connect(self.newCTF)
+		self.sapix.valueChanged.connect(self.newCTF)
+		self.sampcont.valueChanged.connect(self.newCTF)
+		self.svoltage.valueChanged.connect(self.newCTF)
+		self.scs.valueChanged.connect(self.newCTF)
+		self.sboxsize.valueChanged.connect(self.newBox)
 #		QtCore.QObject.connect(self.soversamp, QtCore.SIGNAL("valueChanged"), self.newBox)
-		QtCore.QObject.connect(self.sang45, QtCore.SIGNAL("valueChanged"), self.recalc_real)
-		QtCore.QObject.connect(self.squality,QtCore.SIGNAL("valueChanged"),self.newQualityFactor)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("keypress"),self.listkey)
-		QtCore.QObject.connect(self.scalcmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.newCalcMode)
-		QtCore.QObject.connect(self.s2dmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.new2DMode)
-		QtCore.QObject.connect(self.s2danmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.new2DAnMode)
-		QtCore.QObject.connect(self.splotmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.newPlotMode)
+		self.sang45.valueChanged.connect(self.recalc_real)
+		self.squality.valueChanged.connect(self.newQualityFactor)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.keypress.connect(self.listkey)
+		self.scalcmode.currentIndexChanged[int].connect(self.newCalcMode)
+		self.s2dmode.currentIndexChanged[int].connect(self.new2DMode)
+		self.s2danmode.currentIndexChanged[int].connect(self.new2DAnMode)
+		self.splotmode.currentIndexChanged[int].connect(self.newPlotMode)
 
 	   	#QtCore.QObject.connect(self.saveparms,QtCore.SIGNAL("clicked(bool)"),self.on_save_params)
 		#QtCore.QObject.connect(self.recallparms,QtCore.SIGNAL("clicked(bool)"),self.on_recall_params)
@@ -391,7 +391,7 @@
 		self.errors=None		# used to communicate errors back from the reprocessing thread
 
 		self.timer=QTimer()
-		QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.timeOut)
+		self.timer.timeout.connect(self.timeOut)
 		self.timer.start(100)
 
 		self.setWindowTitle("e2evalimage - Control Panel")
@@ -431,7 +431,7 @@
 
 		self.writeCurParm()
 		event.accept()
-		QtGui.qApp.exit(0)
+		QtWidgets.QApplication.exit(0)
 		#app=QtGui.qApp
 		#if self.wimage != None:
 			#app.close_specific(self.wimage)
@@ -618,7 +618,7 @@
 			self.procthread.start()
 
 		if self.errors:
-			QtGui.QMessageBox.warning(None,"Error","The following processors encountered errors during processing of 1 or more images:"+"\n".join(self.errors))
+			QtWidgets.QMessageBox.warning(None,"Error","The following processors encountered errors during processing of 1 or more images:"+"\n".join(self.errors))
 			self.errors=None
 
 	def doRefit(self):
@@ -666,7 +666,7 @@
 		if not os.access("micrographs",os.R_OK) :
 			try : os.mkdir("micrographs")
 			except:
-				QtGui.QMessageBox.warning(self,"Error !","Cannot create micrographs directory")
+				QtWidgets.QMessageBox.warning(self,"Error !","Cannot create micrographs directory")
 				return
 
 		#db=db_open_dict("bdb:micrographs#%s"%item)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2evalparticles.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2evalparticles.py	2017-10-21 17:15:07.000000000 -0500
@@ -36,8 +36,8 @@
 from emimagemx import EMImageMXWidget
 
 import sys
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 #from OpenGL import GL,GLU,GLUT
 from emapplication import EMApp
 import os
@@ -73,60 +73,60 @@
 
 #	E2end(logid)
 
-class EMClassPtclTool(QtGui.QWidget):
+class EMClassPtclTool(QtWidgets.QWidget):
 	"""This class is a tab widget for inspecting particles within class-averages"""
 
 	def __init__(self,extrafiles=None):
-		QtGui.QWidget.__init__(self)
-		self.vbl = QtGui.QVBoxLayout(self)
+		QtWidgets.QWidget.__init__(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 		self.extrafiles=extrafiles
 
 		# A listwidget for selecting which class-average file we're looking at
-		self.wclassfilel=QtGui.QLabel("Class-average File:")
+		self.wclassfilel=QtWidgets.QLabel("Class-average File:")
 		self.vbl.addWidget(self.wclassfilel)
 
-		self.wfilesel=QtGui.QListWidget()
+		self.wfilesel=QtWidgets.QListWidget()
 		self.vbl.addWidget(self.wfilesel)
 		self.vbl.addSpacing(5)
 
 		# A widget containing the current particle filename, editable by the user
 		# If edited it will also impact set generation !
-		self.wptclfilel=QtGui.QLabel("Particle Data File:")
+		self.wptclfilel=QtWidgets.QLabel("Particle Data File:")
 		self.vbl.addWidget(self.wptclfilel)
 
-		self.wptclfile=QtGui.QComboBox(self)
+		self.wptclfile=QtWidgets.QComboBox(self)
 		self.vbl.addWidget(self.wptclfile)
 		self.vbl.addSpacing(5)
 
 		# Selection tools
-		self.wselectg=QtGui.QGroupBox("Class Selection",self)
+		self.wselectg=QtWidgets.QGroupBox("Class Selection",self)
 		self.wselectg.setFlat(False)
 		self.vbl.addWidget(self.wselectg)
 		self.vbl.addSpacing(5)
 
-		self.gbl0=QtGui.QGridLayout(self.wselectg)
+		self.gbl0=QtWidgets.QGridLayout(self.wselectg)
 
-		self.wselallb=QtGui.QPushButton("All")
+		self.wselallb=QtWidgets.QPushButton("All")
 		self.gbl0.addWidget(self.wselallb,0,0)
 
-		self.wselnoneb=QtGui.QPushButton("Clear")
+		self.wselnoneb=QtWidgets.QPushButton("Clear")
 		self.gbl0.addWidget(self.wselnoneb,0,1)
 
-		self.wselrangeb=QtGui.QPushButton("Range")
+		self.wselrangeb=QtWidgets.QPushButton("Range")
 		self.gbl0.addWidget(self.wselrangeb,1,0)
 
-		self.wselinvertb=QtGui.QPushButton("Invert")
+		self.wselinvertb=QtWidgets.QPushButton("Invert")
 		self.gbl0.addWidget(self.wselinvertb,0,2)
 
-		self.wsel3db=QtGui.QPushButton("From 3D")
+		self.wsel3db=QtWidgets.QPushButton("From 3D")
 		self.gbl0.addWidget(self.wsel3db,1,2)
 
-		self.wprocessg=QtGui.QGroupBox("Process results",self)
+		self.wprocessg=QtWidgets.QGroupBox("Process results",self)
 		self.wprocessg.setFlat(False)
 		self.vbl.addWidget(self.wprocessg)
 
-		self.vbl2=QtGui.QVBoxLayout(self.wprocessg)
+		self.vbl2=QtWidgets.QVBoxLayout(self.wprocessg)
 
 		self.wselused=CheckBox(None,"Included Ptcls",1,100)
 		self.vbl2.addWidget(self.wselused)
@@ -135,39 +135,39 @@
 		self.vbl2.addWidget(self.wselunused)
 
 		# Mark particles in selected classes as bad
-		self.wmarkbut=QtGui.QPushButton("Mark as Bad")
+		self.wmarkbut=QtWidgets.QPushButton("Mark as Bad")
 		self.vbl2.addWidget(self.wmarkbut)
 
 		# Mark particles in selected classes as good
-		self.wmarkgoodbut=QtGui.QPushButton("Mark as Good")
+		self.wmarkgoodbut=QtWidgets.QPushButton("Mark as Good")
 		self.vbl2.addWidget(self.wmarkgoodbut)
 
 		# Make a new set from selected classes
-		self.wmakebut=QtGui.QPushButton("Make New Set")
+		self.wmakebut=QtWidgets.QPushButton("Make New Set")
 		self.vbl2.addWidget(self.wmakebut)
 #		self.wmakebut.setEnabled(False)
 
 		# Save list
-		self.wsavebut=QtGui.QPushButton("Save Particle List")
+		self.wsavebut=QtWidgets.QPushButton("Save Particle List")
 		self.vbl2.addWidget(self.wsavebut)
 
 		# Save micrograph dereferenced lists
-		self.wsaveorigbut=QtGui.QPushButton("Save CCD-based List")
+		self.wsaveorigbut=QtWidgets.QPushButton("Save CCD-based List")
 		self.vbl2.addWidget(self.wsaveorigbut)
 
 
-		QtCore.QObject.connect(self.wfilesel,QtCore.SIGNAL("itemSelectionChanged()"),self.fileUpdate)
-		QtCore.QObject.connect(self.wptclfile,QtCore.SIGNAL("currentIndexChanged(int)"),self.ptclChange)
-		QtCore.QObject.connect(self.wselallb,QtCore.SIGNAL("clicked(bool)"),self.selAllClasses)
-		QtCore.QObject.connect(self.wselnoneb,QtCore.SIGNAL("clicked(bool)"),self.selNoClasses)
-		QtCore.QObject.connect(self.wselrangeb,QtCore.SIGNAL("clicked(bool)"),self.selRangeClasses)
-		QtCore.QObject.connect(self.wselinvertb,QtCore.SIGNAL("clicked(bool)"),self.selInvertClasses)
-		QtCore.QObject.connect(self.wsel3db,QtCore.SIGNAL("clicked(bool)"),self.sel3DClasses)
-		QtCore.QObject.connect(self.wmakebut,QtCore.SIGNAL("clicked(bool)"),self.makeNewSet)
-		QtCore.QObject.connect(self.wmarkbut,QtCore.SIGNAL("clicked(bool)"),self.markBadPtcl)
-		QtCore.QObject.connect(self.wmarkgoodbut,QtCore.SIGNAL("clicked(bool)"),self.markGoodPtcl)
-		QtCore.QObject.connect(self.wsavebut,QtCore.SIGNAL("clicked(bool)"),self.savePtclNum)
-		QtCore.QObject.connect(self.wsaveorigbut,QtCore.SIGNAL("clicked(bool)"),self.saveOrigPtclNum)
+		self.wfilesel.itemSelectionChanged.connect(self.fileUpdate)
+		self.wptclfile.currentIndexChanged[int].connect(self.ptclChange)
+		self.wselallb.clicked[bool].connect(self.selAllClasses)
+		self.wselnoneb.clicked[bool].connect(self.selNoClasses)
+		self.wselrangeb.clicked[bool].connect(self.selRangeClasses)
+		self.wselinvertb.clicked[bool].connect(self.selInvertClasses)
+		self.wsel3db.clicked[bool].connect(self.sel3DClasses)
+		self.wmakebut.clicked[bool].connect(self.makeNewSet)
+		self.wmarkbut.clicked[bool].connect(self.markBadPtcl)
+		self.wmarkgoodbut.clicked[bool].connect(self.markGoodPtcl)
+		self.wsavebut.clicked[bool].connect(self.savePtclNum)
+		self.wsaveorigbut.clicked[bool].connect(self.saveOrigPtclNum)
 
 		# View windows, one for class-averages, one for good particles and one for bad particles
 		self.vclasses=None
@@ -178,7 +178,7 @@
 
 	def makeNewSet(self,x):
 		"Makes a new particle set based on the selected class-averages"
-		setname=QtGui.QInputDialog.getText(None,"Set Name","Please specify the name for the set. If you specify an existing set, new particles will be added to the end")
+		setname=QtWidgets.QInputDialog.getText(None,"Set Name","Please specify the name for the set. If you specify an existing set, new particles will be added to the end")
 		if setname[1]==False : return
 		else: setname=setname[0]
 		if setname[-4:]!=".lst" : setname=setname+".lst"
@@ -192,7 +192,7 @@
 			try :
 				orign,origfile,comment=lst.read(n)			# the original file/number dereferenced from the LST file
 			except:
-				QtGui.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
+				QtWidgets.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
 				return
 
 			include.append((origfile,orign,comment))		# build a list so we can sort by frame
@@ -203,8 +203,8 @@
 	def markBadPtcl(self,x):
 		"Mark particles from the selected class-averages as bad in the set interface"
 
-		r=QtGui.QMessageBox.question(None,"Are you sure ?","WARNING: There is no undo for this operation. It will  mark all particles associated with the selected class-averages as bad. Are you sure you want to proceed ?",QtGui.QMessageBox.Yes|QtGui.QMessageBox.Cancel)
-		if r==QtGui.QMessageBox.Cancel : return
+		r=QtWidgets.QMessageBox.question(None,"Are you sure ?","WARNING: There is no undo for this operation. It will  mark all particles associated with the selected class-averages as bad. Are you sure you want to proceed ?",QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.Cancel)
+		if r==QtWidgets.QMessageBox.Cancel : return
 
 		lst=LSXFile(self.curPtclFile())		# lst file for dereferenceing
 		ptcls={}						# dictionary keyed by original frame filename with list of selected particle #s
@@ -213,7 +213,7 @@
 			try :
 				orign,origfile,comment=lst.read(n)
 			except:
-				QtGui.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
+				QtWidgets.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
 				return
 
 			try: ptcls[origfile].append(orign)		# try to add to a list for an existing filename
@@ -245,8 +245,8 @@
 	def markGoodPtcl(self,x):
 		"Mark particles from the selected class-averages as good in the set interface"
 
-		r=QtGui.QMessageBox.question(None,"Are you sure ?","WARNING: There is no undo for this operation. It will un-mark all particles associated with the selected class-averages as bad. Are you sure you want to proceed ?",QtGui.QMessageBox.Yes|QtGui.QMessageBox.Cancel)
-		if r==QtGui.QMessageBox.Cancel : return
+		r=QtWidgets.QMessageBox.question(None,"Are you sure ?","WARNING: There is no undo for this operation. It will un-mark all particles associated with the selected class-averages as bad. Are you sure you want to proceed ?",QtWidgets.QMessageBox.Yes|QtWidgets.QMessageBox.Cancel)
+		if r==QtWidgets.QMessageBox.Cancel : return
 
 		lst=LSXFile(self.curPtclFile())		# lst file for dereferenceing
 		ptcls={}						# dictionary keyed by original frame filename with list of selected particle #s
@@ -255,7 +255,7 @@
 			try :
 				orign,origfile,comment=lst.read(n)
 			except:
-				QtGui.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
+				QtWidgets.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
 				return
 
 			try: ptcls[origfile].append(orign)		# try to add to a list for an existing filename
@@ -291,7 +291,7 @@
 	def savePtclNum(self,x):
 		"Saves a list of particles from marked classes into a text file"
 
-		filename=QtGui.QInputDialog.getText(None,"Filename","Please enter a filename for the particle list. The file will contain the particle number (within the particle file) for each particle associated with a selected class-average.")
+		filename=QtWidgets.QInputDialog.getText(None,"Filename","Please enter a filename for the particle list. The file will contain the particle number (within the particle file) for each particle associated with a selected class-average.")
 		if filename[1]==False or filename[0]=="" : return
 
 		out=open(filename[0],"w")
@@ -300,7 +300,7 @@
 
 	def saveOrigPtclNum(self,x):
 		"Saves a file containing micrograph-dereferenced particles"
-		filename=QtGui.QInputDialog.getText(None,"Filename","Please enter a filename for the particle list. The file will contain particle number and image file, one per line. Image files will be referenced back to the original per-CCD frame stacks.")
+		filename=QtWidgets.QInputDialog.getText(None,"Filename","Please enter a filename for the particle list. The file will contain particle number and image file, one per line. Image files will be referenced back to the original per-CCD frame stacks.")
 		if filename[1]==False or filename[0]=="" : return
 
 		lst=LSXFile(self.curPtclFile())		# lst file for dereferenceing
@@ -310,7 +310,7 @@
 			try :
 				orign,origfile,comment=lst.read(n)			# the original file/number dereferenced from the LST file
 			except:
-				QtGui.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
+				QtWidgets.QMessageBox.warning(self,"Error !","The data_source '%s' does not follow EMAN2.1 project conventions. Cannot find raw particles for set."%srcfile)
 				return
 
 			include.append((origfile,orign,comment))		# build a list so we can sort by frame
@@ -330,7 +330,7 @@
 
 	def selRangeClasses(self,x):
 		"Select a range of images (ask the user for the range)"
-		rng=QtGui.QInputDialog.getText(None,"Select Range","Enter the range of particle values as first-last (inclusive). Merges with existing selection.")
+		rng=QtWidgets.QInputDialog.getText(None,"Select Range","Enter the range of particle values as first-last (inclusive). Merges with existing selection.")
 		if rng[1]==False : return
 
 		try:
@@ -338,7 +338,7 @@
 			x0=int(x0)
 			x1=int(x1)+1
 		except:
-			QtGui.QMessageBox.warning(self,"Error !","Invalid range specified. Use: min-max")
+			QtWidgets.QMessageBox.warning(self,"Error !","Invalid range specified. Use: min-max")
 			return
 
 		self.vclasses.subset_set(list(range(x0,x1)))
@@ -352,7 +352,7 @@
 
 		f=self.curFile()
 		if not '#classes_' in f :
-			QtGui.QMessageBox.warning(self,"Error !","A classes_xx file from a refine_xx directory is not currently selected")
+			QtWidgets.QMessageBox.warning(self,"Error !","A classes_xx file from a refine_xx directory is not currently selected")
 			return
 
 		# construct the path to the threed_xx file
@@ -363,7 +363,7 @@
 			a=EMData(d3path,0,True)
 			goodptcl=a["threed_ptcl_idxs"]
 		except:
-			QtGui.QMessageBox.warning(self,"Error !","Cannot read classes from "+d3path)
+			QtWidgets.QMessageBox.warning(self,"Error !","Cannot read classes from "+d3path)
 			return
 
 		self.vclasses.clear_set()
@@ -433,13 +433,13 @@
 	def fileUpdate(self):
 		"Called when the user selects a file from the list or need to completely refresh display"
 
-		QtGui.qApp.setOverrideCursor(Qt.BusyCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.BusyCursor)
 
 		if self.vclasses==None :
 			self.vclasses=EMImageMXWidget()
 			self.vclasses.set_mouse_mode("App")
-			QtCore.QObject.connect(self.vclasses,QtCore.SIGNAL("mx_image_selected"),self.classSelect)
-			QtCore.QObject.connect(self.vclasses,QtCore.SIGNAL("mx_image_double"),self.classDouble)
+			self.vclasses.mx_image_selected.connect(self.classSelect)
+			self.vclasses.mx_image_double.connect(self.classDouble)
 
 		self.vclasses.set_title("Classes")
 
@@ -460,7 +460,7 @@
 			else:
 				self.wptclfile.setCurrentIndex(i)
 		except:
-			QtGui.QMessageBox.warning(self,"Error !","This image does not appear to be a class average. (No class_ptcl_src, etc.)")
+			QtWidgets.QMessageBox.warning(self,"Error !","This image does not appear to be a class average. (No class_ptcl_src, etc.)")
 			ptclfile="None"
 
 
@@ -477,19 +477,19 @@
 		self.vgoodptcl.show()
 		self.vbadptcl.show()
 
-		QtGui.qApp.setOverrideCursor(Qt.ArrowCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.ArrowCursor)
 
 	def classSelect(self,event,lc):
 		"Single clicked class particle. lc=(img#,x,y,image_dict)"
 
-		QtGui.qApp.setOverrideCursor(Qt.BusyCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.BusyCursor)
 		ptclfile=self.curPtclFile()
 		try:
 			ptclgood=lc[3]["class_ptcl_idxs"]
 			self.vgoodptcl.set_data(EMData.read_images(ptclfile,ptclgood))
 		except:
-			QtGui.QMessageBox.warning(self,"Error !","This image does not appear to be a class average. (No class_ptcl_src, etc.)")
-			QtGui.qApp.setOverrideCursor(Qt.ArrowCursor)
+			QtWidgets.QMessageBox.warning(self,"Error !","This image does not appear to be a class average. (No class_ptcl_src, etc.)")
+			QtWidgets.QApplication.setOverrideCursor(Qt.ArrowCursor)
 			return
 		try:
 			ptclbad=lc[3]["exc_class_ptcl_idxs"]
@@ -500,7 +500,7 @@
 
 		self.vgoodptcl.show()
 		self.vbadptcl.show()
-		QtGui.qApp.setOverrideCursor(Qt.ArrowCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.ArrowCursor)
 
 	def classDouble(self,event,lc):
 		self.vclasses.image_set_associate(lc[0],update_gl=True)
@@ -515,15 +515,15 @@
 		try : self.vbadptcl.close()
 		except: pass
 
-		QtGui.QWidget.closeEvent(self, event)
+		QtWidgets.QWidget.closeEvent(self, event)
 
-class EMEvalPtclTool(QtGui.QMainWindow):
+class EMEvalPtclTool(QtWidgets.QMainWindow):
 	"""This class represents the EMTomoBoxer application instance.  """
 
 	def __init__(self,extrafiles=None,verbose=0):
-		QtGui.QMainWindow.__init__(self)
+		QtWidgets.QMainWindow.__init__(self)
 
-		app=QtGui.qApp
+		app=QtWidgets.QApplication.instance()
 		self.setWindowTitle("e2evalparticles")
 
 		# Menu Bar
@@ -531,7 +531,7 @@
 #		self.mfile_save_processed=self.mfile.addAction("Save processed data")
 		self.mfile_quit=self.mfile.addAction("Quit")
 
-		self.wtabs=QtGui.QTabWidget()
+		self.wtabs=QtWidgets.QTabWidget()
 		self.setCentralWidget(self.wtabs)
 
 		self.wclasstab=EMClassPtclTool(extrafiles)
@@ -539,14 +539,14 @@
 
 
 		# file menu
-		QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
+		self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
 
 	def menu_file_quit(self):
 		self.close()
 
 	def closeEvent(self,event):
 		self.wclasstab.close()
-		QtGui.QWidget.closeEvent(self, event)
+		QtWidgets.QWidget.closeEvent(self, event)
 
 if __name__ == "__main__":
 	main()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2fhstat.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2fhstat.py	2017-10-21 17:15:07.000000000 -0500
@@ -32,7 +32,7 @@
 #
 
 from EMAN2 import *
-from PyQt4 import QtCore
+from PyQt5 import QtCore
 from emfoldhunterstat import *
 from emapplication import get_application
 from empdbvaltool import EMPDBValWidget
@@ -55,8 +55,8 @@
 	def __init_em_val(self): #formally creates the empdbvaltool module, waits for a signal to validate or close
 		if self.em_val == None: 
 			self.em_val = EMPDBValWidget()
-			QtCore.QObject.connect(self.em_val, QtCore.SIGNAL("run_validate"),self.on_em_validate_requested)
-			QtCore.QObject.connect(self.em_val, QtCore.SIGNAL("module_closed"),self.on_em_val_closed)
+			self.em_val.run_validate.connect(self.on_em_validate_requested)
+			self.em_val.module_closed.connect(self.on_em_val_closed)
 	
 	def on_em_val_closed(self):
 		self.em_val = None
@@ -64,8 +64,8 @@
 	def __init_plot3d(self):
 		if self.plot3d == None: 
 			self.plot3d = EMPlot3DWidget()
-			QtCore.QObject.connect(self.plot3d.plot_model, QtCore.SIGNAL("view_transform"),self.on_view_transform_requested)
-			QtCore.QObject.connect(self.plot3d.plot_model, QtCore.SIGNAL("module_closed"),self.on_plot3d_closed)
+			self.plot3d.plot_model.view_transform.connect(self.on_view_transform_requested)
+			self.plot3d.plot_model.module_closed.connect(self.on_plot3d_closed)
 
 	def on_view_transform_requested(self, new_pdb_file):
 		if self.em_val == None:
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2filtertool.py	2017-10-21 16:48:48.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2filtertool.py	2017-10-21 17:15:07.000000000 -0500
@@ -31,9 +31,9 @@
 # Foundation, Inc., 59 Temple Place, Suite 330, Boston MA 02111-1307 USA
 #
 
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
-from PyQt4.QtCore import QTimer
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
+from PyQt5.QtCore import QTimer
 
 import sys
 import os
@@ -90,8 +90,13 @@
 def filtchange(name,value):
 	return {}
 
-class EMProcessorWidget(QtGui.QWidget):
+class EMProcessorWidget(QtWidgets.QWidget):
 	"""A single processor with parameters"""
+	upPress = QtCore.pyqtSignal()
+	downPress = QtCore.pyqtSignal()
+	plusPress = QtCore.pyqtSignal()
+	minusPress = QtCore.pyqtSignal()
+	processorChanged = QtCore.pyqtSignal()
 
 	plist=dump_processors_list()
 
@@ -113,34 +118,34 @@
 	}
 
 	def __init__(self,parent=None,tag=None):
-		app=QtGui.qApp
+		app=QtWidgets.QApplication.instance()
 
-		QtGui.QWidget.__init__(self,parent)
-		self.gbl = QtGui.QGridLayout(self)
+		QtWidgets.QWidget.__init__(self,parent)
+		self.gbl = QtWidgets.QGridLayout(self)
 		self.gbl.setColumnStretch(0,0)
 		self.gbl.setColumnStretch(1,0)
 		self.gbl.setColumnStretch(2,1)
 		self.gbl.setColumnStretch(3,3)
 
 		# Enable checkbox
-		self.wenable=QtGui.QCheckBox(self)
+		self.wenable=QtWidgets.QCheckBox(self)
 		self.wenable.setChecked(False)			# disable new processors by default to permit their values to be set
 		self.gbl.addWidget(self.wenable,0,1)
 
 		# List of processor categories
-		self.wcat=QtGui.QComboBox(self)
+		self.wcat=QtWidgets.QComboBox(self)
 		self.wcat.addItem("")
 		for i in self.cats: self.wcat.addItem(i)
 #		self.wcat.setCurrentindex(self.wcat.findText("processor"))
 		self.gbl.addWidget(self.wcat,0,2)
 
 		# List of processor subcategories
-		self.wsubcat=QtGui.QComboBox(self)
+		self.wsubcat=QtWidgets.QComboBox(self)
 		self.gbl.addWidget(self.wsubcat,0,3)
 #		self.update_subcat()
 
 		#button grid
-		self.gbl2=QtGui.QGridLayout()
+		self.gbl2=QtWidgets.QGridLayout()
 		self.gbl.addLayout(self.gbl2,0,0,1,1)
 		if get_platform().lower()=="darwin": self.gbl2.setSpacing(10)
 		else: self.gbl2.setSpacing(1)
@@ -149,31 +154,31 @@
 #		self.gbl2.setColumnStretch(1,1)
 
 #		self.wup = QtGui.QPushButton(app.style().standardIcon(QtGui.QStyle.SP_ArrowUp),"")
-		self.wup = QtGui.QPushButton(pix_up,"",self)
+		self.wup = QtWidgets.QPushButton(pix_up,"",self)
 		self.wup.setMaximumSize(QtCore.QSize(17, 17))
 #		self.wup.setSizePolicy(QtGui.QSizePolicy.Fixed,QtGui.QSizePolicy.Fixed)
 		self.gbl2.addWidget(self.wup,0,0)
 
-		self.wdown = QtGui.QPushButton(pix_down,"",self)
+		self.wdown = QtWidgets.QPushButton(pix_down,"",self)
 		self.wdown.setMaximumSize(QtCore.QSize(17, 17))
 		self.gbl2.addWidget(self.wdown,1,0)
 
-		self.wplus = QtGui.QPushButton(pix_plus,"",self)
+		self.wplus = QtWidgets.QPushButton(pix_plus,"",self)
 		self.wplus.setMaximumSize(QtCore.QSize(17, 17))
 		self.gbl2.addWidget(self.wplus,1,1)
 
-		self.wminus= QtGui.QPushButton(pix_minus,"",self)
+		self.wminus= QtWidgets.QPushButton(pix_minus,"",self)
 		self.wminus.setMaximumSize(QtCore.QSize(17, 17))
 		self.gbl2.addWidget(self.wminus,0,1)
 
 
-		QtCore.QObject.connect(self.wcat,QtCore.SIGNAL("currentIndexChanged(int)"),self.eventCatSel)
-		QtCore.QObject.connect(self.wsubcat,QtCore.SIGNAL("currentIndexChanged(int)"),self.eventSubcatSel)
-		QtCore.QObject.connect(self.wup,QtCore.SIGNAL("clicked(bool)"),self.butUp)
-		QtCore.QObject.connect(self.wdown,QtCore.SIGNAL("clicked(bool)"),self.butDown)
-		QtCore.QObject.connect(self.wplus,QtCore.SIGNAL("clicked(bool)"),self.butPlus)
-		QtCore.QObject.connect(self.wminus,QtCore.SIGNAL("clicked(bool)"),self.butminus)
-		QtCore.QObject.connect(self.wenable,QtCore.SIGNAL("clicked(bool)"),self.updateFilt)
+		self.wcat.currentIndexChanged[int].connect(self.eventCatSel)
+		self.wsubcat.currentIndexChanged[int].connect(self.eventSubcatSel)
+		self.wup.clicked[bool].connect(self.butUp)
+		self.wdown.clicked[bool].connect(self.butDown)
+		self.wplus.clicked[bool].connect(self.butPlus)
+		self.wminus.clicked[bool].connect(self.butminus)
+		self.wenable.clicked[bool].connect(self.updateFilt)
 
 		self.parmw=[]
 
@@ -295,16 +300,16 @@
 		self.tag=tag
 
 	def butUp(self):
-		self.emit(QtCore.SIGNAL("upPress"),self.tag)
+		self.upPress.emit(self.tag)
 
 	def butDown(self):
-		self.emit(QtCore.SIGNAL("downPress"),self.tag)
+		self.downPress.emit(self.tag)
 
 	def butPlus(self):
-		self.emit(QtCore.SIGNAL("plusPress"),self.tag)
+		self.plusPress.emit(self.tag)
 
 	def butminus(self):
-		self.emit(QtCore.SIGNAL("minusPress"),self.tag)
+		self.minusPress.emit(self.tag)
 
 
 	def eventCatSel(self,idx):
@@ -376,15 +381,15 @@
 
 			self.parmw[-1].setToolTip(parms[i+2])
 			self.gbl.addWidget(self.parmw[-1],self.ninput,1,1,4)
-			QtCore.QObject.connect(self.parmw[-1], QtCore.SIGNAL("valueChanged"), self.updateFilt)
-			QtCore.QObject.connect(self.parmw[-1], QtCore.SIGNAL("enableChanged"), self.updateFilt)
+			self.parmw[-1].valueChanged.connect(self.updateFilt)
+			self.parmw[-1].enableChanged.connect(self.updateFilt)
 
 		self.updateFilt()
 
 	def updateFilt(self,val=None):
 		"Called whenever the processor changes"
 		#if self.wenable.isChecked() :
-		self.emit(QtCore.SIGNAL("processorChanged"),self.tag)
+		self.processorChanged.emit(self.tag)
 
 	def processorName(self):
 		"Returns the name of the currently selected processor"
@@ -407,13 +412,14 @@
 
 		return (proc,parms)
 
-class EMFilterTool(QtGui.QMainWindow):
+class EMFilterTool(QtWidgets.QMainWindow):
 	"""This class represents the EMFilterTool application instance.  """
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self,datafile=None,apix=0.0,force2d=False,verbose=0):
-		QtGui.QMainWindow.__init__(self)
+		QtWidgets.QMainWindow.__init__(self)
 
-		app=QtGui.qApp
+		app=QtWidgets.QApplication.instance()
 		self.apix=apix
 		self.force2d=force2d
 		self.setWindowTitle("e2filtertool.py")
@@ -429,11 +435,11 @@
 		self.mview_new_2dwin=self.mview.addAction("Add 2D View")
 		self.mview_new_plotwin=self.mview.addAction("Add Plot View")
 
-		self.setCentralWidget(QtGui.QWidget())
-		self.vblm = QtGui.QVBoxLayout(self.centralWidget())		# The contents of the main window
+		self.setCentralWidget(QtWidgets.QWidget())
+		self.vblm = QtWidgets.QVBoxLayout(self.centralWidget())		# The contents of the main window
 
 		# List of processor sets
-		self.wsetname=QtGui.QComboBox()
+		self.wsetname=QtWidgets.QComboBox()
 		self.wsetname.setEditable(True)
 		psetnames=[i.split("_",1)[1][:-4].replace("_"," ") for i in os.listdir(".") if i[:11]=="filtertool_"]
 		try: psetnames.remove("default")  # remove default if it exists
@@ -443,27 +449,27 @@
 		self.vblm.addWidget(self.wsetname)
 
 		# scrollarea for processor widget
-		self.processorsa=QtGui.QScrollArea()
+		self.processorsa=QtWidgets.QScrollArea()
 		self.vblm.addWidget(self.processorsa)
 
 		# Actual widget contianing processors being scrolled
-		self.processorpanel=QtGui.QWidget()
+		self.processorpanel=QtWidgets.QWidget()
 		self.processorsa.setWidget(self.processorpanel)
 		self.processorsa.setWidgetResizable(True)
-		self.vbl = QtGui.QVBoxLayout(self.processorpanel)
+		self.vbl = QtWidgets.QVBoxLayout(self.processorpanel)
 
 		self.processorlist=[]
 		self.addProcessor()
 
 		# file menu
 #		QtCore.QObject.connect(self.mfile_save_processor,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_processor  )
-		QtCore.QObject.connect(self.mfile_save_stack,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_stack  )
-		QtCore.QObject.connect(self.mfile_save_map,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_map  )
-		QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
-		QtCore.QObject.connect(self.mview_new_2dwin,QtCore.SIGNAL("triggered(bool)")  ,self.menu_add_2dwin)
-		QtCore.QObject.connect(self.mview_new_plotwin,QtCore.SIGNAL("triggered(bool)")  ,self.menu_add_plotwin)
+		self.mfile_save_stack.triggered[bool].connect(self.menu_file_save_stack)
+		self.mfile_save_map.triggered[bool].connect(self.menu_file_save_map)
+		self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
+		self.mview_new_2dwin.triggered[bool].connect(self.menu_add_2dwin)
+		self.mview_new_plotwin.triggered[bool].connect(self.menu_add_plotwin)
 
-		QtCore.QObject.connect(self.wsetname,QtCore.SIGNAL("currentIndexChanged(int)"),self.setChange)
+		self.wsetname.currentIndexChanged[int].connect(self.setChange)
 
 
 		self.viewer=None			# viewer window for data
@@ -487,7 +493,7 @@
 		self.restore_processorset("default")
 
 		self.timer=QTimer()
-		QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.timeOut)
+		self.timer.timeout.connect(self.timeOut)
 		self.timer.start(100)
 		E2loadappwin("e2filtertool","main",self)
 
@@ -522,11 +528,11 @@
 		epw=EMProcessorWidget(self.processorpanel,tag=after)
 		self.processorlist.insert(after,epw)
 		self.vbl.insertWidget(after,epw)
-		QtCore.QObject.connect(epw,QtCore.SIGNAL("upPress"),self.upPress)
-		QtCore.QObject.connect(epw,QtCore.SIGNAL("downPress"),self.downPress)
-		QtCore.QObject.connect(epw,QtCore.SIGNAL("plusPress"),self.plusPress)
-		QtCore.QObject.connect(epw,QtCore.SIGNAL("minusPress"),self.minusPress)
-		QtCore.QObject.connect(epw,QtCore.SIGNAL("processorChanged"),self.procChange)
+		epw.upPress.connect(self.upPress)
+		epw.downPress.connect(self.downPress)
+		epw.plusPress.connect(self.plusPress)
+		epw.minusPress.connect(self.minusPress)
+		epw.processorChanged.connect(self.procChange)
 
 		# Make sure all the tags are correct
 		for i in range(len(self.processorlist)): self.processorlist[i].setTag(i)
@@ -575,7 +581,7 @@
 			self.procthread.start()
 
 		if self.errors:
-			QtGui.QMessageBox.warning(None,"Error","The following processors encountered errors during processing of 1 or more images:"+"\n".join(self.errors))
+			QtWidgets.QMessageBox.warning(None,"Error","The following processors encountered errors during processing of 1 or more images:"+"\n".join(self.errors))
 			self.errors=None
 
 		# When reprocessing is done, we want to redisplay from the main thread
@@ -786,13 +792,13 @@
 	def menu_file_save_stack(self):
 		"Processes the entire current stack, and saves as a new name"
 
-		name=QtGui.QInputDialog.getText(None,"Enter Filename","Enter an output filename for the entire processed particle stack (not just the displayed images).")
+		name=QtWidgets.QInputDialog.getText(None,"Enter Filename","Enter an output filename for the entire processed particle stack (not just the displayed images).")
 		if not name[1] : return		# canceled
 
 		allfilt=" ".join([i.getAsProc() for i in self.processorlist])
 
 		n=EMUtil.get_image_count(self.datafile)
-		from PyQt4.QtGui import QProgressDialog
+		from PyQt5.QtWidgets import QProgressDialog
 		progressdialog=QProgressDialog("Processing Images","Abort",0,n,self)
 		progressdialog.setMinimumDuration(1000)
 
@@ -802,7 +808,7 @@
 
 		for i in range(n):
 			im=EMData(self.datafile,i)
-			QtGui.qApp.processEvents()
+			QtWidgets.QApplication.processEvents()
 			for p in pp: im.process_inplace(p[0],p[1])
 			im.write_image(str(name[0]),i)
 			progressdialog.setValue(i+1)
@@ -821,12 +827,12 @@
 			try: os.unlink("processed_map.hdf")
 			except : pass
 			self.procdata[0].write_image("processed_map.hdf",0)
-			QtGui.QMessageBox.warning(None,"Saved","The processed map has been saved as processed_map.hdf")
+			QtWidgets.QMessageBox.warning(None,"Saved","The processed map has been saved as processed_map.hdf")
 		else :
 			try: os.unlink("processed_images.hdf")
 			except: pass
 			for i in self.procdata: i.write_image("processed_images.hdf",-1)
-			QtGui.QMessageBox.warning(None,"Saved","The processed image(s) has been saved as processed_images.hdf. WARNING: this will include only be a subset of the images in a large image stack. To process the full stack, use e2proc2d.py with the options in filtertool_<filtername>.txt")
+			QtWidgets.QMessageBox.warning(None,"Saved","The processed image(s) has been saved as processed_images.hdf. WARNING: this will include only be a subset of the images in a large image stack. To process the full stack, use e2proc2d.py with the options in filtertool_<filtername>.txt")
 
 	def menu_file_quit(self):
 		self.close()
@@ -842,7 +848,7 @@
 				v.close()
 		event.accept()
 		#self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+		self.module_closed.emit()
 
 	#def closeEvent(self,event):
 		#self.target().done()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2helixboxer.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2helixboxer.py	2017-10-21 17:15:07.000000000 -0500
@@ -40,7 +40,7 @@
 import os
 
 try:
-	from PyQt4 import QtGui, QtCore
+	from PyQt5 import QtCore, QtGui, QtWidgets
 	from emapplication import EMApp, get_application
 	from emimage2d import EMImage2DWidget
 	from emselector import EMSelectorDialog
@@ -662,12 +662,12 @@
 
 
 if ENABLE_GUI:
-	class EMWriteHelixFilesDialog(QtGui.QDialog):
+	class EMWriteHelixFilesDialog(QtWidgets.QDialog):
 		"""
 		options for writing helices and particles to files
 		"""
 		def __init__(self, qparent=None,saveext="hdf"):
-			QtGui.QWidget.__init__(self, qparent)
+			QtWidgets.QWidget.__init__(self, qparent)
 			self.setWindowTitle(self.tr("Write Helix and Particle Files"))
 			self.__create_ui()
 	#        self.helices_file_extension_dict = {"MRC":"mrc", "Spider":"spi", "Imagic": "img", "HDF5": "hdf"}
@@ -690,147 +690,147 @@
 			self.ptcls_coords_line_edit.setText( os.path.join(self.default_dir, self.micrograph_name + "_helix_ptcl_coords.txt") )
 			self.ptcls_images_line_edit.setText( os.path.join(self.default_dir, self.micrograph_name + "_helix_ptcl."+saveext) )
 
-			self.connect(self.helices_coords_browse_button, QtCore.SIGNAL("clicked()"), self.browse_helix_coords)
-			self.connect(self.helices_images_browse_button, QtCore.SIGNAL("clicked()"), self.browse_helix_images)
-			self.connect(self.ptcls_coords_browse_button, QtCore.SIGNAL("clicked()"), self.browse_ptcl_coords)
-			self.connect(self.ptcls_images_browse_button, QtCore.SIGNAL("clicked()"), self.browse_ptcl_images)
-			self.connect(self.button_box, QtCore.SIGNAL("accepted()"), self.save)
-			self.connect(self.button_box, QtCore.SIGNAL("rejected()"), self.cancel)
+			self.helices_coords_browse_button.clicked.connect(self.browse_helix_coords)
+			self.helices_images_browse_button.clicked.connect(self.browse_helix_images)
+			self.ptcls_coords_browse_button.clicked.connect(self.browse_ptcl_coords)
+			self.ptcls_images_browse_button.clicked.connect(self.browse_ptcl_images)
+			self.button_box.accepted.connect(self.save)
+			self.button_box.rejected.connect(self.cancel)
 
 		def __create_ui(self):
-			self.helices_groupbox = QtGui.QGroupBox(self.tr("Write &Helices:"))
+			self.helices_groupbox = QtWidgets.QGroupBox(self.tr("Write &Helices:"))
 			self.helices_groupbox.setCheckable(True)
 
-			self.helices_coords_groupbox = QtGui.QGroupBox(self.tr("Helix Coordinates (EMAN1 format)"))
+			self.helices_coords_groupbox = QtWidgets.QGroupBox(self.tr("Helix Coordinates (EMAN1 format)"))
 			self.helices_coords_groupbox.setCheckable(True)
-			helices_coords_label = QtGui.QLabel(self.tr("Path:"))
-			self.helices_coords_line_edit = QtGui.QLineEdit()
+			helices_coords_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.helices_coords_line_edit = QtWidgets.QLineEdit()
 			self.helices_coords_line_edit.setMinimumWidth(300)
-			self.helices_coords_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			self.helices_coords_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 
-			self.helices_images_groupbox = QtGui.QGroupBox(self.tr("Helix Images"))
+			self.helices_images_groupbox = QtWidgets.QGroupBox(self.tr("Helix Images"))
 			self.helices_images_groupbox.setCheckable(True)
-			helices_images_label = QtGui.QLabel(self.tr("Path:"))
-			self.helices_images_line_edit = QtGui.QLineEdit()
-			self.helices_images_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			helices_images_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.helices_images_line_edit = QtWidgets.QLineEdit()
+			self.helices_images_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 
-			self.ptcls_groupbox = QtGui.QGroupBox(self.tr("Write &Particles:"))
+			self.ptcls_groupbox = QtWidgets.QGroupBox(self.tr("Write &Particles:"))
 			self.ptcls_groupbox.setCheckable(True)
 
-			ptcls_overlap_label = QtGui.QLabel(self.tr("&Overlap:"))
-			self.ptcls_overlap_spinbox = QtGui.QSpinBox()
+			ptcls_overlap_label = QtWidgets.QLabel(self.tr("&Overlap:"))
+			self.ptcls_overlap_spinbox = QtWidgets.QSpinBox()
 			self.ptcls_overlap_spinbox.setMaximum(10000)
 			ptcls_overlap_label.setBuddy(self.ptcls_overlap_spinbox)
-			ptcls_length_label = QtGui.QLabel(self.tr("&Length:"))
-			self.ptcls_length_spinbox = QtGui.QSpinBox()
+			ptcls_length_label = QtWidgets.QLabel(self.tr("&Length:"))
+			self.ptcls_length_spinbox = QtWidgets.QSpinBox()
 			self.ptcls_length_spinbox.setMaximum(10000)
 			ptcls_length_label.setBuddy(self.ptcls_length_spinbox)
-			ptcls_width_label = QtGui.QLabel(self.tr("W&idth:"))
-			self.ptcls_width_spinbox = QtGui.QSpinBox()
+			ptcls_width_label = QtWidgets.QLabel(self.tr("W&idth:"))
+			self.ptcls_width_spinbox = QtWidgets.QSpinBox()
 			self.ptcls_width_spinbox.setMaximum(10000)
 			ptcls_width_label.setBuddy(self.ptcls_width_spinbox)
 
-			self.ptcls_coords_groupbox = QtGui.QGroupBox(self.tr("Particle Coordinates"))
+			self.ptcls_coords_groupbox = QtWidgets.QGroupBox(self.tr("Particle Coordinates"))
 			self.ptcls_coords_groupbox.setCheckable(True)
-			ptcls_coords_label = QtGui.QLabel(self.tr("Path:"))
-			self.ptcls_coords_line_edit = QtGui.QLineEdit()
-			self.ptcls_coords_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			ptcls_coords_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.ptcls_coords_line_edit = QtWidgets.QLineEdit()
+			self.ptcls_coords_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 
-			self.ptcls_images_groupbox = QtGui.QGroupBox(self.tr("Particle Images"))
+			self.ptcls_images_groupbox = QtWidgets.QGroupBox(self.tr("Particle Images"))
 			self.ptcls_images_groupbox.setCheckable(True)
-			self.ptcls_edgenorm_checkbox = QtGui.QCheckBox(self.tr("&Normalize Edge-Mean"))
+			self.ptcls_edgenorm_checkbox = QtWidgets.QCheckBox(self.tr("&Normalize Edge-Mean"))
 			self.ptcls_edgenorm_checkbox.setChecked(False)
 			self.ptcls_edgenorm_checkbox.setToolTip("Uses normalize.edgemean processor on each particle: pixel-value -> (pixel-value - edge-mean) / standard deviation")
 
-			self.ptcls_rotation_groupbox = QtGui.QGroupBox(self.tr("Rotation"))
-			self.ptcls_bilinear_rotation_radiobutton = QtGui.QRadioButton(self.tr("Bilinear Rotation"))
+			self.ptcls_rotation_groupbox = QtWidgets.QGroupBox(self.tr("Rotation"))
+			self.ptcls_bilinear_rotation_radiobutton = QtWidgets.QRadioButton(self.tr("Bilinear Rotation"))
 			self.ptcls_bilinear_rotation_radiobutton.setToolTip("Rectangular particles. Rotation angle is the one that makes associated helix vertical. Bilinear rotation algorithm.")
 			self.ptcls_bilinear_rotation_radiobutton.setChecked(True)
-			self.ptcls_gridding_rotation_radiobutton = QtGui.QRadioButton(self.tr("Gridding Rotation"))
+			self.ptcls_gridding_rotation_radiobutton = QtWidgets.QRadioButton(self.tr("Gridding Rotation"))
 			self.ptcls_gridding_rotation_radiobutton.setToolTip("Square particles with sides = max(Length, Width). Rotation angle is the one that makes associated helix vertical. Gridding rotation algorithm.")
-			self.ptcls_no_rotation_radiobutton = QtGui.QRadioButton(self.tr("No Rotation"))
+			self.ptcls_no_rotation_radiobutton = QtWidgets.QRadioButton(self.tr("No Rotation"))
 			self.ptcls_no_rotation_radiobutton.setToolTip("Particles are not rotated from the micrograph. Square particles with sides = max(length, width)")
 
-			self.ptcls_stack_groupbox = QtGui.QGroupBox(self.tr("Image Stacks"))
-			self.ptcls_single_stack_radiobutton = QtGui.QRadioButton(self.tr("Single image stack"))
+			self.ptcls_stack_groupbox = QtWidgets.QGroupBox(self.tr("Image Stacks"))
+			self.ptcls_single_stack_radiobutton = QtWidgets.QRadioButton(self.tr("Single image stack"))
 			self.ptcls_single_stack_radiobutton.setChecked(True)
 			self.ptcls_single_stack_radiobutton.setToolTip("Saves a single image stack file for all the helices. Fails for incompatible file formats.")
-			self.ptcls_multiple_stack_radiobutton = QtGui.QRadioButton(self.tr("Image stack per helix"))
+			self.ptcls_multiple_stack_radiobutton = QtWidgets.QRadioButton(self.tr("Image stack per helix"))
 			self.ptcls_multiple_stack_radiobutton.setToolTip("Saves an image stack file for each helix. Fails for incompatible file formats.")
-			self.ptcls_no_stack_radiobutton = QtGui.QRadioButton(self.tr("File for each particle"))
+			self.ptcls_no_stack_radiobutton = QtWidgets.QRadioButton(self.tr("File for each particle"))
 
-			ptcls_images_label = QtGui.QLabel(self.tr("Path:"))
-			self.ptcls_images_line_edit = QtGui.QLineEdit()
-			self.ptcls_images_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			ptcls_images_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.ptcls_images_line_edit = QtWidgets.QLineEdit()
+			self.ptcls_images_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 
-			self.button_box = QtGui.QDialogButtonBox(QtGui.QDialogButtonBox.Save | QtGui.QDialogButtonBox.Cancel)
+			self.button_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Save | QtWidgets.QDialogButtonBox.Cancel)
 
 
 
-			helices_coords_layout = QtGui.QHBoxLayout()
+			helices_coords_layout = QtWidgets.QHBoxLayout()
 			helices_coords_layout.addWidget(helices_coords_label)
 			helices_coords_layout.addWidget(self.helices_coords_line_edit)
 			helices_coords_layout.addWidget(self.helices_coords_browse_button)
 			self.helices_coords_groupbox.setLayout(helices_coords_layout)
 
-			helices_images_layout = QtGui.QHBoxLayout()
+			helices_images_layout = QtWidgets.QHBoxLayout()
 			helices_images_layout.addWidget(helices_images_label)
 			helices_images_layout.addWidget(self.helices_images_line_edit)
 			helices_images_layout.addWidget(self.helices_images_browse_button)
 			self.helices_images_groupbox.setLayout(helices_images_layout)
 
-			helices_layout = QtGui.QVBoxLayout()
+			helices_layout = QtWidgets.QVBoxLayout()
 			helices_layout.addWidget(self.helices_coords_groupbox)
 			helices_layout.addWidget(self.helices_images_groupbox)
 
 			self.helices_groupbox.setLayout(helices_layout)
 
-			ptcls_overlap_layout = QtGui.QHBoxLayout()
+			ptcls_overlap_layout = QtWidgets.QHBoxLayout()
 			ptcls_overlap_layout.addWidget(ptcls_overlap_label)
 			ptcls_overlap_layout.addWidget(self.ptcls_overlap_spinbox)
 
-			ptcls_length_layout = QtGui.QHBoxLayout()
+			ptcls_length_layout = QtWidgets.QHBoxLayout()
 			ptcls_length_layout.addWidget(ptcls_length_label)
 			ptcls_length_layout.addWidget(self.ptcls_length_spinbox)
 
-			ptcls_width_layout = QtGui.QHBoxLayout()
+			ptcls_width_layout = QtWidgets.QHBoxLayout()
 			ptcls_width_layout.addWidget(ptcls_width_label)
 			ptcls_width_layout.addWidget(self.ptcls_width_spinbox)
 
-			ptcls_coords_layout = QtGui.QHBoxLayout()
+			ptcls_coords_layout = QtWidgets.QHBoxLayout()
 			ptcls_coords_layout.addWidget(ptcls_coords_label)
 			ptcls_coords_layout.addWidget(self.ptcls_coords_line_edit)
 			ptcls_coords_layout.addWidget(self.ptcls_coords_browse_button)
 			self.ptcls_coords_groupbox.setLayout(ptcls_coords_layout)
 
-			ptcls_images_path_layout = QtGui.QHBoxLayout()
+			ptcls_images_path_layout = QtWidgets.QHBoxLayout()
 			ptcls_images_path_layout.addWidget(ptcls_images_label)
 			ptcls_images_path_layout.addWidget(self.ptcls_images_line_edit)
 			ptcls_images_path_layout.addWidget(self.ptcls_images_browse_button)
 
-			ptcls_images_rotation_layout = QtGui.QVBoxLayout()
+			ptcls_images_rotation_layout = QtWidgets.QVBoxLayout()
 			ptcls_images_rotation_layout.addWidget(self.ptcls_bilinear_rotation_radiobutton)
 			ptcls_images_rotation_layout.addWidget(self.ptcls_gridding_rotation_radiobutton)
 			ptcls_images_rotation_layout.addWidget(self.ptcls_no_rotation_radiobutton)
 			self.ptcls_rotation_groupbox.setLayout(ptcls_images_rotation_layout)
 
-			ptcls_imagestack_layout = QtGui.QVBoxLayout()
+			ptcls_imagestack_layout = QtWidgets.QVBoxLayout()
 			ptcls_imagestack_layout.addWidget(self.ptcls_single_stack_radiobutton)
 			ptcls_imagestack_layout.addWidget(self.ptcls_multiple_stack_radiobutton)
 			ptcls_imagestack_layout.addWidget(self.ptcls_no_stack_radiobutton)
 			self.ptcls_stack_groupbox.setLayout(ptcls_imagestack_layout)
 
-			ptcls_rotation_stack_layout = QtGui.QHBoxLayout()
+			ptcls_rotation_stack_layout = QtWidgets.QHBoxLayout()
 			ptcls_rotation_stack_layout.addWidget(self.ptcls_rotation_groupbox)
 			ptcls_rotation_stack_layout.addWidget(self.ptcls_stack_groupbox)
 
-			ptcls_images_layout = QtGui.QVBoxLayout()
+			ptcls_images_layout = QtWidgets.QVBoxLayout()
 			ptcls_images_layout.addLayout(ptcls_rotation_stack_layout)
 			ptcls_images_layout.addWidget(self.ptcls_edgenorm_checkbox)
 			ptcls_images_layout.addLayout(ptcls_images_path_layout)
 			self.ptcls_images_groupbox.setLayout(ptcls_images_layout)
 
-			ptcls_opts_layout = QtGui.QVBoxLayout()
+			ptcls_opts_layout = QtWidgets.QVBoxLayout()
 			ptcls_opts_layout.addLayout(ptcls_overlap_layout)
 			ptcls_opts_layout.addLayout(ptcls_length_layout)
 			ptcls_opts_layout.addLayout(ptcls_width_layout)
@@ -838,24 +838,24 @@
 			ptcls_opts_layout.addWidget(self.ptcls_images_groupbox)
 			self.ptcls_groupbox.setLayout(ptcls_opts_layout)
 
-			self.vbl = QtGui.QVBoxLayout(self)
-			self.vbl.setMargin(0)
+			self.vbl = QtWidgets.QVBoxLayout(self)
+			self.vbl.setContentsMargins(0, 0, 0, 0)
 			self.vbl.setSpacing(6)
 			self.vbl.setObjectName("vbl")
 			self.vbl.addWidget(self.helices_groupbox)
 			self.vbl.addWidget(self.ptcls_groupbox)
 			self.vbl.addWidget(self.button_box)
 		def browse_helix_coords(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Coordinates"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Coordinates"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile( os.path.join(self.default_dir, self.micrograph_name + "_boxes.txt") )
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
 				file_path = str(file_path)
 				self.helices_coords_line_edit.setText(file_path)
 		def browse_helix_images(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Images"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Images"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile(self.helices_images_line_edit.text())
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
@@ -871,16 +871,16 @@
 	#                path = os.path.join( path, os.path.basename(self.helices_images_line_edit.text()) )
 	#            self.helices_images_line_edit.setText(path)
 		def browse_ptcl_coords(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Coordinates"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Coordinates"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile(self.ptcls_coords_line_edit.text())
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
 				file_path = str(file_path)
 				self.ptcls_coords_line_edit.setText(file_path)
 		def browse_ptcl_images(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Images"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Images"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile(self.ptcls_images_line_edit.text())
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
@@ -957,7 +957,7 @@
 			self.hide()
 
 if ENABLE_GUI:
-	class EMHelixBoxerWidget(QtGui.QWidget):
+	class EMHelixBoxerWidget(QtWidgets.QWidget):
 		"""
 		the GUI widget which contains the settings for boxing helices and writing results to files
 		"""
@@ -966,7 +966,7 @@
 			@param micrograph_filepath: the path to the image file for the micrograph
 			@param app: the application to which this widget belongs
 			"""
-			QtGui.QWidget.__init__(self)
+			QtWidgets.QWidget.__init__(self)
 
 			if box_width<1 : box_width=100
 			self.box_width=box_width
@@ -993,14 +993,14 @@
 				self.micrograph_filepath_set = set(micrograph_filepaths) # [micrograph1_filepath, micrograph2_filepath, ...]
 			self.update_micrograph_table()
 
-			self.connect(self.box_width_spinbox, QtCore.SIGNAL("valueChanged(int)"), self.width_changed)
-			self.connect( self.img_quality_combobox, QtCore.SIGNAL("currentIndexChanged(int)"), self.set_image_quality )
-			self.connect(self.load_boxes_action, QtCore.SIGNAL("triggered()"), self.load_boxes)
-			self.connect(self.load_micrograph_action, QtCore.SIGNAL("triggered()"), self.open_micrograph)
+			self.box_width_spinbox.valueChanged[int].connect(self.width_changed)
+			self.img_quality_combobox.currentIndexChanged[int].connect(self.set_image_quality)
+			self.load_boxes_action.triggered.connect(self.load_boxes)
+			self.load_micrograph_action.triggered.connect(self.open_micrograph)
 	#        self.connect(self.write_coords_action, QtCore.SIGNAL("triggered()"), self.write_coords)
-			self.connect(self.write_images_action, QtCore.SIGNAL("triggered()"), self.write_images)
-			self.connect(self.quit_action, QtCore.SIGNAL("triggered()"), self.close)
-			self.connect( self.micrograph_table, QtCore.SIGNAL("currentCellChanged (int,int,int,int)"), self.micrograph_table_selection)
+			self.write_images_action.triggered.connect(self.write_images)
+			self.quit_action.triggered.connect(self.close)
+			self.micrograph_table.currentCellChanged [int, int, int, int].connect(self.micrograph_table_selection)
 
 			self.micrograph_table.setCurrentCell(0,0) #self.micrograph_table_selection() will display this micrograph
 
@@ -1010,13 +1010,13 @@
 
 		def __create_ui(self):
 
-			self.menu_bar = QtGui.QMenuBar(self)
-			self.file_menu = QtGui.QMenu(self.tr("&File"))
-			self.load_micrograph_action = QtGui.QAction(self.tr("&Open Micrographs"), self)
+			self.menu_bar = QtWidgets.QMenuBar(self)
+			self.file_menu = QtWidgets.QMenu(self.tr("&File"))
+			self.load_micrograph_action = QtWidgets.QAction(self.tr("&Open Micrographs"), self)
 	#        self.write_coords_action = QtGui.QAction(self.tr("Save &Coordinates"), self)
-			self.write_images_action = QtGui.QAction(self.tr("&Save"), self)
-			self.load_boxes_action = QtGui.QAction(self.tr("&Load Coordinates"), self)
-			self.quit_action = QtGui.QAction(self.tr("&Quit"), self)
+			self.write_images_action = QtWidgets.QAction(self.tr("&Save"), self)
+			self.load_boxes_action = QtWidgets.QAction(self.tr("&Load Coordinates"), self)
+			self.quit_action = QtWidgets.QAction(self.tr("&Quit"), self)
 			self.file_menu.addAction(self.load_micrograph_action)
 			self.file_menu.addAction(self.load_boxes_action)
 	#        self.file_menu.addAction(self.write_coords_action)
@@ -1025,34 +1025,34 @@
 			self.file_menu.addAction(self.quit_action)
 			self.menu_bar.addMenu(self.file_menu)
 
-			self.box_width_label = QtGui.QLabel(self.tr("Box &Width:"))
-			self.box_width_spinbox = QtGui.QSpinBox()
+			self.box_width_label = QtWidgets.QLabel(self.tr("Box &Width:"))
+			self.box_width_spinbox = QtWidgets.QSpinBox()
 			self.box_width_spinbox.setMaximum(10000)
 			self.box_width_label.setBuddy(self.box_width_spinbox)
 
-			self.img_quality_label = QtGui.QLabel(self.tr("Image &Quality:"))
-			self.img_quality_combobox = QtGui.QComboBox()
+			self.img_quality_label = QtWidgets.QLabel(self.tr("Image &Quality:"))
+			self.img_quality_combobox = QtWidgets.QComboBox()
 			qualities = [str(i) for i in range(5)]
 			self.img_quality_combobox.addItems(qualities)
 			self.img_quality_combobox.setCurrentIndex(2)
 			self.img_quality_label.setBuddy(self.img_quality_combobox)
 
-			self.micrograph_table = QtGui.QTableWidget(1,2)
+			self.micrograph_table = QtWidgets.QTableWidget(1,2)
 			self.micrograph_table.setHorizontalHeaderLabels(["Micrograph", "Boxed Helices"])
 
-			self.status_bar = QtGui.QStatusBar()
+			self.status_bar = QtWidgets.QStatusBar()
 			#self.status_bar.showMessage("Ready",10000)
 
-			widthLayout = QtGui.QHBoxLayout()
+			widthLayout = QtWidgets.QHBoxLayout()
 			widthLayout.addWidget(self.box_width_label)
 			widthLayout.addWidget(self.box_width_spinbox)
 
-			qualityLayout = QtGui.QHBoxLayout()
+			qualityLayout = QtWidgets.QHBoxLayout()
 			qualityLayout.addWidget(self.img_quality_label)
 			qualityLayout.addWidget(self.img_quality_combobox)
 
-			self.vbl = QtGui.QVBoxLayout(self)
-			self.vbl.setMargin(0)
+			self.vbl = QtWidgets.QVBoxLayout(self)
+			self.vbl.setContentsMargins(0, 0, 0, 0)
 			self.vbl.setSpacing(6)
 			self.vbl.setObjectName("vbl")
 			self.vbl.addWidget(self.menu_bar)
@@ -1087,7 +1087,7 @@
 				#self.helix_viewer.setWindowTitle("Current Helix")
 				self.helix_viewer.resize(300,800)
 				self.helix_viewer.set_scale(1)
-			QtCore.QObject.connect(self.helix_viewer, QtCore.SIGNAL("module_closed"), self.helix_viewer_closed)
+			self.helix_viewer.module_closed.connect(self.helix_viewer_closed)
 			self.helix_viewer.set_data(helix_emdata)
 			self.helix_viewer.setWindowTitle("Current Helix: %d x %d pixels" % (helix_emdata["nx"], helix_emdata["ny"]) )
 			get_application().show_specific(self.helix_viewer)
@@ -1123,19 +1123,19 @@
 			"""
 			load boxes from a file selected in a file browser dialog
 			"""
-			path = QtGui.QFileDialog.getOpenFileName(self, self.tr("Open Box Coordinates File"), "", self.tr("Boxes (*.txt *.box)"))
+			path = QtWidgets.QFileDialog.getOpenFileName(self, self.tr("Open Box Coordinates File"), "", self.tr("Boxes (*.txt *.box)"))[0]
 			path = str(path)
 			coords_list = load_helix_coords(path)
 
 			if self.main_image.shapes!=None and len(self.main_image.shapes)>0 :
-				keep_boxes_msgbox = QtGui.QMessageBox()
+				keep_boxes_msgbox = QtWidgets.QMessageBox()
 				keep_boxes_msgbox.setText(self.tr("Keep current boxes?"))
 				keep_boxes_msgbox.setInformativeText(self.tr("Do you want to keep your current boxes?"))
-				keep_boxes_msgbox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-				keep_boxes_msgbox.setDefaultButton(QtGui.QMessageBox.Yes)
+				keep_boxes_msgbox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+				keep_boxes_msgbox.setDefaultButton(QtWidgets.QMessageBox.Yes)
 				keep_current_boxes = keep_boxes_msgbox.exec_()
 
-				if keep_current_boxes == QtGui.QMessageBox.No:
+				if keep_current_boxes == QtWidgets.QMessageBox.No:
 					self.main_image.shapes = EMShapeDict()
 					self.set_db_item("helixboxes", [])
 					self.helices_dict = {}
@@ -1167,10 +1167,10 @@
 
 			if not self.main_image:
 				self.main_image = EMImage2DWidget(application=self.app)
-				QtCore.QObject.connect(self.main_image,QtCore.SIGNAL("module_closed"), self.main_image_closed)
-				QtCore.QObject.connect( self.main_image, QtCore.SIGNAL("mousedown"), self.mouse_down)
-				QtCore.QObject.connect( self.main_image, QtCore.SIGNAL("mousedrag"), self.mouse_drag)
-				QtCore.QObject.connect( self.main_image, QtCore.SIGNAL("mouseup"), self.mouse_up)
+				self.main_image.module_closed.connect(self.main_image_closed)
+				self.main_image.mousedown.connect(self.mouse_down)
+				self.main_image.mousedrag.connect(self.mouse_drag)
+				self.main_image.mouseup.connect(self.mouse_up)
 			self.main_image.set_data( micrograph_emdata, self.micrograph_filepath )
 			self.main_image.shapes = EMShapeDict()
 			self.main_image.shapechange=1
@@ -1253,9 +1253,9 @@
 					num_boxes = len(boxes)
 				else:
 					num_boxes = 0
-				micrograph_item = QtGui.QTableWidgetItem(micrograph)
+				micrograph_item = QtWidgets.QTableWidgetItem(micrograph)
 				micrograph_item.setToolTip(micrograph_filepath)
-				num_boxes_item = QtGui.QTableWidgetItem(str(num_boxes))
+				num_boxes_item = QtWidgets.QTableWidgetItem(str(num_boxes))
 				self.micrograph_table.insertRow(i)
 				self.micrograph_table.setItem(i,0, micrograph_item)
 				self.micrograph_table.setItem(i,1, num_boxes_item)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2history.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2history.py	2017-10-21 17:15:08.000000000 -0500
@@ -77,11 +77,11 @@
 		self.form = EMFormWidget(params=self.get_history_table())
 		self.form.setWindowTitle("EMAN2 history")
 		
-		from PyQt4 import QtGui,QtCore
+		from PyQt5 import QtCore, QtGui
 		self.form.setWindowIcon(QtGui.QIcon(os.getenv("EMAN2DIR")+"/images/feather.png"))
 		self.form.resize(640,480)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_cancel)
+		self.form.emform_ok.connect(self.on_ok)
+		self.form.emform_cancel.connect(self.on_cancel)
 		
 		
 	def get_history_table(self):
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2markbadparticles.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2markbadparticles.py	2017-10-21 17:15:08.000000000 -0500
@@ -36,8 +36,8 @@
 from emimagemx import EMImageMXWidget
 
 import sys
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 #from OpenGL import GL,GLU,GLUT
 from emapplication import EMApp
 import os
@@ -101,13 +101,13 @@
 
 #	E2end(logid)
 
-class EMMarkPtclTool(QtGui.QMainWindow):
+class EMMarkPtclTool(QtWidgets.QMainWindow):
 	"""This is a tool for marking bad particles"""
 
 	def __init__(self,extrafiles=None,verbose=0):
-		QtGui.QMainWindow.__init__(self)
+		QtWidgets.QMainWindow.__init__(self)
 
-		app=QtGui.qApp
+		app=QtWidgets.QApplication.instance()
 		self.setWindowTitle("e2markbadparticles")
 
 		# Menu Bar
@@ -115,29 +115,29 @@
 #		self.mfile_save_processed=self.mfile.addAction("Save processed data")
 		self.mfile_quit=self.mfile.addAction("Quit")
 
-		self.wtabs=QtGui.QTabWidget()
+		self.wtabs=QtWidgets.QTabWidget()
 		self.setCentralWidget(self.wtabs)
 
 		self.wclasstab=EMClassPtclTool(extrafiles)
 		self.wtabs.addTab(self.wclasstab,"Classes")
 
-		self.vbl2 = QtGui.QVBoxLayout()
+		self.vbl2 = QtWidgets.QVBoxLayout()
 		self.setlist=MyListWidget(self)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.vbl2.addWidget(self.setlist)
 		
 
 		# file menu
-		QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("keypress"),self.listkey)
+		self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.setlist.keypress.connect(self.listkey)
 
 	def menu_file_quit(self):
 		self.close()
 
 	def closeEvent(self,event):
 		self.wclasstab.close()
-		QtGui.QWidget.closeEvent(self, event)
+		QtWidgets.QWidget.closeEvent(self, event)
 
 if __name__ == "__main__":
 	main()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2motion.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2motion.py	2017-10-21 17:15:08.000000000 -0500
@@ -38,8 +38,8 @@
 import time
 from sys import argv
 from EMAN2 import *
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import get_application, EMApp
 from emimage2d import EMImage2DWidget
 from emimagemx import EMImageMXWidget
@@ -47,6 +47,12 @@
 import queue
 import embrowser
 
+try:
+    QChar = unichr
+except NameError:
+    # Python 3
+    QChar = chr
+
 def main():
 	progname = os.path.basename(sys.argv[0])
 	usage = """prog [options]
@@ -108,12 +114,12 @@
 	
 	E2end(pid)
 
-class EMMotion(QtGui.QMainWindow):
+class EMMotion(QtWidgets.QMainWindow):
 	"""This is the main window for the EMMotion application"""
 	
 	def __init__(self,application,path=None,piter=None,threads=4):
 		"""application is an QApplication instance. ptclstack is the path to the file containing the particles to analyze. path is the path for ouput files""" 
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 
 		self.aliimg=None		# This is the unmasked alignment reference image
 		self.alisig=None		# This is the standard deviation of the alignment reference
@@ -146,17 +152,17 @@
 		#self.mwin_average=self.mwin.addAction("Averaging")
 
 
-		self.setCentralWidget(QtGui.QWidget())
-		self.gbl = QtGui.QGridLayout(self.centralWidget())
+		self.setCentralWidget(QtWidgets.QWidget())
+		self.gbl = QtWidgets.QGridLayout(self.centralWidget())
 		cen=self.centralWidget()
 		
 		######
 		# Folder parameters
-		self.vgb0=QtGui.QGroupBox("Particle Data")
+		self.vgb0=QtWidgets.QGroupBox("Particle Data")
 		self.gbl.addWidget(self.vgb0,0,0,1,4)
 		
-		self.gbl2=QtGui.QGridLayout(self.vgb0)
-		self.wlpath=QtGui.QLabel("Path: {}".format(self.path))
+		self.gbl2=QtWidgets.QGridLayout(self.vgb0)
+		self.wlpath=QtWidgets.QLabel("Path: {}".format(self.path))
 		self.gbl2.addWidget(self.wlpath,0,0)
 		self.gbl2.setColumnStretch(0,1)
 		
@@ -170,97 +176,97 @@
 		self.gbl2.addWidget(self.wvsnum,0,3)
 		self.gbl2.setColumnStretch(3,4)
 		
-		self.wlnptcl=QtGui.QLabel(" ")
+		self.wlnptcl=QtWidgets.QLabel(" ")
 		self.gbl2.addWidget(self.wlnptcl,0,5)
 		self.gbl2.setColumnStretch(5,2)
 		
-		self.wbdoavg=QtGui.QPushButton("Make Avg")
+		self.wbdoavg=QtWidgets.QPushButton("Make Avg")
 		self.gbl2.addWidget(self.wbdoavg,0,8)
 		
 		###### Alignment Mask
 		# widget for editing the alignment mask
-		self.wlalimaskdraw=QtGui.QLabel("<big><pre>Edit</pre></big>")
+		self.wlalimaskdraw=QtWidgets.QLabel("<big><pre>Edit</pre></big>")
 		self.wlalimaskdraw.setAlignment(Qt.AlignHCenter)
 		self.gbl.addWidget(self.wlalimaskdraw,2,1)
 		
-		self.wlalimaskdraw2=QtGui.QLabel("<big><pre>A\nl\ni\ng\nn</pre></big>")
+		self.wlalimaskdraw2=QtWidgets.QLabel("<big><pre>A\nl\ni\ng\nn</pre></big>")
 		self.gbl.addWidget(self.wlalimaskdraw2,3,0)
 		
 		self.w2dalimaskdraw=EMImage2DWidget()
 		self.gbl.addWidget(self.w2dalimaskdraw,3,1)
 		
 		# Buttons for controlling mask
-		self.hbl1=QtGui.QHBoxLayout()
+		self.hbl1=QtWidgets.QHBoxLayout()
 		self.gbl.addLayout(self.hbl1,4,1)
 		self.hbl1.addStretch(5)
 
-		self.wbdrawali=QtGui.QPushButton("Draw")
+		self.wbdrawali=QtWidgets.QPushButton("Draw")
 		self.hbl1.addWidget(self.wbdrawali)
 		self.wbdrawali.hide()						# this functionality won't work with the current widget
 
-		self.wbautoali=QtGui.QPushButton("Auto")
+		self.wbautoali=QtWidgets.QPushButton("Auto")
 		self.hbl1.addWidget(self.wbautoali)
 		
-		self.wbresetali=QtGui.QPushButton("Reset")
+		self.wbresetali=QtWidgets.QPushButton("Reset")
 		self.hbl1.addWidget(self.wbresetali)
 
 		self.hbl1.addStretch(5)
 
 		# Widget for setting alignment mask blur and base level
-		self.vbl1=QtGui.QVBoxLayout()
+		self.vbl1=QtWidgets.QVBoxLayout()
 		self.gbl.addLayout(self.vbl1,3,2)
 		self.vbl1.addStretch(5)
 		
-		self.wlalimaskblur=QtGui.QLabel("Blur")
+		self.wlalimaskblur=QtWidgets.QLabel("Blur")
 		self.vbl1.addWidget(self.wlalimaskblur)
 		
-		self.wsbalimaskblur=QtGui.QSpinBox()
+		self.wsbalimaskblur=QtWidgets.QSpinBox()
 		self.wsbalimaskblur.setRange(0,25)
 		self.vbl1.addWidget(self.wsbalimaskblur)
 		
 		self.vbl1.addSpacing(16)
 		
-		self.wlalimaskbase=QtGui.QLabel("Base")
+		self.wlalimaskbase=QtWidgets.QLabel("Base")
 		self.vbl1.addWidget(self.wlalimaskbase)
 		
-		self.wsbalimaskbase=QtGui.QSpinBox()
+		self.wsbalimaskbase=QtWidgets.QSpinBox()
 		self.wsbalimaskbase.setRange(0,100)
 		self.wsbalimaskbase.setValue(10)
 		self.vbl1.addWidget(self.wsbalimaskbase)
 		
 		self.vbl1.addSpacing(16)
 
-		self.wlalimaskrot=QtGui.QLabel("Rot")
+		self.wlalimaskrot=QtWidgets.QLabel("Rot")
 		self.vbl1.addWidget(self.wlalimaskrot)
 		
-		self.wsbalimaskrot=QtGui.QSpinBox()
+		self.wsbalimaskrot=QtWidgets.QSpinBox()
 		self.wsbalimaskrot.setRange(0,360)
 		self.wsbalimaskrot.setValue(0)
 		self.vbl1.addWidget(self.wsbalimaskrot)
 		
 		self.vbl1.addSpacing(16)
 		
-		self.wbaligo=QtGui.QPushButton(QtCore.QChar(0x2192))
+		self.wbaligo=QtWidgets.QPushButton(QChar(0x2192))
 		self.vbl1.addWidget(self.wbaligo)
 
 		self.vbl1.addStretch(5)
 		
 		# widget for displaying the masked alignment reference
-		self.wlalimask=QtGui.QLabel("<big><pre>Reference</pre></big>")
+		self.wlalimask=QtWidgets.QLabel("<big><pre>Reference</pre></big>")
 		self.wlalimask.setAlignment(Qt.AlignHCenter)
 		self.gbl.addWidget(self.wlalimask,2,3)
 		
 		self.w2dalimask=EMImage2DWidget()
 		self.gbl.addWidget(self.w2dalimask,3,3)
 		
-		self.hbl1a=QtGui.QHBoxLayout()
+		self.hbl1a=QtWidgets.QHBoxLayout()
 		self.gbl.addLayout(self.hbl1a,4,3)
 		self.hbl1a.addStretch(5)
 		
-		self.wbrecalcref=QtGui.QPushButton("Realign")
+		self.wbrecalcref=QtWidgets.QPushButton("Realign")
 		self.hbl1a.addWidget(self.wbrecalcref)
 		
-		self.wbrrecalcref=QtGui.QPushButton("Rerefine")
+		self.wbrrecalcref=QtWidgets.QPushButton("Rerefine")
 		self.hbl1a.addWidget(self.wbrrecalcref)
 		
 		self.hbl1a.addStretch(5)
@@ -268,44 +274,44 @@
 
 		###### ROI Mask
 		# widget for editing the ROI mask
-		self.wlroimaskdraw=QtGui.QLabel("<big><pre>R\nO\nI</pre></big>")
+		self.wlroimaskdraw=QtWidgets.QLabel("<big><pre>R\nO\nI</pre></big>")
 		self.gbl.addWidget(self.wlroimaskdraw,6,0)
 		
 		self.w2droimaskdraw=EMImage2DWidget()
 		self.gbl.addWidget(self.w2droimaskdraw,6,1)
 
 		# Buttons for controlling mask
-		self.hbl2=QtGui.QHBoxLayout()
+		self.hbl2=QtWidgets.QHBoxLayout()
 		self.gbl.addLayout(self.hbl2,5,1)
 		self.hbl2.addStretch(5)
 		
-		self.wbdrawroi=QtGui.QPushButton("Draw")
+		self.wbdrawroi=QtWidgets.QPushButton("Draw")
 		self.hbl1.addWidget(self.wbdrawroi)
 		self.wbdrawroi.hide()							# this button won't work right for now
 
-		self.wbautoroi=QtGui.QPushButton("Auto")
+		self.wbautoroi=QtWidgets.QPushButton("Auto")
 		self.hbl2.addWidget(self.wbautoroi)
 		
-		self.wbresetroi=QtGui.QPushButton("Reset")
+		self.wbresetroi=QtWidgets.QPushButton("Reset")
 		self.hbl2.addWidget(self.wbresetroi)
 		
 		self.hbl2.addStretch(5)
 
 		# Widget for setting alignment mask blur and base level
-		self.vbl2=QtGui.QVBoxLayout()
+		self.vbl2=QtWidgets.QVBoxLayout()
 		self.gbl.addLayout(self.vbl2,6,2)
 		self.vbl2.addStretch(5)
 		
-		self.wlroimaskblur=QtGui.QLabel("Blur")
+		self.wlroimaskblur=QtWidgets.QLabel("Blur")
 		self.vbl2.addWidget(self.wlroimaskblur)
 		
-		self.wsbroimaskblur=QtGui.QSpinBox()
+		self.wsbroimaskblur=QtWidgets.QSpinBox()
 		self.wsbroimaskblur.setRange(0,25)
 		self.vbl2.addWidget(self.wsbroimaskblur)
 
 		self.vbl2.addSpacing(16)
 		
-		self.wbroigo=QtGui.QPushButton(QtCore.QChar(0x2192))
+		self.wbroigo=QtWidgets.QPushButton(QChar(0x2192))
 		self.vbl2.addWidget(self.wbroigo)
 
 
@@ -315,26 +321,26 @@
 		
 		self.vbl2.addStretch(5)
 
-		self.wlarrow1=QtGui.QLabel(QtCore.QChar(0x2192))
+		self.wlarrow1=QtWidgets.QLabel(QChar(0x2192))
 		self.gbl.addWidget(self.wlarrow1,4,4)
 
 		###### Results
 		# Widget showing lists of different result sets
-		self.vbl3=QtGui.QVBoxLayout()
+		self.vbl3=QtWidgets.QVBoxLayout()
 		self.gbl.addLayout(self.vbl3,3,6,5,1)
 		
-		self.wllistresult=QtGui.QLabel("Results")
+		self.wllistresult=QtWidgets.QLabel("Results")
 #		self.wllistresult.setAlignment(Qt.AlignHCenter)
 		self.vbl3.addWidget(self.wllistresult)
 		
-		self.wlistresult=QtGui.QListWidget()
+		self.wlistresult=QtWidgets.QListWidget()
 		self.vbl3.addWidget(self.wlistresult)
 
 		###### Parameters for processing
-		self.vgb1=QtGui.QGroupBox("Launch Job")
+		self.vgb1=QtWidgets.QGroupBox("Launch Job")
 		self.vbl3.addWidget(self.vgb1)
 		
-		self.vbl3a=QtGui.QVBoxLayout()
+		self.vbl3a=QtWidgets.QVBoxLayout()
 		self.vgb1.setLayout(self.vbl3a)
 		
 		self.wvbclasses=ValBox(None,(0,256),"# Classes",32)
@@ -362,12 +368,12 @@
 		self.wvbcores.setIntonly(True)
 		self.vbl3a.addWidget(self.wvbcores)
 		
-		self.wcbprocmode=QtGui.QComboBox()
+		self.wcbprocmode=QtWidgets.QComboBox()
 		self.wcbprocmode.addItem("PCA / k-means")
 		self.wcbprocmode.addItem("Average Density")
 		self.vbl3a.addWidget(self.wcbprocmode)
 		
-		self.wpbprogress=QtGui.QProgressBar()
+		self.wpbprogress=QtWidgets.QProgressBar()
 		self.wpbprogress.setEnabled(False)
 		self.wpbprogress.setMinimum(0)
 		self.wpbprogress.setMaximum(100)
@@ -375,23 +381,23 @@
 		self.vbl3a.addWidget(self.wpbprogress)
 		
 		# doubles as a cancel button
-		self.wbcompute=QtGui.QPushButton("Compute")
+		self.wbcompute=QtWidgets.QPushButton("Compute")
 		self.vbl3a.addWidget(self.wbcompute)
 
-		self.wlarrow2=QtGui.QLabel(QtCore.QChar(0x2192))
+		self.wlarrow2=QtWidgets.QLabel(QChar(0x2192))
 		self.gbl.addWidget(self.wlarrow2,4,7)
 
 
 		###### Output widgets
 		# Class-averages
-		self.wlclasses=QtGui.QLabel("<big><pre>Classes</pre></big>")
+		self.wlclasses=QtWidgets.QLabel("<big><pre>Classes</pre></big>")
 		self.wlclasses.setAlignment(Qt.AlignHCenter)
 		self.gbl.addWidget(self.wlclasses,2,9)
 		
 		self.w2dclasses=EMImage2DWidget()
 		self.gbl.addWidget(self.w2dclasses,3,9)
 
-		self.wbshowptcl=QtGui.QPushButton(QtCore.QChar(0x2193))
+		self.wbshowptcl=QtWidgets.QPushButton(QChar(0x2193))
 		self.gbl.addWidget(self.wbshowptcl,4,9)
 
 		self.w2dptcl=EMImage2DWidget()
@@ -410,23 +416,23 @@
 
 		#self.hbl1.addStretch(5)
 
-		QtCore.QObject.connect(self.wbdrawali,QtCore.SIGNAL("clicked(bool)"),self.aliDrawMode)
-		QtCore.QObject.connect(self.wbautoali,QtCore.SIGNAL("clicked(bool)"),self.aliAutoPress)
-		QtCore.QObject.connect(self.wbresetali,QtCore.SIGNAL("clicked(bool)"),self.aliResetPress)
-		QtCore.QObject.connect(self.wbaligo,QtCore.SIGNAL("clicked(bool)"),self.aliGoPress)
-		QtCore.QObject.connect(self.wbrecalcref,QtCore.SIGNAL("clicked(bool)"),self.aliRecalcRefPress)
-		QtCore.QObject.connect(self.wbrrecalcref,QtCore.SIGNAL("clicked(bool)"),self.aliRRecalcRefPress)
-		QtCore.QObject.connect(self.wbdrawroi,QtCore.SIGNAL("clicked(bool)"),self.roiDrawMode)
-		QtCore.QObject.connect(self.wbautoroi,QtCore.SIGNAL("clicked(bool)"),self.roiAutoPress)
-		QtCore.QObject.connect(self.wbresetroi,QtCore.SIGNAL("clicked(bool)"),self.roiResetPress)
-		QtCore.QObject.connect(self.wbroigo,QtCore.SIGNAL("clicked(bool)"),self.roiGoPress)
-		QtCore.QObject.connect(self.wbcompute,QtCore.SIGNAL("clicked(bool)"),self.doCompute)
-		QtCore.QObject.connect(self.wbshowptcl,QtCore.SIGNAL("clicked(bool)"),self.showParticles)
-		QtCore.QObject.connect(self.wvbiter,QtCore.SIGNAL("valueChanged"),self.newIter)
-		QtCore.QObject.connect(self.wvsnum,QtCore.SIGNAL("valueChanged"),self.newThresh)
-		QtCore.QObject.connect(self.wbdoavg,QtCore.SIGNAL("clicked(bool)"),self.avgPress)
+		self.wbdrawali.clicked[bool].connect(self.aliDrawMode)
+		self.wbautoali.clicked[bool].connect(self.aliAutoPress)
+		self.wbresetali.clicked[bool].connect(self.aliResetPress)
+		self.wbaligo.clicked[bool].connect(self.aliGoPress)
+		self.wbrecalcref.clicked[bool].connect(self.aliRecalcRefPress)
+		self.wbrrecalcref.clicked[bool].connect(self.aliRRecalcRefPress)
+		self.wbdrawroi.clicked[bool].connect(self.roiDrawMode)
+		self.wbautoroi.clicked[bool].connect(self.roiAutoPress)
+		self.wbresetroi.clicked[bool].connect(self.roiResetPress)
+		self.wbroigo.clicked[bool].connect(self.roiGoPress)
+		self.wbcompute.clicked[bool].connect(self.doCompute)
+		self.wbshowptcl.clicked[bool].connect(self.showParticles)
+		self.wvbiter.valueChanged.connect(self.newIter)
+		self.wvsnum.valueChanged.connect(self.newThresh)
+		self.wbdoavg.clicked[bool].connect(self.avgPress)
 
-		QtCore.QObject.connect(self.mfileopen,QtCore.SIGNAL("triggered(bool)")  ,self.menuFileOpen  )
+		self.mfileopen.triggered[bool].connect(self.menuFileOpen)
 
 
 		# set up draw mode
@@ -522,12 +528,12 @@
 
 	def menuFileOpen(self,x):
 		if self.particles!=None:
-			QtGui.QMessageBox.warning(None,"Error","%s already contains a stack of particles. A new folder is required to start with a new stack of particles. Rerun without --path option."%self.path)
+			QtWidgets.QMessageBox.warning(None,"Error","%s already contains a stack of particles. A new folder is required to start with a new stack of particles. Rerun without --path option."%self.path)
 			return
 
 		self.dialog = embrowser.EMBrowserWidget(withmodal=True,multiselect=False)
-		QtCore.QObject.connect(self.dialog,QtCore.SIGNAL("ok"),self.gotPath)
-		QtCore.QObject.connect(self.dialog,QtCore.SIGNAL("cancel"),self.gotPath)
+		self.dialog.ok.connect(self.gotPath)
+		self.dialog.cancel.connect(self.gotPath)
 		self.dialog.show()
 	
 	def gotPath(self):
@@ -616,7 +622,7 @@
 		while 1:
 			time.sleep(0.2)
 			self.wpbprogress.setValue(int(lst.qsize()*100/maxl))
-			QtGui.qApp.processEvents()
+			QtWidgets.QApplication.processEvents()
 
 			# If any threads are alive, it breaks out of the inner loop, if none are alive, the else block breaks out of the outer loop
 			for t in thrs:
@@ -632,7 +638,7 @@
 
 		self.wpbprogress.setEnabled(True)
 		self.wpbprogress.reset()
-		QtGui.qApp.processEvents()
+		QtWidgets.QApplication.processEvents()
 		nthr=int(self.wvbcores.getValue())		# number of threads to use for faster alignments
 
 		print("bs1")
@@ -905,7 +911,7 @@
 		
 		if mode==0 : self.doComputePCA()
 		elif mode==1 : self.doComputeAvD()
-		else : QtGui.QMessageBox.warning("Unknown mode %d"%mode)
+		else : QtWidgets.QMessageBox.warning("Unknown mode %d"%mode)
 		
 		return
 		
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2parallel.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2parallel.py	2017-10-21 17:15:08.000000000 -0500
@@ -230,8 +230,8 @@
 
 # We import Qt even if we don't need it
 try:
-	from PyQt4 import QtCore, QtGui
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtWidgets
+	from PyQt5.QtCore import Qt
 except:
 	class dummy:
 		"A dummy class for use when Qt not installed"
@@ -257,7 +257,7 @@
 #	activedata=TaskData(queue.active)
 #	completedata=TaskData(queue.complete)
 
-	app = QtGui.QApplication([])
+	app = QtWidgets.QApplication([])
 	window = GUIservmon()
 	
 #	ui.tableView.setModel(data)
@@ -267,34 +267,34 @@
 	
 	app.exec_()
 	
-class GUIservmon(QtGui.QMainWindow):
+class GUIservmon(QtWidgets.QMainWindow):
 	"""A DC server monitor GUI"""
 	def __init__(self):
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 
-		self.cw=QtGui.QWidget()
+		self.cw=QtWidgets.QWidget()
 		self.setCentralWidget(self.cw)
-		self.vbl=QtGui.QVBoxLayout(self.cw)
+		self.vbl=QtWidgets.QVBoxLayout(self.cw)
 		
-		self.tabs = QtGui.QTabWidget()
+		self.tabs = QtWidgets.QTabWidget()
 		self.vbl.addWidget(self.tabs)
-		self.tabs.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.tabs.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 	
-		self.activetab=QtGui.QWidget()
-		self.vblat=QtGui.QVBoxLayout(self.activetab)
-		self.actview=QtGui.QTableView()
+		self.activetab=QtWidgets.QWidget()
+		self.vblat=QtWidgets.QVBoxLayout(self.activetab)
+		self.actview=QtWidgets.QTableView()
 		self.vblat.addWidget(self.actview)
 		self.tabs.addTab(self.activetab,"Active")
 		
-		self.donetab=QtGui.QWidget()
-		self.vbldt=QtGui.QVBoxLayout(self.donetab)
-		self.doneview=QtGui.QTableView()
+		self.donetab=QtWidgets.QWidget()
+		self.vbldt=QtWidgets.QVBoxLayout(self.donetab)
+		self.doneview=QtWidgets.QTableView()
 		self.vbldt.addWidget(self.doneview)
 		self.tabs.addTab(self.donetab,"Complete")
 		
-		self.clienttab=QtGui.QWidget()
-		self.vblct=QtGui.QVBoxLayout(self.clienttab)
-		self.clientview=QtGui.QTableView()
+		self.clienttab=QtWidgets.QWidget()
+		self.vblct=QtWidgets.QVBoxLayout(self.clienttab)
+		self.clientview=QtWidgets.QTableView()
 		self.vblct.addWidget(self.clientview)
 		self.tabs.addTab(self.clienttab,"Clients")
 		
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2pdbviewer.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2pdbviewer.py	2017-10-21 17:15:09.000000000 -0500
@@ -37,8 +37,7 @@
 import os
 import sys
 
-from PyQt4 import QtCore
-from PyQt4 import QtGui
+from PyQt5 import QtCore
 
 def main():
 	
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2preferences.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2preferences.py	2017-10-21 17:15:09.000000000 -0500
@@ -32,7 +32,7 @@
 #
 #
 import EMAN2db
-from emdatastorage import ParamDef 
+from emdatastorage import ParamDef
 
 from emsprworkflow import WorkFlowTask
 from emapplication import get_application
@@ -41,6 +41,8 @@
 HOMEDB=EMAN2db.EMAN2DB.open_db()
 
 class EMPreferencesTask(WorkFlowTask):
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self,application=None):
 		WorkFlowTask.__init__(self)
 		self.preferred_size = [240,240]
@@ -83,8 +85,8 @@
 		self.write_db_entries(params)
 		self.form.close()
 		self.form = None
-		from PyQt4 import QtCore
-		self.emit(QtCore.SIGNAL("task_idle"))
+		from PyQt5 import QtCore
+		self.task_idle.emit()
 	
 	def run_form(self):
 		from emform import EMTableFormWidget
@@ -93,10 +95,10 @@
 		self.form.setWindowTitle(self.window_title)
 		get_application().show_specific(self.form)
 		
-		from PyQt4 import QtCore
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_ok"),self.on_form_ok)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_cancel"),self.on_form_cancel)
-		QtCore.QObject.connect(self.form,QtCore.SIGNAL("emform_close"),self.on_form_close)
+		from PyQt5 import QtCore
+		self.form.emform_ok.connect(self.on_form_ok)
+		self.form.emform_cancel.connect(self.on_form_cancel)
+		self.form.emform_close.connect(self.on_form_close)
 		
 	def write_db_entries(self,params):
 		HOMEDB.open_dict("display_preferences")
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2projectmanager.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2projectmanager.py	2017-10-21 17:15:10.000000000 -0500
@@ -32,8 +32,8 @@
 #
 
 from EMAN2 import *
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from pmicons import *
 import os, json, re, glob, signal
 import subprocess
@@ -41,11 +41,18 @@
 from valslider import EMQTColorWidget
 from embrowser import EMBrowserWidget
 
-class EMProjectManager(QtGui.QMainWindow):
+try:
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+QStringList = list
+
+class EMProjectManager(QtWidgets.QMainWindow):
 	""" The EM Project Manager is a QT application to provide a GUI for EMAN2 job managment.
 	See the wiki for more details. For documentation see the EMAN2 WIKI """
 	def __init__(self):
-		QtGui.QMainWindow.__init__(self)
+		QtWidgets.QMainWindow.__init__(self)
 		# default PM attributes
 		self.pm_cwd = os.getcwd()
 		self.pn_project_name_default='Unknown'
@@ -68,15 +75,15 @@
 		self.makeMenues()
 		font = QtGui.QFont()
 		font.setBold(True)
-		centralwidget = QtGui.QWidget()
-		vsplitter = QtGui.QSplitter(QtCore.Qt.Vertical)
+		centralwidget = QtWidgets.QWidget()
+		vsplitter = QtWidgets.QSplitter(QtCore.Qt.Vertical)
 
 		# Make the tiltebars
-		grid = QtGui.QGridLayout()
+		grid = QtWidgets.QGridLayout()
 		grid.addWidget(self.makeTilteBarWidget(), 0, 0, 1, 3)
 		#grid.addWidget(workflowcontrollabel, 1,0)
 		grid.addWidget(self.makeModeWidget(font))
-		guilabel = QtGui.QLabel("EMAN2 Program Interface", centralwidget)
+		guilabel = QtWidgets.QLabel("EMAN2 Program Interface", centralwidget)
 		guilabel.setFont(font)
 		guilabel.setMaximumHeight(20)
 		grid.addWidget(guilabel, 1,1)
@@ -144,36 +151,36 @@
 		# File menu
 		filemenu = menubar.addMenu('&File')
 		# exit
-		exit = QtGui.QAction('Exit', self)
+		exit = QtWidgets.QAction('Exit', self)
 		exit.setShortcut('Ctrl+Q')
 		exit.setStatusTip('Exit application')
-		self.connect(exit, QtCore.SIGNAL('triggered()'), QtCore.SLOT('close()'))
+		exit.triggered.connect(close)
 		filemenu.addAction(exit)
 
 		# Project
 		projectmenu = menubar.addMenu('&Project')
-		openproject = QtGui.QAction('Open Project', self)
+		openproject = QtWidgets.QAction('Open Project', self)
 		openproject.setShortcut('Ctrl+O')
 		openproject.setStatusTip('Open Project')
-		self.connect(openproject, QtCore.SIGNAL('triggered()'), self._on_openproject)
+		openproject.triggered.connect(self._on_openproject)
 		projectmenu.addAction(openproject)
-		editproject = QtGui.QAction('Edit Project', self)
+		editproject = QtWidgets.QAction('Edit Project', self)
 		editproject.setShortcut('Ctrl+E')
 		editproject.setStatusTip('Edit Project')
-		self.connect(editproject, QtCore.SIGNAL('triggered()'), self._on_editproject)
+		editproject.triggered.connect(self._on_editproject)
 		projectmenu.addAction(editproject)
 		# Options
 		#optionsmenu = menubar.addMenu('&Options')
 
 		# Utils
 		utilsmenu = menubar.addMenu('&Utilities')
-		filebrowser = QtGui.QAction('File Browser', self)
+		filebrowser = QtWidgets.QAction('File Browser', self)
 		filebrowser.setShortcut('Ctrl+F')
 		filebrowser.setStatusTip('File Browser')
 		utilsmenu.addAction(filebrowser)
 		utilsmenu.addSeparator()
-		self.connect(filebrowser, QtCore.SIGNAL('triggered()'), self._on_browse)
-		self.dumpterminal = QtGui.QAction('Dump Terminal', self)
+		filebrowser.triggered.connect(self._on_browse)
+		self.dumpterminal = QtWidgets.QAction('Dump Terminal', self)
 		self.dumpterminal.setCheckable(True)
 		self.dumpterminal.setChecked(False)
 		utilsmenu.addAction(self.dumpterminal)
@@ -182,22 +189,22 @@
 
 		# Help
 		helpmenu = menubar.addMenu('&Help')
-		about = QtGui.QAction('About', self)
+		about = QtWidgets.QAction('About', self)
 		about.setStatusTip('About')
 		helpmenu.addAction(about)
-		helpdoc = QtGui.QAction('Help', self)
+		helpdoc = QtWidgets.QAction('Help', self)
 		helpdoc.setStatusTip('Help')
 		helpmenu.addAction(helpdoc)
 
 	def makeModeWidget(self, font):
 		""" Return a mode control widget """
-		widget = QtGui.QWidget()
-		box = QtGui.QHBoxLayout()
+		widget = QtWidgets.QWidget()
+		box = QtWidgets.QHBoxLayout()
 		box.setContentsMargins(0,0,0,0)
-		workflowcontrollabel = QtGui.QLabel("Workflow Mode", widget)
+		workflowcontrollabel = QtWidgets.QLabel("Workflow Mode", widget)
 		workflowcontrollabel.setFont(font)
 		workflowcontrollabel.setMaximumHeight(20)
-		self.modeCB = QtGui.QComboBox()
+		self.modeCB = QtWidgets.QComboBox()
 		# To add a new mode add an item to the list, and then add the json file in fuction: makeStackedWidget
 		self.modeCB.addItem("SPR")
 		self.modeCB.addItem("SPT")
@@ -207,7 +214,7 @@
 		box.addWidget(self.modeCB)
 		widget.setLayout(box)
 
-		self.connect(self.modeCB, QtCore.SIGNAL("activated(int)"), self._onModeChange)
+		self.modeCB.activated[int].connect(self._onModeChange)
 
 		return widget
 
@@ -217,8 +224,8 @@
 
 	def _on_openproject(self):
 		self.openbrowser = EMBrowserWidget(withmodal=True,multiselect=False)
-		QtCore.QObject.connect(self.openbrowser, QtCore.SIGNAL("ok"),self._onopen_ok)
-		QtCore.QObject.connect(self.openbrowser, QtCore.SIGNAL("cancel"),self._onopen_cancel)
+		self.openbrowser.ok.connect(self._onopen_ok)
+		self.openbrowser.cancel.connect(self._onopen_cancel)
 		self.openbrowser.show()
 		self.activateWindow()
 
@@ -243,15 +250,15 @@
 		"""
 		Make the title bar widget (Project ICON + label)
 		"""
-		tbwidget = QtGui.QFrame()
-		tbwidget.setFrameShape(QtGui.QFrame.StyledPanel)
-		grid = QtGui.QGridLayout()
+		tbwidget = QtWidgets.QFrame()
+		tbwidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
+		grid = QtWidgets.QGridLayout()
 		self.PMIcon = PMIcon(self.pm_icon, tbwidget)
 		self.PMIcon.setAlignment(QtCore.Qt.AlignLeft)
 		grid.addWidget(self.PMIcon,0 , 0, 2, 1)
-		self.PMTitle = QtGui.QLabel("EMAN2 Project Manager ")
+		self.PMTitle = QtWidgets.QLabel("EMAN2 Project Manager ")
 		self.PMTitle.setAlignment(QtCore.Qt.AlignCenter)
-		self.PMProjectNameBanner = QtGui.QLabel("Project Name: "+self.pn_project_name)
+		self.PMProjectNameBanner = QtWidgets.QLabel("Project Name: "+self.pn_project_name)
 		self.PMProjectNameBanner.setAlignment(QtCore.Qt.AlignCenter)
 		titlefont = QtGui.QFont()
 		titlefont.setPointSize(30)
@@ -272,7 +279,7 @@
 		"""
 		This is the stacked widget to manage the tree types. To Add modes, do so here. Be sure to add the mode to the combo box in function: makeModeWidget
 		"""
-		self.tree_stacked_widget = QtGui.QStackedWidget()
+		self.tree_stacked_widget = QtWidgets.QStackedWidget()
 		self.tree_stacked_widget.setMinimumWidth(300)
 		self.tree_stacked_widget.addWidget(self.makeTreeWidget(os.getenv("EMAN2DIR")+'/lib/pmconfig/spr.json', 'SPR'))
 		#self.tree_stacked_widget.addWidget(self.makeTreeWidget(os.getenv("EMAN2DIR")+'/lib/pmconfig/spt.json', 'SPT'))
@@ -292,12 +299,12 @@
 		When a python script is called for the first time a GUI widget is made and added to the stack
 		The First Widget on the stack is the blank widget, the rest are e2program widgets
 		"""
-		self.gui_stacked_widget = QtGui.QStackedWidget()
+		self.gui_stacked_widget = QtWidgets.QStackedWidget()
 		# Set the initial height of the browser
 		#self.gui_stacked_widget.setMinimumHeight(250)
-		self.gui_stacked_widget.setFrameShape(QtGui.QFrame.StyledPanel)
+		self.gui_stacked_widget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		# Blank screen widget
-		self.gui_stacked_widget.addWidget(QtGui.QWidget())
+		self.gui_stacked_widget.addWidget(QtWidgets.QWidget())
 		self.stackedWidgetHash = {}
 
 		return self.gui_stacked_widget
@@ -306,10 +313,10 @@
 		"""
 		Get get ToolBar widget
 		"""
-		toolwidget = QtGui.QFrame()
+		toolwidget = QtWidgets.QFrame()
 		#toolwidget.setFrameShape(QtGui.QFrame.StyledPanel)
-		tbox = QtGui.QVBoxLayout()
-		self.browsebutton = QtGui.QToolButton()
+		tbox = QtWidgets.QVBoxLayout()
+		self.browsebutton = QtWidgets.QToolButton()
 		self.browsebutton.setIcon(QtGui.QIcon(QtGui.QPixmap(browseicon)))
 		self.browsebutton.setToolTip("Browse button")
 		self.browsebutton.setMinimumWidth(30)
@@ -332,10 +339,10 @@
 		tbox.setAlignment(QtCore.Qt.AlignTop)
 		toolwidget.setLayout(tbox)
 
-		QtCore.QObject.connect(self.browsebutton,QtCore.SIGNAL("clicked()"),self._on_browse)
-		QtCore.QObject.connect(self.helpbutton,QtCore.SIGNAL("stateChanged(bool)"),self._on_helpbutton)
-		QtCore.QObject.connect(self.logbutton,QtCore.SIGNAL("stateChanged(bool)"),self._on_logbutton)
-		QtCore.QObject.connect(self.taskmanagerbutton,QtCore.SIGNAL("stateChanged(bool)"),self._on_taskmgrbutton)
+		self.browsebutton.clicked.connect(self._on_browse)
+		self.helpbutton.stateChanged[bool].connect(self._on_helpbutton)
+		self.logbutton.stateChanged[bool].connect(self._on_logbutton)
+		self.taskmanagerbutton.stateChanged[bool].connect(self._on_taskmgrbutton)
 
 		return toolwidget
 
@@ -419,7 +426,7 @@
 		#programtoolwidget = QtGui.QFrame()
 		#programtoolwidget.setFrameShape(QtGui.QFrame.StyledPanel)
 		#tbox = QtGui.QVBoxLayout()
-		self.wikibutton = QtGui.QToolButton()
+		self.wikibutton = QtWidgets.QToolButton()
 		self.wikibutton.setIcon(QtGui.QIcon(QtGui.QPixmap(wikiicon)))
 		self.wikibutton.setToolTip("Show Wiki button")
 		self.wikibutton.setMinimumWidth(30)
@@ -430,7 +437,7 @@
 		self.expertbutton.setIcon(QtGui.QIcon(QtGui.QPixmap(experticon)))
 		self.expertbutton.setToolTip("ExpertMode")
 		self.expertbutton.setEnabled(False)
-		self.wizardbutton = QtGui.QToolButton()
+		self.wizardbutton = QtWidgets.QToolButton()
 		self.wizardbutton.setIcon(QtGui.QIcon(QtGui.QPixmap(wizardicon)))
 		self.wizardbutton.setToolTip("Form Wizard")
 		self.wizardbutton.setMinimumWidth(30)
@@ -443,9 +450,9 @@
 		#tbox.setContentsMargins(0,0,0,0)
 		#tbox.setAlignment(QtCore.Qt.AlignTop)
 
-		QtCore.QObject.connect(self.wikibutton,QtCore.SIGNAL("clicked()"),self._on_wikibutton)
-		QtCore.QObject.connect(self.wizardbutton,QtCore.SIGNAL("clicked()"),self._on_wizardbutton)
-		QtCore.QObject.connect(self.expertbutton,QtCore.SIGNAL("stateChanged(bool)"),self._on_expertmodechanged)
+		self.wikibutton.clicked.connect(self._on_wikibutton)
+		self.wizardbutton.clicked.connect(self._on_wizardbutton)
+		self.expertbutton.stateChanged[bool].connect(self._on_expertmodechanged)
 
 		#return programtoolwidget
 
@@ -483,19 +490,19 @@
 		"""
 		Get the e2program interface command buttons widget
 		"""
-		cmdwidget = QtGui.QFrame()
-		cmdwidget.setFrameShape(QtGui.QFrame.StyledPanel)
+		cmdwidget = QtWidgets.QFrame()
+		cmdwidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		cmdwidget.setMaximumHeight(40)
-		hbox = QtGui.QHBoxLayout()
-		self.cancelbutton = QtGui.QPushButton("Cancel")
-		self.launchbutton = QtGui.QPushButton("Launch")
+		hbox = QtWidgets.QHBoxLayout()
+		self.cancelbutton = QtWidgets.QPushButton("Cancel")
+		self.launchbutton = QtWidgets.QPushButton("Launch")
 		hbox.addWidget(self.cancelbutton)
 		hbox.addWidget(self.launchbutton)
 		hbox.setContentsMargins(4,4,4,4)
 		cmdwidget.setLayout(hbox)
 
-		QtCore.QObject.connect(self.cancelbutton,QtCore.SIGNAL("clicked()"),self._on_cmd_cancel)
-		QtCore.QObject.connect(self.launchbutton,QtCore.SIGNAL("clicked()"),self._on_cmd_launch)
+		self.cancelbutton.clicked.connect(self._on_cmd_cancel)
+		self.launchbutton.clicked.connect(self._on_cmd_launch)
 
 		return cmdwidget
 
@@ -592,7 +599,7 @@
 		recursive helper function for loadTree
 		"""
 		for child in toplevel["CHILDREN"]:
-			qtreewidget = PMQTreeWidgetItem(QtCore.QStringList(child["NAME"]))
+			qtreewidget = PMQTreeWidgetItem(QStringList(child["NAME"]))
 			qtreewidget.setIcon(0, self.icons[child["ICON"]])
 			# optional program
 			if "PROGRAM" in child: qtreewidget.setProgram(child["PROGRAM"])
@@ -629,11 +636,11 @@
 		tree = json.loads(data)
 		jsonfile.close()
 
-		QTree = QtGui.QTreeWidget()
+		QTree = QtWidgets.QTreeWidget()
 		QTree.setHeaderLabel(treename)
 
 		for toplevel in tree:
-			qtreewidget = PMQTreeWidgetItem(QtCore.QStringList(toplevel["NAME"]))
+			qtreewidget = PMQTreeWidgetItem(QStringList(toplevel["NAME"]))
 			qtreewidget.setIcon(0, self.icons[toplevel["ICON"]])
 			# optional program
 			if "PROGRAM" in toplevel: qtreewidget.setProgram(toplevel["PROGRAM"])
@@ -652,7 +659,7 @@
 			self._add_children(toplevel, qtreewidget)
 			QTree.addTopLevelItem(qtreewidget)
 
-		QtCore.QObject.connect(QTree, QtCore.SIGNAL("itemClicked(QTreeWidgetItem*,int)"), self._tree_widget_click)
+		QTree.itemClicked[QTreeWidgetItem, int].connect(self._tree_widget_click)
 
 		return QTree
 
@@ -923,13 +930,13 @@
 			# Some sort of syncronization issue
 			time.sleep(0.1)
 
-class EMAN2StatusBar(QtGui.QTextEdit):
+class EMAN2StatusBar(QtWidgets.QTextEdit):
 	"""
 	The Stats bar for PM
 	"""
 	def __init__(self, text, style):
-		QtGui.QTextEdit.__init__(self)
-		self.setFrameShape(QtGui.QFrame.Panel | QtGui.QFrame.Sunken)
+		QtWidgets.QTextEdit.__init__(self)
+		self.setFrameShape(QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
 		self.setLineWidth(2)
 		#self.setMargin(4)
 		self.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
@@ -948,24 +955,24 @@
 
 
 
-class PMIcon(QtGui.QLabel):
+class PMIcon(QtWidgets.QLabel):
 	"""
 	The Icon manager for PM
 	"""
 	def __init__(self, image, parent=None):
-		QtGui.QLabel.__init__(self, ("<img src=\"%s\" />")%image, parent)
+		QtWidgets.QLabel.__init__(self, ("<img src=\"%s\" />")%image, parent)
 
 	def setIcon(self, image):
 		self.setText(("<img src=\"%s\" />")%image)
 
-class EMWizard(QtGui.QWizard):
+class EMWizard(QtWidgets.QWizard):
 	"""
 	This creates a wizard for filling out EM program forms.
 	wizarddata is a list of dicts
 	e2gui is a reference to a PMProgramWidget which is what this wizard is to fill out
 	"""
 	def __init__(self, wizarddata, e2gui):
-		QtGui.QWizard.__init__(self)
+		QtWidgets.QWizard.__init__(self)
 		#self.setModal(True)
 		self.setWindowTitle("e2program wizard")
 		self.e2gui = e2gui
@@ -974,27 +981,27 @@
 			self.addPage(EMWizardPage(page, self.e2gui))
 
 
-class EMWizardPage(QtGui.QWizardPage):
+class EMWizardPage(QtWidgets.QWizardPage):
 	"""
 	Make a page for the wizard, uses input validation. If input is not valid send a message to the PM status bar and you will not be allowed to continue to the next wizard page
 	"""
 	def __init__(self, page, e2gui):
-		QtGui.QWizardPage.__init__(self)
+		QtWidgets.QWizardPage.__init__(self)
 		self.e2gui = e2gui
 		self.widgetlist = []
 
 		#Set Hep info
 		self.setTitle(page["TITLE"])
-		label = QtGui.QLabel(page["INST"])
+		label = QtWidgets.QLabel(page["INST"])
 		label.setWordWrap(True)
 		# add to grid
-		grid = QtGui.QGridLayout()
+		grid = QtWidgets.QGridLayout()
 		grid.addWidget(label,0,0)
 
 		# Add widgets stuff
-		frame = QtGui.QFrame()
-		frame.setFrameStyle(QtGui.QFrame.StyledPanel)
-		framegrid = QtGui.QGridLayout()
+		frame = QtWidgets.QFrame()
+		frame.setFrameStyle(QtWidgets.QFrame.StyledPanel)
+		framegrid = QtWidgets.QGridLayout()
 		framegrid.setContentsMargins(6,0,6,0)
 
 		# Insanely if I were to just addWidget using self.e2gui.widgethash[widget], it steals it from the PMGUI layout, so I need to make a copy !!!
@@ -1017,13 +1024,13 @@
 			widget[0].setValue(widget[1].getValue())
 		return True
 
-class TheHelp(QtGui.QWidget):
+class TheHelp(QtWidgets.QWidget):
 	"""
 	A little widget to aid in the daily chores. Good help is hard to find these days.....
 	This is a GUI to e2help.py. Documentation is autogenerated from the EMAN2 C++ core
 	"""
 	def __init__(self, pm=None):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		if pm:
 			self.pm = weakref.ref(pm)
 		else:
@@ -1032,9 +1039,9 @@
 		self.widgetgeometry = None
 
 		self.setWindowTitle('The Help')
-		grid = QtGui.QGridLayout()
+		grid = QtWidgets.QGridLayout()
 		grid.addWidget(self.getToolBar(), 0, 0)
-		self.textbox = QtGui.QTextEdit()
+		self.textbox = QtWidgets.QTextEdit()
 		self.textbox.setReadOnly(True)
 		grid.addWidget(self.textbox, 1, 0)
 		self.setLayout(grid)
@@ -1044,22 +1051,22 @@
 
 	def getToolBar(self):
 		""" Return the toolbar widget """
-		tbwidget = QtGui.QWidget()
-		grid = QtGui.QGridLayout()
+		tbwidget = QtWidgets.QWidget()
+		grid = QtWidgets.QGridLayout()
 		grid.setContentsMargins(6,0,6,0)
 
 		font = QtGui.QFont()
 		font.setBold(True)
-		helplabel = QtGui.QLabel("EMAN2 topic:")
+		helplabel = QtWidgets.QLabel("EMAN2 topic:")
 		helplabel.setFont(font)
 		helplabel.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
 
-		hbox = QtGui.QHBoxLayout()
+		hbox = QtWidgets.QHBoxLayout()
 		hbox.addWidget(PMIcon(os.getenv("EMAN2DIR")+"/images/SirEMAN2.png"))
 		hbox.addWidget(helplabel)
 		hbox.setContentsMargins(0,0,0,0)
 		grid.addLayout(hbox,0, 0)
-		self.helpcb = QtGui.QComboBox()
+		self.helpcb = QtWidgets.QComboBox()
 		grid.addWidget(self.helpcb, 0, 1, 1, 2)
 
 		self.helpcb.addItem("aligners")
@@ -1082,7 +1089,7 @@
 		self.helptopics.append(["symmetries", dump_symmetries_list()])
 
 
-		self.connect(self.helpcb, QtCore.SIGNAL("activated(int)"), self._helpchange)
+		self.helpcb.activated[int].connect(self._helpchange)
 
 		tbwidget.setLayout(grid)
 		return tbwidget
@@ -1107,42 +1114,42 @@
 
 	def hideEvent(self, event):
 		""" This remebers the geometry when we hide the widget """
-		QtGui.QWidget.hideEvent(self, event)
+		QtWidgets.QWidget.hideEvent(self, event)
 		self.widgetgeometry = self.geometry()
 
 	def showEvent(self, event):
 		""" This recalls the geometry when we show the widget """
-		QtGui.QWidget.showEvent(self, event)
+		QtWidgets.QWidget.showEvent(self, event)
 		if self.widgetgeometry: self.setGeometry(self.widgetgeometry)
 
 	def closeEvent(self, event):
 		if self.pm: self.pm().thehelp = None
 		if self.pm: self.pm().updateProject()
 
-class NoteBook(QtGui.QWidget):
+class NoteBook(QtWidgets.QWidget):
 	"""
 	The Notebook for PM. The note book will reflect top levels jobs run, even if they were run on the command line. This class needs some work, b/c the notebook exhibits some funny font and color
 	behaviour. This is probably because the cursor is not a strict observer of the NoteBook state.
 	When jobs are laucned the command is recorded in this widget. In addition this widget saves its text as an HTML file named. pmnotes.html in the local project directory
 	"""
 	def __init__(self, pm):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.pm = weakref.ref(pm)
 		self.donotsave = False
 		self.widgetgeometry = None
 
 		self.setWindowTitle('NoteBook')
-		grid = QtGui.QGridLayout()
+		grid = QtWidgets.QGridLayout()
 		font = QtGui.QFont()
 		font.setBold(True)
-		textlabel = QtGui.QLabel("EMAN2 NoteBook")
+		textlabel = QtWidgets.QLabel("EMAN2 NoteBook")
 		textlabel.setFont(font)
 		self.texteditbox = PMTextEdit(self)
 		grid.addWidget(textlabel,0,0)
 		grid.addWidget(self.getToolBar(),1,0,1,2)
 		grid.addWidget(self.texteditbox,2,0,1,2)
-		self.savepb = QtGui.QPushButton("Save")
-		self.closepb = QtGui.QPushButton("Close")
+		self.savepb = QtWidgets.QPushButton("Save")
+		self.closepb = QtWidgets.QPushButton("Close")
 		grid.addWidget(self.savepb, 3,0)
 		grid.addWidget(self.closepb, 3,1)
 		self.setLayout(grid)
@@ -1153,22 +1160,22 @@
 		self.checkEMAN2LogFile()
 		self.writeNotes() # save changes from checkEMAN2LogFile()
 
-		self.connect(self.savepb, QtCore.SIGNAL('clicked()'), self._on_save)
-		self.connect(self.closepb, QtCore.SIGNAL('clicked()'), self._on_close)
+		self.savepb.clicked.connect(self._on_save)
+		self.closepb.clicked.connect(self._on_close)
 
 	def getToolBar(self):
 		""" Return the toolbar widget """
-		tbwidget = QtGui.QWidget()
-		hbox = QtGui.QHBoxLayout()
+		tbwidget = QtWidgets.QWidget()
+		hbox = QtWidgets.QHBoxLayout()
 		self.dbdict = js_open_dict(self.pm().getPMCWD()+"/info/notebook.json")
 
 		# font type
 		self.fontdb = QtGui.QFontDatabase()
-		self.fontfamily = QtGui.QComboBox()
+		self.fontfamily = QtWidgets.QComboBox()
 		self.fontfamily.addItems(self.fontdb.families())
 
 		# font size
-		self.fontsizecb = QtGui.QComboBox()
+		self.fontsizecb = QtWidgets.QComboBox()
 
 		# Bold italic, underline
 		self.boldbutton = PMToolButton()
@@ -1203,12 +1210,12 @@
 			self._load_fontsizes()
 
 		# Connect signals
-		self.connect(self.fontfamily, QtCore.SIGNAL("activated(int)"), self._fontfamilychange)
-		self.connect(self.fontsizecb, QtCore.SIGNAL("activated(int)"), self._fontchange)
-		self.connect(self.boldbutton, QtCore.SIGNAL("stateChanged(bool)"), self._fontchange)
-		self.connect(self.italicbutton, QtCore.SIGNAL("stateChanged(bool)"), self._fontchange)
-		self.connect(self.underlinebutton, QtCore.SIGNAL("stateChanged(bool)"), self._fontchange)
-		self.connect(self.fontcolor, QtCore.SIGNAL("newcolor(QColor)"), self._fontchange)
+		self.fontfamily.activated[int].connect(self._fontfamilychange)
+		self.fontsizecb.activated[int].connect(self._fontchange)
+		self.boldbutton.stateChanged[bool].connect(self._fontchange)
+		self.italicbutton.stateChanged[bool].connect(self._fontchange)
+		self.underlinebutton.stateChanged[bool].connect(self._fontchange)
+		self.fontcolor.newcolor[QColor].connect(self._fontchange)
 
 		return tbwidget
 
@@ -1295,12 +1302,12 @@
 
 	def hideEvent(self, event):
 		""" This remebers the geometry when we hide the widget """
-		QtGui.QWidget.hideEvent(self, event)
+		QtWidgets.QWidget.hideEvent(self, event)
 		self.widgetgeometry = self.geometry()
 
 	def showEvent(self, event):
 		""" This recalls the geometry when we show the widget """
-		QtGui.QWidget.showEvent(self, event)
+		QtWidgets.QWidget.showEvent(self, event)
 		if self.widgetgeometry: self.setGeometry(self.widgetgeometry)
 
 	def closeEvent(self, event):
@@ -1308,10 +1315,10 @@
 		self.pm().notebook = None
 		self.pm().updateProject()
 
-class PMTextEdit(QtGui.QTextEdit):
+class PMTextEdit(QtWidgets.QTextEdit):
 	""" Sub class of the QTextEdit widget to observe the PMNoteBook """
 	def __init__(self, parent):
-		QtGui.QTextEdit.__init__(self)
+		QtWidgets.QTextEdit.__init__(self)
 		self.parent = weakref.ref(parent)
 
 		self.setPMFontWeight(QtGui.QFont.Normal)
@@ -1319,7 +1326,7 @@
 
 	def mousePressEvent(self,event):
 		""" Stupidly, TextEdit resets the font based on its context, which I find undesireable """
-		QtGui.QTextEdit.mousePressEvent(self, event)
+		QtWidgets.QTextEdit.mousePressEvent(self, event)
 		self.setFontWeight(self.pmfontweight)
 		self.setTextColor(self.textcolor)
 
@@ -1360,42 +1367,42 @@
 		self.setPMFontItalic(self.parent().italicbutton.isDown())
 		self.setPMFontUnderline(self.parent().underlinebutton.isDown())
 
-class TaskManager(QtGui.QWidget):
+class TaskManager(QtWidgets.QWidget):
 	"""
 	The Task manager for PM, unlike e2workflow.py, this actualy works. Well sort of... Is uses a SIGTERM soft kill, which when it works is nice because EMAN2 jobs are
 	processed by EMAN2 eveent handlers, thus producing clean kills. Oftern though the job completely ignores SIGTERM and keeps on humming. Perhaps SIGTERM shoudl
 	be replaced with SIGKILL to hard kill it. Downside is that the kill could be dirty and corrupt. On the up side your jobs will actually be killed!
 	"""
 	def __init__(self, pm):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.pm = weakref.ref(pm)
 		self.widgetgeometry = None
 		self.setWindowTitle('Task Manager')
 
-		grid = QtGui.QGridLayout()
+		grid = QtWidgets.QGridLayout()
 		font = QtGui.QFont()
 		font.setBold(True)
-		textlabel = QtGui.QLabel("Running Tasks")
+		textlabel = QtWidgets.QLabel("Running Tasks")
 		textlabel.setFont(font)
 		grid.addWidget(textlabel,0,0)
-		self.list_widget = QtGui.QListWidget()
+		self.list_widget = QtWidgets.QListWidget()
 		grid.addWidget(self.list_widget,1,0,1,2)
-		self.killpb = QtGui.QPushButton("Kill")
-		self.closepb = QtGui.QPushButton("Close")
+		self.killpb = QtWidgets.QPushButton("Kill")
+		self.closepb = QtWidgets.QPushButton("Close")
 		grid.addWidget(self.killpb, 2,0)
 		grid.addWidget(self.closepb, 2,1)
 		self.setLayout(grid)
 		self.resize(400, 200)
 
 
-		self.connect(self.closepb, QtCore.SIGNAL('clicked()'), self._on_close)
-		self.connect(self.killpb, QtCore.SIGNAL('clicked()'), self._on_kill)
+		self.closepb.clicked.connect(self._on_close)
+		self.killpb.clicked.connect(self._on_kill)
 		self.tasks=None
 		self.update_tasks()
 
 		# A timer for updates
 		self.timer = QtCore.QTimer(self);
-		QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.update_tasks)
+		self.timer.timeout.connect(self.update_tasks)
 		self.timer.start(2000)
 
 	def check_task(self,fin,ptsk):
@@ -1568,22 +1575,22 @@
 
 	def hideEvent(self, event):
 		""" This remebers the geometry when we hide the widget """
-		QtGui.QWidget.hideEvent(self, event)
+		QtWidgets.QWidget.hideEvent(self, event)
 		self.widgetgeometry = self.geometry()
 
 	def showEvent(self, event):
 		""" This recalls the geometry when we show the widget """
-		QtGui.QWidget.showEvent(self, event)
+		QtWidgets.QWidget.showEvent(self, event)
 		if self.widgetgeometry: self.setGeometry(self.widgetgeometry)
 
 	def closeEvent(self, event):
 		self.pm().taskmanager = None
 		self.pm().updateProject()
 
-class PMQListWidgetItem(QtGui.QListWidgetItem):
+class PMQListWidgetItem(QtWidgets.QListWidgetItem):
 	""" A subclass of the QListWidgetItem for use in the task manger listwidget"""
 	def __init__(self, text):
-		QtGui.QListWidgetItem.__init__(self, text)
+		QtWidgets.QListWidgetItem.__init__(self, text)
 		self.pid = None
 		self.programname = None
 
@@ -1605,12 +1612,12 @@
 	def getProgramName(self):
 		return self.programname
 
-class PMProgramWidget(QtGui.QTabWidget):
+class PMProgramWidget(QtWidgets.QTabWidget):
 	"""
 	Creates a program interface for each e2 program, for each mode, etc. This is a tab widget and there are three tabs, a GUI tab, a comand line tab and a help tab
 	"""
 	def __init__(self, options, program, pm, mode):
-		QtGui.QTabWidget.__init__(self)
+		QtWidgets.QTabWidget.__init__(self)
 		self.pm = weakref.ref(pm)
 		self.setMinimumHeight(210) # Size of the tool bar
 
@@ -1619,12 +1626,12 @@
 		self.addTab(self.guiwidget, "GUI")
 
 		# Add command tab
-		self.guitexteditbox = QtGui.QTextEdit("")
+		self.guitexteditbox = QtWidgets.QTextEdit("")
 		self.guitexteditbox.setWordWrapMode(QtGui.QTextOption.WrapAnywhere)
 		self.addTab(self.guitexteditbox, "Command")
 
 		# Add help tab
-		self.helptexteditbox = QtGui.QTextEdit("")
+		self.helptexteditbox = QtWidgets.QTextEdit("")
 		self.helptexteditbox.setWordWrapMode(QtGui.QTextOption.WordWrap)
 		self.helptexteditbox.setReadOnly(True)
 		self.helptexteditbox.viewport().setCursor(QtCore.Qt.ArrowCursor)
@@ -1633,7 +1640,7 @@
 
 		self.previoustab = 0
 
-		QtCore.QObject.connect(self, QtCore.SIGNAL("currentChanged(int)"), self._on_tabchange)
+		self.currentChanged[int].connect(self._on_tabchange)
 
 	def updateWidget(self):
 		""" Delegate to guiwidget """
@@ -1666,14 +1673,14 @@
 
 		self.previoustab = idx
 
-class PMGUIWidget(QtGui.QScrollArea):
+class PMGUIWidget(QtWidgets.QScrollArea):
 	"""
 	Creates a GUI widget using a dict derived from the e2program options. Instances of this widget are added to the QStackedWidget on the right hand side of the PM.
 	When the user clicks on a leaf node in the workflow tree an instace of this class is created, if it doesn't already exists, and added to the stckedwidget. If it
 	already exists, then it is rendered visible.
 	"""
 	def __init__(self, options, program, pm, mode):
-		QtGui.QScrollArea.__init__(self)
+		QtWidgets.QScrollArea.__init__(self)
 		self.errorstate = False
 		# I need both an ordered list and an associavite means of accessing the widgets
 		self.widgetlist = []
@@ -1685,7 +1692,7 @@
 		self.mode = mode
 
 		# loop through options (a list of dicts) and generate the GUI widget
-		gridbox = QtGui.QGridLayout()
+		gridbox = QtWidgets.QGridLayout()
 		for option in options:
 			"""create the correct widget type"""
 			if ('expert' in  option) and self.pm().getProgramExpertMode() < 2: continue	# Do no add expertmode options if not in expert mode (defined as 2, available AND turned on) Should have used ENUM here
@@ -1718,7 +1725,7 @@
 				widget = PMFSCTableWidget(option['name'], self.getDefault(option), self.getSharingMode(option), postional=self.getPositional(option), initdefault=self.getDefault(option, nodb=True))
 
 			# Setup each widget
-			self.connect(widget,QtCore.SIGNAL("pmmessage(QString)"),self._on_message)
+			widget.pmmessage['QString'].connect(self._on_message)
 			widget.setToolTip(option['help'])
 			self.widgethash[option['name']] = widget
 			self.widgetlist.append(widget)
@@ -1726,14 +1733,14 @@
 
 		# Now make a widget and add it to the scroll area
 		gridbox.setContentsMargins(0,0,0,0)
-		self.scwidget = QtGui.QWidget()
+		self.scwidget = QtWidgets.QWidget()
 		self.scwidget.setLayout(gridbox)
 		self.scwidget.setMinimumWidth(self.width()-1.5*self.verticalScrollBar().width())
 		self.scwidget.setMaximumWidth(self.width()-1.5*self.verticalScrollBar().width())
 		self.setWidget(self.scwidget)
 		self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
 		self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
-		self.setSizePolicy(QtGui.QSizePolicy.Fixed,QtGui.QSizePolicy.Fixed)
+		self.setSizePolicy(QtWidgets.QSizePolicy.Fixed,QtWidgets.QSizePolicy.Fixed)
 
 	def getRowSpan(self, option):
 		"""Return the rowspan"""
@@ -1909,12 +1916,12 @@
 	def _on_message(self, QString):
 		self.pm().statusbar.setMessage(str(QString),"color:red;")
 
-class PMQTreeWidgetItem(QtGui.QTreeWidgetItem):
+class PMQTreeWidgetItem(QtWidgets.QTreeWidgetItem):
 	"""
 	Custon QTreeWidget for PM, holds a bunch of properites relating to the e2program(or table) it represnsts.
 	"""
 	def __init__(self, qstring):
-		QtGui.QTreeWidgetItem.__init__(self, qstring)
+		QtWidgets.QTreeWidgetItem.__init__(self, qstring)
 		self.program = None
 		self.table = None
 		self.mode = ""
@@ -1977,16 +1984,18 @@
 	def getExpertMode(self):
 		return self.exmodestate
 
-class PMToolButton(QtGui.QToolButton):
+class PMToolButton(QtWidgets.QToolButton):
 	""" Create a toogle button """
+	stateChanged = QtCore.pyqtSignal(bool)
+
 	def __init__(self):
-		QtGui.QToolButton.__init__(self)
+		QtWidgets.QToolButton.__init__(self)
 		self.setMinimumWidth(30)
 		self.setMinimumHeight(30)
 
 	def setDown(self, state, quiet=False):
-		QtGui.QToolButton.setDown(self, state)
-		if not quiet: self.emit(QtCore.SIGNAL("stateChanged(bool)"), state)
+		QtWidgets.QToolButton.setDown(self, state)
+		if not quiet: self.stateChanged.emit(state)
 
 	def mousePressEvent(self, event):
 		self.setDown(not self.isDown())
@@ -1994,21 +2003,21 @@
 	def mouseReleaseEvent(self, event):
 		pass
 
-class ProjectDialog(QtGui.QDialog):
+class ProjectDialog(QtWidgets.QDialog):
 	"""
 	Class for the Project New and Edit dialogs
 	"""
 	def __init__(self, pm):
-		QtGui.QDialog.__init__(self)
+		QtWidgets.QDialog.__init__(self)
 		self.pm = pm
 
 		# Dialog line edit fields
 		minwidth = 8*max(len(self.pm.pm_cwd),len(self.pm.pm_icon))
-		frame = QtGui.QFrame()
-		frame.setFrameStyle(QtGui.QFrame.StyledPanel)
-		grid = QtGui.QGridLayout()
+		frame = QtWidgets.QFrame()
+		frame.setFrameStyle(QtWidgets.QFrame.StyledPanel)
+		grid = QtWidgets.QGridLayout()
 		# add intro
-		textbox = QtGui.QTextEdit("")
+		textbox = QtWidgets.QTextEdit("")
 		textbox.setHtml("Welcome to the EMAN2 project manager. Please add project specific paramters below. For Questions email: <a href='mailto:sludtke@bcm.edu'>sludtke@bcm.edu<\a>")
 		textbox.setMaximumHeight(66)
 		textbox.setReadOnly(True)
@@ -2016,28 +2025,28 @@
 
 		grid.addWidget(textbox, 0, 0, 1, 2)
 		# add pm name and icon
-		project_name_label = QtGui.QLabel("Project Name")
-		self.project_name = QtGui.QLineEdit()
+		project_name_label = QtWidgets.QLabel("Project Name")
+		self.project_name = QtWidgets.QLineEdit()
 		self.project_name.setMinimumWidth(minwidth)
 		grid.addWidget(project_name_label, 1, 0)
 		grid.addWidget(self.project_name, 1, 1)
-		icon_path_label = QtGui.QLabel("Project Icon")
-		self.icon_path = QtGui.QLineEdit()
+		icon_path_label = QtWidgets.QLabel("Project Icon")
+		self.icon_path = QtWidgets.QLineEdit()
 		self.icon_path.setMinimumWidth(minwidth)
 		grid.addWidget(icon_path_label, 2, 0)
 		grid.addWidget(self.icon_path, 2, 1)
 		# Mass
-		particle_mass_label = QtGui.QLabel("Particle Mass (kDa)")
-		self.particle_mass = QtGui.QLineEdit()
+		particle_mass_label = QtWidgets.QLabel("Particle Mass (kDa)")
+		self.particle_mass = QtWidgets.QLineEdit()
 		grid.addWidget(particle_mass_label, 3, 0)
 		grid.addWidget(self.particle_mass, 3, 1)
 		# Scope pars
-		micrscope_cs_label = QtGui.QLabel("Microscope CS (mm)")
-		self.micrscope_cs = QtGui.QLineEdit()
-		microscope_voltage_label = QtGui.QLabel("Microscope Voltage")
-		self.microscope_voltage = QtGui.QLineEdit()
-		microscope_apix_label = QtGui.QLabel("Microscope apix")
-		self.microscope_apix = QtGui.QLineEdit()
+		micrscope_cs_label = QtWidgets.QLabel("Microscope CS (mm)")
+		self.micrscope_cs = QtWidgets.QLineEdit()
+		microscope_voltage_label = QtWidgets.QLabel("Microscope Voltage")
+		self.microscope_voltage = QtWidgets.QLineEdit()
+		microscope_apix_label = QtWidgets.QLabel("Microscope apix")
+		self.microscope_apix = QtWidgets.QLineEdit()
 		grid.addWidget(micrscope_cs_label, 4, 0)
 		grid.addWidget(self.micrscope_cs, 4, 1)
 		grid.addWidget(microscope_voltage_label, 5, 0)
@@ -2048,16 +2057,16 @@
 		frame.setLayout(grid)
 
 		# Ok, cancel buttons
-		done_pb = QtGui.QPushButton("Ok")
-		cancel_pb = QtGui.QPushButton("Cancel")
-		sgrid = QtGui.QGridLayout()
+		done_pb = QtWidgets.QPushButton("Ok")
+		cancel_pb = QtWidgets.QPushButton("Cancel")
+		sgrid = QtWidgets.QGridLayout()
 		sgrid.addWidget(frame,0,0,1,2)
 		sgrid.addWidget(done_pb,1,0)
 		sgrid.addWidget(cancel_pb,1,1)
 		self.setLayout(sgrid)
 
-		self.connect(done_pb, QtCore.SIGNAL('clicked()'), self._on_done)
-		self.connect(cancel_pb, QtCore.SIGNAL('clicked()'), self._on_cancel)
+		done_pb.clicked.connect(self._on_done)
+		cancel_pb.clicked.connect(self._on_cancel)
 
 		# Set values
 		self.fillFields()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2simmxxplor.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2simmxxplor.py	2017-10-21 17:15:11.000000000 -0500
@@ -34,7 +34,7 @@
 
 
 import os,sys
-from PyQt4 import QtGui,QtCore
+from PyQt5 import QtCore, QtGui, QtWidgets
 from valslider import ValSlider
 
 from e2eulerxplor import get_eulers_from
@@ -188,7 +188,7 @@
 		if self.mx_display == None:
 			self.mx_display = EMImage2DWidget()
 #			self.mx_display = EMImageMXWidget()
-			QtCore.QObject.connect(self.mx_display,QtCore.SIGNAL("module_closed"),self.on_mx_display_closed)
+			self.mx_display.module_closed.connect(self.on_mx_display_closed)
 			resize_necessary = True
 
 		if self.frc_display == None:
@@ -311,8 +311,8 @@
 #		print "simmx xplor died"
 
 	def add_simmx_options(self):
-		self.simmx_tab= QtGui.QWidget()
-		vbl = QtGui.QVBoxLayout(self.simmx_tab)
+		self.simmx_tab= QtWidgets.QWidget()
+		vbl = QtWidgets.QVBoxLayout(self.simmx_tab)
 
 		self.__init_ptcl_slider(vbl)
 		self.tabwidget.insertTab(0,self.simmx_tab,"Simmx")
@@ -332,12 +332,12 @@
 		#self.ptcl_slider.setIntonly(True)
 		#layout.addWidget(self.ptcl_slider)
 		#self.connect(self.ptcl_slider, QtCore.SIGNAL("valueChanged"), self.set_ptcl_idx)
-		self.ptcl_slider=QtGui.QSpinBox()
+		self.ptcl_slider=QtWidgets.QSpinBox()
 		self.ptcl_slider.setRange(0,1000)
 		self.ptcl_slider.setSingleStep(1)
 		self.ptcl_slider.setValue(0)
 		layout.addWidget(self.ptcl_slider)
-		self.connect(self.ptcl_slider, QtCore.SIGNAL("valueChanged(int)"), self.set_ptcl_idx)
+		self.ptcl_slider.valueChanged[int].connect(self.set_ptcl_idx)
 
 
 	def set_ptcl_idx(self,val):
@@ -348,26 +348,26 @@
 		self.data = simmx_xplore_dir_data()
 		if len(self.data) == 0: raise RuntimeError("There is no simmx refinement data in the current directory")
 
-		self.simmx_dir_tab= QtGui.QWidget()
-		vbl = QtGui.QVBoxLayout(self.simmx_dir_tab)
+		self.simmx_dir_tab= QtWidgets.QWidget()
+		vbl = QtWidgets.QVBoxLayout(self.simmx_dir_tab)
 
 		# This is the combo-box with the list of refine_* directories
 		combo_entries = [d[0] for d in self.data]
 		combo_entries.sort()
 		combo_entries.reverse()
-		self.combo = QtGui.QComboBox(self)
+		self.combo = QtWidgets.QComboBox(self)
 		for e in combo_entries: self.combo.addItem(e)
 
-		self.connect(self.combo,QtCore.SIGNAL("currentIndexChanged(QString&)"),self.on_combo_change)
-		self.connect(self.combo,QtCore.SIGNAL("currentIndexChanged(const QString&)"),self.on_combo_change)
+		self.combo.currentIndexChanged['QString'].connect(self.on_combo_change)
+		self.combo.currentIndexChanged['QString'].connect(self.on_combo_change)
 
 		vbl.addWidget(self.combo)
 
-		self.list_widget = QtGui.QListWidget(None)
+		self.list_widget = QtWidgets.QListWidget(None)
 
-		self.list_widget.setSelectionMode(QtGui.QAbstractItemView.SingleSelection)
+		self.list_widget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
 		self.list_widget.setMouseTracking(True)
-		QtCore.QObject.connect(self.list_widget,QtCore.SIGNAL("itemClicked(QListWidgetItem *)"),self.list_widget_item_clicked)
+		self.list_widget.itemClicked[QListWidgetItem].connect(self.list_widget_item_clicked)
 
 		self.update_simmx_list(True)
 		vbl.addWidget(self.list_widget)
@@ -431,7 +431,7 @@
 		for i,vals in enumerate(data[3]):
 			choice = vals
 
-			a = QtGui.QListWidgetItem(str(choice),self.list_widget)
+			a = QtWidgets.QListWidgetItem(str(choice),self.list_widget)
 			if first_time and i == 0:
 				self.list_widget.setItemSelected(a,True)
 			elif choice == s_text:
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2spt_boxer.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2spt_boxer.py	2017-10-21 17:15:12.000000000 -0500
@@ -38,8 +38,8 @@
 import numpy as np
 
 import weakref
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import get_application, EMApp
 from emimage2d import EMImage2DWidget
 from emimagemx import EMImageMXWidget
@@ -144,11 +144,13 @@
 
 
 
-class EMTomoBoxer(QtGui.QMainWindow):
+class EMTomoBoxer(QtWidgets.QMainWindow):
 	"""This class represents the EMTomoBoxer application instance.  """
+	keypress = QtCore.pyqtSignal()
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self,application,options,datafile=None):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.initialized=False
 		self.app=weakref.ref(application)
 		self.options=options
@@ -179,8 +181,8 @@
 		self.mwin_average=self.mwin.addAction("Averaging")
 
 
-		self.setCentralWidget(QtGui.QWidget())
-		self.gbl = QtGui.QGridLayout(self.centralWidget())
+		self.setCentralWidget(QtWidgets.QWidget())
+		self.gbl = QtWidgets.QGridLayout(self.centralWidget())
 
 		# relative stretch factors
 		self.gbl.setColumnStretch(0,1)
@@ -200,11 +202,11 @@
 		self.gbl.addWidget(self.zyview,0,0)
 
 		# Select Z for xy view
-		self.wdepth = QtGui.QSlider()
+		self.wdepth = QtWidgets.QSlider()
 		self.gbl.addWidget(self.wdepth,1,2)
 
 		### Control panel area in upper left corner
-		self.gbl2 = QtGui.QGridLayout()
+		self.gbl2 = QtWidgets.QGridLayout()
 		self.gbl.addLayout(self.gbl2,1,0)
 
 		# box size
@@ -212,19 +214,19 @@
 		self.gbl2.addWidget(self.wboxsize,1,0,1,2)
 
 		# max or mean
-		self.wmaxmean=QtGui.QPushButton("MaxProj")
+		self.wmaxmean=QtWidgets.QPushButton("MaxProj")
 		self.wmaxmean.setCheckable(True)
 		self.gbl2.addWidget(self.wmaxmean,2,0)
 
 		# number slices
-		self.wnlayers=QtGui.QSpinBox()
+		self.wnlayers=QtWidgets.QSpinBox()
 		self.wnlayers.setMinimum(1)
 		self.wnlayers.setMaximum(256)
 		self.wnlayers.setValue(1)
 		self.gbl2.addWidget(self.wnlayers,2,1)
 
 		# Local boxes in side view
-		self.wlocalbox=QtGui.QCheckBox("Limit Side Boxes")
+		self.wlocalbox=QtWidgets.QCheckBox("Limit Side Boxes")
 		self.gbl2.addWidget(self.wlocalbox,3,0)
 
 		# scale factor
@@ -244,51 +246,51 @@
 		self.firsthbclick = None
 
 		# coordinate display
-		self.wcoords=QtGui.QLabel("X: " + str(self.get_x()) + "\t\t" + "Y: " + str(self.get_y()) + "\t\t" + "Z: " + str(self.get_z()))
+		self.wcoords=QtWidgets.QLabel("X: " + str(self.get_x()) + "\t\t" + "Y: " + str(self.get_y()) + "\t\t" + "Z: " + str(self.get_z()))
 		self.gbl2.addWidget(self.wcoords, 0, 0, 1, 2)
 
 		# file menu
-		QtCore.QObject.connect(self.mfile_open,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_open  )
-		QtCore.QObject.connect(self.mfile_read_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_read_boxloc  )
-		QtCore.QObject.connect(self.mfile_save_boxloc,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_save_boxloc  )
-		QtCore.QObject.connect(self.mfile_save_boxes_stack,QtCore.SIGNAL("triggered(bool)")  ,self.save_boxes)
-		QtCore.QObject.connect(self.mfile_quit,QtCore.SIGNAL("triggered(bool)")  ,self.menu_file_quit)
+		self.mfile_open.triggered[bool].connect(self.menu_file_open)
+		self.mfile_read_boxloc.triggered[bool].connect(self.menu_file_read_boxloc)
+		self.mfile_save_boxloc.triggered[bool].connect(self.menu_file_save_boxloc)
+		self.mfile_save_boxes_stack.triggered[bool].connect(self.save_boxes)
+		self.mfile_quit.triggered[bool].connect(self.menu_file_quit)
 
 		# window menu
-		QtCore.QObject.connect(self.mwin_boxes,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_boxes  )
-		QtCore.QObject.connect(self.mwin_single,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_single  )
+		self.mwin_boxes.triggered[bool].connect(self.menu_win_boxes)
+		self.mwin_single.triggered[bool].connect(self.menu_win_single)
 #		QtCore.QObject.connect(self.mwin_average,QtCore.SIGNAL("triggered(bool)")  ,self.menu_win_average  )
 
 		# all other widgets
-		QtCore.QObject.connect(self.wdepth,QtCore.SIGNAL("valueChanged(int)"),self.event_depth)
-		QtCore.QObject.connect(self.wnlayers,QtCore.SIGNAL("valueChanged(int)"),self.event_nlayers)
-		QtCore.QObject.connect(self.wboxsize,QtCore.SIGNAL("valueChanged"),self.event_boxsize)
-		QtCore.QObject.connect(self.wmaxmean,QtCore.SIGNAL("clicked(bool)"),self.event_projmode)
-		QtCore.QObject.connect(self.wscale,QtCore.SIGNAL("valueChanged")  ,self.event_scale  )
-		QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
-		QtCore.QObject.connect(self.wlocalbox,QtCore.SIGNAL("stateChanged(int)")  ,self.event_localbox  )
-
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousemove"),self.xy_move)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedown"),self.xy_down)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousedrag"),self.xy_drag)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mouseup"),self.xy_up  )
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("mousewheel"),self.xy_wheel  )
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("set_scale"),self.xy_scale)
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("origin_update"),self.xy_origin)
-
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedown"),self.xz_down)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mousedrag"),self.xz_drag)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("mouseup")  ,self.xz_up  )
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("set_scale"),self.xz_scale)
-		QtCore.QObject.connect(self.xzview,QtCore.SIGNAL("origin_update"),self.xz_origin)
-
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedown"),self.zy_down)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mousedrag"),self.zy_drag)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("mouseup")  ,self.zy_up  )
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("set_scale"),self.zy_scale)
-		QtCore.QObject.connect(self.zyview,QtCore.SIGNAL("origin_update"),self.zy_origin)
+		self.wdepth.valueChanged[int].connect(self.event_depth)
+		self.wnlayers.valueChanged[int].connect(self.event_nlayers)
+		self.wboxsize.valueChanged.connect(self.event_boxsize)
+		self.wmaxmean.clicked[bool].connect(self.event_projmode)
+		self.wscale.valueChanged.connect(self.event_scale)
+		self.wfilt.valueChanged.connect(self.event_filter)
+		self.wlocalbox.stateChanged[int].connect(self.event_localbox)
+
+		self.xyview.mousemove.connect(self.xy_move)
+		self.xyview.mousedown.connect(self.xy_down)
+		self.xyview.mousedrag.connect(self.xy_drag)
+		self.xyview.mouseup.connect(self.xy_up)
+		self.xyview.mousewheel.connect(self.xy_wheel)
+		self.xyview.set_scale.connect(self.xy_scale)
+		self.xyview.origin_update.connect(self.xy_origin)
+
+		self.xzview.mousedown.connect(self.xz_down)
+		self.xzview.mousedrag.connect(self.xz_drag)
+		self.xzview.mouseup.connect(self.xz_up)
+		self.xzview.set_scale.connect(self.xz_scale)
+		self.xzview.origin_update.connect(self.xz_origin)
+
+		self.zyview.mousedown.connect(self.zy_down)
+		self.zyview.mousedrag.connect(self.zy_drag)
+		self.zyview.mouseup.connect(self.zy_up)
+		self.zyview.set_scale.connect(self.zy_scale)
+		self.zyview.origin_update.connect(self.zy_origin)
 		
-		QtCore.QObject.connect(self.xyview,QtCore.SIGNAL("keypress"),self.key_press)
+		self.xyview.keypress.connect(self.key_press)
 		self.datafilename=datafile
 		self.basename=base_name(datafile)
 		p0=datafile.find('__')
@@ -331,7 +333,7 @@
 #		self.averageviewer=EMAverageViewer(self)
 		#self.averageviewer.show()
 
-		QtCore.QObject.connect(self.boxesviewer,QtCore.SIGNAL("mx_image_selected"),self.img_selected)
+		self.boxesviewer.mx_image_selected.connect(self.img_selected)
 		
 		self.jsonfile=info_name(datafile)
 		
@@ -630,7 +632,7 @@
 
 
 	def menu_file_open(self,tog):
-		QtGui.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
+		QtWidgets.QMessageBox.warning(None,"Error","Sorry, in the current version, you must provide a file to open on the command-line.")
 
 	def load_box_yshort(self, boxcoords):
 		if options.yshort:
@@ -639,7 +641,7 @@
 			return boxcoords
 
 	def menu_file_read_boxloc(self):
-		fsp=str(QtGui.QFileDialog.getOpenFileName(self, "Select output text file"))
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
 
 		f=open(fsp,"r")
 		for b in f:
@@ -654,7 +656,7 @@
 	def menu_file_save_boxloc(self):
 		shrinkf=self.shrink 								#jesus
 
-		fsp=str(QtGui.QFileDialog.getSaveFileName(self, "Select output text file"))
+		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
 
 		out=open(fsp,"w")
 		if self.helixboxer:
@@ -673,7 +675,7 @@
 		else:
 			defaultname="_".join([self.sets[i] for i in clsid])+".hdf"
 		
-		name,ok=QtGui.QInputDialog.getText( self, "Save particles", "Filename suffix:", text=defaultname)
+		name,ok=QtWidgets.QInputDialog.getText( self, "Save particles", "Filename suffix:", text=defaultname)
 		if not ok:
 			return
 		name=self.filetag+str(name)
@@ -693,7 +695,7 @@
 				print("{} exist. Overwritting...".format(f))
 				os.remove(f)
 		
-		progress = QtGui.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
+		progress = QtWidgets.QProgressDialog("Saving", "Abort", 0, len(self.boxes),None)
 		
 		
 		boxsz=-1
@@ -1442,7 +1444,7 @@
 		elif event.key() == 49:
 			self.wdepth.setValue(self.wdepth.value()-1)
 		else:
-			self.emit(QtCore.SIGNAL("keypress"), event)
+			self.keypress.emit(event)
 
 	
 	def closeEvent(self,event):
@@ -1468,7 +1470,7 @@
 #		self.averageviewer.close()
 		#event.accept()
 		#self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed")) # this signal is important when e2ctf is being used by a program running its own event loop
+		self.module_closed.emit()
 
 	#def closeEvent(self,event):
 		#self.target().done()
@@ -1487,16 +1489,16 @@
 			
 	
 
-class EMBoxViewer(QtGui.QWidget):
+class EMBoxViewer(QtWidgets.QWidget):
 	"""This is a multi-paned view showing a single boxed out particle from a larger tomogram"""
 
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.setWindowTitle("Single Particle View")
 
 		self.resize(300,300)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 		self.xyview = EMImage2DWidget()
 		self.gbl.addWidget(self.xyview,0,1)
 
@@ -1521,7 +1523,7 @@
 		self.wfilt = ValSlider(rng=(0,50),label="Filter:",value=0.0)
 		self.gbl.addWidget(self.wfilt,2,0,1,2)
 
-		QtCore.QObject.connect(self.wfilt,QtCore.SIGNAL("valueChanged")  ,self.event_filter  )
+		self.wfilt.valueChanged.connect(self.event_filter)
 
 		self.gbl.setRowStretch(2,1)
 		self.gbl.setRowStretch(0,5)
@@ -1595,26 +1597,26 @@
 		self.zyview.close()
 
 
-class EMTomoBoxerOptions(QtGui.QWidget):
+class EMTomoBoxerOptions(QtWidgets.QWidget):
 	def __init__(self,target) :
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		#print "aaaaaaaa"
 		self.setWindowTitle("Options")
 		self.target=weakref.ref(target)
 		
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 		#self.gbl.setMargin(2)
 		#self.gbl.setSpacing(6)
 		self.gbl.setObjectName("gbl")
 		
 		
-		self.erasercheckbox=QtGui.QCheckBox("Eraser")
+		self.erasercheckbox=QtWidgets.QCheckBox("Eraser")
 		self.gbl.addWidget(self.erasercheckbox,0,0)
 		
 		self.eraser_radius=ValBox(label="Radius:",value=64)
 		self.gbl.addWidget(self.eraser_radius,0,1)
 
-		self.tabwidget = QtGui.QTabWidget()
+		self.tabwidget = QtWidgets.QTabWidget()
 		self.gbl.addWidget(self.tabwidget,1,0,1,2)
 		
 	def add_panel(self,widget,name):
@@ -1623,12 +1625,12 @@
 		return 
 
 #### Copied from emimagemx.py since some modification are needed...
-class EMTomoSetsPanel(QtGui.QWidget):
+class EMTomoSetsPanel(QtWidgets.QWidget):
 	'''
 	This is the set display panel
 	'''
 	def __init__(self,target):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 
 		self.target = weakref.ref(target) # this should be the EMImageMXWidget
 		self.busy = False
@@ -1638,30 +1640,30 @@
 		self.itemflags=	Qt.ItemFlags(Qt.ItemIsEditable)|Qt.ItemFlags(Qt.ItemIsSelectable)|Qt.ItemFlags(Qt.ItemIsEnabled)|Qt.ItemFlags(Qt.ItemIsUserCheckable)
 
 		# now build the interface
-		hbl = QtGui.QHBoxLayout(self)
-		self.setlist=QtGui.QListWidget()
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		hbl = QtWidgets.QHBoxLayout(self)
+		self.setlist=QtWidgets.QListWidget()
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		hbl.addWidget(self.setlist)
 
-		vbl = QtGui.QVBoxLayout()
+		vbl = QtWidgets.QVBoxLayout()
 
-		self.new_set_button = QtGui.QPushButton("New")
+		self.new_set_button = QtWidgets.QPushButton("New")
 		vbl.addWidget(self.new_set_button)
-		self.rename_set_button = QtGui.QPushButton("Rename")
+		self.rename_set_button = QtWidgets.QPushButton("Rename")
 		vbl.addWidget(self.rename_set_button)
-		self.save_set_button = QtGui.QPushButton("Save")
+		self.save_set_button = QtWidgets.QPushButton("Save")
 		vbl.addWidget(self.save_set_button)
-		self.delete_set_button = QtGui.QPushButton("Delete")
+		self.delete_set_button = QtWidgets.QPushButton("Delete")
 		vbl.addWidget(self.delete_set_button)
 
 		hbl.addLayout(vbl)
 
-		QtCore.QObject.connect(self.save_set_button, QtCore.SIGNAL("clicked(bool)"), self.save_set)
-		QtCore.QObject.connect(self.new_set_button, QtCore.SIGNAL("clicked(bool)"), self.new_set)
-		QtCore.QObject.connect(self.rename_set_button, QtCore.SIGNAL("clicked(bool)"), self.rename_set)
-		QtCore.QObject.connect(self.delete_set_button, QtCore.SIGNAL("clicked(bool)"), self.delete_set)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.set_list_item_changed)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.set_list_row_changed)
+		self.save_set_button.clicked[bool].connect(self.save_set)
+		self.new_set_button.clicked[bool].connect(self.new_set)
+		self.rename_set_button.clicked[bool].connect(self.rename_set)
+		self.delete_set_button.clicked[bool].connect(self.delete_set)
+		self.setlist.itemChanged[QListWidgetItem].connect(self.set_list_item_changed)
+		self.setlist.currentRowChanged[int].connect(self.set_list_row_changed)
 
 
 	def sets_changed(self):
@@ -1691,14 +1693,14 @@
 	def delete_set(self,unused):
 		selections = self.setlist.selectedItems()
 		names=[str(i.text()) for i in selections]
-		cancel=QtGui.QMessageBox.warning(self, "Delete set", "Are you sure to delete {}? This will remove all particles in that class".format(names[0]), "Yes", "No")
+		cancel=QtWidgets.QMessageBox.warning(self, "Delete set", "Are you sure to delete {}? This will remove all particles in that class".format(names[0]), "Yes", "No")
 		if not cancel:
 			self.target().delete_set(names[0])
 		self.update_sets()
 
 
 	def new_set(self,unused=None):
-		name,ok=QtGui.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
+		name,ok=QtWidgets.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
 		if not ok : return
 		name=str(name)
 		if name in self.target().sets :
@@ -1713,7 +1715,7 @@
 		sels=[str(i.text()) for i in selections]
 		if len(sels)==0:
 			return
-		name,ok=QtGui.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
+		name,ok=QtWidgets.QInputDialog.getText( self, "Set Name", "Enter a name for the new set:")
 		if not ok : return
 		name=str(name)
 		
@@ -1736,7 +1738,7 @@
 		for i,k in enumerate(keys):
 			
 			kname="{:02d} :: {}".format(int(k), self.target().sets[k])
-			item=QtGui.QListWidgetItem(kname)
+			item=QtWidgets.QListWidgetItem(kname)
 			item.setFlags(self.itemflags)
 			item.setTextColor(self.target().setcolors[i%len(self.target().setcolors)])
 			self.setlist.addItem(item)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2spt_wedge.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2spt_wedge.py	2017-10-21 17:15:13.000000000 -0500
@@ -32,11 +32,11 @@
 #
 
 from EMAN2 import *
-from PyQt4 import QtCore, QtGui, QtOpenGL
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import EMApp
 import emscene3d
-import emdataitem3d 
+import emdataitem3d
 
 def main():
 	progname = os.path.basename(sys.argv[0])
@@ -107,10 +107,10 @@
 	return(mean,sigma)
 
 
-class MissingWedgeViewer(QtGui.QWidget):
+class MissingWedgeViewer(QtWidgets.QWidget):
 	""" Display a missing wedge"""
 	def __init__(self, filename, angle, wedgei=0.0, wedgef=1.0):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.setWindowTitle('The Wedge Viewer')
 		self.setMinimumWidth(400)
 		self.setMinimumHeight(400)
@@ -123,27 +123,27 @@
 		
 		self.dataitems= []
 		
-		grid=QtGui.QGridLayout()
+		grid=QtWidgets.QGridLayout()
 		# Make threed widget
 		self.widget3d=emscene3d.EMScene3D()
 		grid.addWidget(self.widget3d, 0, 0, 1, 4)
 		# make contols
-		combolabel = QtGui.QLabel("Volume Idx")
-		self.volcombobox = QtGui.QComboBox()
-		self.fitbutton = QtGui.QPushButton("Fit Wedge")
+		combolabel = QtWidgets.QLabel("Volume Idx")
+		self.volcombobox = QtWidgets.QComboBox()
+		self.fitbutton = QtWidgets.QPushButton("Fit Wedge")
 		self.fitbutton.setEnabled(False)
-		labeli = QtGui.QLabel("Wedge_i")
-		self.wedgei = QtGui.QLineEdit(str(wedgei))
-		labelf = QtGui.QLabel("Wedge_f")
-		self.wedgef = QtGui.QLineEdit(str(wedgef))
-		wmlabel = QtGui.QLabel("Wedge Mean")
-		wslabel = QtGui.QLabel("Wedge Sigma")
-		self.wedgemeanwidget = QtGui.QLineEdit("0.0")
+		labeli = QtWidgets.QLabel("Wedge_i")
+		self.wedgei = QtWidgets.QLineEdit(str(wedgei))
+		labelf = QtWidgets.QLabel("Wedge_f")
+		self.wedgef = QtWidgets.QLineEdit(str(wedgef))
+		wmlabel = QtWidgets.QLabel("Wedge Mean")
+		wslabel = QtWidgets.QLabel("Wedge Sigma")
+		self.wedgemeanwidget = QtWidgets.QLineEdit("0.0")
 		self.wedgemeanwidget.setReadOnly(True)
-		self.wedgesigmawidget = QtGui.QLineEdit("0.0")
+		self.wedgesigmawidget = QtWidgets.QLineEdit("0.0")
 		self.wedgesigmawidget.setReadOnly(True)
-		self.setwedgestats = QtGui.QPushButton("Set Wedege stats, This Vol")
-		self.setallwedgestats = QtGui.QPushButton("Set Wedege stats, All Vols")
+		self.setwedgestats = QtWidgets.QPushButton("Set Wedege stats, This Vol")
+		self.setallwedgestats = QtWidgets.QPushButton("Set Wedege stats, All Vols")
 		grid.addWidget(combolabel, 1, 0)
 		grid.addWidget(self.volcombobox, 1, 1)
 		grid.addWidget(self.fitbutton, 1 ,2, 1, 2)
@@ -165,11 +165,11 @@
 			self.volcombobox.addItem(str(i))
 			
 		#Add actions
-		QtCore.QObject.connect(self.volcombobox, QtCore.SIGNAL("activated(int)"), self.onVolChange)
-		QtCore.QObject.connect(self.wedgei,QtCore.SIGNAL("editingFinished()"),self.onWedgeChange)
-		QtCore.QObject.connect(self.wedgef,QtCore.SIGNAL("editingFinished()"),self.onWedgeChange)
-		QtCore.QObject.connect(self.setwedgestats,QtCore.SIGNAL("clicked()"),self.onOneVolStats)
-		QtCore.QObject.connect(self.setallwedgestats,QtCore.SIGNAL("clicked()"),self.onManyVolStats)
+		self.volcombobox.activated[int].connect(self.onVolChange)
+		self.wedgei.editingFinished.connect(self.onWedgeChange)
+		self.wedgef.editingFinished.connect(self.onWedgeChange)
+		self.setwedgestats.clicked.connect(self.onOneVolStats)
+		self.setallwedgestats.clicked.connect(self.onManyVolStats)
 		
 		# Use first volume
 		self.onVolChange(0)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/e2tiltvalidate.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/e2tiltvalidate.py	2017-10-21 17:15:13.000000000 -0500
@@ -435,8 +435,8 @@
 
 # In some cases it is impossible to import PyQT4, particularly on clusters
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
 	from emshape import *
 	from valslider import ValSlider
 	from emplot2d import EMPolarPlot2DWidget
@@ -517,33 +517,33 @@
 		R = 1.0 - B
 		return "#%02x%02x%02x"%(255*R,255*G,255*B)
 	
-class EMValidationPlot(QtGui.QWidget):
+class EMValidationPlot(QtWidgets.QWidget):
 	"""Make a plot to display validation info"""
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
-		box = QtGui.QVBoxLayout()
+		QtWidgets.QWidget.__init__(self)
+		box = QtWidgets.QVBoxLayout()
 		self.polarplot = EMPolarPlot2DWidget()
 		self.polarplot.setMinimumHeight(50)
 		self.polarplot.setMinimumWidth(50)
 		self.resize(480,580)
 		
-		meanAngLabel = QtGui.QLabel("Mean Tilt Angle") 
-		self.meanAngle = QtGui.QLineEdit("")
-		meanAxisLabel = QtGui.QLabel("Mean Tilt Axis") 
-		self.meanAxis = QtGui.QLineEdit("")
-		rmsdAngLabel = QtGui.QLabel("RMSD Tilt Angle") 
-		self.rmsdAngle = QtGui.QLineEdit("")
-		rmsdAxisLabel = QtGui.QLabel("RMSD Tilt Axis") 
-		self.rmsdAxis = QtGui.QLineEdit("")
-		pointsLabel = QtGui.QLabel("Num points")
-		self.points = QtGui.QLineEdit("")
-		self.pointlabel = QtGui.QLabel("Right click to pick the nearest point")
+		meanAngLabel = QtWidgets.QLabel("Mean Tilt Angle") 
+		self.meanAngle = QtWidgets.QLineEdit("")
+		meanAxisLabel = QtWidgets.QLabel("Mean Tilt Axis") 
+		self.meanAxis = QtWidgets.QLineEdit("")
+		rmsdAngLabel = QtWidgets.QLabel("RMSD Tilt Angle") 
+		self.rmsdAngle = QtWidgets.QLineEdit("")
+		rmsdAxisLabel = QtWidgets.QLabel("RMSD Tilt Axis") 
+		self.rmsdAxis = QtWidgets.QLineEdit("")
+		pointsLabel = QtWidgets.QLabel("Num points")
+		self.points = QtWidgets.QLineEdit("")
+		self.pointlabel = QtWidgets.QLabel("Right click to pick the nearest point")
 		
 		
-		frame = QtGui.QFrame()
-		frame.setFrameShape(QtGui.QFrame.StyledPanel)
+		frame = QtWidgets.QFrame()
+		frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
 		frame.setMaximumHeight(100)
-		grid = QtGui.QGridLayout()
+		grid = QtWidgets.QGridLayout()
 		grid.addWidget(meanAngLabel, 0, 0)
 		grid.addWidget(self.meanAngle, 0, 1)
 		grid.addWidget(meanAxisLabel, 0, 2)
@@ -560,8 +560,8 @@
 		box.addWidget(self.polarplot)
 		box.addWidget(frame)
 		self.setLayout(box)
-		self.connect(self.polarplot, QtCore.SIGNAL('clusterStats'), self._on_stats)
-		self.connect(self.polarplot, QtCore.SIGNAL('pointIdentity(int)'), self._on_point)
+		self.polarplot.clusterStats.connect(self._on_stats)
+		self.polarplot.pointIdentity[int].connect(self._on_point)
 		
 	def _on_stats(self, stats):
 		""" Set the selected stats """
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/programs/eman2.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/programs/eman2.py	2017-10-21 17:15:14.000000000 -0500
@@ -59,13 +59,13 @@
 
 try:
 	if os.getenv("DISPLAY")==None : raise Exception
-	from PyQt4 import QtCore, QtGui
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtWidgets
+	from PyQt5.QtCore import Qt
 except:
 	print(helpstring)
 	raw_input("Please press <enter> to exit")
 	exit()	
 
 app = EMApp()
-QtGui.QMessageBox.warning(None,"Welcome to EMAN2!","<b><big>"+helpstring.replace("\n","<br>")+"</big></b>")
+QtWidgets.QMessageBox.warning(None,"Welcome to EMAN2!","<b><big>"+helpstring.replace("\n","<br>")+"</big></b>")
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/pyemtbx/boxertools.py	2017-10-21 16:48:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/pyemtbx/boxertools.py	2017-10-21 17:15:14.000000000 -0500
@@ -39,6 +39,13 @@
 from EMAN2 import *
 import traceback
 
+try:
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+QStringList = list
+
 class EMProjectDB:
 	"""
 	It's implemented as a singleton
@@ -2246,13 +2253,13 @@
 		
 		self.process = QtCore.QProcess()
 
-		program = QtCore.QString("e2refine2d.py")
-		args = QtCore.QStringList()
+		program = QString("e2refine2d.py")
+		args = QStringList()
 		args.append("--input="+tmpimage)
 		args.append("--ncls=25")
 		
-		QtCore.QObject.connect(self.process, QtCore.SIGNAL("finished(int)"), self.process_finished)
-		QtCore.QObject.connect(self.process, QtCore.SIGNAL("started()"), self.process_start)
+		self.process.finished[int].connect(self.process_finished)
+		self.process.started.connect(self.process_start)
 		print(self.process.start(program,args))
 
 	def process_start(self):
@@ -2285,7 +2292,7 @@
 		self.imagemx2p = EMImage(e)
 		self.imagemx2 = self.imagemx2p.child
 		self.imagemx2.setmmode("App")
-		QtCore.QObject.connect(self.imagemx2,QtCore.SIGNAL("mousedown"),self.box_selected)
+		self.imagemx2.mousedown.connect(self.box_selected)
 		self.imagemx2p.show()
 		
 		ef = []
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/rt/demo/scene3d_test.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/rt/demo/scene3d_test.py	2017-10-21 17:15:15.000000000 -0500
@@ -1,15 +1,15 @@
 #!/usr/bin/env python
 from __future__ import print_function
 
-from PyQt4 import QtCore, QtGui, QtOpenGL
+from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
 from emscene3d import EMScene3D, EMInspector3D, EMInspectorControlShape
 from emshapeitem3d import *
 
 from EMAN2 import *
 
-class GLdemo(QtGui.QWidget):
+class GLdemo(QtWidgets.QWidget):
 	def __init__(self):
-		QtGui.QWidget.__init__(self)
+		QtWidgets.QWidget.__init__(self)
 		self.widget = EMScene3D()
 
 		self.cube1 = EMCube(50.0)
@@ -38,7 +38,7 @@
 		#self.widget.showInspector()
 		
 		# QT stuff to display the widget
-		vbox = QtGui.QVBoxLayout()
+		vbox = QtWidgets.QVBoxLayout()
 		vbox.addWidget(self.widget)
 		self.setLayout(vbox)
 		self.setGeometry(300, 300, 600, 600)
@@ -49,7 +49,7 @@
 		
 if __name__ == "__main__":
 	import sys
-	app = QtGui.QApplication(sys.argv)
+	app = QtWidgets.QApplication(sys.argv)
 	window = GLdemo()
 	window.show()
 	app.exec_()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sx_real.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sx_real.py	2017-10-21 17:15:16.000000000 -0500
@@ -44,7 +44,7 @@
 try:
 	if get_platform()=="Linux" and os.getenv("DISPLAY")==None: raise Exception
 
-	from PyQt4 import QtCore, QtGui, QtOpenGL
+	from PyQt5 import QtCore, QtOpenGL
 	from emapplication import EMApp
 	import IPython.lib.inputhook
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sxctf.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sxctf.py	2017-10-21 17:15:16.000000000 -0500
@@ -826,11 +826,11 @@
 	return ret
 
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
 	from valslider import ValSlider
 except:
-	print("Warning: PyQt4 must be installed to use the --gui option")
+	print("Warning: PyQt5 must be installed to use the --gui option")
 	class dummy:
 		pass
 	class QWidget:
@@ -840,7 +840,7 @@
 	QtGui=dummy()
 	QtGui.QWidget=QWidget
 
-class GUIctf(QtGui.QWidget):
+class GUIctf(QtWidgets.QWidget):
 	def __init__(self,application,data):
 		"""Implements the CTF fitting dialog using various EMImage and EMPlot2D widgets
 		'data' is a list of (filename,ctf,im_1d,bg_1d,im_2d,bg_2d)
@@ -858,7 +858,7 @@
 		
 		self.app = weakref.ref(application)
 		
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() + "ctf.png"))
 		
 		self.data=data
@@ -868,26 +868,26 @@
 		self.guiim=EMImage2DWidget(application=self.app())
 		self.guiplot=EMPlot2DWidget(application=self.app())
 		
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mousedown"),self.imgmousedown)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mousedrag"),self.imgmousedrag)
-		self.guiim.connect(self.guiim,QtCore.SIGNAL("mouseup")  ,self.imgmouseup)
-		self.guiplot.connect(self.guiplot,QtCore.SIGNAL("mousedown"),self.plotmousedown)
+		self.guiim.mousedown.connect(self.imgmousedown)
+		self.guiim.mousedrag.connect(self.imgmousedrag)
+		self.guiim.mouseup.connect(self.imgmouseup)
+		self.guiplot.mousedown.connect(self.plotmousedown)
 		
 		self.guiim.mmode="app"
 
 		# This object is itself a widget we need to set up
-		self.hbl = QtGui.QHBoxLayout(self)
-		self.hbl.setMargin(0)
+		self.hbl = QtWidgets.QHBoxLayout(self)
+		self.hbl.setContentsMargins(0, 0, 0, 0)
 		self.hbl.setSpacing(6)
 		self.hbl.setObjectName("hbl")
 		
 		# plot list and plot mode combobox
-		self.vbl2 = QtGui.QVBoxLayout()
-		self.setlist=QtGui.QListWidget(self)
-		self.setlist.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.vbl2 = QtWidgets.QVBoxLayout()
+		self.setlist=QtWidgets.QListWidget(self)
+		self.setlist.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.vbl2.addWidget(self.setlist)
 		
-		self.splotmode=QtGui.QComboBox(self)
+		self.splotmode=QtWidgets.QComboBox(self)
 		self.splotmode.addItem("Bgsub & fit")
 		self.splotmode.addItem("Ptcl & BG power")
 		self.splotmode.addItem("SNR")
@@ -898,8 +898,8 @@
 		self.hbl.addLayout(self.vbl2)
 		
 		# ValSliders for CTF parameters
-		self.vbl = QtGui.QVBoxLayout()
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout()
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 		self.hbl.addLayout(self.vbl)
@@ -924,29 +924,29 @@
 		
 		self.scs=ValSlider(self,(0,5),"Cs (mm):",0,90)
 		self.vbl.addWidget(self.scs)
-		self.hbl_buttons = QtGui.QHBoxLayout()
-		self.saveparms = QtGui.QPushButton("Save parms")
-		self.recallparms = QtGui.QPushButton("Recall")
-		self.output = QtGui.QPushButton("Output")
+		self.hbl_buttons = QtWidgets.QHBoxLayout()
+		self.saveparms = QtWidgets.QPushButton("Save parms")
+		self.recallparms = QtWidgets.QPushButton("Recall")
+		self.output = QtWidgets.QPushButton("Output")
 		self.hbl_buttons.addWidget(self.saveparms)
 		self.hbl_buttons.addWidget(self.recallparms)
-		self.hbl_buttons2 = QtGui.QHBoxLayout()
+		self.hbl_buttons2 = QtWidgets.QHBoxLayout()
 		self.hbl_buttons2.addWidget(self.output)
 		self.vbl.addLayout(self.hbl_buttons)
 		self.vbl.addLayout(self.hbl_buttons2)
 		
-		QtCore.QObject.connect(self.sdefocus, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sbfactor, QtCore.SIGNAL("valueChanged"), self.newCTF)
+		self.sdefocus.valueChanged.connect(self.newCTF)
+		self.sbfactor.valueChanged.connect(self.newCTF)
 #		QtCore.QObject.connect(self.sapix, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.sampcont, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.svoltage, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.scs, QtCore.SIGNAL("valueChanged"), self.newCTF)
-		QtCore.QObject.connect(self.setlist,QtCore.SIGNAL("currentRowChanged(int)"),self.newSet)
-		QtCore.QObject.connect(self.splotmode,QtCore.SIGNAL("currentIndexChanged(int)"),self.newPlotMode)
-
-		QtCore.QObject.connect(self.saveparms,QtCore.SIGNAL("clicked(bool)"),self.on_save_params)
-		QtCore.QObject.connect(self.recallparms,QtCore.SIGNAL("clicked(bool)"),self.on_recall_params)
-		QtCore.QObject.connect(self.output,QtCore.SIGNAL("clicked(bool)"),self.on_output)
+		self.sampcont.valueChanged.connect(self.newCTF)
+		self.svoltage.valueChanged.connect(self.newCTF)
+		self.scs.valueChanged.connect(self.newCTF)
+		self.setlist.currentRowChanged[int].connect(self.newSet)
+		self.splotmode.currentIndexChanged[int].connect(self.newPlotMode)
+
+		self.saveparms.clicked[bool].connect(self.on_save_params)
+		self.recallparms.clicked[bool].connect(self.on_recall_params)
+		self.output.clicked[bool].connect(self.on_output)
 		
 		self.update_data()
 		
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sxgui.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sxgui.py	2017-10-21 17:15:17.000000000 -0500
@@ -36,9 +36,9 @@
 import os
 from subprocess import *
 from functools import partial  # Use to connect event-source widget and event handler
-from PyQt4.Qt import *
-from PyQt4 import QtGui
-from PyQt4 import QtCore
+from PyQt5.QtGui import *
+from PyQt5 import QtGui, QtWidgets
+from PyQt5 import QtCore, QtWidgets
 from EMAN2 import *
 from EMAN2_cppwrap import *
 from global_def import *
@@ -489,6 +489,8 @@
 # Provides all necessary functionarity
 # tabs only provides widgets and knows how to layout them
 class SXCmdWidget(QWidget):
+	process_started = pyqtSignal()
+
 	def __init__(self, sxconst_set, sxcmd, parent = None):
 		super(SXCmdWidget, self).__init__(parent)
 
@@ -798,7 +800,7 @@
 
 			# Execute the generated command line
 			process = subprocess.Popen(cmd_line, shell=True)
-			self.emit(SIGNAL("process_started"), process.pid)
+			self.process_started.emit(process.pid)
 			if self.sxcmd.is_submittable == False:
 				assert(self.sxcmd.mpi_support == False)
 				# Register to This is a GUI application
@@ -817,7 +819,7 @@
 			message_line = "Generated the following command line:"
 			print(message_line)
 			print(cmd_line)
-			QtGui.QMessageBox.information(self, "Information","%s \n\n%s" % (message_line, cmd_line))
+			QtWidgets.QMessageBox.information(self, "Information","%s \n\n%s" % (message_line, cmd_line))
 
 			# Save the current state of GUI settings
 			if os.path.exists(self.sxcmd.get_category_dir_path(SXLookFeelConst.project_dir)) == False:
@@ -955,12 +957,12 @@
 		file_in.close()
 
 	def save_params(self):
-		file_path_out = str(QFileDialog.getSaveFileName(self, "Save Parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_out = str(QFileDialog.getSaveFileName(self, "Save Parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_out != "":
 			self.write_params(file_path_out)
 
 	def load_params(self):
-		file_path_in = str(QFileDialog.getOpenFileName(self, "Load parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_in = str(QFileDialog.getOpenFileName(self, "Load parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_in != "":
 			self.read_params(file_path_in)
 			self.sxcmd_tab_main.set_qsub_enable_state()
@@ -968,39 +970,39 @@
 	def select_file(self, target_widget, file_format = ""):
 		file_path = ""
 		if file_format == "bdb":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select BDB File", SXLookFeelConst.file_dialog_dir, "BDB files (*.bdb)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select BDB File", SXLookFeelConst.file_dialog_dir, "BDB files (*.bdb)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 				file_path = translate_to_bdb_path(file_path)
 		elif file_format == "py":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select Python File", SXLookFeelConst.file_dialog_dir, "PY files (*.py)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select Python File", SXLookFeelConst.file_dialog_dir, "PY files (*.py)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use full path
 		elif file_format == "pdb":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select PDB File", SXLookFeelConst.file_dialog_dir, "PDB files (*.pdb *.pdb*)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select PDB File", SXLookFeelConst.file_dialog_dir, "PDB files (*.pdb *.pdb*)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 		elif file_format == "mrc":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select MRC File", SXLookFeelConst.file_dialog_dir, "MRC files (*.mrc *.mrcs)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select MRC File", SXLookFeelConst.file_dialog_dir, "MRC files (*.mrc *.mrcs)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 		elif file_format == "exe":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select EXE File", SXLookFeelConst.file_dialog_dir, "EXE files (*.exe );; All files (*)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select EXE File", SXLookFeelConst.file_dialog_dir, "EXE files (*.exe );; All files (*)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 		elif file_format == "any_file_list" or file_format == "any_image_list":
-			file_path_list = QFileDialog.getOpenFileNames(self, "Select Files", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog)
+			file_path_list = QFileDialog.getOpenFileNames(self, "Select Files", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog)[0]
 			# Use relative path.
 			for a_file_path in file_path_list:
 				file_path += SXLookFeelConst.format_path(str(a_file_path)) + " "
 		else:
 			if file_format:
-				file_path = str(QFileDialog.getOpenFileName(self, "Select %s File" % (file_format.upper()), SXLookFeelConst.file_dialog_dir, "%s files (*.%s)"  % (file_format.upper(), file_format), options = QFileDialog.DontUseNativeDialog))
+				file_path = str(QFileDialog.getOpenFileName(self, "Select %s File" % (file_format.upper()), SXLookFeelConst.file_dialog_dir, "%s files (*.%s)"  % (file_format.upper(), file_format), options = QFileDialog.DontUseNativeDialog))[0]
 			else:
-				file_path = str(QFileDialog.getOpenFileName(self, "Select File", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog))
+				file_path = str(QFileDialog.getOpenFileName(self, "Select File", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
@@ -1089,21 +1091,21 @@
 		scroll_layout.setContentsMargins(0,0,0,0)
 		title_hbox = QHBoxLayout()
 		title_layout = QGridLayout()
-		title_layout.setMargin(SXLookFeelConst.grid_margin)
+		title_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		title_layout.setSpacing(SXLookFeelConst.grid_spacing)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
 		grid_layout = QGridLayout()
-		grid_layout.setMargin(SXLookFeelConst.grid_margin)
+		grid_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		grid_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
 		submit_layout = QGridLayout()
-		submit_layout.setMargin(SXLookFeelConst.grid_margin)
+		submit_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		submit_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
 		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
@@ -1201,7 +1203,7 @@
 					cmd_token_widget[widget_index].setToolTip('<FONT>'+cmd_token.help[widget_index]+'</FONT>')
 					grid_layout.addWidget(cmd_token_widget[widget_index], grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-					self.connect(cmd_token_restore_widget[widget_index], SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token, widget_index))
+					cmd_token_restore_widget[widget_index].clicked.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 
 					grid_row +=  1
 
@@ -1221,13 +1223,13 @@
 					cmd_token_widget[widget_index].setToolTip('<FONT>'+cmd_token.help[widget_index]+'</FONT>')
 					grid_layout.addWidget(cmd_token_widget[widget_index], grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-					self.connect(cmd_token_restore_widget[widget_index], SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token, widget_index))
+					cmd_token_restore_widget[widget_index].clicked.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 
 					file_format = "py"
 					temp_btn = QPushButton("Select Script")
 					temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s python script file</FONT>" % file_format)
 					grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-					self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget[widget_index], file_format))
+					temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget[widget_index], file_format))
 
 					grid_row +=  1
 
@@ -1282,7 +1284,7 @@
 						cmd_token_widget.setEnabled(not cmd_token.is_locked)
 						grid_layout.addWidget(cmd_token_widget, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-						self.connect(cmd_token_restore_widget, SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token))
+						cmd_token_restore_widget.clicked.connect(partial(self.handle_restore_widget_event, cmd_token))
 
 					else:
 						btn_name = "%s" % cmd_token.restore
@@ -1312,7 +1314,7 @@
 						cmd_token_widget.setEnabled(not cmd_token.is_locked)
 						grid_layout.addWidget(cmd_token_widget, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-						self.connect(cmd_token_restore_widget, SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token))
+						cmd_token_restore_widget.clicked.connect(partial(self.handle_restore_widget_event, cmd_token))
 
 						if cmd_token.type == "image":
 							file_format = "hdf"
@@ -1320,19 +1322,19 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "bdb"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "any_image":
 							temp_btn = QPushButton("Select Image")
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select standard format image file (e.g. .hdf, .mrc)</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1345,31 +1347,31 @@
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select standard format image file (e.g. .hdf, .mrc)</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "txt"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s parameter file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "any_file_list":
 							temp_btn = QPushButton("Select Files")
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select files (e.g. *.*)</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
 							file_format = "bdb"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "any_image_list":
 							temp_btn = QPushButton("Select Images")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select standard format image files (e.g. .hdf, .mrc)</FONT>")
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1383,7 +1385,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1397,7 +1399,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1411,7 +1413,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1425,7 +1427,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1438,7 +1440,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select parameter file (e.g. .txt)</FONT>")
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1452,7 +1454,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s parameter file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1466,7 +1468,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s parameter file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1479,7 +1481,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select file (e.g. *.*)</FONT>")
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1492,7 +1494,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display select directory dailog"+'</FONT>')
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_dir, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_dir, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1532,7 +1534,7 @@
 			self.save_params_btn = QPushButton("Save parameters")
 			self.save_params_btn.setMinimumWidth(btn_min_width)
 			self.save_params_btn.setToolTip('<FONT>'+"Save gui parameter settings"+'</FONT>')
-			self.connect(self.save_params_btn, SIGNAL("clicked()"), self.sxcmdwidget.save_params)
+			self.save_params_btn.clicked.connect(self.sxcmdwidget.save_params)
 			submit_layout.addWidget(self.save_params_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1550,7 +1552,7 @@
 			self.load_params_btn = QPushButton("Load parameters")
 			self.load_params_btn.setMinimumWidth(btn_min_width)
 			self.load_params_btn.setToolTip('<FONT>'+"Load gui parameter settings to retrieve a previously-saved one"+'</FONT>')
-			self.connect(self.load_params_btn, SIGNAL("clicked()"), self.sxcmdwidget.load_params)
+			self.load_params_btn.clicked.connect(self.sxcmdwidget.load_params)
 			submit_layout.addWidget(self.load_params_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1608,7 +1610,7 @@
 			self.cmd_line_btn = QPushButton("Generate command line")
 			self.cmd_line_btn.setMinimumWidth(btn_min_width)
 			self.cmd_line_btn.setToolTip('<FONT>'+"Generate command line from gui parameter settings and automatically save settings"+'</FONT>')
-			self.connect(self.cmd_line_btn, SIGNAL("clicked()"), self.sxcmdwidget.print_cmd_line)
+			self.cmd_line_btn.clicked.connect(self.sxcmdwidget.print_cmd_line)
 			submit_layout.addWidget(self.cmd_line_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1629,7 +1631,7 @@
 			self.qsub_script_open_btn = QPushButton("Select Template")
 			self.qsub_script_open_btn.setMinimumWidth(func_btn_min_width)
 			self.qsub_script_open_btn.setToolTip('<FONT>'+"Display open file dailog to select job submission script template file"+'</FONT>')
-			self.connect(self.qsub_script_open_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, self.qsub_script_edit))
+			self.qsub_script_open_btn.clicked.connect(partial(self.sxcmdwidget.select_file, self.qsub_script_edit))
 			submit_layout.addWidget(self.qsub_script_open_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
 			# Add a run button
@@ -1640,7 +1642,7 @@
 			self.execute_btn.setStyleSheet(custom_style)
 			self.execute_btn.setMinimumWidth(btn_min_width)
 			self.execute_btn.setToolTip('<FONT>'+"Run %s and automatically save gui parameter settings</FONT>" % self.sxcmdwidget.sxcmd.get_mode_name_for("human"))
-			self.connect(self.execute_btn, SIGNAL("clicked()"), self.sxcmdwidget.execute_cmd_line)
+			self.execute_btn.clicked.connect(self.sxcmdwidget.execute_cmd_line)
 			submit_layout.addWidget(self.execute_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1755,7 +1757,7 @@
 
 		# Setup grid layout in the scroll area
 		self.grid_layout = QGridLayout()
-		self.grid_layout.setMargin(SXLookFeelConst.grid_margin)
+		self.grid_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		self.grid_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		self.grid_layout.setColumnMinimumWidth(0, SXLookFeelConst.sxcmd_btn_area_min_width)
 		# self.grid_layout.setColumnMinimumWidth(1, SXLookFeelConst.sxcmd_widget_area_min_width)
@@ -1814,7 +1816,7 @@
 			self.stacked_layout.addWidget(sxcmd.widget)
 
 			# connect widget signals
-			self.connect(sxcmd.btn, SIGNAL("clicked()"), partial(self.handle_sxcmd_btn_event, sxcmd))
+			sxcmd.btn.clicked.connect(partial(self.handle_sxcmd_btn_event, sxcmd))
 
 			self.grid_row += 1
 
@@ -1897,20 +1899,20 @@
 		self.setPalette(palette)
 
 		global_layout = QGridLayout()
-		global_layout.setMargin(SXLookFeelConst.grid_margin)
+		global_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		global_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		global_layout.setRowStretch(global_row_span - 1, global_layout.rowStretch(global_row_origin) + 1)
 
 		header_layout = QGridLayout()
-		header_layout.setMargin(SXLookFeelConst.grid_margin)
+		header_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		header_layout.setSpacing(SXLookFeelConst.grid_spacing)
 
 		const_set_layout = QGridLayout()
-		const_set_layout.setMargin(SXLookFeelConst.grid_margin)
+		const_set_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		const_set_layout.setSpacing(SXLookFeelConst.grid_spacing)
 
 		btn_layout = QGridLayout()
-		btn_layout.setMargin(SXLookFeelConst.grid_margin)
+		btn_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		btn_layout.setSpacing(SXLookFeelConst.grid_spacing * 2)
 
 		global_grid_row = global_row_origin
@@ -1954,7 +1956,7 @@
 			sxconst_register_widget.setStyleSheet(custom_style)
 			const_set_layout.addWidget(sxconst_register_widget, const_set_grid_row, const_set_row_origin + const_label_col_span, const_register_widget_row_span, const_register_widget_col_span)
 			sxconst_register_widget.setToolTip('<FONT>'+"Retrieve this registered value to edit box"+'</FONT>')
-			self.connect(sxconst_register_widget, SIGNAL("clicked()"), partial(self.handle_regster_widget_event, sxconst))
+			sxconst_register_widget.clicked.connect(partial(self.handle_regster_widget_event, sxconst))
 
 			sxconst_widget = QLineEdit()
 			sxconst_widget.setMinimumWidth(const_widget_min_width)
@@ -1982,7 +1984,7 @@
 		self.execute_btn.setStyleSheet(custom_style)
 		self.execute_btn.setMinimumWidth(func_btn_min_width * register_btn_col_span)
 		self.execute_btn.setToolTip('<FONT>'+"Register project constant parameter settings to automatically set values to command arguments and options"+'</FONT>')
-		self.connect(self.execute_btn, SIGNAL("clicked()"), self.register_const_set)
+		self.execute_btn.clicked.connect(self.register_const_set)
 		btn_layout.addWidget(self.execute_btn, btn_grid_row, btn_col_origin, register_btn_row_span, register_btn_col_span)
 
 		btn_grid_row += 1
@@ -1991,14 +1993,14 @@
 		self.save_consts_btn = QPushButton("Save settings")
 		self.save_consts_btn.setMinimumWidth(func_btn_min_width)
 		self.save_consts_btn.setToolTip('<FONT>'+"Save project constant parameter settings"+'</FONT>')
-		self.connect(self.save_consts_btn, SIGNAL("clicked()"), self.save_consts)
+		self.save_consts_btn.clicked.connect(self.save_consts)
 		btn_layout.addWidget(self.save_consts_btn, btn_grid_row, btn_col_origin, func_btn_row_span, func_btn_col_span)
 
 		# Add load project constant parameter settings button
 		self.load_consts_btn = QPushButton("Load settings")
 		self.load_consts_btn.setMinimumWidth(func_btn_min_width)
 		self.load_consts_btn.setToolTip('<FONT>'+"Load project constant parameter settings to retrieve the previously-saved one"+'</FONT>')
-		self.connect(self.load_consts_btn, SIGNAL("clicked()"), self.load_consts)
+		self.load_consts_btn.clicked.connect(self.load_consts)
 		btn_layout.addWidget(self.load_consts_btn, btn_grid_row, btn_col_origin + func_btn_col_span, func_btn_row_span, func_btn_col_span)
 
 		btn_grid_row += 1
@@ -2100,12 +2102,12 @@
 		file_in.close()
 
 	def save_consts(self):
-		file_path_out = str(QFileDialog.getSaveFileName(self, "Save settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_out = str(QFileDialog.getSaveFileName(self, "Save settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_out != "":
 			self.write_consts(file_path_out)
 
 	def load_consts(self):
-		file_path_in = str(QFileDialog.getOpenFileName(self, "Load settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_in = str(QFileDialog.getOpenFileName(self, "Load settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_in != "":
 			self.read_consts(file_path_in)
 
@@ -2264,10 +2266,10 @@
 		# --------------------------------------------------------------------------------
 		# Start widget
 		# --------------------------------------------------------------------------------
-		start_widget = QtGui.QWidget()
-		logo_container = QtGui.QWidget()
-		layout_start_widget = QtGui.QHBoxLayout()
-		layout_logo_container = QtGui.QVBoxLayout()
+		start_widget = QtWidgets.QWidget()
+		logo_container = QtWidgets.QWidget()
+		layout_start_widget = QtWidgets.QHBoxLayout()
+		layout_logo_container = QtWidgets.QVBoxLayout()
 		logo_container.setStyleSheet('border-image: url("{0}sxgui_pictograph_info.png")'.format(get_image_directory()))
 		logo_container.setFixedSize(100, 100)
 		layout_start_widget.setContentsMargins(0, 0, 0, 20)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sxgui_cter.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sxgui_cter.py	2017-10-21 17:15:18.000000000 -0500
@@ -40,14 +40,14 @@
 import traceback
 
 try:
-	from PyQt4 import QtCore, QtGui, QtOpenGL
-	from PyQt4.QtCore import Qt
-	from PyQt4.QtCore import QTimer
+	from PyQt5 import QtCore, QtGui, QtOpenGL, QtWidgets
+	from PyQt5.QtCore import Qt
+	from PyQt5.QtCore import QTimer
 	from emshape import *
 	from valslider import *
 	from emplot2d import EMPlot2DWidget
 except:
-	print("Warning: PyQt4 must be installed")
+	print("Warning: PyQt5 must be installed")
 	sys.exit(1)
 
 from sparx import *
@@ -109,18 +109,21 @@
 	# Unfortunately, EMApp.execute() will print logid (e.g. "None") upon the exit...
 	app.execute()
 
-class SXListWidget(QtGui.QListWidget):
+class SXListWidget(QtWidgets.QListWidget):
 	"""Exactly like a normal list widget but intercepts a few keyboard events"""
+	keypress = QtCore.pyqtSignal()
 
 	def keyPressEvent(self,event):
 		if event.key() in (Qt.Key_Up,Qt.Key_Down) :
-			QtGui.QListWidget.keyPressEvent(self,event)
+			QtWidgets.QListWidget.keyPressEvent(self,event)
 			return
 		
-		self.emit(QtCore.SIGNAL("keypress"),event)
+		self.keypress.emit(event)
 
 class SXPlot2DWidget(EMPlot2DWidget):
 	
+	mouseup = QtCore.pyqtSignal()
+
 	def full_refresh(self):
 		'''
 		This function is called from resizeGL and from the inspector when somebody toggles the display of a line
@@ -136,9 +139,9 @@
 	def mouseReleaseEvent(self, event):
 		EMPlot2DWidget.mouseReleaseEvent(self,event)
 		if event.button()==Qt.LeftButton:
-			self.emit(QtCore.SIGNAL("mouseup"),event)
+			self.mouseup.emit(event)
 
-class SXGuiCter(QtGui.QWidget):
+class SXGuiCter(QtWidgets.QWidget):
 # 	def __init__(self, cter_ctf_file = None):
 	def __init__(self):
 		"""Implements the CTF fitting dialog using various EMImage and EMPlot2D widgets
@@ -500,12 +503,12 @@
 #		self.wimgmicthumb.connect(self.wimgmicthumb,QtCore.SIGNAL("mouseup")  ,self.imgmicthumbmouseup)
 #		self.wplotrotavgcoarse.connect(self.wplotrotavgcoarse,QtCore.SIGNAL("mousedown"),self.plotmousedown)
 #		self.wplotrotavgfine.connect(self.wplotrotavgfine,QtCore.SIGNAL("mousedown"),self.plotmousedown)
-		self.whistparam.connect(self.whistparam,QtCore.SIGNAL("mouseup"),self.histparammouseup)
-		self.wplotparam.connect(self.wplotparam,QtCore.SIGNAL("mouseup"),self.plotparammouseup)
+		self.whistparam.mouseup.connect(self.histparammouseup)
+		self.wplotparam.mouseup.connect(self.plotparammouseup)
 		
 		# This object is itself a widget we need to set up
-		self.gbl = QtGui.QGridLayout(self)
-		self.gbl.setMargin(8)
+		self.gbl = QtWidgets.QGridLayout(self)
+		self.gbl.setContentsMargins(8, 8, 8, 8)
 		self.gbl.setSpacing(6)
 		
 		# --------------------------------------------------------------------------------
@@ -523,19 +526,19 @@
 		labelwidth=70
 		sublabelwidth=140
 		
-		self.pbopencter=QtGui.QPushButton("Open CTER CTF file")
+		self.pbopencter=QtWidgets.QPushButton("Open CTER CTF file")
 		self.gbl.addWidget(self.pbopencter,grid_row,grid_col,1,col_span)
 		grid_row += 1
 		
 		# Make space
 		grid_row+=1
 		
-		temp_label=QtGui.QLabel("<b>Selection Summary:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Selection Summary:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span)
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("Num. of entries",self)
+		temp_label=QtWidgets.QLabel("Num. of entries",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(labelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span_label)
@@ -545,7 +548,7 @@
 		self.gbl.addWidget(self.vbnentry,grid_row,grid_col+col_span_label,1,col_span_edit)
 		grid_row+=1
 		
-		temp_label=QtGui.QLabel("Unchecked",self)
+		temp_label=QtWidgets.QLabel("Unchecked",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(labelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span_label)
@@ -555,7 +558,7 @@
 		self.gbl.addWidget(self.vbuncheckcounts,grid_row,grid_col+col_span_label,1,col_span_edit)
 		grid_row+=1
 		
-		temp_label=QtGui.QLabel("Ratio",self)
+		temp_label=QtWidgets.QLabel("Ratio",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(labelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span_label)
@@ -567,7 +570,7 @@
 		# Make space
 		grid_row+=1
 		
-		temp_label=QtGui.QLabel("<b>Electron Microscopy:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Electron Microscopy:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span)
 		grid_row += 1
@@ -587,12 +590,12 @@
 		# Make space
 		grid_row+=1
 		
-		temp_label=QtGui.QLabel("<b>Display Micrograph:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Display Micrograph:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span)
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("Open Window",self)
+		temp_label=QtWidgets.QLabel("Open Window",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col, 1, col_span_sublabel)
@@ -604,13 +607,13 @@
 		# Make space
 		grid_row+=1
 		
-		temp_label=QtGui.QLabel("<b>Display Curves:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Display Curves:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span)
 		grid_row += 1
 		
 		for idx_graph in range(self.n_idx_graph):
-			temp_label=QtGui.QLabel(self.graph_map_list[idx_graph][self.idx_graph_item_label],self)
+			temp_label=QtWidgets.QLabel(self.graph_map_list[idx_graph][self.idx_graph_item_label],self)
 			temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 			temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 			self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span_sublabel)
@@ -618,7 +621,7 @@
 			self.gbl.addWidget(self.graph_map_list[idx_graph][self.idx_graph_item_widget],grid_row,grid_col+col_span_sublabel,1,col_span_subedit)
 			grid_row += 1
 		
-		temp_label=QtGui.QLabel("Plot Fix Scale",self)
+		temp_label=QtWidgets.QLabel("Plot Fix Scale",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col, 1, col_span_sublabel)
@@ -626,7 +629,7 @@
 		self.gbl.addWidget(self.vbplotfixscale,grid_row,grid_col+col_span_sublabel,1,col_span_subedit)
 		grid_row+=1
 		
-		self.pbrefreshgraphs=QtGui.QPushButton("Refresh Graphs")
+		self.pbrefreshgraphs=QtWidgets.QPushButton("Refresh Graphs")
 		self.pbrefreshgraphs.setEnabled(False)
 		self.gbl.addWidget(self.pbrefreshgraphs,grid_row,grid_col,1,col_span)
 		grid_row += 1
@@ -641,7 +644,7 @@
 		# plot list and plot mode combobox
 		row_span_entry_list = 24
 		self.lbentry=SXListWidget(self) # self.lbentry=e2ctf.MyListWidget(self)
-		self.lbentry.setSizePolicy(QtGui.QSizePolicy.Preferred,QtGui.QSizePolicy.Expanding)
+		self.lbentry.setSizePolicy(QtWidgets.QSizePolicy.Preferred,QtWidgets.QSizePolicy.Expanding)
 		self.lbentry.setMinimumWidth(220)
 		self.gbl.addWidget(self.lbentry,grid_row,grid_col,row_span_entry_list,col_span)
 		grid_row += row_span_entry_list
@@ -679,18 +682,18 @@
 		editwidth=100
 		sublabelwidth=editwidth
 		
-		temp_label=QtGui.QLabel("<b>Current Entry Info:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Current Entry Info:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_1st_sub,1,col_span_1st_sub)
-		temp_label=QtGui.QLabel("<b>Unapplied Thresholds:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Unapplied Thresholds:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_2nd,1,col_span_2nd)
-		temp_label=QtGui.QLabel("<b>Applied Thresholds:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Applied Thresholds:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_3rd,1,col_span_3rd)
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("Sorted ID",self)
+		temp_label=QtWidgets.QLabel("Sorted ID",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(labelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_1st,1,col_span_1st_label)
@@ -718,52 +721,52 @@
 		# make space
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("<b>Sort CTER Entries:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Sort CTER Entries:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_1st_sub,1,col_span_1st_sub)
 		
-		temp_label=QtGui.QLabel("<b>Histogram & Plot Settings:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Histogram & Plot Settings:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_2nd,1,col_span_2nd)
 		
-		temp_label=QtGui.QLabel("<b>Save/Load Thresholds:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Save/Load Thresholds:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_3rd,1,col_span_3rd)
 		grid_row += 1
 		
-		self.ssort=QtGui.QComboBox(self)
+		self.ssort=QtWidgets.QComboBox(self)
 		for map_entry in self.sort_map_list:
 			idx_cter = map_entry[self.idx_sort_item_idx_cter]
 			self.ssort.addItem(self.value_map_list[idx_cter][self.idx_cter_item_label])
 		self.ssort.setCurrentIndex(self.cursort)
 		self.gbl.addWidget(self.ssort,grid_row,grid_col_1st_sub,1,col_span_1st_sub)
 		
-		self.shist=QtGui.QComboBox(self)
+		self.shist=QtWidgets.QComboBox(self)
 		for map_entry in self.hist_map_list:
 			idx_cter = map_entry[self.idx_hist_item_idx_cter]
 			self.shist.addItem(self.value_map_list[idx_cter][self.idx_cter_item_label])
 		self.shist.setCurrentIndex(self.curhist)
 		self.gbl.addWidget(self.shist,grid_row,grid_col_2nd,1,col_span_2nd)
 		
-		self.sthresholdset=QtGui.QComboBox(self)
+		self.sthresholdset=QtWidgets.QComboBox(self)
 		for map_entry in self.thresholdset_map_list:
 			self.sthresholdset.addItem(map_entry[self.idx_thresholdset_item_label])
 		self.sthresholdset.setCurrentIndex(self.curthresholdset)
 		self.gbl.addWidget(self.sthresholdset,grid_row,grid_col_3rd,1,col_span_3rd)
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("Decending",self)
+		temp_label=QtWidgets.QLabel("Decending",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_1st_sub,1,col_span_1st_sublabel)
 		self.cbsortoder=CheckBox(None,None,self.cursortoder)
 		self.gbl.addWidget(self.cbsortoder,grid_row,grid_col_1st_sub+col_span_1st_sublabel,1,col_span_1st_subedit)
 		
-		temp_label=QtGui.QLabel("Move Threshold",self)
+		temp_label=QtWidgets.QLabel("Move Threshold",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_2nd,1,col_span_2nd_sublabel)
-		self.sthresholdcontrol=QtGui.QComboBox(self)
+		self.sthresholdcontrol=QtWidgets.QComboBox(self)
 		# self.sthresholdcontrol.setStyleSheet("color: rgb(255,0,0);") # NOTE: Toshio Moriya 2016/01/22 Unfortunately, this will over write the individual item color...
 		for idx_threshold_control in range(self.n_idx_threshold_control):
 			map_entry = self.threshold_control_map_list[idx_threshold_control]
@@ -772,34 +775,34 @@
 		self.sthresholdcontrol.setCurrentIndex(self.curthresholdcontrol)
 		self.gbl.addWidget(self.sthresholdcontrol,grid_row,grid_col_2nd+col_span_2nd_sublabel,1,col_span_2nd_subedit)
 		
-		self.pbsavethresholdset=QtGui.QPushButton("Save")
+		self.pbsavethresholdset=QtWidgets.QPushButton("Save")
 		self.pbsavethresholdset.setEnabled(False)
 		self.gbl.addWidget(self.pbsavethresholdset,grid_row,grid_col_3rd,1,col_span_3rd_sublabel)
-		self.pbloadthresholdset=QtGui.QPushButton("Load")
+		self.pbloadthresholdset=QtWidgets.QPushButton("Load")
 		self.pbloadthresholdset.setEnabled(False)
 		self.gbl.addWidget(self.pbloadthresholdset,grid_row,grid_col_3rd+col_span_3rd_sublabel,1,col_span_3rd_subedit)
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("Sort Select",self)
+		temp_label=QtWidgets.QLabel("Sort Select",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_1st_sub,1,col_span_1st_sublabel)
 		self.cbsortselect=CheckBox(None,None,self.cursortselect)
 		self.gbl.addWidget(self.cbsortselect,grid_row,grid_col_1st_sub+col_span_1st_sublabel,1,col_span_1st_subedit)
 		
-		temp_label=QtGui.QLabel("Sync. Sort",self)
+		temp_label=QtWidgets.QLabel("Sync. Sort",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_2nd,1,col_span_2nd_sublabel)
 		self.cbsyncsort=CheckBox(None,None,self.cursyncsort)
 		self.gbl.addWidget(self.cbsyncsort,grid_row,grid_col_2nd+col_span_2nd_sublabel,1,col_span_2nd_subedit)
 		
-		temp_label=QtGui.QLabel("<b>Save Selection:</b>",self)
+		temp_label=QtWidgets.QLabel("<b>Save Selection:</b>",self)
 		temp_label.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
 		self.gbl.addWidget(temp_label,grid_row,grid_col_3rd,1,col_span_3rd)
 		grid_row += 1
 		
-		temp_label=QtGui.QLabel("counts/bin",self)
+		temp_label=QtWidgets.QLabel("counts/bin",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_2nd, 1, col_span_2nd_sublabel)
@@ -807,7 +810,7 @@
 		self.vsentryperbin.setIntonly(True)
 		self.gbl.addWidget(self.vsentryperbin,grid_row,grid_col_2nd+col_span_2nd_sublabel,1,col_span_2nd_subedit)
 		
-		temp_label=QtGui.QLabel("File Suffix",self)
+		temp_label=QtWidgets.QLabel("File Suffix",self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(sublabelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col_3rd,1,col_span_3rd_sublabel)
@@ -815,15 +818,15 @@
 		self.gbl.addWidget(self.vfilesuffix,grid_row,grid_col_3rd+col_span_3rd_sublabel,1,col_span_3rd_subedit)
 		grid_row += 1
 		
-		self.pbreaplysort=QtGui.QPushButton("Reapply Sort")
+		self.pbreaplysort=QtWidgets.QPushButton("Reapply Sort")
 		self.pbreaplysort.setEnabled(False)
 		self.gbl.addWidget(self.pbreaplysort,grid_row,grid_col_1st_sub,1,col_span_1st_sub)
 		
-		self.pbapplyallthreshold=QtGui.QPushButton("Apply All Thresholds")
+		self.pbapplyallthreshold=QtWidgets.QPushButton("Apply All Thresholds")
 		self.pbapplyallthreshold.setEnabled(False)
 		self.gbl.addWidget(self.pbapplyallthreshold,grid_row,grid_col_2nd,1,col_span_2nd)
 		
-		self.pbsaveselection=QtGui.QPushButton("Save Selection")
+		self.pbsaveselection=QtWidgets.QPushButton("Save Selection")
 		self.pbsaveselection.setEnabled(False)
 		self.gbl.addWidget(self.pbsaveselection,grid_row,grid_col_3rd,1,col_span_3rd)
 		grid_row += 1
@@ -837,43 +840,43 @@
 		# --------------------------------------------------------------------------------
 		# Set signal handler
 		# --------------------------------------------------------------------------------
-		QtCore.QObject.connect(self.pbopencter, QtCore.SIGNAL("clicked(bool)"),self.openCter)
+		self.pbopencter.clicked[bool].connect(self.openCter)
 		
-		QtCore.QObject.connect(self.cbmicthumbdisplay, QtCore.SIGNAL("valueChanged"),self.newMicThumbDisplay)
+		self.cbmicthumbdisplay.valueChanged.connect(self.newMicThumbDisplay)
 		
 		for idx_graph in range(self.n_idx_graph):
-			QtCore.QObject.connect(self.graph_map_list[idx_graph][self.idx_graph_item_widget], QtCore.SIGNAL("valueChanged"),self.updatePlotVisibility)
-		QtCore.QObject.connect(self.vbplotfixscale, QtCore.SIGNAL("valueChanged"),self.newPlotFixScale)
-		QtCore.QObject.connect(self.pbrefreshgraphs, QtCore.SIGNAL("clicked(bool)"),self.refreshGraphs)
+			self.graph_map_list[idx_graph][self.idx_graph_item_widget].valueChanged.connect(self.updatePlotVisibility)
+		self.vbplotfixscale.valueChanged.connect(self.newPlotFixScale)
+		self.pbrefreshgraphs.clicked[bool].connect(self.refreshGraphs)
 		
-		QtCore.QObject.connect(self.lbentry,QtCore.SIGNAL("currentRowChanged(int)"),self.newEntry)
+		self.lbentry.currentRowChanged[int].connect(self.newEntry)
 #		QtCore.QObject.connect(self.lbentry,QtCore.SIGNAL("keypress"),self.entryKey)
-		QtCore.QObject.connect(self.lbentry,QtCore.SIGNAL("itemChanged(QListWidgetItem*)"),self.updateEntrySelect)
+		self.lbentry.itemChanged[QListWidgetItem].connect(self.updateEntrySelect)
 		
-		QtCore.QObject.connect(self.ssort,QtCore.SIGNAL("currentIndexChanged(int)"),self.newSort)
-		QtCore.QObject.connect(self.cbsortoder, QtCore.SIGNAL("valueChanged"),self.newSortOrder)
-		QtCore.QObject.connect(self.cbsortselect, QtCore.SIGNAL("valueChanged"),self.newSortSelect)
-		QtCore.QObject.connect(self.pbreaplysort, QtCore.SIGNAL("clicked(bool)"),self.reapplySort)
+		self.ssort.currentIndexChanged[int].connect(self.newSort)
+		self.cbsortoder.valueChanged.connect(self.newSortOrder)
+		self.cbsortselect.valueChanged.connect(self.newSortSelect)
+		self.pbreaplysort.clicked[bool].connect(self.reapplySort)
 		
 		for idx_hist in range(self.n_idx_hist):
-			QtCore.QObject.connect(self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_lower],QtCore.SIGNAL("valueChanged"),self.newThresholdLower)
-			QtCore.QObject.connect(self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_upper],QtCore.SIGNAL("valueChanged"),self.newThresholdUpper)
+			self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_lower].valueChanged.connect(self.newThresholdLower)
+			self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_upper].valueChanged.connect(self.newThresholdUpper)
 			# QtCore.QObject.connect(self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_lower],QtCore.SIGNAL("valueChanged"),self.updateHist)
 			# QtCore.QObject.connect(self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_lower],QtCore.SIGNAL("valueChanged"),self.updatePlotParam)
 			# QtCore.QObject.connect(self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_upper],QtCore.SIGNAL("valueChanged"),self.updateHist)
 			# QtCore.QObject.connect(self.hist_map_list[idx_hist][self.idx_hist_item_unapply_widget_upper],QtCore.SIGNAL("valueChanged"),self.updatePlotParam)
 		
-		QtCore.QObject.connect(self.shist,QtCore.SIGNAL("currentIndexChanged(int)"),self.newHist)
-		QtCore.QObject.connect(self.sthresholdcontrol,QtCore.SIGNAL("currentIndexChanged(int)"),self.newThresholdControl)
-		QtCore.QObject.connect(self.cbsyncsort, QtCore.SIGNAL("valueChanged"),self.newSyncSort)
-		QtCore.QObject.connect(self.vsentryperbin, QtCore.SIGNAL("valueChanged"),self.newEntryPerBin)
-		QtCore.QObject.connect(self.pbapplyallthreshold, QtCore.SIGNAL("clicked(bool)"),self.applyAllThresholds)
-		
-		QtCore.QObject.connect(self.sthresholdset,QtCore.SIGNAL("currentIndexChanged(int)"),self.newThresholdSet)
-		QtCore.QObject.connect(self.pbsavethresholdset, QtCore.SIGNAL("clicked(bool)"),self.saveThresholdSet)
-		QtCore.QObject.connect(self.pbloadthresholdset, QtCore.SIGNAL("clicked(bool)"),self.loadThresholdSet)
+		self.shist.currentIndexChanged[int].connect(self.newHist)
+		self.sthresholdcontrol.currentIndexChanged[int].connect(self.newThresholdControl)
+		self.cbsyncsort.valueChanged.connect(self.newSyncSort)
+		self.vsentryperbin.valueChanged.connect(self.newEntryPerBin)
+		self.pbapplyallthreshold.clicked[bool].connect(self.applyAllThresholds)
+		
+		self.sthresholdset.currentIndexChanged[int].connect(self.newThresholdSet)
+		self.pbsavethresholdset.clicked[bool].connect(self.saveThresholdSet)
+		self.pbloadthresholdset.clicked[bool].connect(self.loadThresholdSet)
 		
-		QtCore.QObject.connect(self.pbsaveselection, QtCore.SIGNAL("clicked(bool)"),self.saveSelection)
+		self.pbsaveselection.clicked[bool].connect(self.saveSelection)
 		
 		self.setWindowTitle("sxgui_cter - Control Panel")
 		
@@ -965,7 +968,7 @@
 #		self.errors=None # used to communicate errors back from the reprocessing thread
 		
 		self.timer=QTimer()
-		QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.timeOut)
+		self.timer.timeout.connect(self.timeOut)
 		self.timer.start(100)
 		
 #		# Finally, read CTER CTF file if necessary
@@ -974,7 +977,7 @@
 		
 	def add_value_widget(self, idx_cter, val_min, val_max, grid_row, grid_col, col_span_label, col_span_edit, intonly = False, labelwidth = 80, editwidth = 80):
 		param_label = self.value_map_list[idx_cter][self.idx_cter_item_label]
-		temp_label=QtGui.QLabel(param_label,self)
+		temp_label=QtWidgets.QLabel(param_label,self)
 		temp_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
 		temp_label.setMinimumSize(QtCore.QSize(labelwidth,20))
 		self.gbl.addWidget(temp_label,grid_row,grid_col,1,col_span_label)
@@ -1018,15 +1021,15 @@
 		"""Read all entries from a CTER CTF file into the list box"""
 		
 		if not os.path.exists(file_path):
-			QtGui.QMessageBox.warning(None,"Warning","Can not find CTER CTF File (%s). Please check the file path." % (file_path))
+			QtWidgets.QMessageBox.warning(None,"Warning","Can not find CTER CTF File (%s). Please check the file path." % (file_path))
 			return
 		
 		if os.path.basename(file_path).find("partres") == -1:
-			QtGui.QMessageBox.warning(None,"Warning","Invalid file name for CTER CTF File (%s). The file name must contain \"partres\"." % (file_path))
+			QtWidgets.QMessageBox.warning(None,"Warning","Invalid file name for CTER CTF File (%s). The file name must contain \"partres\"." % (file_path))
 			return
 		
 		if file_path[-1*len(".txt"):] != ".txt":
-			QtGui.QMessageBox.warning(None,"Warning","Invalid file extension for CTER CTF File (%s). The file extension must be \".txt\"." % (file_path))
+			QtWidgets.QMessageBox.warning(None,"Warning","Invalid file extension for CTER CTF File (%s). The file extension must be \".txt\"." % (file_path))
 			return
 		
 #		if os.path.dirname(file_path)[-1*len("partres"):] != "partres":
@@ -1035,22 +1038,22 @@
 		
 		new_entry_list = read_text_row(file_path)
 		if len(new_entry_list) == 0:
-			QtGui.QMessageBox.warning(self, "Warning", "Specified CTER CTF file (%s) does not contain any entry. Please check the file." % (file_path))
+			QtWidgets.QMessageBox.warning(self, "Warning", "Specified CTER CTF file (%s) does not contain any entry. Please check the file." % (file_path))
 			return
 		assert(len(new_entry_list) > 0)
 		
 		# NOTE: 2017/03/20 Toshio Moriya
 		# The following code is to support the old format of CTER. It should be removed near future
 		if len(new_entry_list[0]) == self.n_idx_cter - self.n_idx_cter_extra - 1:
-			QtGui.QMessageBox.warning(None,"Warning","The format of CTER CTF File (%s) might be old. We will stop supporting this format near future. Please consider rerun CTER." % (file_path))
+			QtWidgets.QMessageBox.warning(None,"Warning","The format of CTER CTF File (%s) might be old. We will stop supporting this format near future. Please consider rerun CTER." % (file_path))
 			# Continue processing for now (2017/03/20 Toshio Moriya)
 		elif len(new_entry_list[0]) != self.n_idx_cter - self.n_idx_cter_extra:
-			QtGui.QMessageBox.warning(None,"Warning","The number of columns (%d) has to be %d in %s" % (len(new_entry_list[0]), self.n_idx_cter - self.n_idx_cter_extra, file_path))
+			QtWidgets.QMessageBox.warning(None,"Warning","The number of columns (%d) has to be %d in %s" % (len(new_entry_list[0]), self.n_idx_cter - self.n_idx_cter_extra, file_path))
 			return
 		
 		cter_pwrot_dir = os.path.join(os.path.dirname(file_path), "pwrot")
 		if not os.path.exists(cter_pwrot_dir):
-			QtGui.QMessageBox.warning(self, "Warning", "Can not find \"%s\" sub-directory associated with specified CTER CTF file (%s). Please check your project directory." % (cter_pwrot_dir, file_path))
+			QtWidgets.QMessageBox.warning(self, "Warning", "Can not find \"%s\" sub-directory associated with specified CTER CTF file (%s). Please check your project directory." % (cter_pwrot_dir, file_path))
 			return
 		
 		# print "MRK_DEBUG: Detected %s entries in %s" % (len(new_entry_list), file_path)
@@ -1232,10 +1235,10 @@
 		
 		if self.hist_map_list[self.curhist][self.idx_hist_item_val_min] == self.hist_map_list[self.curhist][self.idx_hist_item_val_max]:
 			param_label = self.value_map_list[idx_cter][self.idx_cter_item_label]
-			QtGui.QMessageBox.information(self, "Information","All entries have the same selected parameter values (%s). \n\nParameter Histogram & Plot will not be shown" % (param_label))
+			QtWidgets.QMessageBox.information(self, "Information","All entries have the same selected parameter values (%s). \n\nParameter Histogram & Plot will not be shown" % (param_label))
 		
 		if not os.path.exists(cter_micthumb_dir):
-			QtGui.QMessageBox.warning(None,"Warning","Can not find \"%s\" sub-directory associated with specified CTER CTF file (%s). Please check your project directory. \n\nMicrograph thumbnail display option is disabled for this session." % (cter_micthumb_dir, self.cter_partres_file_path))
+			QtWidgets.QMessageBox.warning(None,"Warning","Can not find \"%s\" sub-directory associated with specified CTER CTF file (%s). Please check your project directory. \n\nMicrograph thumbnail display option is disabled for this session." % (cter_micthumb_dir, self.cter_partres_file_path))
 		
 #		assert(self.isVisible()) 
 #		self.raise_()
@@ -1244,7 +1247,7 @@
 	def openCter(self,val=None):
 		"""Open CTER CTF file"""
 		
-		file_path = str(QtGui.QFileDialog.getOpenFileName(self, "Open CTER CTF File", options = QtGui.QFileDialog.DontUseNativeDialog))
+		file_path = str(QtWidgets.QFileDialog.getOpenFileName(self, "Open CTER CTF File", options = QtWidgets.QFileDialog.DontUseNativeDialog))[0]
 		if file_path == "": return
 		
 		self.readCterCtfFile(os.path.relpath(file_path))
@@ -1405,7 +1408,7 @@
 			if self.wplotrotavgfine.isVisible():
 				self.wplotrotavgfine.hide()
 			if error_display:
-				QtGui.QMessageBox.warning(None,"Warning","Can not find file cter_pwrot_file_path (%s). Please check the contents of pwrot directory. \n\nPlots will not be shown." % (self.cter_pwrot_file_path))
+				QtWidgets.QMessageBox.warning(None,"Warning","Can not find file cter_pwrot_file_path (%s). Please check the contents of pwrot directory. \n\nPlots will not be shown." % (self.cter_pwrot_file_path))
 			return
 			
 		self.rotinf_table = read_text_file(self.cter_pwrot_file_path, ncol=-1)
@@ -1505,7 +1508,7 @@
 		self.lbentry.clear()
 		newItemflags = Qt.ItemFlags(Qt.ItemIsSelectable)|Qt.ItemFlags(Qt.ItemIsEnabled)|Qt.ItemFlags(Qt.ItemIsUserCheckable)
 		for cter_entry in self.cter_entry_list:
-			newItem = QtGui.QListWidgetItem(os.path.basename(cter_entry[self.idx_cter_mic_name]))
+			newItem = QtWidgets.QListWidgetItem(os.path.basename(cter_entry[self.idx_cter_mic_name]))
 			newItem.setFlags(newItemflags)
 			if cter_entry[self.idx_cter_select] == 1:
 				newItem.setCheckState(Qt.Checked)
@@ -1529,7 +1532,7 @@
 			if self.wimgmicthumb.isVisible():
 				self.wimgmicthumb.hide()
 			if error_display:
-				QtGui.QMessageBox.warning(None,"Warning","Can not find micrograph thumbnail (%s). Please check your micrograph thumbnail directory. \n\nMicrograph thumbnail will not be shown." % (self.cter_micthumb_file_path))
+				QtWidgets.QMessageBox.warning(None,"Warning","Can not find micrograph thumbnail (%s). Please check your micrograph thumbnail directory. \n\nMicrograph thumbnail will not be shown." % (self.cter_micthumb_file_path))
 			return
 		
 		micthumb_img = EMData(self.cter_micthumb_file_path) # read the image from disk
@@ -1763,7 +1766,7 @@
 				self.whistparam.hide()
 			if self.wplotparam.isVisible():
 				self.wplotparam.hide()
-			QtGui.QMessageBox.information(self, "Information","All entries have the same selected parameter values (%s). \n\nParameter Histogram & Plot will not be shown" % (param_label))
+			QtWidgets.QMessageBox.information(self, "Information","All entries have the same selected parameter values (%s). \n\nParameter Histogram & Plot will not be shown" % (param_label))
 		else:
 			if self.curthresholdcontrol == self.idx_threshold_control_lower:
 				self.hist_map_list[self.curhist][self.idx_hist_item_unapply_widget_lower].setEnabled(True)
@@ -1870,8 +1873,8 @@
 		if self.cter_partres_file_path == None: return # no cter ctf file is selected
 		if self.cter_entry_list == None: return # no cter ctf file is selected
 		
-		reply = QtGui.QMessageBox.question(self, "Warning", "Applying all threshold setting will wipe the previous selection states including manual setting. Do you really want to continue?", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No, QtGui.QMessageBox.No)
-		if reply == QtGui.QMessageBox.No:
+		reply = QtWidgets.QMessageBox.question(self, "Warning", "Applying all threshold setting will wipe the previous selection states including manual setting. Do you really want to continue?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
+		if reply == QtWidgets.QMessageBox.No:
 			return
 		
 		# Set set the select status of all cter entries based on the threshold values
@@ -1968,7 +1971,7 @@
 			if idx_thresholdset == self.idx_thresholdset_applied:
 				self.applyAllThresholds()
 		else:
-			QtGui.QMessageBox.warning(self, "Warning", "The specified file is not threshold file.")
+			QtWidgets.QMessageBox.warning(self, "Warning", "The specified file is not threshold file.")
 		
 		file_in.close()
 	
@@ -1977,7 +1980,7 @@
 		if self.cter_entry_list == None: return # no cter ctf file is selected
 		
 		title_string = "Save %s Thresholds" % self.thresholdset_map_list[self.curthresholdset][self.idx_thresholdset_item_label]
-		file_path_out = str(QtGui.QFileDialog.getSaveFileName(self, title_string, options = QtGui.QFileDialog.DontUseNativeDialog))
+		file_path_out = str(QtWidgets.QFileDialog.getSaveFileName(self, title_string, options = QtWidgets.QFileDialog.DontUseNativeDialog))[0]
 		if file_path_out == "": return
 		
 		self.writeThresholdSet(os.path.relpath(file_path_out), self.curthresholdset)
@@ -1986,12 +1989,12 @@
 		if self.cter_partres_file_path == None: return # no cter ctf file is selected
 		if self.cter_entry_list == None: return # no cter ctf file is selected
 		
-		reply = QtGui.QMessageBox.question(self, "Warning", "Loading thresholds will wipe the previous threshold setting. Do you really want to continue?", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No, QtGui.QMessageBox.No)
-		if reply == QtGui.QMessageBox.No:
+		reply = QtWidgets.QMessageBox.question(self, "Warning", "Loading thresholds will wipe the previous threshold setting. Do you really want to continue?", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
+		if reply == QtWidgets.QMessageBox.No:
 			return
 		
 		title_string = "Load %s Thresholds" % self.thresholdset_map_list[self.curthresholdset][self.idx_thresholdset_item_label]
-		file_path_in = str(QtGui.QFileDialog.getOpenFileName(self, title_string, options = QtGui.QFileDialog.DontUseNativeDialog))
+		file_path_in = str(QtWidgets.QFileDialog.getOpenFileName(self, title_string, options = QtWidgets.QFileDialog.DontUseNativeDialog))[0]
 		if file_path_in == "": return
 		
 		self.readThresholdSet(os.path.relpath(file_path_in), self.curthresholdset)
@@ -2025,8 +2028,8 @@
 		# else: # Do nothing
 		
 		if existing_file_path != None:
-			reply = QtGui.QMessageBox.question(self, "Warning", "The file (%s) already exists. Do you want to overwrite the file?" % (existing_file_path), QtGui.QMessageBox.Yes | QtGui.QMessageBox.No, QtGui.QMessageBox.No)
-			if reply == QtGui.QMessageBox.No:
+			reply = QtWidgets.QMessageBox.question(self, "Warning", "The file (%s) already exists. Do you want to overwrite the file?" % (existing_file_path), QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)
+			if reply == QtWidgets.QMessageBox.No:
 				return
 		
 		# Save selection in CTER Format
@@ -2073,7 +2076,7 @@
 		# Save the associated applied threshold 
 		self.writeThresholdSet(file_path_out_thresholds, self.idx_thresholdset_applied) 
 		
-		QtGui.QMessageBox.information(self, "Information","The following files are saved in %s:\n\nCTER CTF List - Selected: %s\n\nCTER CTF List - Discarded: %s\n\nMicrograph - Selected: %s\n\nMicrograph - Discarded: %s\n\nApplied Threshold Set: %s" % (os.path.dirname(self.cter_partres_file_path), os.path.basename(file_path_out_select), os.path.basename(file_path_out_discard), os.path.basename(file_path_out_mic_select), os.path.basename(file_path_out_mic_discard), os.path.basename(file_path_out_thresholds)))
+		QtWidgets.QMessageBox.information(self, "Information","The following files are saved in %s:\n\nCTER CTF List - Selected: %s\n\nCTER CTF List - Discarded: %s\n\nMicrograph - Selected: %s\n\nMicrograph - Discarded: %s\n\nApplied Threshold Set: %s" % (os.path.dirname(self.cter_partres_file_path), os.path.basename(file_path_out_select), os.path.basename(file_path_out_discard), os.path.basename(file_path_out_mic_select), os.path.basename(file_path_out_mic_discard), os.path.basename(file_path_out_thresholds)))
 	
 	def timeOut(self):
 		if self.busy: return
@@ -2264,7 +2267,7 @@
 		if self.wplotparam: self.wplotparam.close()
 		
 		event.accept()
-		QtGui.qApp.exit(0)
+		QtWidgets.QApplication.exit(0)
 		
 	def updatePlotVisibility(self,val=None):
 		if self.wplotrotavgcoarse == None: return # it's closed/not visible
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sxgui_meridien.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sxgui_meridien.py	2017-10-21 17:15:18.000000000 -0500
@@ -16,9 +16,10 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-from PyQt4.QtCore import QObject, pyqtSignal, pyqtSlot, QThread, QString, QThreadPool, QTimer
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtGui import QDialog, QGridLayout, QTreeWidget, QMessageBox, QFontMetrics
+from PyQt5.QtCore import QObject, pyqtSignal, pyqtSlot, QThread, QThreadPool, QTimer
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtGui import (QDialog, QGridLayout, QTreeWidget, QMessageBox,
+                         QFontMetrics)
 import matplotlib.pyplot as plt
 from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
 from matplotlib.backends.backend_qt4agg import NavigationToolbar2QT as NavigationToolbar
@@ -29,6 +30,12 @@
 import numpy as np
 
 
+try:
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+
 class DriverFileReader(QObject):
 
     sig_readfsc = pyqtSignal(object)
@@ -134,7 +141,7 @@
         self.toolbar = NavigationToolbar(self.canvas, self)
 
         # set the layout
-        layout = QtGui.QVBoxLayout()
+        layout = QtWidgets.QVBoxLayout()
         layout.addWidget(self.toolbar)
         layout.addWidget(self.canvas)
         self.setLayout(layout)
@@ -197,7 +204,7 @@
                 for dictionary in list_new_dictionaries:
                     if os.path.isfile("{0}/{1}/driver_{2}.txt".format(self.refinement_folder, dictionary, dictionary[-3:])) and \
                             os.path.isfile("{0}/{1}/Tracker_{2}.json".format(self.refinement_folder, dictionary, dictionary[-3:])):
-                        next_item = QtGui.QTreeWidgetItem([dictionary])
+                        next_item = QtWidgets.QTreeWidgetItem([dictionary])
                         next_item.setCheckState(0, QtCore.Qt.Unchecked)
                         delete=False
                         self.sig_update_tree.emit(next_item, self.refinement_folder, delete)
@@ -222,7 +229,7 @@
         self.toolbar = NavigationToolbar(self.canvas, self)
 
         # set the layout
-        layout = QtGui.QVBoxLayout()
+        layout = QtWidgets.QVBoxLayout()
         layout.addWidget(self.toolbar)
         layout.addWidget(self.canvas)
         self.setLayout(layout)
@@ -317,7 +324,7 @@
 
 
 
-class MainWindow(QtGui.QMainWindow):
+class MainWindow(QtWidgets.QMainWindow):
 
     sig_update_tree = pyqtSignal(object, object, object)
     sig_show_overview_plot = pyqtSignal()
@@ -326,11 +333,11 @@
         super(MainWindow, self).__init__(parent)
         self.font = font
         self.setWindowTitle("Meridien")
-        central_widget = QtGui.QWidget(self)
+        central_widget = QtWidgets.QWidget(self)
         self.setCentralWidget(central_widget)
 
         #Center on screen
-        resolution = QtGui.QDesktopWidget().screenGeometry()
+        resolution = QtWidgets.QDesktopWidget().screenGeometry()
         self.move((resolution.width() / 2) - (self.frameSize().width() / 2),
                   (resolution.height() / 2) - (self.frameSize().height() / 2))
 
@@ -338,12 +345,12 @@
         Setting up menu bar
         """
 
-        close_action = QtGui.QAction('Close', self)
+        close_action = QtWidgets.QAction('Close', self)
         close_action.setShortcut("Ctrl+Q")
         close_action.setStatusTip('Leave the app')
         close_action.triggered.connect(lambda: self.close())
 
-        open_refinement_folder = QtGui.QAction('Open Refinement Folder', self)
+        open_refinement_folder = QtWidgets.QAction('Open Refinement Folder', self)
         open_refinement_folder.triggered.connect(self.open_refinement_folder)
 
         self.mainMenu = self.menuBar()
@@ -352,10 +359,10 @@
         self.fileMenu.addAction(close_action)
         self.refinement_folder = ""
 
-        create_new_fsc_plot = QtGui.QAction('&New FSC plot', self)
+        create_new_fsc_plot = QtWidgets.QAction('&New FSC plot', self)
         create_new_fsc_plot.triggered.connect(self.event_ontriggered_show_fsc_plot)
 
-        create_new_overview_plot = QtGui.QAction('&New resolution overview plot', self)
+        create_new_overview_plot = QtWidgets.QAction('&New resolution overview plot', self)
         create_new_overview_plot.triggered.connect(self.event_show_resolution_overview_plot)
         self.plotMenu = self.mainMenu.addMenu('&Plot')
         self.plotMenu.addAction(create_new_fsc_plot)
@@ -491,7 +498,7 @@
         Let the user choose the refinement folder and adds it to the RefinementFolder-Tree
         :return: none
         """
-        self.refinement_folder = str(QtGui.QFileDialog.getExistingDirectory(self, "Select Refinement Directory"))
+        self.refinement_folder = str(QtWidgets.QFileDialog.getExistingDirectory(self, "Select Refinement Directory"))
         if self.refinement_folder == "":
             return
         if self.refinement_folder in self.root_items_path_dictionary:
@@ -512,7 +519,7 @@
             #    self.root.removeChild(self.root.child(i))
             name = os.path.basename(path)
             qname = QString(name)
-            root = QtGui.QTreeWidgetItem([str(path)])
+            root = QtWidgets.QTreeWidgetItem([str(path)])
             self.root_items_path_dictionary[str(path)] = root
             self.tree.addTopLevelItem(root)
             fm = QFontMetrics(self.font)
@@ -544,7 +551,7 @@
         root.setCheckState(0,QtCore.Qt.Unchecked)
         main_dicts = DriverFileReader.read_refinement_folders(path_to_refinement_folder)
         for dictionary in main_dicts:
-            next_item = QtGui.QTreeWidgetItem([dictionary])
+            next_item = QtWidgets.QTreeWidgetItem([dictionary])
             next_item.setCheckState(0, QtCore.Qt.Unchecked)
             root.addChild(next_item)
 
@@ -557,7 +564,7 @@
 
 
 def run(args=None):
-    app = QtGui.QApplication(sys.argv)
+    app = QtWidgets.QApplication(sys.argv)
 
     gui = MainWindow(app.font())
     sys.exit(app.exec_())
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sxgui_unblur.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sxgui_unblur.py	2017-10-21 17:15:19.000000000 -0500
@@ -16,8 +16,8 @@
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from matplotlib import pylab
 try:
     from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvasQTAgg
@@ -33,29 +33,23 @@
 import numpy
 
 try:
-    _fromUtf8 = QtCore.QString.fromUtf8
-except AttributeError:
-    def _fromUtf8(s):
-        return s
-
-try:
-    _encoding = QtGui.QApplication.UnicodeUTF8
+    _encoding = QtWidgets.QApplication.UnicodeUTF8
     def _translate(context, text, disambig):
-        return QtGui.QApplication.translate(context, text, disambig, _encoding)
+        return QtCore.QCoreApplication.translate(context, text, disambig, _encoding)
 except AttributeError:
     def _translate(context, text, disambig):
-        return QtGui.QApplication.translate(context, text, disambig)
+        return QtCore.QCoreApplication.translate(context, text, disambig)
 
 class Ui_MSMainWidget(object):
     def setupUi(self, MSMainWidget):
-        widget = QtGui.QWidget(self)
+        widget = QtWidgets.QWidget(self)
         MSMainWidget.setCentralWidget(widget)
 
-        self.global_layout = QtGui.QVBoxLayout(widget)
-        self.h_layout = QtGui.QHBoxLayout()
-        self.v_layout_1 = QtGui.QVBoxLayout()
-        self.v_layout_2 = QtGui.QVBoxLayout()
-        self.v_layout_3 = QtGui.QVBoxLayout()
+        self.global_layout = QtWidgets.QVBoxLayout(widget)
+        self.h_layout = QtWidgets.QHBoxLayout()
+        self.v_layout_1 = QtWidgets.QVBoxLayout()
+        self.v_layout_2 = QtWidgets.QVBoxLayout()
+        self.v_layout_3 = QtWidgets.QVBoxLayout()
 
         self.global_layout.addLayout(self.h_layout, stretch=1)
         self.h_layout.addLayout(self.v_layout_1, stretch=1)
@@ -73,193 +67,193 @@
         self.global_layout.addWidget(self.save_section())
 
     def load_section(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 5, 5, 5)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
         layout_v.addLayout(layout_h)
         
-        label = QtGui.QLabel('Pattern:', self)
-        self.lePattern = QtGui.QLineEdit(self)
-        self.pbSelectTxt = QtGui.QPushButton('Find pattern', self)
+        label = QtWidgets.QLabel('Pattern:', self)
+        self.lePattern = QtWidgets.QLineEdit(self)
+        self.pbSelectTxt = QtWidgets.QPushButton('Find pattern', self)
         layout_h.addWidget(label)
         layout_h.addWidget(self.lePattern)
         layout_h.addWidget(self.pbSelectTxt)
 
-        self.pbImportPattern = QtGui.QPushButton('Load files by pattern', self)
+        self.pbImportPattern = QtWidgets.QPushButton('Load files by pattern', self)
         layout_v.addWidget(self.pbImportPattern)
-        self.pbImportList = QtGui.QPushButton('Load files by list', self)
+        self.pbImportList = QtWidgets.QPushButton('Load files by list', self)
         layout_v.addWidget(self.pbImportList)
         return widget
 
     def list_section(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 5, 5, 5)
 
-        self.lsFiles = QtGui.QListWidget(self)
+        self.lsFiles = QtWidgets.QListWidget(self)
         self.lsFiles.setEnabled(False)
         layout_v.addWidget(self.lsFiles)
         return widget
 
     def status_section(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 5, 5, 5)
 
-        label = QtGui.QLabel('Info of current entry:', self)
+        label = QtWidgets.QLabel('Info of current entry:', self)
         layout_v.addWidget(label)
-        label = QtGui.QLabel('', self)
+        label = QtWidgets.QLabel('', self)
         layout_v.addWidget(label)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Micrograph name', self)
+        label = QtWidgets.QLabel('Micrograph name', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leCurrentMicName = QtGui.QLineEdit(self)
+        self.leCurrentMicName = QtWidgets.QLineEdit(self)
         self.leCurrentMicName.setMaximumWidth(300)
         self.leCurrentMicName.setMinimumWidth(300)
         self.leCurrentMicName.setEnabled(False)
         layout_h.addWidget(self.leCurrentMicName)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Overall drift [A]', self)
+        label = QtWidgets.QLabel('Overall drift [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leCurrentOverallDrift = QtGui.QLineEdit(self)
+        self.leCurrentOverallDrift = QtWidgets.QLineEdit(self)
         self.leCurrentOverallDrift.setMaximumWidth(100)
         self.leCurrentOverallDrift.setEnabled(False)
         layout_h.addWidget(self.leCurrentOverallDrift)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Drift per frame [A]', self)
+        label = QtWidgets.QLabel('Drift per frame [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leCurrentFrameDrift = QtGui.QLineEdit(self)
+        self.leCurrentFrameDrift = QtWidgets.QLineEdit(self)
         self.leCurrentFrameDrift.setMaximumWidth(100)
         self.leCurrentFrameDrift.setEnabled(False)
         layout_h.addWidget(self.leCurrentFrameDrift)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('End to end length [A]', self)
+        label = QtWidgets.QLabel('End to end length [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leCurrentEndToEndDrift = QtGui.QLineEdit(self)
+        self.leCurrentEndToEndDrift = QtWidgets.QLineEdit(self)
         self.leCurrentEndToEndDrift.setMaximumWidth(100)
         self.leCurrentEndToEndDrift.setEnabled(False)
         layout_h.addWidget(self.leCurrentEndToEndDrift)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Maximum distance between frames [A]', self)
+        label = QtWidgets.QLabel('Maximum distance between frames [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leCurrentMaxDistance = QtGui.QLineEdit(self)
+        self.leCurrentMaxDistance = QtWidgets.QLineEdit(self)
         self.leCurrentMaxDistance.setMaximumWidth(100)
         self.leCurrentMaxDistance.setEnabled(False)
         layout_h.addWidget(self.leCurrentMaxDistance)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Maximum distance from start frame [A]', self)
+        label = QtWidgets.QLabel('Maximum distance from start frame [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leCurrentMaxDistanceZero = QtGui.QLineEdit(self)
+        self.leCurrentMaxDistanceZero = QtWidgets.QLineEdit(self)
         self.leCurrentMaxDistanceZero.setMaximumWidth(100)
         self.leCurrentMaxDistanceZero.setEnabled(False)
         layout_h.addWidget(self.leCurrentMaxDistanceZero)
         layout_v.addLayout(layout_h)
 
-        label = QtGui.QLabel('', self)
+        label = QtWidgets.QLabel('', self)
         layout_v.addWidget(label)
-        label = QtGui.QLabel('Drift info for selected micrographs:', self)
+        label = QtWidgets.QLabel('Drift info for selected micrographs:', self)
         layout_v.addWidget(label)
-        label = QtGui.QLabel('', self)
+        label = QtWidgets.QLabel('', self)
         layout_v.addWidget(label)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Nr. of micrographs', self)
+        label = QtWidgets.QLabel('Nr. of micrographs', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leAllMicNumber = QtGui.QLineEdit(self)
+        self.leAllMicNumber = QtWidgets.QLineEdit(self)
         self.leAllMicNumber.setMaximumWidth(100)
         self.leAllMicNumber.setEnabled(False)
         layout_h.addWidget(self.leAllMicNumber)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Checked micrographs', self)
+        label = QtWidgets.QLabel('Checked micrographs', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leMicChecked = QtGui.QLineEdit(self)
+        self.leMicChecked = QtWidgets.QLineEdit(self)
         self.leMicChecked.setMaximumWidth(100)
         self.leMicChecked.setEnabled(False)
         layout_h.addWidget(self.leMicChecked)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Average overall drift [A]', self)
+        label = QtWidgets.QLabel('Average overall drift [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leAllOverallDrift = QtGui.QLineEdit(self)
+        self.leAllOverallDrift = QtWidgets.QLineEdit(self)
         self.leAllOverallDrift.setMaximumWidth(100)
         self.leAllOverallDrift.setEnabled(False)
         layout_h.addWidget(self.leAllOverallDrift)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Average drift per frame [A]', self)
+        label = QtWidgets.QLabel('Average drift per frame [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leAllFrameDrift = QtGui.QLineEdit(self)
+        self.leAllFrameDrift = QtWidgets.QLineEdit(self)
         self.leAllFrameDrift.setMaximumWidth(100)
         self.leAllFrameDrift.setEnabled(False)
         layout_h.addWidget(self.leAllFrameDrift)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Average end to end length [A]', self)
+        label = QtWidgets.QLabel('Average end to end length [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leAllEndToEndDrift = QtGui.QLineEdit(self)
+        self.leAllEndToEndDrift = QtWidgets.QLineEdit(self)
         self.leAllEndToEndDrift.setMaximumWidth(100)
         self.leAllEndToEndDrift.setEnabled(False)
         layout_h.addWidget(self.leAllEndToEndDrift)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Average maximum distance between frames [A]', self)
+        label = QtWidgets.QLabel('Average maximum distance between frames [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leAllMaxDistance = QtGui.QLineEdit(self)
+        self.leAllMaxDistance = QtWidgets.QLineEdit(self)
         self.leAllMaxDistance.setMaximumWidth(100)
         self.leAllMaxDistance.setEnabled(False)
         layout_h.addWidget(self.leAllMaxDistance)
         layout_v.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
-        label = QtGui.QLabel('Average maximum distance from start frame [A]', self)
+        label = QtWidgets.QLabel('Average maximum distance from start frame [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leAllMaxDistanceZero = QtGui.QLineEdit(self)
+        self.leAllMaxDistanceZero = QtWidgets.QLineEdit(self)
         self.leAllMaxDistanceZero.setMaximumWidth(100)
         self.leAllMaxDistanceZero.setEnabled(False)
         layout_h.addWidget(self.leAllMaxDistanceZero)
@@ -268,11 +262,11 @@
         return widget
     
     def sort_section(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 20, 5, 5)
 
-        label = QtGui.QLabel('Sort entries:', self)
+        label = QtWidgets.QLabel('Sort entries:', self)
         layout_v.addWidget(label)
 
         entries = [
@@ -283,71 +277,71 @@
             'Maximum distance between frames',
             'Maximum distance from start frame'
             ]
-        self.cbSort = QtGui.QComboBox(self)
+        self.cbSort = QtWidgets.QComboBox(self)
         self.cbSort.setEnabled(False)
         self.cbSort.addItems(entries)
         layout_v.addWidget(self.cbSort)
 
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 0, 0, 0)
         layout_v.addLayout(layout_h)
-        self.chDescending = QtGui.QCheckBox('Descending', self)
+        self.chDescending = QtWidgets.QCheckBox('Descending', self)
         self.chDescending.setEnabled(False)
         layout_h.addWidget(self.chDescending)
-        self.chSortSelected = QtGui.QCheckBox('Sort selected', self)
+        self.chSortSelected = QtWidgets.QCheckBox('Sort selected', self)
         self.chSortSelected.setEnabled(False)
         layout_h.addWidget(self.chSortSelected)
 
         return widget
 
     def plot_section(self):
-        widget = QtGui.QWidget(self)
-        layout_h = QtGui.QHBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_h = QtWidgets.QHBoxLayout(widget)
         layout_h.setContentsMargins(5, 5, 5, 5)
 
-        layout_v1 = QtGui.QVBoxLayout()
+        layout_v1 = QtWidgets.QVBoxLayout()
         layout_v1.setContentsMargins(0, 0, 5, 0)
-        layout_v2 = QtGui.QVBoxLayout()
+        layout_v2 = QtWidgets.QVBoxLayout()
         layout_v2.setContentsMargins(5, 0, 0, 0)
         layout_h.addLayout(layout_v1)
         layout_h.addLayout(layout_v2)
 
-        label = QtGui.QLabel('Show plots of current entry:', self)
+        label = QtWidgets.QLabel('Show plots of current entry:', self)
         layout_v1.addWidget(label)
 
-        self.chPlotDriftMic = QtGui.QCheckBox('Drift', self)
+        self.chPlotDriftMic = QtWidgets.QCheckBox('Drift', self)
         self.chPlotDriftMic.setEnabled(False)
         layout_v1.addWidget(self.chPlotDriftMic)
 
-        self.chPlotFrameMic = QtGui.QCheckBox('Drift per frame', self)
+        self.chPlotFrameMic = QtWidgets.QCheckBox('Drift per frame', self)
         self.chPlotFrameMic.setEnabled(False)
         layout_v1.addWidget(self.chPlotFrameMic)
 
-        self.chPlotAngleMic = QtGui.QCheckBox('Angle per frame', self)
+        self.chPlotAngleMic = QtWidgets.QCheckBox('Angle per frame', self)
         self.chPlotAngleMic.setEnabled(False)
         layout_v1.addWidget(self.chPlotAngleMic)
 
-        label = QtGui.QLabel('Show plots of all micrographs:', self)
+        label = QtWidgets.QLabel('Show plots of all micrographs:', self)
         label.setEnabled(False)
         layout_v2.addWidget(label)
 
-        self.chAverageDriftPerFrame = QtGui.QCheckBox('Average drift per frame', self)
+        self.chAverageDriftPerFrame = QtWidgets.QCheckBox('Average drift per frame', self)
         self.chAverageDriftPerFrame.setEnabled(False)
         layout_v2.addWidget(self.chAverageDriftPerFrame)
 
-        self.chPlotDrift = QtGui.QCheckBox('Overall drift histogram', self)
+        self.chPlotDrift = QtWidgets.QCheckBox('Overall drift histogram', self)
         self.chPlotDrift.setEnabled(False)
         layout_v2.addWidget(self.chPlotDrift)
 
-        self.chPlotFrame = QtGui.QCheckBox('Drift per frame histogram', self)
+        self.chPlotFrame = QtWidgets.QCheckBox('Drift per frame histogram', self)
         self.chPlotFrame.setEnabled(False)
         layout_v2.addWidget(self.chPlotFrame)
 
-        self.chPlotAngle = QtGui.QCheckBox('Angle per frame histogram', self)
+        self.chPlotAngle = QtWidgets.QCheckBox('Angle per frame histogram', self)
         self.chPlotAngle.setEnabled(False)
         layout_v2.addWidget(self.chPlotAngle)
 
-        self.chPlotPerMic = QtGui.QCheckBox('Overall drift per micrograph', self)
+        self.chPlotPerMic = QtWidgets.QCheckBox('Overall drift per micrograph', self)
         self.chPlotPerMic.setEnabled(False)
         layout_v2.addWidget(self.chPlotPerMic)
 
@@ -357,22 +351,22 @@
         return widget
 
     def threshold_section(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 20, 5, 5)
         
-        layout_h = QtGui.QHBoxLayout()
+        layout_h = QtWidgets.QHBoxLayout()
         layout_h.setContentsMargins(0, 5, 0, 5)
-        label = QtGui.QLabel('Start frame:', self)
+        label = QtWidgets.QLabel('Start frame:', self)
         layout_h.addWidget(label)
-        self.leFrameStart = QtGui.QLineEdit(self)
+        self.leFrameStart = QtWidgets.QLineEdit(self)
         self.leFrameStart.setEnabled(False)
         self.leFrameStart.setMaximumWidth(50)
         layout_h.addWidget(self.leFrameStart)
         layout_h.addStretch(1)
-        label = QtGui.QLabel('End frame:', self)
+        label = QtWidgets.QLabel('End frame:', self)
         layout_h.addWidget(label)
-        self.leFrameStop = QtGui.QLineEdit(self)
+        self.leFrameStop = QtWidgets.QLineEdit(self)
         self.leFrameStop.setEnabled(False)
         self.leFrameStop.setMaximumWidth(50)
         layout_h.addWidget(self.leFrameStop)
@@ -382,71 +376,71 @@
         layout_v.addWidget(self.threshold_section_frame())
         layout_v.addWidget(self.threshold_section_angle())
 
-        self.pbApply = QtGui.QPushButton('Apply settings marked as criterion', self)
+        self.pbApply = QtWidgets.QPushButton('Apply settings marked as criterion', self)
         self.pbApply.setEnabled(False)
         layout_v.addWidget(self.pbApply)
         return widget
 
     def threshold_section_overall(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 5, 5, 0)
 
-        layout_h1 = QtGui.QHBoxLayout()
-        layout_v1 = QtGui.QVBoxLayout()
-        layout_v2 = QtGui.QVBoxLayout()
+        layout_h1 = QtWidgets.QHBoxLayout()
+        layout_v1 = QtWidgets.QVBoxLayout()
+        layout_v2 = QtWidgets.QVBoxLayout()
 
-        label = QtGui.QLabel('Threshold overall drift', self)
+        label = QtWidgets.QLabel('Threshold overall drift', self)
         layout_v.addWidget(label)
         
         layout_v.addLayout(layout_h1)
         layout_h1.addLayout(layout_v1)
         layout_h1.addLayout(layout_v2)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Start [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Start [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartOverall = QtGui.QLineEdit(self)
+        self.leStartOverall = QtWidgets.QLineEdit(self)
         self.leStartOverall.setEnabled(False)
         self.leStartOverall.setMaximumWidth(100)
         layout_h.addWidget(self.leStartOverall)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Stop [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Stop [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopOverall = QtGui.QLineEdit(self)
+        self.leStopOverall = QtWidgets.QLineEdit(self)
         self.leStopOverall.setEnabled(False)
         self.leStopOverall.setMaximumWidth(100)
         layout_h.addWidget(self.leStopOverall)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Registered start [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Registered start [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartSaveOverall = QtGui.QLineEdit(self)
+        self.leStartSaveOverall = QtWidgets.QLineEdit(self)
         self.leStartSaveOverall.setEnabled(False)
         self.leStartSaveOverall.setMaximumWidth(100)
         layout_h.addWidget(self.leStartSaveOverall)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Registered stop [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Registered stop [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopSaveOverall = QtGui.QLineEdit(self)
+        self.leStopSaveOverall = QtWidgets.QLineEdit(self)
         self.leStopSaveOverall.setEnabled(False)
         self.leStopSaveOverall.setMaximumWidth(100)
         layout_h.addWidget(self.leStopSaveOverall)
         layout_v1.addLayout(layout_h)
 
-        self.pbSaveOverall = QtGui.QPushButton('Register', self)
+        self.pbSaveOverall = QtWidgets.QPushButton('Register', self)
         self.pbSaveOverall.setEnabled(False)
         layout_v2.addWidget(self.pbSaveOverall)
-        self.chOverallCriterion = QtGui.QCheckBox('Use as criterion', self)
+        self.chOverallCriterion = QtWidgets.QCheckBox('Use as criterion', self)
         self.chOverallCriterion.setEnabled(False)
         layout_v2.addWidget(self.chOverallCriterion)
         layout_v2.addStretch(1)
@@ -454,117 +448,117 @@
         return widget
 
     def threshold_section_frame(self):
-        tabWidget = QtGui.QTabWidget(self)
-        tab_1 = QtGui.QWidget(self)
-        tab_2 = QtGui.QWidget(self)
+        tabWidget = QtWidgets.QTabWidget(self)
+        tab_1 = QtWidgets.QWidget(self)
+        tab_2 = QtWidgets.QWidget(self)
 
         tabWidget.addTab(tab_1, 'General')
         tabWidget.addTab(tab_2, 'Per frame')
 
-        layout_v = QtGui.QVBoxLayout(tab_1)
+        layout_v = QtWidgets.QVBoxLayout(tab_1)
         layout_v.setContentsMargins(5, 5, 5, 0)
 
-        layout_h1 = QtGui.QHBoxLayout()
-        layout_v1 = QtGui.QVBoxLayout()
-        layout_v2 = QtGui.QVBoxLayout()
+        layout_h1 = QtWidgets.QHBoxLayout()
+        layout_v1 = QtWidgets.QVBoxLayout()
+        layout_v2 = QtWidgets.QVBoxLayout()
 
-        label = QtGui.QLabel('Threshold for the drift of every frame', self)
+        label = QtWidgets.QLabel('Threshold for the drift of every frame', self)
         layout_v.addWidget(label)
         
         layout_v.addLayout(layout_h1)
         layout_h1.addLayout(layout_v1)
         layout_h1.addLayout(layout_v2)
         
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Start [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Start [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartGeneral = QtGui.QLineEdit(self)
+        self.leStartGeneral = QtWidgets.QLineEdit(self)
         self.leStartGeneral.setEnabled(False)
         self.leStartGeneral.setMaximumWidth(100)
         layout_h.addWidget(self.leStartGeneral)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Stop [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Stop [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopGeneral = QtGui.QLineEdit(self)
+        self.leStopGeneral = QtWidgets.QLineEdit(self)
         self.leStopGeneral.setEnabled(False)
         self.leStopGeneral.setMaximumWidth(100)
         layout_h.addWidget(self.leStopGeneral)
         layout_v1.addLayout(layout_h)
 
-        self.pbSaveGeneral = QtGui.QPushButton('Register', self)
+        self.pbSaveGeneral = QtWidgets.QPushButton('Register', self)
         self.pbSaveGeneral.setEnabled(False)
         layout_v2.addWidget(self.pbSaveGeneral)
-        self.chGeneralCriterion = QtGui.QCheckBox('Use as criterion', self)
+        self.chGeneralCriterion = QtWidgets.QCheckBox('Use as criterion', self)
         self.chGeneralCriterion.setEnabled(False)
         layout_v2.addWidget(self.chGeneralCriterion)
         layout_v2.addStretch(1)
         layout_v1.addStretch(1)
 
-        layout_v = QtGui.QVBoxLayout(tab_2)
+        layout_v = QtWidgets.QVBoxLayout(tab_2)
         layout_v.setContentsMargins(5, 5, 5, 0)
 
-        layout_h1 = QtGui.QHBoxLayout()
-        layout_v1 = QtGui.QVBoxLayout()
-        layout_v2 = QtGui.QVBoxLayout()
+        layout_h1 = QtWidgets.QHBoxLayout()
+        layout_v1 = QtWidgets.QVBoxLayout()
+        layout_v2 = QtWidgets.QVBoxLayout()
 
-        label = QtGui.QLabel('Threshold drift per frame', self)
+        label = QtWidgets.QLabel('Threshold drift per frame', self)
         layout_v.addWidget(label)
         
         layout_v.addLayout(layout_h1)
         layout_h1.addLayout(layout_v1)
         layout_h1.addLayout(layout_v2)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Start [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Start [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartFrame = QtGui.QLineEdit(self)
+        self.leStartFrame = QtWidgets.QLineEdit(self)
         self.leStartFrame.setEnabled(False)
         self.leStartFrame.setMaximumWidth(100)
         layout_h.addWidget(self.leStartFrame)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Stop [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Stop [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopFrame = QtGui.QLineEdit(self)
+        self.leStopFrame = QtWidgets.QLineEdit(self)
         self.leStopFrame.setEnabled(False)
         self.leStopFrame.setMaximumWidth(100)
         layout_h.addWidget(self.leStopFrame)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Registered start [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Registered start [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartSaveFrame = QtGui.QLineEdit(self)
+        self.leStartSaveFrame = QtWidgets.QLineEdit(self)
         self.leStartSaveFrame.setEnabled(False)
         self.leStartSaveFrame.setMaximumWidth(100)
         layout_h.addWidget(self.leStartSaveFrame)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Registered stop [A]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Registered stop [A]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopSaveFrame = QtGui.QLineEdit(self)
+        self.leStopSaveFrame = QtWidgets.QLineEdit(self)
         self.leStopSaveFrame.setEnabled(False)
         self.leStopSaveFrame.setMaximumWidth(100)
         layout_h.addWidget(self.leStopSaveFrame)
         layout_v1.addLayout(layout_h)
 
-        self.cbFrame = QtGui.QComboBox(self)
+        self.cbFrame = QtWidgets.QComboBox(self)
         self.cbFrame.setEnabled(False)
         layout_v2.addWidget(self.cbFrame)
-        self.pbSaveFrame = QtGui.QPushButton('Register', self)
+        self.pbSaveFrame = QtWidgets.QPushButton('Register', self)
         self.pbSaveFrame.setEnabled(False)
         layout_v2.addWidget(self.pbSaveFrame)
-        self.chFrameCriterion = QtGui.QCheckBox('Use as criterion', self)
+        self.chFrameCriterion = QtWidgets.QCheckBox('Use as criterion', self)
         self.chFrameCriterion.setEnabled(False)
         layout_v2.addWidget(self.chFrameCriterion)
         layout_v2.addStretch(1)
@@ -572,110 +566,110 @@
         return tabWidget
 
     def threshold_section_angle(self):
-        widget = QtGui.QWidget(self)
-        layout_v = QtGui.QVBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_v = QtWidgets.QVBoxLayout(widget)
         layout_v.setContentsMargins(5, 5, 5, 0)
 
-        layout_h1 = QtGui.QHBoxLayout()
-        layout_v1 = QtGui.QVBoxLayout()
-        layout_v2 = QtGui.QVBoxLayout()
+        layout_h1 = QtWidgets.QHBoxLayout()
+        layout_v1 = QtWidgets.QVBoxLayout()
+        layout_v2 = QtWidgets.QVBoxLayout()
 
-        label = QtGui.QLabel('Threshold angle', self)
+        label = QtWidgets.QLabel('Threshold angle', self)
         layout_v.addWidget(label)
         
         layout_v.addLayout(layout_h1)
         layout_h1.addLayout(layout_v1)
         layout_h1.addLayout(layout_v2)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Start [Degree]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Start [Degree]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartAngle = QtGui.QLineEdit(self)
+        self.leStartAngle = QtWidgets.QLineEdit(self)
         self.leStartAngle.setEnabled(False)
         self.leStartAngle.setMaximumWidth(100)
         layout_h.addWidget(self.leStartAngle)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Stop [Degree]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Stop [Degree]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopAngle = QtGui.QLineEdit(self)
+        self.leStopAngle = QtWidgets.QLineEdit(self)
         self.leStopAngle.setEnabled(False)
         self.leStopAngle.setMaximumWidth(100)
         layout_h.addWidget(self.leStopAngle)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Registered start [Degree]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Registered start [Degree]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStartSaveAngle = QtGui.QLineEdit(self)
+        self.leStartSaveAngle = QtWidgets.QLineEdit(self)
         self.leStartSaveAngle.setEnabled(False)
         self.leStartSaveAngle.setMaximumWidth(100)
         layout_h.addWidget(self.leStartSaveAngle)
         layout_v1.addLayout(layout_h)
 
-        layout_h = QtGui.QHBoxLayout()
-        label = QtGui.QLabel('Registered stop [Degree]', self)
+        layout_h = QtWidgets.QHBoxLayout()
+        label = QtWidgets.QLabel('Registered stop [Degree]', self)
         layout_h.addWidget(label)
         layout_h.addStretch(1)
-        self.leStopSaveAngle = QtGui.QLineEdit(self)
+        self.leStopSaveAngle = QtWidgets.QLineEdit(self)
         self.leStopSaveAngle.setEnabled(False)
         self.leStopSaveAngle.setMaximumWidth(100)
         layout_h.addWidget(self.leStopSaveAngle)
         layout_v1.addLayout(layout_h)
 
-        self.cbAngle = QtGui.QComboBox(self)
+        self.cbAngle = QtWidgets.QComboBox(self)
         self.cbAngle.setEnabled(False)
         layout_v2.addWidget(self.cbAngle)
-        self.pbSaveAngle = QtGui.QPushButton('Register', self)
+        self.pbSaveAngle = QtWidgets.QPushButton('Register', self)
         self.pbSaveAngle.setEnabled(False)
         layout_v2.addWidget(self.pbSaveAngle)
-        self.chAngleCriterion = QtGui.QCheckBox('Use as criterion', self)
+        self.chAngleCriterion = QtWidgets.QCheckBox('Use as criterion', self)
         self.chAngleCriterion.setEnabled(False)
         layout_v2.addWidget(self.chAngleCriterion)
-        self.pbUncheckCriterion = QtGui.QPushButton('Uncheck criteria')
+        self.pbUncheckCriterion = QtWidgets.QPushButton('Uncheck criteria')
         self.pbUncheckCriterion.setEnabled(False)
         layout_v2.addWidget(self.pbUncheckCriterion)
 
         return widget
 
     def save_section(self):
-        widget = QtGui.QWidget(self)
-        layout_h = QtGui.QHBoxLayout(widget)
+        widget = QtWidgets.QWidget(self)
+        layout_h = QtWidgets.QHBoxLayout(widget)
         layout_h.setContentsMargins(5, 0, 5, 0)
 
-        label = QtGui.QLabel('Output prefix:', self)
+        label = QtWidgets.QLabel('Output prefix:', self)
         layout_h.addWidget(label)
         
-        self.leOutputName = QtGui.QLineEdit('Trial00', self)
+        self.leOutputName = QtWidgets.QLineEdit('Trial00', self)
         self.leOutputName.setEnabled(False)
         self.leOutputName.setMinimumWidth(300)
         layout_h.addWidget(self.leOutputName)
 
-        self.pbSaveSelected = QtGui.QPushButton('Select output directory and save selection', self)
+        self.pbSaveSelected = QtWidgets.QPushButton('Select output directory and save selection', self)
         self.pbSaveSelected.setEnabled(False)
         layout_h.addWidget(self.pbSaveSelected)
 
         layout_h.addStretch(1)
 
-        self.pbSaveSettings = QtGui.QPushButton('Save settings', self)
+        self.pbSaveSettings = QtWidgets.QPushButton('Save settings', self)
         self.pbSaveSettings.setEnabled(False)
         layout_h.addWidget(self.pbSaveSettings)
 
-        self.pbLoadSettings = QtGui.QPushButton('Load settings', self)
+        self.pbLoadSettings = QtWidgets.QPushButton('Load settings', self)
         layout_h.addWidget(self.pbLoadSettings)
 
-        self.pbAbout = QtGui.QPushButton('About', self)
+        self.pbAbout = QtWidgets.QPushButton('About', self)
         layout_h.addWidget(self.pbAbout)
 
         return widget
 
 
 
-class SXUnblurPlot(QtGui.QWidget):
+class SXUnblurPlot(QtWidgets.QWidget):
 
     # Refresh Signal, Frame Changed Signal, Close Signal
     sigRefresh = QtCore.pyqtSignal(list)
@@ -687,7 +681,7 @@
 
         # Set the Layout of the Widget
         self.setWindowTitle(title)
-        self.layout = QtGui.QVBoxLayout(self)
+        self.layout = QtWidgets.QVBoxLayout(self)
 
         # Initialise later used Variables
         self.canvas = None
@@ -695,14 +689,14 @@
         self.scrollArea = None
 
         # Initialise Widgets
-        self.widgetPlot = QtGui.QWidget(self)
-        self.layoutPlot = QtGui.QVBoxLayout(self.widgetPlot)
+        self.widgetPlot = QtWidgets.QWidget(self)
+        self.layoutPlot = QtWidgets.QVBoxLayout(self.widgetPlot)
 
         if setframes:
             # Set Variables
             self.dictFrames = {}
-            self.widgetFrames = QtGui.QWidget(self)
-            self.layoutFrames = QtGui.QVBoxLayout(self.widgetFrames)
+            self.widgetFrames = QtWidgets.QWidget(self)
+            self.layoutFrames = QtWidgets.QVBoxLayout(self.widgetFrames)
 
             # Add to Layout
             self.layout.addWidget(self.widgetFrames)
@@ -721,11 +715,11 @@
             self.scrollArea.setParent(None)
 
         # Set Widgets
-        self.scrollArea = QtGui.QScrollArea(self.widgetFrames)
-        scrollContent = QtGui.QWidget(self.scrollArea)
+        self.scrollArea = QtWidgets.QScrollArea(self.widgetFrames)
+        scrollContent = QtWidgets.QWidget(self.scrollArea)
 
         # Set Layouts
-        layoutContent = QtGui.QVBoxLayout(scrollContent)
+        layoutContent = QtWidgets.QVBoxLayout(scrollContent)
 
         # Fill canvas with the figure and connect it to the click event
         canvas = FigureCanvasQTAgg(frame)
@@ -755,15 +749,15 @@
             self.scrollArea.setParent(None)
 
         # Set Widgets
-        self.scrollArea = QtGui.QScrollArea(self.widgetFrames)
-        scrollContent = QtGui.QWidget(self.scrollArea)
-        scrollContentUpper = QtGui.QWidget(scrollContent)
-        scrollContentLower = QtGui.QWidget(scrollContent)
+        self.scrollArea = QtWidgets.QScrollArea(self.widgetFrames)
+        scrollContent = QtWidgets.QWidget(self.scrollArea)
+        scrollContentUpper = QtWidgets.QWidget(scrollContent)
+        scrollContentLower = QtWidgets.QWidget(scrollContent)
 
         # Set Layouts
-        layoutScroll = QtGui.QVBoxLayout(scrollContent)
-        layoutScrollUpper = QtGui.QHBoxLayout(scrollContentUpper)
-        layoutScrollLower = QtGui.QHBoxLayout(scrollContentLower)
+        layoutScroll = QtWidgets.QVBoxLayout(scrollContent)
+        layoutScrollUpper = QtWidgets.QHBoxLayout(scrollContentUpper)
+        layoutScrollLower = QtWidgets.QHBoxLayout(scrollContentLower)
 
         # Calculate how many frames needs to be in the firs line
         intNrFrames = len(framesaslist)
@@ -774,8 +768,8 @@
         # First half of the figure add to the upper widget
         for number in range(intLenUpper):
             # Create a Widget for each figure.
-            figWidgetUpper = QtGui.QWidget(scrollContentUpper)
-            figWidgetLower = QtGui.QWidget(scrollContentLower)
+            figWidgetUpper = QtWidgets.QWidget(scrollContentUpper)
+            figWidgetLower = QtWidgets.QWidget(scrollContentLower)
             # Add the figure to the Canvas.
             canvasUpper = FigureCanvasQTAgg(framesaslist[number])
             canvasLower = FigureCanvasQTAgg(
@@ -800,8 +794,8 @@
                 })
             # Create a layout, add the canvas to it and
             # set it to the figWidget.
-            figLayoutUpper = QtGui.QVBoxLayout()
-            figLayoutLower = QtGui.QVBoxLayout()
+            figLayoutUpper = QtWidgets.QVBoxLayout()
+            figLayoutLower = QtWidgets.QVBoxLayout()
             figLayoutUpper.addWidget(canvasUpper)
             figLayoutLower.addWidget(canvasLower)
             figWidgetUpper.setLayout(figLayoutUpper)
@@ -816,8 +810,8 @@
         # First half of the figure add to the lower widget
         if intNrFrames % 2 != 0:
             # Create a Widget for each figure
-            figWidgetUpper = QtGui.QWidget(scrollContentUpper)
-            figWidgetLower = QtGui.QWidget(scrollContentLower)
+            figWidgetUpper = QtWidgets.QWidget(scrollContentUpper)
+            figWidgetLower = QtWidgets.QWidget(scrollContentLower)
             # Add the figure to the Canvas, funny plot for the missing one
             figFunny = self._funny_plot()
             canvasUpper = FigureCanvasQTAgg(framesaslist[number + 1])
@@ -838,8 +832,8 @@
                 })
             # Create a layout, add the canvas to it and
             # set it to the figWidget.
-            figLayoutUpper = QtGui.QVBoxLayout()
-            figLayoutLower = QtGui.QVBoxLayout()
+            figLayoutUpper = QtWidgets.QVBoxLayout()
+            figLayoutLower = QtWidgets.QVBoxLayout()
             figLayoutUpper.addWidget(canvasUpper)
             figLayoutLower.addWidget(canvasLower)
             figWidgetUpper.setLayout(figLayoutUpper)
@@ -973,7 +967,7 @@
         self.sigClose.emit()
 
 
-class SXDriftUnblur(QtGui.QMainWindow, Ui_MSMainWidget):
+class SXDriftUnblur(QtWidgets.QMainWindow, Ui_MSMainWidget):
 
     def __init__(self, inputlist=None, inputfile=None, parent=None):
         super(SXDriftUnblur, self).__init__(parent)
@@ -992,16 +986,16 @@
                 try:
                     listOfShiftFiles = numpy.genfromtxt(inputlist, dtype=None, unpack=True)
                 except TypeError:
-                    message = QtGui.QMessageBox(self)
+                    message = QtWidgets.QMessageBox(self)
                     message.setText('Empty File:\n{0}'.format(inputlist))
                     message.exec_()
                 except ValueError:
-                    message = QtGui.QMessageBox(self)
+                    message = QtWidgets.QMessageBox(self)
                     message.setText('File is not valid, only one column allowed:\n{0}'.format(inputlist))
                     message.exec_()
                 else:
                     if len(numpy.shape(listOfShiftFiles)) > 1:
-                        message = QtGui.QMessageBox(self)
+                        message = QtWidgets.QMessageBox(self)
                         message.setText('Too many columns. Expected one column:\n{0}'.format(inputlist))
                         message.exec_()
                     elif len(numpy.shape(listOfShiftFiles)) == 0:
@@ -1010,7 +1004,7 @@
                         listOfShiftFiles = [os.path.relpath(name) for name in listOfShiftFiles]
                         self._fill_gui(inputlist=list(listOfShiftFiles), inputfile=inputfile)
             else:
-                message = QtGui.QMessageBox(self)
+                message = QtWidgets.QMessageBox(self)
                 message.setText('Not a valid file name. Try again:\n{0}'.format(inputlist))
                 message.exec_()
         elif inputfile is not None:
@@ -1021,16 +1015,16 @@
                 try:
                     listOfShiftFiles = numpy.genfromtxt(inputfile, dtype=None, unpack=True)
                 except TypeError:
-                    message = QtGui.QMessageBox(self)
+                    message = QtWidgets.QMessageBox(self)
                     message.setText('Empty File:\n{0}'.format(inputfile))
                     message.exec_()
                 except ValueError:
-                    message = QtGui.QMessageBox(self)
+                    message = QtWidgets.QMessageBox(self)
                     message.setText('File is not valid, only one column allowed:\n{0}'.format(inputfile))
                     message.exec_()
                 else:
                     if len(numpy.shape(listOfShiftFiles)) > 1:
-                        message = QtGui.QMessageBox(self)
+                        message = QtWidgets.QMessageBox(self)
                         message.setText('Too many columns. Expected one column:\n{0}'.format(inputfile))
                         message.exec_()
                     elif len(numpy.shape(listOfShiftFiles)) == 0:
@@ -1632,11 +1626,11 @@
         """Open the drift files and do the drift calculations"""
 
         # Find Directory
-        strInputFile = str(QtGui.QFileDialog.getOpenFileName(
+        strInputFile = str(QtWidgets.QFileDialog.getOpenFileName(
             directory=os.getcwd(),
-            options=QtGui.QFileDialog.DontUseNativeDialog,
+            options=QtWidgets.QFileDialog.DontUseNativeDialog,
             filter='Unblur (*.txt);;MotionCor2 (*.log);;All (*)'
-            ))
+            ))[0]
 
         # If the return value is not empty, fill the line edit
         if self.strInputDir != '':
@@ -1683,12 +1677,12 @@
             # Fill the list widget
             self.lsFiles.clear()
             for file in arrSortedUnchecked[self.dFile]:
-                newItem = QtGui.QListWidgetItem(file)
+                newItem = QtWidgets.QListWidgetItem(file)
                 newItem.setFlags(self.newItemFlags)
                 newItem.setCheckState(Qt.Unchecked)
                 self.lsFiles.addItem(newItem)
             for file in arrSortedChecked[self.dFile]:
-                newItem = QtGui.QListWidgetItem(file)
+                newItem = QtWidgets.QListWidgetItem(file)
                 newItem.setFlags(self.newItemFlags)
                 newItem.setCheckState(Qt.Checked)
                 self.lsFiles.addItem(newItem)
@@ -1708,7 +1702,7 @@
             # Fill the list widget, but leave the selection untouched
             self.lsFiles.clear()
             for file in arrSorted[self.dFile]:
-                newItem = QtGui.QListWidgetItem(file)
+                newItem = QtWidgets.QListWidgetItem(file)
                 newItem.setFlags(self.newItemFlags)
                 if file in setChecked:
                     newItem.setCheckState(Qt.Checked)
@@ -1735,9 +1729,9 @@
         self.listDType = []
 
         # Message Box!
-        messageBox = QtGui.QMessageBox()
+        messageBox = QtWidgets.QMessageBox()
         messageBox.setText('Do drift calculations...')
-        messageBox.setStandardButtons(QtGui.QMessageBox().NoButton)
+        messageBox.setStandardButtons(QtWidgets.QMessageBox().NoButton)
         messageBox.show()
         print('Do drift calculations...')
 
@@ -1794,7 +1788,7 @@
 
         # If no or few files were found
         if not self.listFile:
-            messageBox2 = QtGui.QMessageBox()
+            messageBox2 = QtWidgets.QMessageBox()
             messageBox2.setText(
                 'Error: No matching drift files found or pattern' + 
                 ' and list entries does not match\n{:s}'.format(inputfile)
@@ -1826,7 +1820,7 @@
             for file in self.listFile:
                 if os.path.exists(file) and file in self.arrData[self.dFileRaw]:
                     file = file.split('/')[-1]
-                    newItem = QtGui.QListWidgetItem(file)
+                    newItem = QtWidgets.QListWidgetItem(file)
                     newItem.setFlags(self.newItemFlags)
                     newItem.setCheckState(Qt.Checked)
                     self.lsFiles.addItem(newItem)
@@ -1933,7 +1927,7 @@
             except IOError:
                 continue
         else:
-            message = QtGui.QMessageBox(self)
+            message = QtWidgets.QMessageBox(self)
             message.setText(
                     'No files in given file list available:\n{0}'.format(
                         self.fileName
@@ -2074,7 +2068,7 @@
             self.idxFirstFrame = int(self.leFrameStart.text())
             self.idxLastFrame = int(self.leFrameStop.text())
         except ValueError:
-            messageBox = QtGui.QMessageBox(self)
+            messageBox = QtWidgets.QMessageBox(self)
             messageBox.setText('Frame must be integer!')
             messageBox.exec_()
             self.leFrameStart.setText('{:d}'.format(oldfirst))
@@ -2088,45 +2082,45 @@
         # Check some abort situations
         if self.idxFirstFrame < 1:
             # Warning box when refreshing frames
-            warningBox = QtGui.QMessageBox(self)
-            warningBox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-            warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+            warningBox = QtWidgets.QMessageBox(self)
+            warningBox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+            warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
             warningBox.setText(
                 'Start frame too small (minimum 1)!\n' +
                 'Continue with minimum value?'
                 )
             warningBox.exec_()
-            if warningBox.result() == QtGui.QMessageBox.No:
+            if warningBox.result() == QtWidgets.QMessageBox.No:
                 self.leFrameStart.setText('{:d}'.format(oldfirst))
                 self.leFrameStart.setStyleSheet(self.dictColor['done'])
                 self.idxFirstFrame = oldfirst
                 return False
-            elif warningBox.result() == QtGui.QMessageBox.Yes:
+            elif warningBox.result() == QtWidgets.QMessageBox.Yes:
                 self.leFrameStart.setText('{:d}'.format(1))
                 self.leFrameStart.setStyleSheet(self.dictColor['done'])
                 self.idxFirstFrame = 1
 
         if self.idxLastFrame > self.intFrames:
-            warningBox = QtGui.QMessageBox(self)
-            warningBox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-            warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+            warningBox = QtWidgets.QMessageBox(self)
+            warningBox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+            warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
             warningBox.setText(
                 'Stop frame too large (maximum {:d})!\n'.format(self.intFrames) +
                 'Continue with maximum value?'
                 )
             warningBox.exec_()
-            if warningBox.result() == QtGui.QMessageBox.No:
+            if warningBox.result() == QtWidgets.QMessageBox.No:
                 self.leFrameStart.setText('{:d}'.format(oldlast))
                 self.leFrameStart.setStyleSheet(self.dictColor['done'])
                 self.idxLastFrame = oldlast
                 return False
-            elif warningBox.result() == QtGui.QMessageBox.Yes:
+            elif warningBox.result() == QtWidgets.QMessageBox.Yes:
                 self.leFrameStop.setText('{:d}'.format(self.intFrames))
                 self.leFrameStop.setStyleSheet(self.dictColor['done'])
                 self.idxLastFrame = self.intFrames
 
         if self.idxLastFrame <= self.idxFirstFrame:
-            messageBox = QtGui.QMessageBox(self)
+            messageBox = QtWidgets.QMessageBox(self)
             messageBox.setText(
                 'Start frame must be smaller stop frame!'
                 )
@@ -2368,9 +2362,9 @@
         intOldLast = self.idxLastFrame
 
         # Warning box when refreshing frames
-        warningBox = QtGui.QMessageBox(self)
-        warningBox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-        warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+        warningBox = QtWidgets.QMessageBox(self)
+        warningBox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+        warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
         warningBox.setText(
             'Threshold settings will be lost when calculating new drift data!\n' +
             'Do you really want to continue?'
@@ -2378,12 +2372,12 @@
         if not goon:
             warningBox.exec_()
 
-        if warningBox.result() == QtGui.QMessageBox.Yes or goon:
+        if warningBox.result() == QtWidgets.QMessageBox.Yes or goon:
 
             # Message Box!
-            messageBox = QtGui.QMessageBox()
+            messageBox = QtWidgets.QMessageBox()
             messageBox.setText('Do drift calculations...')
-            messageBox.setStandardButtons(QtGui.QMessageBox().NoButton)
+            messageBox.setStandardButtons(QtWidgets.QMessageBox().NoButton)
             messageBox.show()
             print('Do drift calculations...')
 
@@ -2807,7 +2801,7 @@
                 fltStart = float(self.leStartGeneral.text())
                 fltStop = float(self.leStopGeneral.text())
             except ValueError:
-                messageBox = QtGui.QMessageBox()
+                messageBox = QtWidgets.QMessageBox()
                 messageBox.setText('General input needs to be a float!')
                 messageBox.exec_()
 
@@ -2957,16 +2951,16 @@
         """Apply the saved settings"""
 
         # Ask the user if he really wants to continue
-        warningBox = QtGui.QMessageBox(self)
-        warningBox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-        warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+        warningBox = QtWidgets.QMessageBox(self)
+        warningBox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+        warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
         warningBox.setText(
                 'Do you really want to apply criteria?\n' +
                 'All selections will be lost.'
             )
         warningBox.exec_()
 
-        if warningBox.result() == QtGui.QMessageBox.No:
+        if warningBox.result() == QtWidgets.QMessageBox.No:
             return None
 
         # Copy of the data
@@ -3095,7 +3089,7 @@
             fltStart = float(varStart.text())
             fltStop = float(varStop.text())
         except ValueError:
-            messageBox = QtGui.QMessageBox()
+            messageBox = QtWidgets.QMessageBox()
             messageBox.setText(
                 'Error with {:s}! Input must be float!'.format(
                     mode
@@ -3116,7 +3110,7 @@
 
                 # Break with wrong input
                 if fltStart > fltStop:
-                    messageBox = QtGui.QMessageBox()
+                    messageBox = QtWidgets.QMessageBox()
                     messageBox.setText(
                         'Error with {:s}! Larger must be smaller then Smaller! ;)'.format(
                             mode
@@ -3510,11 +3504,11 @@
     def _load_from_list(self):
         """Load shift files from list"""
 
-        self.fileName = str(QtGui.QFileDialog.getOpenFileName(
+        self.fileName = str(QtWidgets.QFileDialog.getOpenFileName(
             directory=os.getcwd(),
-            options=QtGui.QFileDialog.DontUseNativeDialog,
+            options=QtWidgets.QFileDialog.DontUseNativeDialog,
             filter='Text files (*.txt)'
-            ))
+            ))[0]
         # Abort if empty
         if self.fileName == '':
             return None
@@ -3524,16 +3518,16 @@
             try:
                 listOfShiftFiles = numpy.genfromtxt(self.fileName, dtype=None, unpack=True)
             except TypeError:
-                message = QtGui.QMessageBox(self)
+                message = QtWidgets.QMessageBox(self)
                 message.setText('Empty File:\n{0}'.format(self.fileName))
                 message.exec_()
             except ValueError:
-                message = QtGui.QMessageBox(self)
+                message = QtWidgets.QMessageBox(self)
                 message.setText('File is not valid, only one column allowed:\n{0}'.format(self.fileName))
                 message.exec_()
             else:
                 if len(numpy.shape(listOfShiftFiles)) > 1:
-                    message = QtGui.QMessageBox(self)
+                    message = QtWidgets.QMessageBox(self)
                     message.setText('Too many columns. Expected one column:\n{0}'.format(self.fileName))
                     message.exec_()
                 else:
@@ -3552,7 +3546,7 @@
         if self._check_list_or_file(filePattern) == 'file':
             self._fill_gui(inputfile=filePattern)
         else:
-            message = QtGui.QMessageBox(self)
+            message = QtWidgets.QMessageBox(self)
             message.setText('Not valid unblur shift files:\n{0}'.format(filePattern))
             message.exec_()
 
@@ -3560,9 +3554,9 @@
         """Write the selected micrographs to a file"""
 
         # Get output path and file name
-        outputPath = QtGui.QFileDialog.getExistingDirectory(
+        outputPath = QtWidgets.QFileDialog.getExistingDirectory(
             directory=os.getcwd(),
-            options=QtGui.QFileDialog.DontUseNativeDialog
+            options=QtWidgets.QFileDialog.DontUseNativeDialog
             )
         if not outputPath:
             return None
@@ -3580,11 +3574,11 @@
                 os.path.exists(shiftSelected) or \
                 os.path.exists(shiftDiscarded):
             # Ask the user if he really wants to continue
-            warningBox = QtGui.QMessageBox(self)
+            warningBox = QtWidgets.QMessageBox(self)
             warningBox.setStandardButtons(
-                QtGui.QMessageBox.No | QtGui.QMessageBox.Yes
+                QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes
                 )
-            warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+            warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
             warningBox.setText(
                     'Do you really want to save?\n\n' +
                     '{0}\nor\n{1}\nor\n{2}\nor\n{3}\nalready exists.'.format(
@@ -3596,7 +3590,7 @@
                 )
             warningBox.exec_()
 
-            if warningBox.result() == QtGui.QMessageBox.No:
+            if warningBox.result() == QtWidgets.QMessageBox.No:
                 return None
 
         with open(outputSelected, 'w') as w:
@@ -3640,11 +3634,11 @@
                         )
 
         # Ask the user if he really wants to continue
-        warningBox = QtGui.QMessageBox(self)
+        warningBox = QtWidgets.QMessageBox(self)
         warningBox.setStandardButtons(
-            QtGui.QMessageBox.Yes
+            QtWidgets.QMessageBox.Yes
             )
-        warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+        warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
         warningBox.setText(
                 'Selection saved to:\n\n' +
                 '{0}\n{1}\n{2}\n{3}\n\n'.format(
@@ -3671,10 +3665,10 @@
         """Save settings"""
 
         # Output file name
-        strSaveName = str(QtGui.QFileDialog.getSaveFileName(
+        strSaveName = str(QtWidgets.QFileDialog.getSaveFileName(
             directory=os.getcwd(),
-            options=QtGui.QFileDialog.DontUseNativeDialog
-            ))
+            options=QtWidgets.QFileDialog.DontUseNativeDialog
+            ))[0]
 
         # Save data to file
         if strSaveName != '':
@@ -3750,23 +3744,23 @@
         """Load settings"""
 
         # Warning box when refreshing frames
-        warningBox = QtGui.QMessageBox(self)
-        warningBox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-        warningBox.setDefaultButton(QtGui.QMessageBox.Yes)
+        warningBox = QtWidgets.QMessageBox(self)
+        warningBox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+        warningBox.setDefaultButton(QtWidgets.QMessageBox.Yes)
         warningBox.setText(
             'Not saved changes will be lost when loading drift data!\n' +
             'Do you really want to continue?'
             )
         warningBox.exec_()
 
-        if warningBox.result() == QtGui.QMessageBox.No:
+        if warningBox.result() == QtWidgets.QMessageBox.No:
             return None
 
         # Input file
-        strLoadName = str(QtGui.QFileDialog.getOpenFileName(
+        strLoadName = str(QtWidgets.QFileDialog.getOpenFileName(
             directory=os.getcwd(),
-            options=QtGui.QFileDialog.DontUseNativeDialog
-            ))
+            options=QtWidgets.QFileDialog.DontUseNativeDialog
+            ))[0]
 
         # If not cancel
         if strLoadName == '':
@@ -3793,7 +3787,7 @@
         # Fill the list widget, and return the selection
         self.lsFiles.clear()
         for file in self.arrData[self.dFile]:
-            newItem = QtGui.QListWidgetItem(file)
+            newItem = QtWidgets.QListWidgetItem(file)
             newItem.setFlags(self.newItemFlags)
             if file in setChecked:
                 newItem.setCheckState(Qt.Checked)
@@ -4406,7 +4400,7 @@
         """Show the about info"""
 
         # Generate a about message box
-        about = QtGui.QMessageBox()
+        about = QtWidgets.QMessageBox()
         about.setText(
             """
             sxgui_drift for analyzing drift parameters
@@ -4553,7 +4547,7 @@
 
 
 def _main():
-    app = QtGui.QApplication(sys.argv)
+    app = QtWidgets.QApplication(sys.argv)
 
     if len(sys.argv) > 3:
         print(
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/bin/sxhelixboxer.py	2017-10-21 16:49:00.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/bin/sxhelixboxer.py	2017-10-21 17:15:19.000000000 -0500
@@ -39,7 +39,7 @@
 import os
 
 try:
-	from PyQt4 import QtGui, QtCore
+	from PyQt5 import QtCore, QtGui, QtWidgets
 	from emapplication import EMApp, get_application
 	from emimage2d import EMImage2DWidget
 	from emselector import EMSelectorDialog
@@ -726,12 +726,12 @@
 	save_particles(all_particles, ptcl_filepath, do_edge_norm, stack_file_mode)
 
 if ENABLE_GUI:
-	class EMWriteHelixFilesDialog(QtGui.QDialog):
+	class EMWriteHelixFilesDialog(QtWidgets.QDialog):
 		"""
 		options for writing helices and particles to files
 		"""
 		def __init__(self, qparent=None,saveext="hdf"):
-			QtGui.QWidget.__init__(self, qparent)
+			QtWidgets.QWidget.__init__(self, qparent)
 			self.setWindowTitle(self.tr("Write Helix and Particle Files"))
 			self.__create_ui()
 	#        self.helices_file_extension_dict = {"MRC":"mrc", "Spider":"spi", "Imagic": "img", "HDF5": "hdf"}
@@ -754,147 +754,147 @@
 			self.ptcls_coords_line_edit.setText( os.path.join(self.default_dir, self.micrograph_name + "_helix_ptcl_coords.txt") )
 			self.ptcls_images_line_edit.setText( os.path.join(self.default_dir, self.micrograph_name + "_helix_ptcl."+saveext) )
 
-			self.connect(self.helices_coords_browse_button, QtCore.SIGNAL("clicked()"), self.browse_helix_coords)
-			self.connect(self.helices_images_browse_button, QtCore.SIGNAL("clicked()"), self.browse_helix_images)
-			self.connect(self.ptcls_coords_browse_button, QtCore.SIGNAL("clicked()"), self.browse_ptcl_coords)
-			self.connect(self.ptcls_images_browse_button, QtCore.SIGNAL("clicked()"), self.browse_ptcl_images)
-			self.connect(self.button_box, QtCore.SIGNAL("accepted()"), self.save)
-			self.connect(self.button_box, QtCore.SIGNAL("rejected()"), self.cancel)
+			self.helices_coords_browse_button.clicked.connect(self.browse_helix_coords)
+			self.helices_images_browse_button.clicked.connect(self.browse_helix_images)
+			self.ptcls_coords_browse_button.clicked.connect(self.browse_ptcl_coords)
+			self.ptcls_images_browse_button.clicked.connect(self.browse_ptcl_images)
+			self.button_box.accepted.connect(self.save)
+			self.button_box.rejected.connect(self.cancel)
 
 		def __create_ui(self):
-			self.helices_groupbox = QtGui.QGroupBox(self.tr("Write &Helices:"))
+			self.helices_groupbox = QtWidgets.QGroupBox(self.tr("Write &Helices:"))
 			self.helices_groupbox.setCheckable(True)
 			
-			self.helices_coords_groupbox = QtGui.QGroupBox(self.tr("Helix Coordinates (EMAN1 format)"))
+			self.helices_coords_groupbox = QtWidgets.QGroupBox(self.tr("Helix Coordinates (EMAN1 format)"))
 			self.helices_coords_groupbox.setCheckable(True)
-			helices_coords_label = QtGui.QLabel(self.tr("Path:"))
-			self.helices_coords_line_edit = QtGui.QLineEdit()
+			helices_coords_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.helices_coords_line_edit = QtWidgets.QLineEdit()
 			self.helices_coords_line_edit.setMinimumWidth(300)
-			self.helices_coords_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			self.helices_coords_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 			
-			self.helices_images_groupbox = QtGui.QGroupBox(self.tr("Helix Images"))
+			self.helices_images_groupbox = QtWidgets.QGroupBox(self.tr("Helix Images"))
 			self.helices_images_groupbox.setCheckable(True)
-			helices_images_label = QtGui.QLabel(self.tr("Path:"))
-			self.helices_images_line_edit = QtGui.QLineEdit()
-			self.helices_images_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			helices_images_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.helices_images_line_edit = QtWidgets.QLineEdit()
+			self.helices_images_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 
-			self.ptcls_groupbox = QtGui.QGroupBox(self.tr("Write &Segments:"))
+			self.ptcls_groupbox = QtWidgets.QGroupBox(self.tr("Write &Segments:"))
 			self.ptcls_groupbox.setCheckable(True)
 
-			ptcls_distance_label = QtGui.QLabel(self.tr("&Distance:"))
-			self.ptcls_distance_spinbox = QtGui.QSpinBox()
+			ptcls_distance_label = QtWidgets.QLabel(self.tr("&Distance:"))
+			self.ptcls_distance_spinbox = QtWidgets.QSpinBox()
 			self.ptcls_distance_spinbox.setMaximum(10000)
 			ptcls_distance_label.setBuddy(self.ptcls_distance_spinbox)
-			ptcls_length_label = QtGui.QLabel(self.tr("&Length:"))
-			self.ptcls_length_spinbox = QtGui.QSpinBox()
+			ptcls_length_label = QtWidgets.QLabel(self.tr("&Length:"))
+			self.ptcls_length_spinbox = QtWidgets.QSpinBox()
 			self.ptcls_length_spinbox.setMaximum(10000)
 			ptcls_length_label.setBuddy(self.ptcls_length_spinbox)
-			ptcls_width_label = QtGui.QLabel(self.tr("W&idth:"))
-			self.ptcls_width_spinbox = QtGui.QSpinBox()
+			ptcls_width_label = QtWidgets.QLabel(self.tr("W&idth:"))
+			self.ptcls_width_spinbox = QtWidgets.QSpinBox()
 			self.ptcls_width_spinbox.setMaximum(10000)
 			ptcls_width_label.setBuddy(self.ptcls_width_spinbox)
 
-			self.ptcls_coords_groupbox = QtGui.QGroupBox(self.tr("Segment Coordinates"))
+			self.ptcls_coords_groupbox = QtWidgets.QGroupBox(self.tr("Segment Coordinates"))
 			self.ptcls_coords_groupbox.setCheckable(True)
-			ptcls_coords_label = QtGui.QLabel(self.tr("Path:"))
-			self.ptcls_coords_line_edit = QtGui.QLineEdit()
-			self.ptcls_coords_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			ptcls_coords_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.ptcls_coords_line_edit = QtWidgets.QLineEdit()
+			self.ptcls_coords_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 				
-			self.ptcls_images_groupbox = QtGui.QGroupBox(self.tr("Segment Images"))
+			self.ptcls_images_groupbox = QtWidgets.QGroupBox(self.tr("Segment Images"))
 			self.ptcls_images_groupbox.setCheckable(True)
-			self.ptcls_edgenorm_checkbox = QtGui.QCheckBox(self.tr("&Normalize Edge-Mean"))
+			self.ptcls_edgenorm_checkbox = QtWidgets.QCheckBox(self.tr("&Normalize Edge-Mean"))
 			self.ptcls_edgenorm_checkbox.setChecked(False)
 			self.ptcls_edgenorm_checkbox.setToolTip("Uses normalize.edgemean processor on each segment: pixel-value -> (pixel-value - edge-mean) / standard deviation")
 			
-			self.ptcls_rotation_groupbox = QtGui.QGroupBox(self.tr("Rotation"))
-			self.ptcls_bilinear_rotation_radiobutton = QtGui.QRadioButton(self.tr("Bilinear Rotation"))
+			self.ptcls_rotation_groupbox = QtWidgets.QGroupBox(self.tr("Rotation"))
+			self.ptcls_bilinear_rotation_radiobutton = QtWidgets.QRadioButton(self.tr("Bilinear Rotation"))
 			self.ptcls_bilinear_rotation_radiobutton.setToolTip("Rectangular segments. Rotation angle is the one that makes associated helix vertical. Bilinear rotation algorithm.")
 			self.ptcls_bilinear_rotation_radiobutton.setChecked(True)
-			self.ptcls_gridding_rotation_radiobutton = QtGui.QRadioButton(self.tr("Gridding Rotation"))
+			self.ptcls_gridding_rotation_radiobutton = QtWidgets.QRadioButton(self.tr("Gridding Rotation"))
 			self.ptcls_gridding_rotation_radiobutton.setToolTip("Square segments with sides = max(Length, Width). Rotation angle is the one that makes associated helix vertical. Gridding rotation algorithm.")
-			self.ptcls_no_rotation_radiobutton = QtGui.QRadioButton(self.tr("No Rotation"))
+			self.ptcls_no_rotation_radiobutton = QtWidgets.QRadioButton(self.tr("No Rotation"))
 			self.ptcls_no_rotation_radiobutton.setToolTip("Segments are not rotated from the micrograph. Square segments with sides = max(length, width)")
 			
-			self.ptcls_stack_groupbox = QtGui.QGroupBox(self.tr("Image Stacks"))
-			self.ptcls_single_stack_radiobutton = QtGui.QRadioButton(self.tr("Single image stack"))
+			self.ptcls_stack_groupbox = QtWidgets.QGroupBox(self.tr("Image Stacks"))
+			self.ptcls_single_stack_radiobutton = QtWidgets.QRadioButton(self.tr("Single image stack"))
 			self.ptcls_single_stack_radiobutton.setChecked(True)
 			self.ptcls_single_stack_radiobutton.setToolTip("Saves a single image stack file for all the helices. Fails for incompatible file formats.")
-			self.ptcls_multiple_stack_radiobutton = QtGui.QRadioButton(self.tr("Image stack per helix"))
+			self.ptcls_multiple_stack_radiobutton = QtWidgets.QRadioButton(self.tr("Image stack per helix"))
 			self.ptcls_multiple_stack_radiobutton.setToolTip("Saves an image stack file for each helix. Fails for incompatible file formats.")
-			self.ptcls_no_stack_radiobutton = QtGui.QRadioButton(self.tr("File for each segment"))
+			self.ptcls_no_stack_radiobutton = QtWidgets.QRadioButton(self.tr("File for each segment"))
 
-			ptcls_images_label = QtGui.QLabel(self.tr("Path:"))
-			self.ptcls_images_line_edit = QtGui.QLineEdit()
-			self.ptcls_images_browse_button = QtGui.QPushButton(self.tr("Browse"))
+			ptcls_images_label = QtWidgets.QLabel(self.tr("Path:"))
+			self.ptcls_images_line_edit = QtWidgets.QLineEdit()
+			self.ptcls_images_browse_button = QtWidgets.QPushButton(self.tr("Browse"))
 
-			self.button_box = QtGui.QDialogButtonBox(QtGui.QDialogButtonBox.Save | QtGui.QDialogButtonBox.Cancel)
+			self.button_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Save | QtWidgets.QDialogButtonBox.Cancel)
 
 
 			
-			helices_coords_layout = QtGui.QHBoxLayout()
+			helices_coords_layout = QtWidgets.QHBoxLayout()
 			helices_coords_layout.addWidget(helices_coords_label)
 			helices_coords_layout.addWidget(self.helices_coords_line_edit)
 			helices_coords_layout.addWidget(self.helices_coords_browse_button)
 			self.helices_coords_groupbox.setLayout(helices_coords_layout)
 			
-			helices_images_layout = QtGui.QHBoxLayout()
+			helices_images_layout = QtWidgets.QHBoxLayout()
 			helices_images_layout.addWidget(helices_images_label)
 			helices_images_layout.addWidget(self.helices_images_line_edit)
 			helices_images_layout.addWidget(self.helices_images_browse_button)
 			self.helices_images_groupbox.setLayout(helices_images_layout)
 			
-			helices_layout = QtGui.QVBoxLayout()
+			helices_layout = QtWidgets.QVBoxLayout()
 			helices_layout.addWidget(self.helices_coords_groupbox)
 			helices_layout.addWidget(self.helices_images_groupbox)
 			
 			self.helices_groupbox.setLayout(helices_layout)
 			
-			ptcls_distance_layout = QtGui.QHBoxLayout()
+			ptcls_distance_layout = QtWidgets.QHBoxLayout()
 			ptcls_distance_layout.addWidget(ptcls_distance_label)
 			ptcls_distance_layout.addWidget(self.ptcls_distance_spinbox)
 			
-			ptcls_length_layout = QtGui.QHBoxLayout()
+			ptcls_length_layout = QtWidgets.QHBoxLayout()
 			ptcls_length_layout.addWidget(ptcls_length_label)
 			ptcls_length_layout.addWidget(self.ptcls_length_spinbox)
 			
-			ptcls_width_layout = QtGui.QHBoxLayout()
+			ptcls_width_layout = QtWidgets.QHBoxLayout()
 			ptcls_width_layout.addWidget(ptcls_width_label)
 			ptcls_width_layout.addWidget(self.ptcls_width_spinbox)
 			
-			ptcls_coords_layout = QtGui.QHBoxLayout()
+			ptcls_coords_layout = QtWidgets.QHBoxLayout()
 			ptcls_coords_layout.addWidget(ptcls_coords_label)
 			ptcls_coords_layout.addWidget(self.ptcls_coords_line_edit)
 			ptcls_coords_layout.addWidget(self.ptcls_coords_browse_button)
 			self.ptcls_coords_groupbox.setLayout(ptcls_coords_layout)
 			
-			ptcls_images_path_layout = QtGui.QHBoxLayout()
+			ptcls_images_path_layout = QtWidgets.QHBoxLayout()
 			ptcls_images_path_layout.addWidget(ptcls_images_label)
 			ptcls_images_path_layout.addWidget(self.ptcls_images_line_edit)
 			ptcls_images_path_layout.addWidget(self.ptcls_images_browse_button)
 			
-			ptcls_images_rotation_layout = QtGui.QVBoxLayout()
+			ptcls_images_rotation_layout = QtWidgets.QVBoxLayout()
 			ptcls_images_rotation_layout.addWidget(self.ptcls_bilinear_rotation_radiobutton)
 			ptcls_images_rotation_layout.addWidget(self.ptcls_gridding_rotation_radiobutton)
 			ptcls_images_rotation_layout.addWidget(self.ptcls_no_rotation_radiobutton)
 			self.ptcls_rotation_groupbox.setLayout(ptcls_images_rotation_layout)
 			
-			ptcls_imagestack_layout = QtGui.QVBoxLayout()
+			ptcls_imagestack_layout = QtWidgets.QVBoxLayout()
 			ptcls_imagestack_layout.addWidget(self.ptcls_single_stack_radiobutton)
 			ptcls_imagestack_layout.addWidget(self.ptcls_multiple_stack_radiobutton)
 			ptcls_imagestack_layout.addWidget(self.ptcls_no_stack_radiobutton)
 			self.ptcls_stack_groupbox.setLayout(ptcls_imagestack_layout)
 			
-			ptcls_rotation_stack_layout = QtGui.QHBoxLayout()
+			ptcls_rotation_stack_layout = QtWidgets.QHBoxLayout()
 			ptcls_rotation_stack_layout.addWidget(self.ptcls_rotation_groupbox)
 			ptcls_rotation_stack_layout.addWidget(self.ptcls_stack_groupbox)
 			
-			ptcls_images_layout = QtGui.QVBoxLayout()
+			ptcls_images_layout = QtWidgets.QVBoxLayout()
 			ptcls_images_layout.addLayout(ptcls_rotation_stack_layout)
 			ptcls_images_layout.addWidget(self.ptcls_edgenorm_checkbox)
 			ptcls_images_layout.addLayout(ptcls_images_path_layout)
 			self.ptcls_images_groupbox.setLayout(ptcls_images_layout)
 			
-			ptcls_opts_layout = QtGui.QVBoxLayout()
+			ptcls_opts_layout = QtWidgets.QVBoxLayout()
 			ptcls_opts_layout.addLayout(ptcls_distance_layout)
 			ptcls_opts_layout.addLayout(ptcls_length_layout)
 			ptcls_opts_layout.addLayout(ptcls_width_layout)
@@ -902,24 +902,24 @@
 			ptcls_opts_layout.addWidget(self.ptcls_images_groupbox)
 			self.ptcls_groupbox.setLayout(ptcls_opts_layout)
 	
-			self.vbl = QtGui.QVBoxLayout(self)
-			self.vbl.setMargin(0)
+			self.vbl = QtWidgets.QVBoxLayout(self)
+			self.vbl.setContentsMargins(0, 0, 0, 0)
 			self.vbl.setSpacing(6)
 			self.vbl.setObjectName("vbl")
 			self.vbl.addWidget(self.helices_groupbox)
 			self.vbl.addWidget(self.ptcls_groupbox)
 			self.vbl.addWidget(self.button_box)
 		def browse_helix_coords(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Coordinates"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Coordinates"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile( os.path.join(self.default_dir, self.micrograph_name + "_boxes.txt") )
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
 				file_path = str(file_path)
 				self.helices_coords_line_edit.setText(file_path)
 		def browse_helix_images(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Images"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Images"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile(self.helices_images_line_edit.text())
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
@@ -935,16 +935,16 @@
 	#                path = os.path.join( path, os.path.basename(self.helices_images_line_edit.text()) )
 	#            self.helices_images_line_edit.setText(path)
 		def browse_ptcl_coords(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Coordinates"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Coordinates"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile(self.ptcls_coords_line_edit.text())
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
 				file_path = str(file_path)
 				self.ptcls_coords_line_edit.setText(file_path)
 		def browse_ptcl_images(self):
-			file_dlg = QtGui.QFileDialog(self,self.tr("Save Helix Images"))
-			file_dlg.setAcceptMode(QtGui.QFileDialog.AcceptSave)
+			file_dlg = QtWidgets.QFileDialog(self,self.tr("Save Helix Images"))
+			file_dlg.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
 			file_dlg.selectFile(self.ptcls_images_line_edit.text())
 			if file_dlg.exec_():
 				file_path = file_dlg.selectedFiles()[0]
@@ -1027,7 +1027,7 @@
 			self.hide()
 			
 if ENABLE_GUI:
-	class EMHelixBoxerWidget(QtGui.QWidget):
+	class EMHelixBoxerWidget(QtWidgets.QWidget):
 		"""
 		the GUI widget which contains the settings for boxing helices and writing results to files
 		"""
@@ -1036,7 +1036,7 @@
 			@param micrograph_filepath: the path to the image file for the micrograph
 			@param app: the application to which this widget belongs
 			"""
-			QtGui.QWidget.__init__(self)
+			QtWidgets.QWidget.__init__(self)
 
 			self.doctf = False
 			self.winsize = 512
@@ -1075,14 +1075,14 @@
 				self.micrograph_filepath_set = set(micrograph_filepaths) # [micrograph1_filepath, micrograph2_filepath, ...]
 			self.update_micrograph_table()
 
-			self.connect(self.box_width_spinbox, QtCore.SIGNAL("valueChanged(int)"), self.width_changed)
-			self.connect( self.img_quality_combobox, QtCore.SIGNAL("currentIndexChanged(int)"), self.set_image_quality )
-			self.connect(self.load_boxes_action, QtCore.SIGNAL("triggered()"), self.load_boxes)
-			self.connect(self.load_micrograph_action, QtCore.SIGNAL("triggered()"), self.open_micrograph)
+			self.box_width_spinbox.valueChanged[int].connect(self.width_changed)
+			self.img_quality_combobox.currentIndexChanged[int].connect(self.set_image_quality)
+			self.load_boxes_action.triggered.connect(self.load_boxes)
+			self.load_micrograph_action.triggered.connect(self.open_micrograph)
 	#        self.connect(self.write_coords_action, QtCore.SIGNAL("triggered()"), self.write_coords)
-			self.connect(self.write_images_action, QtCore.SIGNAL("triggered()"), self.write_images)
-			self.connect(self.quit_action, QtCore.SIGNAL("triggered()"), self.close)
-			self.connect( self.micrograph_table, QtCore.SIGNAL("currentCellChanged (int,int,int,int)"), self.micrograph_table_selection)
+			self.write_images_action.triggered.connect(self.write_images)
+			self.quit_action.triggered.connect(self.close)
+			self.micrograph_table.currentCellChanged [int, int, int, int].connect(self.micrograph_table_selection)
 			
 			self.micrograph_table.setCurrentCell(0,0) #self.micrograph_table_selection() will display this micrograph
 			
@@ -1092,13 +1092,13 @@
 			
 		def __create_ui(self):
 			
-			self.menu_bar = QtGui.QMenuBar(self)
-			self.file_menu = QtGui.QMenu(self.tr("&File"))
-			self.load_micrograph_action = QtGui.QAction(self.tr("&Open Micrographs"), self)
+			self.menu_bar = QtWidgets.QMenuBar(self)
+			self.file_menu = QtWidgets.QMenu(self.tr("&File"))
+			self.load_micrograph_action = QtWidgets.QAction(self.tr("&Open Micrographs"), self)
 	#        self.write_coords_action = QtGui.QAction(self.tr("Save &Coordinates"), self)
-			self.write_images_action = QtGui.QAction(self.tr("&Save"), self)
-			self.load_boxes_action = QtGui.QAction(self.tr("&Load Coordinates"), self)
-			self.quit_action = QtGui.QAction(self.tr("&Quit"), self)
+			self.write_images_action = QtWidgets.QAction(self.tr("&Save"), self)
+			self.load_boxes_action = QtWidgets.QAction(self.tr("&Load Coordinates"), self)
+			self.quit_action = QtWidgets.QAction(self.tr("&Quit"), self)
 			self.file_menu.addAction(self.load_micrograph_action)
 			self.file_menu.addAction(self.load_boxes_action)
 	#        self.file_menu.addAction(self.write_coords_action)
@@ -1107,34 +1107,34 @@
 			self.file_menu.addAction(self.quit_action)
 			self.menu_bar.addMenu(self.file_menu)
 			
-			self.box_width_label = QtGui.QLabel(self.tr("Box &Width:"))
-			self.box_width_spinbox = QtGui.QSpinBox()
+			self.box_width_label = QtWidgets.QLabel(self.tr("Box &Width:"))
+			self.box_width_spinbox = QtWidgets.QSpinBox()
 			self.box_width_spinbox.setMaximum(10000)
 			self.box_width_label.setBuddy(self.box_width_spinbox)
 			
-			self.img_quality_label = QtGui.QLabel(self.tr("Image &Quality:"))
-			self.img_quality_combobox = QtGui.QComboBox()
+			self.img_quality_label = QtWidgets.QLabel(self.tr("Image &Quality:"))
+			self.img_quality_combobox = QtWidgets.QComboBox()
 			qualities = [str(i) for i in range(5)]
 			self.img_quality_combobox.addItems(qualities)
 			self.img_quality_combobox.setCurrentIndex(2)
 			self.img_quality_label.setBuddy(self.img_quality_combobox)
 			
-			self.micrograph_table = QtGui.QTableWidget(1,2)
+			self.micrograph_table = QtWidgets.QTableWidget(1,2)
 			self.micrograph_table.setHorizontalHeaderLabels(["Micrograph", "Boxed Helices"])
 			
-			self.status_bar = QtGui.QStatusBar()
+			self.status_bar = QtWidgets.QStatusBar()
 			#self.status_bar.showMessage("Ready",10000)
 			
-			widthLayout = QtGui.QHBoxLayout()
+			widthLayout = QtWidgets.QHBoxLayout()
 			widthLayout.addWidget(self.box_width_label)
 			widthLayout.addWidget(self.box_width_spinbox)
 			
-			qualityLayout = QtGui.QHBoxLayout()
+			qualityLayout = QtWidgets.QHBoxLayout()
 			qualityLayout.addWidget(self.img_quality_label)
 			qualityLayout.addWidget(self.img_quality_combobox)
 				
-			self.vbl = QtGui.QVBoxLayout(self)
-			self.vbl.setMargin(30)
+			self.vbl = QtWidgets.QVBoxLayout(self)
+			self.vbl.setContentsMargins(30, 30, 30, 30)
 			self.vbl.setSpacing(6)
 			self.vbl.setObjectName("vbl")
 			self.vbl.addWidget(self.menu_bar)
@@ -1144,131 +1144,131 @@
 			self.vbl.addWidget(self.status_bar)
 			
 			# add input fields for CTF estimation
-			hbl_doctf = QtGui.QHBoxLayout()
-			self.doctf_chk = QtGui.QCheckBox("To estimate CTF use sxcter.py instead!!!                               ")
+			hbl_doctf = QtWidgets.QHBoxLayout()
+			self.doctf_chk = QtWidgets.QCheckBox("To estimate CTF use sxcter.py instead!!!                               ")
 			self.doctf_chk.setToolTip("CTF Estimation using CTER")
 			self.doctf_chk.setChecked(self.doctf)
 			hbl_doctf.addWidget(self.doctf_chk)
 			self.vbl.addLayout(hbl_doctf)
 			
-			QtCore.QObject.connect(self.doctf_chk,QtCore.SIGNAL("clicked(bool)"),self.doctf_checked)
+			self.doctf_chk.clicked[bool].connect(self.doctf_checked)
 
 		def doctf_checked(self,val):
 			if not(self.doctf):
 				self.doctf = val
 			
 				if val:
-					hgctf = QtGui.QHBoxLayout()
-					ctftitle = QtGui.QLabel("<b>Parameters of CTF estimation</b>")
+					hgctf = QtWidgets.QHBoxLayout()
+					ctftitle = QtWidgets.QLabel("<b>Parameters of CTF estimation</b>")
 					hgctf.addWidget(ctftitle)
 					self.vbl.addLayout(hgctf)
 					
-					hbl_wscs = QtGui.QHBoxLayout()
-					window_size_label = QtGui.QLabel("Window size:")
+					hbl_wscs = QtWidgets.QHBoxLayout()
+					window_size_label = QtWidgets.QLabel("Window size:")
 					hbl_wscs.addWidget(window_size_label)
-					self.ctf_window_size = QtGui.QLineEdit('512')
+					self.ctf_window_size = QtWidgets.QLineEdit('512')
 					hbl_wscs.addWidget(self.ctf_window_size)
 					
-					cs_label = QtGui.QLabel("Cs:")
+					cs_label = QtWidgets.QLabel("Cs:")
 					hbl_wscs.addWidget(cs_label)
-					self.ctf_cs = QtGui.QLineEdit('2.0')
+					self.ctf_cs = QtWidgets.QLineEdit('2.0')
 					hbl_wscs.addWidget(self.ctf_cs)
 					self.vbl.addLayout(hbl_wscs)
 					
 					
-					hbl_esv = QtGui.QHBoxLayout()
-					edge_size_label = QtGui.QLabel("Edge size:")
+					hbl_esv = QtWidgets.QHBoxLayout()
+					edge_size_label = QtWidgets.QLabel("Edge size:")
 					hbl_esv.addWidget(edge_size_label)
-					self.ctf_edge_size = QtGui.QLineEdit('0')
+					self.ctf_edge_size = QtWidgets.QLineEdit('0')
 					hbl_esv.addWidget(self.ctf_edge_size)
 					
-					voltage_label = QtGui.QLabel("Voltage:")
+					voltage_label = QtWidgets.QLabel("Voltage:")
 					hbl_esv.addWidget(voltage_label)
-					self.ctf_volt = QtGui.QLineEdit('200.0')
+					self.ctf_volt = QtWidgets.QLineEdit('200.0')
 					hbl_esv.addWidget(self.ctf_volt)
 					self.vbl.addLayout(hbl_esv)
 					
-					hbl_oac = QtGui.QHBoxLayout()
-					overlap_label = QtGui.QLabel("Overlap:")
+					hbl_oac = QtWidgets.QHBoxLayout()
+					overlap_label = QtWidgets.QLabel("Overlap:")
 					hbl_oac.addWidget(overlap_label)
-					self.ctf_overlap_size = QtGui.QLineEdit('50')
+					self.ctf_overlap_size = QtWidgets.QLineEdit('50')
 					hbl_oac.addWidget(self.ctf_overlap_size)
 					
-					amplitude_contrast_label = QtGui.QLabel("Amplitude Contrast:")
+					amplitude_contrast_label = QtWidgets.QLabel("Amplitude Contrast:")
 					hbl_oac.addWidget(amplitude_contrast_label)
-					self.ctf_ampcont = QtGui.QLineEdit('10.0')
+					self.ctf_ampcont = QtWidgets.QLineEdit('10.0')
 					hbl_oac.addWidget(self.ctf_ampcont)
 					self.vbl.addLayout(hbl_oac)
 					
-					hbl_kboot = QtGui.QHBoxLayout()
-					kboot_label = QtGui.QLabel("kboot (only for CTER):")
+					hbl_kboot = QtWidgets.QHBoxLayout()
+					kboot_label = QtWidgets.QLabel("kboot (only for CTER):")
 					hbl_kboot.addWidget(kboot_label)
-					self.ctf_kboot = QtGui.QLineEdit('16')
+					self.ctf_kboot = QtWidgets.QLineEdit('16')
 					hbl_kboot.addWidget(self.ctf_kboot)
 					
-					pixel_label = QtGui.QLabel("Pixel size:")
+					pixel_label = QtWidgets.QLabel("Pixel size:")
 					hbl_kboot.addWidget(pixel_label)
-					self.ctf_pixel = QtGui.QLineEdit('1.0')
+					self.ctf_pixel = QtWidgets.QLineEdit('1.0')
 					hbl_kboot.addWidget(self.ctf_pixel)
 					
 					self.vbl.addLayout(hbl_kboot)
 					
-					hbl_estdef = QtGui.QHBoxLayout()
-					estimated_defocus_label = QtGui.QLabel("Estimated defocus:")
+					hbl_estdef = QtWidgets.QHBoxLayout()
+					estimated_defocus_label = QtWidgets.QLabel("Estimated defocus:")
 					hbl_estdef.addWidget(estimated_defocus_label)
-					self.estdef = QtGui.QLineEdit('')
+					self.estdef = QtWidgets.QLineEdit('')
 					hbl_estdef.addWidget(self.estdef)
 					self.vbl.addLayout(hbl_estdef)
 					
-					hbl_astamp = QtGui.QHBoxLayout()
-					astig_amp_label = QtGui.QLabel("Estimated astigmatism amplitude\n (only for CTER):")
+					hbl_astamp = QtWidgets.QHBoxLayout()
+					astig_amp_label = QtWidgets.QLabel("Estimated astigmatism amplitude\n (only for CTER):")
 					hbl_astamp.addWidget(astig_amp_label)
-					self.astamp = QtGui.QLineEdit('')
+					self.astamp = QtWidgets.QLineEdit('')
 					hbl_astamp.addWidget(self.astamp)
 					self.vbl.addLayout(hbl_astamp)
 					
-					hbl_astagl = QtGui.QHBoxLayout()
-					astig_angle_label = QtGui.QLabel("Estimated astigmatism angle \n(only for CTER)")
+					hbl_astagl = QtWidgets.QHBoxLayout()
+					astig_angle_label = QtWidgets.QLabel("Estimated astigmatism angle \n(only for CTER)")
 					hbl_astagl.addWidget(astig_angle_label)
-					self.astagl = QtGui.QLineEdit('')
+					self.astagl = QtWidgets.QLineEdit('')
 					hbl_astagl.addWidget(self.astagl)
 					self.vbl.addLayout(hbl_astagl)
 					
-					hbl_deferr = QtGui.QHBoxLayout()
-					deferr_label = QtGui.QLabel("Estimated defocus error \n(only for CTER):")
+					hbl_deferr = QtWidgets.QHBoxLayout()
+					deferr_label = QtWidgets.QLabel("Estimated defocus error \n(only for CTER):")
 					hbl_deferr.addWidget(deferr_label)
-					self.deferr = QtGui.QLineEdit('')
+					self.deferr = QtWidgets.QLineEdit('')
 					hbl_deferr.addWidget(self.deferr)
 					self.vbl.addLayout(hbl_deferr)
 					
-					hbl_astaglerr = QtGui.QHBoxLayout()
-					astaglerr_label = QtGui.QLabel("Estimated astigmatism angle error \n(only for CTER):")
+					hbl_astaglerr = QtWidgets.QHBoxLayout()
+					astaglerr_label = QtWidgets.QLabel("Estimated astigmatism angle error \n(only for CTER):")
 					hbl_astaglerr.addWidget(astaglerr_label)
-					self.astaglerr = QtGui.QLineEdit('')
+					self.astaglerr = QtWidgets.QLineEdit('')
 					hbl_astaglerr.addWidget(self.astaglerr)
 					self.vbl.addLayout(hbl_astaglerr)
 					
-					hbl_astamperr = QtGui.QHBoxLayout()
-					astamperr_label = QtGui.QLabel("Estimated astigmatism amplitude error \n (only for CTER):")
+					hbl_astamperr = QtWidgets.QHBoxLayout()
+					astamperr_label = QtWidgets.QLabel("Estimated astigmatism amplitude error \n (only for CTER):")
 					hbl_astamperr.addWidget(astamperr_label)
-					self.astamperr = QtGui.QLineEdit('')
+					self.astamperr = QtWidgets.QLineEdit('')
 					hbl_astamperr.addWidget(self.astamperr)
 					self.vbl.addLayout(hbl_astamperr)
 					
-					hbl_ctf_cter = QtGui.QHBoxLayout()
-					self.estimate_ctf_cter =QtGui.QPushButton("Estimate CTF using CTER")
+					hbl_ctf_cter = QtWidgets.QHBoxLayout()
+					self.estimate_ctf_cter =QtWidgets.QPushButton("Estimate CTF using CTER")
 					hbl_ctf_cter.addWidget(self.estimate_ctf_cter)
 					self.vbl.addLayout(hbl_ctf_cter)
 					
-					QtCore.QObject.connect(self.ctf_window_size,QtCore.SIGNAL("editingFinished()"),self.new_ctf_window)
-					QtCore.QObject.connect(self.ctf_cs,QtCore.SIGNAL("editingFinished()"),self.new_ctf_cs)
-					QtCore.QObject.connect(self.ctf_edge_size,QtCore.SIGNAL("editingFinished()"),self.new_ctf_edge)
-					QtCore.QObject.connect(self.ctf_volt,QtCore.SIGNAL("editingFinished()"),self.new_ctf_volt)
-					QtCore.QObject.connect(self.ctf_overlap_size,QtCore.SIGNAL("editingFinished()"),self.new_ctf_overlap_size)
-					QtCore.QObject.connect(self.ctf_ampcont,QtCore.SIGNAL("editingFinished()"),self.new_ctf_ampcont)
-					QtCore.QObject.connect(self.ctf_kboot,QtCore.SIGNAL("editingFinished()"),self.new_ctf_kboot)
-					QtCore.QObject.connect(self.ctf_pixel,QtCore.SIGNAL("editingFinished()"),self.new_ctf_pixel)
-					QtCore.QObject.connect(self.estimate_ctf_cter,QtCore.SIGNAL("clicked(bool)"), self.calc_ctf_cter)
+					self.ctf_window_size.editingFinished.connect(self.new_ctf_window)
+					self.ctf_cs.editingFinished.connect(self.new_ctf_cs)
+					self.ctf_edge_size.editingFinished.connect(self.new_ctf_edge)
+					self.ctf_volt.editingFinished.connect(self.new_ctf_volt)
+					self.ctf_overlap_size.editingFinished.connect(self.new_ctf_overlap_size)
+					self.ctf_ampcont.editingFinished.connect(self.new_ctf_ampcont)
+					self.ctf_kboot.editingFinished.connect(self.new_ctf_kboot)
+					self.ctf_pixel.editingFinished.connect(self.new_ctf_pixel)
+					self.estimate_ctf_cter.clicked[bool].connect(self.calc_ctf_cter)
 	
 		def new_ctf_pixel(self):
 			self.pixelsize=self.ctf_pixel.text()
@@ -1391,7 +1391,7 @@
 				#self.helix_viewer.setWindowTitle("Current Helix")
 				self.helix_viewer.resize(300,800)
 				self.helix_viewer.set_scale(1)
-			QtCore.QObject.connect(self.helix_viewer, QtCore.SIGNAL("module_closed"), self.helix_viewer_closed)
+			self.helix_viewer.module_closed.connect(self.helix_viewer_closed)
 			self.helix_viewer.set_data(helix_emdata)
 			self.helix_viewer.setWindowTitle("Current Helix: %d x %d pixels" % (helix_emdata["nx"], helix_emdata["ny"]) )
 			get_application().show_specific(self.helix_viewer)
@@ -1427,19 +1427,19 @@
 			"""
 			load boxes from a file selected in a file browser dialog
 			"""
-			path = QtGui.QFileDialog.getOpenFileName(self, self.tr("Open Box Coordinates File"), "", self.tr("Boxes (*.txt *.box)"))
+			path = QtWidgets.QFileDialog.getOpenFileName(self, self.tr("Open Box Coordinates File"), "", self.tr("Boxes (*.txt *.box)"))[0]
 			path = str(path)
 			coords_list = load_helix_coords(path)
 			
 			if self.main_image.shapes!=None and len(self.main_image.shapes)>0 :
-				keep_boxes_msgbox = QtGui.QMessageBox()
+				keep_boxes_msgbox = QtWidgets.QMessageBox()
 				keep_boxes_msgbox.setText(self.tr("Keep current boxes?"))
 				keep_boxes_msgbox.setInformativeText(self.tr("Do you want to keep your current boxes?"))
-				keep_boxes_msgbox.setStandardButtons(QtGui.QMessageBox.No | QtGui.QMessageBox.Yes)
-				keep_boxes_msgbox.setDefaultButton(QtGui.QMessageBox.Yes)
+				keep_boxes_msgbox.setStandardButtons(QtWidgets.QMessageBox.No | QtWidgets.QMessageBox.Yes)
+				keep_boxes_msgbox.setDefaultButton(QtWidgets.QMessageBox.Yes)
 				keep_current_boxes = keep_boxes_msgbox.exec_()
 		
-				if keep_current_boxes == QtGui.QMessageBox.No:
+				if keep_current_boxes == QtWidgets.QMessageBox.No:
 					self.main_image.shapes = EMShapeDict()
 					self.set_db_item("helixboxes", [])
 					self.helices_dict = {}
@@ -1471,10 +1471,10 @@
 			
 			if not self.main_image:
 				self.main_image = EMImage2DWidget(application=self.app)
-				QtCore.QObject.connect(self.main_image,QtCore.SIGNAL("module_closed"), self.main_image_closed)
-				QtCore.QObject.connect( self.main_image, QtCore.SIGNAL("mousedown"), self.mouse_down)
-				QtCore.QObject.connect( self.main_image, QtCore.SIGNAL("mousedrag"), self.mouse_drag)
-				QtCore.QObject.connect( self.main_image, QtCore.SIGNAL("mouseup"), self.mouse_up)
+				self.main_image.module_closed.connect(self.main_image_closed)
+				self.main_image.mousedown.connect(self.mouse_down)
+				self.main_image.mousedrag.connect(self.mouse_drag)
+				self.main_image.mouseup.connect(self.mouse_up)
 			self.main_image.set_data( micrograph_emdata, self.micrograph_filepath )
 			self.main_image.shapes = EMShapeDict()
 			self.main_image.shapechange=1
@@ -1573,9 +1573,9 @@
 					num_boxes = len(boxes)
 				else:
 					num_boxes = 0
-				micrograph_item = QtGui.QTableWidgetItem(micrograph)
+				micrograph_item = QtWidgets.QTableWidgetItem(micrograph)
 				micrograph_item.setToolTip(micrograph_filepath)
-				num_boxes_item = QtGui.QTableWidgetItem(str(num_boxes))
+				num_boxes_item = QtWidgets.QTableWidgetItem(str(num_boxes))
 				self.micrograph_table.insertRow(i)
 				self.micrograph_table.setItem(i,0, micrograph_item)
 				self.micrograph_table.setItem(i,1, num_boxes_item)
@@ -2104,7 +2104,7 @@
 	'''
 	from utilities    import pad, model_blank, read_text_row, get_im, print_msg
 	from fundamentals import ramp, resample
-	from filter	  	  import filt_gaussh,filt_tanl 
+	from filter	  	  import filt_gaussh,filt_tanl
 	from pixel_error  import getnewhelixcoords
 	from EMAN2 	      import EMUtil, Util
 	from subprocess   import call
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/sparx/templates/sxgui_template.py	2017-10-21 16:49:01.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/sparx/templates/sxgui_template.py	2017-10-21 17:15:26.000000000 -0500
@@ -36,9 +36,9 @@
 import os
 from subprocess import *
 from functools import partial  # Use to connect event-source widget and event handler
-from PyQt4.Qt import *
-from PyQt4 import QtGui
-from PyQt4 import QtCore
+from PyQt5.QtGui import *
+from PyQt5 import QtGui, QtWidgets
+from PyQt5 import QtCore, QtWidgets
 from EMAN2 import *
 from EMAN2_cppwrap import *
 from global_def import *
@@ -489,6 +489,8 @@
 # Provides all necessary functionarity
 # tabs only provides widgets and knows how to layout them
 class SXCmdWidget(QWidget):
+	process_started = pyqtSignal()
+
 	def __init__(self, sxconst_set, sxcmd, parent = None):
 		super(SXCmdWidget, self).__init__(parent)
 
@@ -798,7 +800,7 @@
 
 			# Execute the generated command line
 			process = subprocess.Popen(cmd_line, shell=True)
-			self.emit(SIGNAL("process_started"), process.pid)
+			self.process_started.emit(process.pid)
 			if self.sxcmd.is_submittable == False:
 				assert(self.sxcmd.mpi_support == False)
 				# Register to This is a GUI application
@@ -817,7 +819,7 @@
 			message_line = "Generated the following command line:"
 			print(message_line)
 			print(cmd_line)
-			QtGui.QMessageBox.information(self, "Information","%s \n\n%s" % (message_line, cmd_line))
+			QtWidgets.QMessageBox.information(self, "Information","%s \n\n%s" % (message_line, cmd_line))
 
 			# Save the current state of GUI settings
 			if os.path.exists(self.sxcmd.get_category_dir_path(SXLookFeelConst.project_dir)) == False:
@@ -955,12 +957,12 @@
 		file_in.close()
 
 	def save_params(self):
-		file_path_out = str(QFileDialog.getSaveFileName(self, "Save Parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_out = str(QFileDialog.getSaveFileName(self, "Save Parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_out != "":
 			self.write_params(file_path_out)
 
 	def load_params(self):
-		file_path_in = str(QFileDialog.getOpenFileName(self, "Load parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_in = str(QFileDialog.getOpenFileName(self, "Load parameters", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_in != "":
 			self.read_params(file_path_in)
 			self.sxcmd_tab_main.set_qsub_enable_state()
@@ -968,39 +970,39 @@
 	def select_file(self, target_widget, file_format = ""):
 		file_path = ""
 		if file_format == "bdb":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select BDB File", SXLookFeelConst.file_dialog_dir, "BDB files (*.bdb)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select BDB File", SXLookFeelConst.file_dialog_dir, "BDB files (*.bdb)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 				file_path = translate_to_bdb_path(file_path)
 		elif file_format == "py":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select Python File", SXLookFeelConst.file_dialog_dir, "PY files (*.py)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select Python File", SXLookFeelConst.file_dialog_dir, "PY files (*.py)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use full path
 		elif file_format == "pdb":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select PDB File", SXLookFeelConst.file_dialog_dir, "PDB files (*.pdb *.pdb*)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select PDB File", SXLookFeelConst.file_dialog_dir, "PDB files (*.pdb *.pdb*)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 		elif file_format == "mrc":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select MRC File", SXLookFeelConst.file_dialog_dir, "MRC files (*.mrc *.mrcs)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select MRC File", SXLookFeelConst.file_dialog_dir, "MRC files (*.mrc *.mrcs)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 		elif file_format == "exe":
-			file_path = str(QFileDialog.getOpenFileName(self, "Select EXE File", SXLookFeelConst.file_dialog_dir, "EXE files (*.exe );; All files (*)", options = QFileDialog.DontUseNativeDialog))
+			file_path = str(QFileDialog.getOpenFileName(self, "Select EXE File", SXLookFeelConst.file_dialog_dir, "EXE files (*.exe );; All files (*)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
 		elif file_format == "any_file_list" or file_format == "any_image_list":
-			file_path_list = QFileDialog.getOpenFileNames(self, "Select Files", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog)
+			file_path_list = QFileDialog.getOpenFileNames(self, "Select Files", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog)[0]
 			# Use relative path.
 			for a_file_path in file_path_list:
 				file_path += SXLookFeelConst.format_path(str(a_file_path)) + " "
 		else:
 			if file_format:
-				file_path = str(QFileDialog.getOpenFileName(self, "Select %s File" % (file_format.upper()), SXLookFeelConst.file_dialog_dir, "%s files (*.%s)"  % (file_format.upper(), file_format), options = QFileDialog.DontUseNativeDialog))
+				file_path = str(QFileDialog.getOpenFileName(self, "Select %s File" % (file_format.upper()), SXLookFeelConst.file_dialog_dir, "%s files (*.%s)"  % (file_format.upper(), file_format), options = QFileDialog.DontUseNativeDialog))[0]
 			else:
-				file_path = str(QFileDialog.getOpenFileName(self, "Select File", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog))
+				file_path = str(QFileDialog.getOpenFileName(self, "Select File", SXLookFeelConst.file_dialog_dir, "All files (*)", options = QFileDialog.DontUseNativeDialog))[0]
 			# Use relative path.
 			if file_path:
 				file_path = SXLookFeelConst.format_path(file_path)
@@ -1089,21 +1091,21 @@
 		scroll_layout.setContentsMargins(0,0,0,0)
 		title_hbox = QHBoxLayout()
 		title_layout = QGridLayout()
-		title_layout.setMargin(SXLookFeelConst.grid_margin)
+		title_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		title_layout.setSpacing(SXLookFeelConst.grid_spacing)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
 #		title_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
 		grid_layout = QGridLayout()
-		grid_layout.setMargin(SXLookFeelConst.grid_margin)
+		grid_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		grid_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_min_width)
 		grid_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_min_width)
 		submit_layout = QGridLayout()
-		submit_layout.setMargin(SXLookFeelConst.grid_margin)
+		submit_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		submit_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span, token_widget_min_width)
 		submit_layout.setColumnMinimumWidth(grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_min_width)
@@ -1201,7 +1203,7 @@
 					cmd_token_widget[widget_index].setToolTip('<FONT>'+cmd_token.help[widget_index]+'</FONT>')
 					grid_layout.addWidget(cmd_token_widget[widget_index], grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-					self.connect(cmd_token_restore_widget[widget_index], SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token, widget_index))
+					cmd_token_restore_widget[widget_index].clicked.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 
 					grid_row +=  1
 
@@ -1221,13 +1223,13 @@
 					cmd_token_widget[widget_index].setToolTip('<FONT>'+cmd_token.help[widget_index]+'</FONT>')
 					grid_layout.addWidget(cmd_token_widget[widget_index], grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-					self.connect(cmd_token_restore_widget[widget_index], SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token, widget_index))
+					cmd_token_restore_widget[widget_index].clicked.connect(partial(self.handle_restore_widget_event, cmd_token, widget_index))
 
 					file_format = "py"
 					temp_btn = QPushButton("Select Script")
 					temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s python script file</FONT>" % file_format)
 					grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-					self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget[widget_index], file_format))
+					temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget[widget_index], file_format))
 
 					grid_row +=  1
 
@@ -1282,7 +1284,7 @@
 						cmd_token_widget.setEnabled(not cmd_token.is_locked)
 						grid_layout.addWidget(cmd_token_widget, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-						self.connect(cmd_token_restore_widget, SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token))
+						cmd_token_restore_widget.clicked.connect(partial(self.handle_restore_widget_event, cmd_token))
 
 					else:
 						btn_name = "%s" % cmd_token.restore
@@ -1312,7 +1314,7 @@
 						cmd_token_widget.setEnabled(not cmd_token.is_locked)
 						grid_layout.addWidget(cmd_token_widget, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
-						self.connect(cmd_token_restore_widget, SIGNAL("clicked()"), partial(self.handle_restore_widget_event, cmd_token))
+						cmd_token_restore_widget.clicked.connect(partial(self.handle_restore_widget_event, cmd_token))
 
 						if cmd_token.type == "image":
 							file_format = "hdf"
@@ -1320,19 +1322,19 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "bdb"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "any_image":
 							temp_btn = QPushButton("Select Image")
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select standard format image file (e.g. .hdf, .mrc)</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1345,31 +1347,31 @@
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select standard format image file (e.g. .hdf, .mrc)</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "txt"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s parameter file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "any_file_list":
 							temp_btn = QPushButton("Select Files")
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select files (e.g. *.*)</FONT>")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
 							file_format = "bdb"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 3, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 						elif cmd_token.type == "any_image_list":
 							temp_btn = QPushButton("Select Images")
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select standard format image files (e.g. .hdf, .mrc)</FONT>")
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, cmd_token.type))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1383,7 +1385,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1397,7 +1399,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1411,7 +1413,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1425,7 +1427,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1438,7 +1440,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select parameter file (e.g. .txt)</FONT>")
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1452,7 +1454,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s parameter file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1466,7 +1468,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s parameter file</FONT>" % file_format)
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget, file_format))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1479,7 +1481,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select file (e.g. *.*)</FONT>")
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_file, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1492,7 +1494,7 @@
 							temp_btn.setMinimumWidth(func_btn_min_width)
 							temp_btn.setToolTip('<FONT>'+"Display select directory dailog"+'</FONT>')
 							grid_layout.addWidget(temp_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span)
-							self.connect(temp_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_dir, cmd_token_widget))
+							temp_btn.clicked.connect(partial(self.sxcmdwidget.select_dir, cmd_token_widget))
 							file_format = "invisible"
 							temp_btn = QPushButton("Select .%s" % file_format)
 							temp_btn.setToolTip('<FONT>'+"Display open file dailog to select .%s format image file</FONT>" % file_format)
@@ -1532,7 +1534,7 @@
 			self.save_params_btn = QPushButton("Save parameters")
 			self.save_params_btn.setMinimumWidth(btn_min_width)
 			self.save_params_btn.setToolTip('<FONT>'+"Save gui parameter settings"+'</FONT>')
-			self.connect(self.save_params_btn, SIGNAL("clicked()"), self.sxcmdwidget.save_params)
+			self.save_params_btn.clicked.connect(self.sxcmdwidget.save_params)
 			submit_layout.addWidget(self.save_params_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1550,7 +1552,7 @@
 			self.load_params_btn = QPushButton("Load parameters")
 			self.load_params_btn.setMinimumWidth(btn_min_width)
 			self.load_params_btn.setToolTip('<FONT>'+"Load gui parameter settings to retrieve a previously-saved one"+'</FONT>')
-			self.connect(self.load_params_btn, SIGNAL("clicked()"), self.sxcmdwidget.load_params)
+			self.load_params_btn.clicked.connect(self.sxcmdwidget.load_params)
 			submit_layout.addWidget(self.load_params_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1608,7 +1610,7 @@
 			self.cmd_line_btn = QPushButton("Generate command line")
 			self.cmd_line_btn.setMinimumWidth(btn_min_width)
 			self.cmd_line_btn.setToolTip('<FONT>'+"Generate command line from gui parameter settings and automatically save settings"+'</FONT>')
-			self.connect(self.cmd_line_btn, SIGNAL("clicked()"), self.sxcmdwidget.print_cmd_line)
+			self.cmd_line_btn.clicked.connect(self.sxcmdwidget.print_cmd_line)
 			submit_layout.addWidget(self.cmd_line_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1629,7 +1631,7 @@
 			self.qsub_script_open_btn = QPushButton("Select Template")
 			self.qsub_script_open_btn.setMinimumWidth(func_btn_min_width)
 			self.qsub_script_open_btn.setToolTip('<FONT>'+"Display open file dailog to select job submission script template file"+'</FONT>')
-			self.connect(self.qsub_script_open_btn, SIGNAL("clicked()"), partial(self.sxcmdwidget.select_file, self.qsub_script_edit))
+			self.qsub_script_open_btn.clicked.connect(partial(self.sxcmdwidget.select_file, self.qsub_script_edit))
 			submit_layout.addWidget(self.qsub_script_open_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span, token_widget_row_span, token_widget_col_span)
 
 			# Add a run button
@@ -1640,7 +1642,7 @@
 			self.execute_btn.setStyleSheet(custom_style)
 			self.execute_btn.setMinimumWidth(btn_min_width)
 			self.execute_btn.setToolTip('<FONT>'+"Run %s and automatically save gui parameter settings</FONT>" % self.sxcmdwidget.sxcmd.get_mode_name_for("human"))
-			self.connect(self.execute_btn, SIGNAL("clicked()"), self.sxcmdwidget.execute_cmd_line)
+			self.execute_btn.clicked.connect(self.sxcmdwidget.execute_cmd_line)
 			submit_layout.addWidget(self.execute_btn, grid_row, grid_col_origin + token_label_col_span + token_widget_col_span * 2, token_widget_row_span, token_widget_col_span*2)
 
 			grid_row += 1
@@ -1755,7 +1757,7 @@
 
 		# Setup grid layout in the scroll area
 		self.grid_layout = QGridLayout()
-		self.grid_layout.setMargin(SXLookFeelConst.grid_margin)
+		self.grid_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		self.grid_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		self.grid_layout.setColumnMinimumWidth(0, SXLookFeelConst.sxcmd_btn_area_min_width)
 		# self.grid_layout.setColumnMinimumWidth(1, SXLookFeelConst.sxcmd_widget_area_min_width)
@@ -1814,7 +1816,7 @@
 			self.stacked_layout.addWidget(sxcmd.widget)
 
 			# connect widget signals
-			self.connect(sxcmd.btn, SIGNAL("clicked()"), partial(self.handle_sxcmd_btn_event, sxcmd))
+			sxcmd.btn.clicked.connect(partial(self.handle_sxcmd_btn_event, sxcmd))
 
 			self.grid_row += 1
 
@@ -1897,20 +1899,20 @@
 		self.setPalette(palette)
 
 		global_layout = QGridLayout()
-		global_layout.setMargin(SXLookFeelConst.grid_margin)
+		global_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		global_layout.setSpacing(SXLookFeelConst.grid_spacing)
 		global_layout.setRowStretch(global_row_span - 1, global_layout.rowStretch(global_row_origin) + 1)
 
 		header_layout = QGridLayout()
-		header_layout.setMargin(SXLookFeelConst.grid_margin)
+		header_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		header_layout.setSpacing(SXLookFeelConst.grid_spacing)
 
 		const_set_layout = QGridLayout()
-		const_set_layout.setMargin(SXLookFeelConst.grid_margin)
+		const_set_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		const_set_layout.setSpacing(SXLookFeelConst.grid_spacing)
 
 		btn_layout = QGridLayout()
-		btn_layout.setMargin(SXLookFeelConst.grid_margin)
+		btn_layout.setContentsMargins(SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin, SXLookFeelConst.grid_margin)
 		btn_layout.setSpacing(SXLookFeelConst.grid_spacing * 2)
 
 		global_grid_row = global_row_origin
@@ -1954,7 +1956,7 @@
 			sxconst_register_widget.setStyleSheet(custom_style)
 			const_set_layout.addWidget(sxconst_register_widget, const_set_grid_row, const_set_row_origin + const_label_col_span, const_register_widget_row_span, const_register_widget_col_span)
 			sxconst_register_widget.setToolTip('<FONT>'+"Retrieve this registered value to edit box"+'</FONT>')
-			self.connect(sxconst_register_widget, SIGNAL("clicked()"), partial(self.handle_regster_widget_event, sxconst))
+			sxconst_register_widget.clicked.connect(partial(self.handle_regster_widget_event, sxconst))
 
 			sxconst_widget = QLineEdit()
 			sxconst_widget.setMinimumWidth(const_widget_min_width)
@@ -1982,7 +1984,7 @@
 		self.execute_btn.setStyleSheet(custom_style)
 		self.execute_btn.setMinimumWidth(func_btn_min_width * register_btn_col_span)
 		self.execute_btn.setToolTip('<FONT>'+"Register project constant parameter settings to automatically set values to command arguments and options"+'</FONT>')
-		self.connect(self.execute_btn, SIGNAL("clicked()"), self.register_const_set)
+		self.execute_btn.clicked.connect(self.register_const_set)
 		btn_layout.addWidget(self.execute_btn, btn_grid_row, btn_col_origin, register_btn_row_span, register_btn_col_span)
 
 		btn_grid_row += 1
@@ -1991,14 +1993,14 @@
 		self.save_consts_btn = QPushButton("Save settings")
 		self.save_consts_btn.setMinimumWidth(func_btn_min_width)
 		self.save_consts_btn.setToolTip('<FONT>'+"Save project constant parameter settings"+'</FONT>')
-		self.connect(self.save_consts_btn, SIGNAL("clicked()"), self.save_consts)
+		self.save_consts_btn.clicked.connect(self.save_consts)
 		btn_layout.addWidget(self.save_consts_btn, btn_grid_row, btn_col_origin, func_btn_row_span, func_btn_col_span)
 
 		# Add load project constant parameter settings button
 		self.load_consts_btn = QPushButton("Load settings")
 		self.load_consts_btn.setMinimumWidth(func_btn_min_width)
 		self.load_consts_btn.setToolTip('<FONT>'+"Load project constant parameter settings to retrieve the previously-saved one"+'</FONT>')
-		self.connect(self.load_consts_btn, SIGNAL("clicked()"), self.load_consts)
+		self.load_consts_btn.clicked.connect(self.load_consts)
 		btn_layout.addWidget(self.load_consts_btn, btn_grid_row, btn_col_origin + func_btn_col_span, func_btn_row_span, func_btn_col_span)
 
 		btn_grid_row += 1
@@ -2100,12 +2102,12 @@
 		file_in.close()
 
 	def save_consts(self):
-		file_path_out = str(QFileDialog.getSaveFileName(self, "Save settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_out = str(QFileDialog.getSaveFileName(self, "Save settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_out != "":
 			self.write_consts(file_path_out)
 
 	def load_consts(self):
-		file_path_in = str(QFileDialog.getOpenFileName(self, "Load settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))
+		file_path_in = str(QFileDialog.getOpenFileName(self, "Load settings", SXLookFeelConst.file_dialog_dir, options = QFileDialog.DontUseNativeDialog))[0]
 		if file_path_in != "":
 			self.read_consts(file_path_in)
 
@@ -2264,10 +2266,10 @@
 		# --------------------------------------------------------------------------------
 		# Start widget
 		# --------------------------------------------------------------------------------
-		start_widget = QtGui.QWidget()
-		logo_container = QtGui.QWidget()
-		layout_start_widget = QtGui.QHBoxLayout()
-		layout_logo_container = QtGui.QVBoxLayout()
+		start_widget = QtWidgets.QWidget()
+		logo_container = QtWidgets.QWidget()
+		layout_start_widget = QtWidgets.QHBoxLayout()
+		layout_logo_container = QtWidgets.QVBoxLayout()
 		logo_container.setStyleSheet('border-image: url("{0}sxgui_pictograph_info.png")'.format(get_image_directory()))
 		logo_container.setFixedSize(100, 100)
 		layout_start_widget.setContentsMargins(0, 0, 0, 20)
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2spt_boxer22.py	2017-10-21 17:14:47.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2spt_boxer22.py	2017-10-21 17:41:36.000000000 -0500
@@ -37,6 +37,7 @@
 
 
 from EMAN2 import *
+from PyQt5.QtWidgets import *
 import numpy as np
 
 import weakref
@@ -592,7 +593,7 @@
 			return boxcoords
 
 	def menu_file_read_boxloc(self):
-		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0][0]
 
 		f=open(fsp,"r")
 		for b in f:
@@ -607,7 +608,7 @@
 	def menu_file_save_boxloc(self):
 		shrinkf=self.shrink 								#jesus
 
-		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
+		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0][0]
 
 		out=open(fsp,"w")
 		if self.helixboxer:
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2spt_boxer_old.py	2017-10-21 17:14:47.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2spt_boxer_old.py	2017-10-21 17:41:36.000000000 -0500
@@ -35,6 +35,7 @@
 
 
 import sys
+from PyQt5.QtWidgets import *
 import os
 import weakref
 import threading
@@ -1567,7 +1568,7 @@
 				return boxcoords
 
 		def menu_file_read_boxloc(self):
-			fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
+			fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0][0]
 
 			f=open(fsp,"r")
 			if options.helixboxer:
@@ -1589,7 +1590,7 @@
 		def menu_file_save_boxloc(self):
 			shrinkf=self.shrink 								#jesus
 
-			fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
+			fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0][0]
 
 			out=open(fsp,"w")
 			if options.helixboxer:
@@ -1601,7 +1602,7 @@
 			out.close()
 
 		def menu_file_save_boxes(self):
-			fsp=os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))[0]
+			fsp=os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))[0][0]
 			if ".hdf" not in fsp[-4:]:
 				fsp += '.hdf'
 			
@@ -1671,7 +1672,7 @@
 
 		def menu_file_save_boxes_stack(self):
 
-			fsp=os.path.join(options.path,os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))[0]
+			fsp=os.path.join(options.path,os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))[0][0]
 			#if fsp[:4].lower()!="bdb:" and fsp[-4:].lower()!=".hdf" :
 
 
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/examples/e2tomoseg.py	2017-10-21 17:14:49.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/examples/e2tomoseg.py	2017-10-21 17:41:38.000000000 -0500
@@ -32,6 +32,7 @@
 #
 
 from EMAN2 import *
+from PyQt5.QtWidgets import *
 from emapplication import EMApp
 from emdataitem3d import EMDataItem3D, EMIsosurface
 from emimage2d import EMImage2DWidget
@@ -47,6 +48,8 @@
 
 QStringList = list
 
+QStringList = list
+
 def main():
 	progname = os.path.basename(sys.argv[0])
 	usage = """prog [options] <image file> ...
@@ -454,7 +457,7 @@
 			return boxcoords
 
 	def menu_file_read_boxloc(self):
-		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0]
+		fsp=str(QtWidgets.QFileDialog.getOpenFileName(self, "Select output text file"))[0][0]
 
 		f=open(fsp,"r")
 		if options.helixboxer:
@@ -476,7 +479,7 @@
 	def menu_file_save_boxloc(self):
 		shrinkf=self.shrink 								#jesus
 
-		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0]
+		fsp=str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output text file"))[0][0]
 
 		out=open(fsp,"w")
 		if options.helixboxer:
@@ -488,7 +491,7 @@
 		out.close()
 
 	def menu_file_save_boxes(self):
-		fsp=os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))[0]
+		fsp=os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (numbers added)")))[0][0]
 
 		fspprjs=fsp.replace('.','_prjs.hdf')
 		prj=EMData() #Dummy
@@ -550,7 +553,7 @@
 
 	def menu_file_save_boxes_stack(self):
 
-		fsp=os.path.join(options.path,os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))[0]
+		fsp=os.path.join(options.path,os.path.basename(str(QtWidgets.QFileDialog.getSaveFileName(self, "Select output file (.hdf supported only)"))))[0][0]
 		#if fsp[:4].lower()!="bdb:" and fsp[-4:].lower()!=".hdf" :
 
 
@@ -2004,25 +2007,25 @@
 		"""
 		Open a session... (might want to add a warning dialog that this will close the current session)
 		"""
-		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Session', os.getcwd(), "*.eman")[0]
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Session', os.getcwd(), "*.eman")[0][0]
 		
 	def _on_save_session(self):
 		"""
 		Return a list of all the child items (actually a tree of sorts)
 		"""
-		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Session', os.getcwd(), "*.eman")[0]
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Session', os.getcwd(), "*.eman")[0][0]
 
 	def _on_save(self):
 		"""
 		Save a snapshot of the scene
 		"""
-		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.tiff *.jpeg *.png)")[0]
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Image', os.getcwd(), "(*.tiff *.jpeg *.png)")[0][0]
 
 	def _on_open_tomogram(self):
 		"""
 		Open a session
 		"""
-		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Tomogram', os.getcwd(), "*.hdf,*.mrc")[0]
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Tomogram', os.getcwd(), "*.hdf,*.mrc")[0][0]
 		#if filename:
 		#	self.scenegraph().loadSession(filename)
 		
@@ -2031,7 +2034,7 @@
 		Open a session
 		"""
 		# Open the file
-		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Segmentation', os.getcwd(), "*.hdf,*.xml")[0]
+		filename = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Segmentation', os.getcwd(), "*.hdf,*.xml")[0][0]
 		#if filename:
 		#	self.scenegraph().loadSession(filename)
 		
@@ -2039,7 +2042,7 @@
 		"""
 		Save a snapshot of the scene
 		"""
-		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Segmentation', os.getcwd(), "(*.hdf,*.xml)")[0]
+		filename = QtWidgets.QFileDialog.getSaveFileName(self, 'Save Segmentation', os.getcwd(), "(*.hdf,*.xml)")[0][0]
 		#if filename: # if we cancel
 		#	self.scenegraph().saveSnapShot(filename)
 		
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emapplication.py	2017-10-21 17:14:52.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5/libpyEM/qtgui/emapplication.py	2017-10-21 17:41:40.000000000 -0500
@@ -33,6 +33,7 @@
 #
 
 from PyQt5 import QtCore, QtGui, QtOpenGL, QtWebKitWidgets, QtWidgets
+from PyQt5.QtWidgets import *
 from PyQt5.QtCore import Qt
 import sys
 from emimageutil import EMParentWin
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/embrowser.py	2017-10-21 17:43:43.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2-qt5	2017-10-21 17:44:59.000000000 -0500
@@ -33,8 +33,8 @@
 
 from EMAN2 import *
 from EMAN2jsondb import js_open_dict
-from PyQt4 import QtCore, QtGui
-from PyQt4.QtCore import Qt, QString, QChar
+from PyQt5 import QtCore, QtGui, QtWidgets
+from PyQt5.QtCore import Qt
 from emapplication import EMApp
 from emimage2d import *
 from emimagemx import *
@@ -55,12 +55,25 @@
 
 
 #---------------------------------------------------------------------------
+try:
+    QString = unicode
+except NameError:
+    # Python 3
+    QString = str
+QStringList = list
+
+try:
+    QChar = unichr
+except NameError:
+    # Python 3
+    QChar = chr
+
 def display_error(msg) :
 	"""Displays an error message, in gui and on terminal."""
 
 	print(msg)
 	sys.stdout.flush()
-	QtGui.QMessageBox.warning(None, "Error", msg)
+	QtWidgets.QMessageBox.warning(None, "Error", msg)
 
 # This is a floating point number-finding regular expression
 
@@ -103,10 +116,10 @@
 def askFileExists() :
 	"""Opens a dialog and asks the user what to do if a file to be written to already exists"""
 
-	box = QtGui.QMessageBox(4, "File Exists", "File already exists. What would you like to do ?")	# 4 means we're asking a question
-	b1 = box.addButton("Append", QtGui.QMessageBox.AcceptRole)
-	b2 = box.addButton("Overwrite", QtGui.QMessageBox.AcceptRole)
-	b3 = box.addButton("Cancel", QtGui.QMessageBox.AcceptRole)
+	box = QtWidgets.QMessageBox(4, "File Exists", "File already exists. What would you like to do ?")	# 4 means we're asking a question
+	b1 = box.addButton("Append", QtWidgets.QMessageBox.AcceptRole)
+	b2 = box.addButton("Overwrite", QtWidgets.QMessageBox.AcceptRole)
+	b3 = box.addButton("Cancel", QtWidgets.QMessageBox.AcceptRole)
 
 	box.exec_()
 
@@ -188,7 +201,7 @@
 	def saveAs(self, brws) :
 		"""Save an image file/stack to a new file"""
 
-		outpath = QtGui.QInputDialog.getText(None, "Save Filename", "Filename to save to (type determined by extension)", 0, self.path)
+		outpath = QtWidgets.QInputDialog.getText(None, "Save Filename", "Filename to save to (type determined by extension)", 0, self.path)
 
 		if outpath[1] != True : return
 
@@ -361,7 +374,7 @@
 		except :
 			target = EMImageMXWidget()
 			target.set_data(self.path, self.path)
-			QtCore.QObject.connect(target, QtCore.SIGNAL("mx_image_double"), target.mouse_double_click)		# this makes class average viewing work in app mode
+			target.mx_image_double.connect(target.mouse_double_click)
 			# if self.getSetsDB() : target.set_single_active_set(self.getSetsDB())
 			brws.view2ds.append(target)
 
@@ -384,7 +397,7 @@
 
 		target = EMImageMXWidget()
 		target.set_data(self.path, self.path)
-		QtCore.QObject.connect(target, QtCore.SIGNAL("mx_image_double"), target.mouse_double_click)
+		target.mx_image_double.connect(target.mouse_double_click)
 		# if self.getSetsDB() : target.set_single_active_set(self.getSetsDB())
 		brws.view2ds.append(target)
 
@@ -1002,6 +1015,7 @@
 
 class EMImageFileType(EMFileType) :
 	"""FileType for files containing a single 2-D image"""
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self, path) :
 		if path[:2] == "./" : path = path[2:]
@@ -1024,7 +1038,7 @@
 
 		event.accept()
 		# self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 	@staticmethod
 	def name() :
@@ -1910,16 +1924,16 @@
 
 #---------------------------------------------------------------------------
 
-class myQItemSelection(QtGui.QItemSelectionModel) :
+class myQItemSelection(QtCore.QItemSelectionModel) :
 	"""For debugging"""
 
 	def select(self, tl, br) :
 		print(tl.indexes()[0].row(), tl.indexes()[0].column(), int(br))
-		QtGui.QItemSelectionModel.select(self, tl, QtGui.QItemSelectionModel.SelectionFlags(QtGui.QItemSelectionModel.ClearAndSelect+QtGui.QItemSelectionModel.Rows))
+		QtCore.QItemSelectionModel.select(self, tl, QtCore.QItemSelectionModel.SelectionFlags(QtCore.QItemSelectionModel.ClearAndSelect+QtCore.QItemSelectionModel.Rows))
 
 #---------------------------------------------------------------------------
 
-class EMInfoPane(QtGui.QWidget) :
+class EMInfoPane(QtWidgets.QWidget) :
 	"""Subclasses of this class will be used to display information about specific files. Each EMFileType class will return the
 	pointer to the appropriate infoPane subclass for displaying information about the file it represents. The subclass instances
 	are allocated by the infoWin class"""
@@ -1927,7 +1941,7 @@
 	def __init__(self, parent = None) :
 		"""Set our GUI up"""
 
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		# self.setTitle("e2dispaly.py Information Pane")
 
@@ -1935,8 +1949,8 @@
 
 		# Root class represents no target
 
-		self.hbl = QtGui.QHBoxLayout(self)
-		self.lbl = QtGui.QLabel("No Information Available")
+		self.hbl = QtWidgets.QHBoxLayout(self)
+		self.lbl = QtWidgets.QLabel("No Information Available")
 		self.hbl.addWidget(self.lbl)
 
 	def display(self, target) :
@@ -1957,13 +1971,13 @@
 
 class EMTextInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 		# text editing widget
 
-		self.text = QtGui.QTextEdit()
+		self.text = QtWidgets.QTextEdit()
 		self.text.setAcceptRichText(False)
 		self.text.setReadOnly(True)
 		self.vbl.addWidget(self.text)
@@ -1975,25 +1989,25 @@
 
 		# Buttons
 
-		self.hbl = QtGui.QHBoxLayout()
+		self.hbl = QtWidgets.QHBoxLayout()
 
-		self.wbutedit = QtGui.QPushButton("Edit")
+		self.wbutedit = QtWidgets.QPushButton("Edit")
 		self.hbl.addWidget(self.wbutedit)
 
-		self.wbutcancel = QtGui.QPushButton("Revert")
+		self.wbutcancel = QtWidgets.QPushButton("Revert")
 		self.wbutcancel.setEnabled(False)
 		self.hbl.addWidget(self.wbutcancel)
 
-		self.wbutok = QtGui.QPushButton("Save")
+		self.wbutok = QtWidgets.QPushButton("Save")
 		self.wbutok.setEnabled(False)
 		self.hbl.addWidget(self.wbutok)
 
 		self.vbl.addLayout(self.hbl)
 
-		QtCore.QObject.connect(self.wfind, QtCore.SIGNAL("valueChanged"), self.find)
-		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
-		QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-		QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+		self.wfind.valueChanged.connect(self.find)
+		self.wbutedit.clicked[bool].connect(self.buttonEdit)
+		self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+		self.wbutok.clicked[bool].connect(self.buttonOk)
 
 	def display(self, data) :
 		"""display information for the target EMDirEntry"""
@@ -2026,19 +2040,19 @@
 
 	def buttonOk(self, tog) :
 		try : open(self.target.path(), "w").write(str(self.text.toPlainText()))
-		except : QtGui.QMessageBox.warning(self, "Error !", "File write failed")
+		except : QtWidgets.QMessageBox.warning(self, "Error !", "File write failed")
 
 #---------------------------------------------------------------------------
 
 class EMHTMLInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 		# text editing widget
 
-		self.text = QtGui.QTextEdit()
+		self.text = QtWidgets.QTextEdit()
 		self.text.setAcceptRichText(True)
 		self.text.setReadOnly(True)
 		self.vbl.addWidget(self.text)
@@ -2050,25 +2064,25 @@
 
 		# Buttons
 
-		self.hbl = QtGui.QHBoxLayout()
+		self.hbl = QtWidgets.QHBoxLayout()
 
-		self.wbutedit = QtGui.QPushButton("Edit")
+		self.wbutedit = QtWidgets.QPushButton("Edit")
 		self.hbl.addWidget(self.wbutedit)
 
-		self.wbutcancel = QtGui.QPushButton("Revert")
+		self.wbutcancel = QtWidgets.QPushButton("Revert")
 		self.wbutcancel.setEnabled(False)
 		self.hbl.addWidget(self.wbutcancel)
 
-		self.wbutok = QtGui.QPushButton("Save")
+		self.wbutok = QtWidgets.QPushButton("Save")
 		self.wbutok.setEnabled(False)
 		self.hbl.addWidget(self.wbutok)
 
 		self.vbl.addLayout(self.hbl)
 
-		QtCore.QObject.connect(self.wfind, QtCore.SIGNAL("valueChanged"), self.find)
-		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
-		QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-		QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+		self.wfind.valueChanged.connect(self.find)
+		self.wbutedit.clicked[bool].connect(self.buttonEdit)
+		self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+		self.wbutok.clicked[bool].connect(self.buttonOk)
 
 	def display(self, data) :
 		"""display information for the target EMDirEntry"""
@@ -2099,16 +2113,16 @@
 
 	def buttonOk(self, tog) :
 		try : open(self.target.path(), "w").write(str(self.text.toHtml()))
-		except : QtGui.QMessageBox.warning(self, "Error !", "File write failed")
+		except : QtWidgets.QMessageBox.warning(self, "Error !", "File write failed")
 
 #---------------------------------------------------------------------------
 
 class EMPDBInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
-		self.vbl = QtGui.QVBoxLayout(self)
+		QtWidgets.QWidget.__init__(self, parent)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 		# text editing widget
-		self.text = QtGui.QTextEdit()
+		self.text = QtWidgets.QTextEdit()
 		self.text.setAcceptRichText(False)
 		self.text.setReadOnly(True)
 		self.vbl.addWidget(self.text)
@@ -2116,20 +2130,20 @@
 		self.wfind = StringBox(label = "Find:")
 		self.vbl.addWidget(self.wfind)
 		# Buttons
-		self.hbl = QtGui.QHBoxLayout()
-		self.wbutedit = QtGui.QPushButton("Edit")
+		self.hbl = QtWidgets.QHBoxLayout()
+		self.wbutedit = QtWidgets.QPushButton("Edit")
 		self.hbl.addWidget(self.wbutedit)
-		self.wbutcancel = QtGui.QPushButton("Revert")
+		self.wbutcancel = QtWidgets.QPushButton("Revert")
 		self.wbutcancel.setEnabled(False)
 		self.hbl.addWidget(self.wbutcancel)
-		self.wbutok = QtGui.QPushButton("Save")
+		self.wbutok = QtWidgets.QPushButton("Save")
 		self.wbutok.setEnabled(False)
 		self.hbl.addWidget(self.wbutok)
 		self.vbl.addLayout(self.hbl)
-		QtCore.QObject.connect(self.wfind, QtCore.SIGNAL("valueChanged"), self.find)
-		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
-		QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-		QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+		self.wfind.valueChanged.connect(self.find)
+		self.wbutedit.clicked[bool].connect(self.buttonEdit)
+		self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+		self.wbutok.clicked[bool].connect(self.buttonOk)
 
 	def display(self, data) :
 		"""display information for the target EMDirEntry"""
@@ -2158,19 +2172,19 @@
 
 	def buttonOk(self, tog) :
 		try : open(self.target.path(), "w").write(str(self.text.toPlainText()))
-		except : QtGui.QMessageBox.warning(self, "Error !", "File write failed")
+		except : QtWidgets.QMessageBox.warning(self, "Error !", "File write failed")
 
 #---------------------------------------------------------------------------
 
 class EMPlotInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# List as alternate mechanism for selecting image number(s)
 
-		self.plotdata = QtGui.QTableWidget()
+		self.plotdata = QtWidgets.QTableWidget()
 		self.gbl.addWidget(self.plotdata, 0, 0)
 
 	def display(self, target) :
@@ -2206,18 +2220,18 @@
 
 		for r in range(len(data)) :
 			for c in range(numc) :
-				self.plotdata.setItem(r, c, QtGui.QTableWidgetItem("%1.4g"%data[r][c]))
+				self.plotdata.setItem(r, c, QtWidgets.QTableWidgetItem("%1.4g"%data[r][c]))
 
 		if len(data) == 2500 :
-			self.plotdata.setVerticalHeaderItem(2500, QtGui.QTableWidgetItem("..."))
+			self.plotdata.setVerticalHeaderItem(2500, QtWidgets.QTableWidgetItem("..."))
 
 #---------------------------------------------------------------------------
 
 class EMFolderInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.vbl = QtGui.QVBoxLayout(self)
+		self.vbl = QtWidgets.QVBoxLayout(self)
 
 	def display(self, target) :
 		"""display information for the target EMDirEntry"""
@@ -2230,24 +2244,24 @@
 	maxim = 500
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# Spinbox for selecting image number
 
-		self.wimnum = QtGui.QSpinBox()
+		self.wimnum = QtWidgets.QSpinBox()
 		self.wimnum.setRange(0, 0)
 		self.gbl.addWidget(self.wimnum, 0, 0)
 
 		# List as alternate mechanism for selecting image number(s)
 
-		self.wimlist = QtGui.QListWidget()
+		self.wimlist = QtWidgets.QListWidget()
 		self.gbl.addWidget(self.wimlist, 1, 0)
 
 		# Actual header contents
 
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 		self.wheadtree.setColumnCount(2)
 		self.wheadtree.setHeaderLabels(["Item", "Value"])
 		self.gbl.addWidget(self.wheadtree, 0, 1, 2, 1)
@@ -2257,7 +2271,7 @@
 
 		# Lower region has buttons for actions
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -2270,24 +2284,24 @@
 			self.hbl2.setColumnStretch(i, 2)
 	
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
 		# These just clean up the layout a bit
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutxx, 0, 6)
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutyy, 1, 6)
 
 		self.gbl.addLayout(self.hbl2, 2, 0, 1, 2)
 
-		QtCore.QObject.connect(self.wimnum, QtCore.SIGNAL("valueChanged(int)"), self.imNumChange)
-		QtCore.QObject.connect(self.wimlist, QtCore.SIGNAL("itemSelectionChanged()"), self.imSelChange)
+		self.wimnum.valueChanged[int].connect(self.imNumChange)
+		self.wimlist.itemSelectionChanged.connect(self.imSelChange)
 ##		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
 
 		self.view2d = []
@@ -2311,7 +2325,7 @@
 		try :
 			val = int(val)
 		except :
-			QtGui.QMessageBox.warning(self, "Error", "Sorry, cannot display string-keyed images")
+			QtWidgets.QMessageBox.warning(self, "Error", "Sorry, cannot display string-keyed images")
 			return
 
 		self.curft.setN(val)
@@ -2405,19 +2419,19 @@
 
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
-				itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 				if isinstance(trg[k], list) or isinstance(trg[k], tuple) or isinstance(trg[k], set) or isinstance(trg[k], dict) :
 					self.addTreeItem(trg[k], itms[-1])
 		elif isinstance(trg, list) or isinstance(trg, tuple) or isinstance(trg, set) :
 			for k in trg :
 				if isinstance(k, list) or isinstance(k, tuple) or isinstance(k, set) or isinstance(k, dict) :
-					try : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((k.__class__.__name__, ""))))
-					except : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("??", ""))))
+					try : itms.append(QtWidgets.QTreeWidgetItem(QStringList((k.__class__.__name__, ""))))
+					except : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("??", ""))))
 					self.addTreeItem(k, itms[-1])
 				else :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2428,18 +2442,18 @@
 
 class EMJSONInfoPane(EMInfoPane) :
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# List of keys
 
-		self.wkeylist = QtGui.QListWidget()
+		self.wkeylist = QtWidgets.QListWidget()
 		self.gbl.addWidget(self.wkeylist, 1, 0)
 
 		# contents of a single key
 
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 		self.wheadtree.setColumnCount(2)
 		self.wheadtree.setHeaderLabels(["Key/#", "Value"])
 		self.gbl.addWidget(self.wheadtree, 0, 1, 2, 1)
@@ -2449,7 +2463,7 @@
 
 		# Lower region has buttons for actions
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -2462,27 +2476,27 @@
 			self.hbl2.setColumnStretch(i, 2)
 
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
 		# These just clean up the layout a bit
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutxx, 0, 6)
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutyy, 1, 6)
 
 		self.gbl.addLayout(self.hbl2, 2, 0, 1, 2)
 
-		QtCore.QObject.connect(self.wkeylist, QtCore.SIGNAL("itemSelectionChanged()"), self.imSelChange)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemExpanded(QTreeWidgetItem*)"), self.treeExp)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemCollapsed(QTreeWidgetItem*)"), self.treeExp)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemSelectionChanged()"), self.treeSel)
-		QtCore.QObject.connect(self.wheadtree, QtCore.SIGNAL("itemActivated(QTreeWidgetItem*, int)"), self.treeAct)
+		self.wkeylist.itemSelectionChanged.connect(self.imSelChange)
+		self.wheadtree.itemExpanded[QTreeWidgetItem].connect(self.treeExp)
+		self.wheadtree.itemCollapsed[QTreeWidgetItem].connect(self.treeExp)
+		self.wheadtree.itemSelectionChanged.connect(self.treeSel)
+		self.wheadtree.itemActivated[QTreeWidgetItem, int].connect(self.treeAct)
 ##		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
 		self.view2d = []
 		self.view3d = []
@@ -2571,34 +2585,34 @@
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
 				if isinstance(trg[k], (list, tuple, set, dict, EMAN2Ctf)) :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 					self.addTreeItem(trg[k], itms[-1])
-				else : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				else : itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 		elif isinstance(trg, (list, tuple, set)) :
 			if isinstance(trg, set) : trg = sorted(trg)		# make a list temporarily
 			if len(trg) > 120 : vals = list(range(0, 50))+[-1]+list(range(len(trg)-50, len(trg)))
 			else : vals = range(len(trg))
 			for k in vals :
-				if k == -1 : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("...", "..."))))
+				if k == -1 : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("...", "..."))))
 				else :
 					v = trg[k]
 					if isinstance(v, (list, tuple, set, dict, EMAN2Ctf)) :
-						itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+						itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 						self.addTreeItem(v, itms[-1])
-					else : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(v)))))
+					else : itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(v)))))
 		elif isinstance(trg, EMAN2Ctf) :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("EMAN2Ctf", ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList(("EMAN2Ctf", ""))))
 			subitms = []
 			for k, v in trg.to_dict().items() :
 				if isinstance(v, (list, tuple)) :
 					v = ["%1.3g"%i for i in v]
-					subitms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ", ".join(v)))))
-				else : subitms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(v)))))
+					subitms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ", ".join(v)))))
+				else : subitms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(v)))))
 			itms[-1].addChildren(subitms)
 		elif isinstance(trg, EMData) :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("EMData", ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList(("EMData", ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2611,13 +2625,13 @@
 	maxim = 500
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# Actual header contents
 
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 		self.wheadtree.setColumnCount(2)
 		self.wheadtree.setHeaderLabels(["Item", "Value"])
 		self.gbl.addWidget(self.wheadtree, 0, 0)
@@ -2652,19 +2666,19 @@
 
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
-				itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 				if isinstance(trg[k], list) or isinstance(trg[k], tuple) or isinstance(trg[k], set) or isinstance(trg[k], dict) :
 					self.addTreeItem(trg[k], itms[-1])
 		elif isinstance(trg, list) or isinstance(trg, tuple) or isinstance(trg, set) :
 			for k in trg :
 				if isinstance(k, list) or isinstance(k, tuple) or isinstance(k, set) or isinstance(k, dict) :
-					try : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((k.__class__.__name__, ""))))
-					except : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("??", ""))))
+					try : itms.append(QtWidgets.QTreeWidgetItem(QStringList((k.__class__.__name__, ""))))
+					except : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("??", ""))))
 					self.addTreeItem(k, itms[-1])
 				else :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2674,25 +2688,26 @@
 #---------------------------------------------------------------------------
 
 class EMStackInfoPane(EMInfoPane) :
+	module_closed = QtCore.pyqtSignal()
 	maxim = 500
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		# self.setWindowTitle("e2display.py Information Pane") # Jesus
 		# self.setTitle("e2dispaly.py Information Pane")
 
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
-		self.gbl.label1 = QtGui.QLabel("Images") # Jesus
+		self.gbl.label1 = QtWidgets.QLabel("Images") # Jesus
 		self.gbl.addWidget(self.gbl.label1, 0, 0) # Jesus
 
-		self.gbl.label2 = QtGui.QLabel("Header Info") # Jesus
+		self.gbl.label2 = QtWidgets.QLabel("Header Info") # Jesus
 		self.gbl.addWidget(self.gbl.label2, 0, 1) # Jesus
 
 		'''Spinbox for selecting image number'''
 
-		self.wimnum = QtGui.QSpinBox()
+		self.wimnum = QtWidgets.QSpinBox()
 
 		# self.wimnum.setRange(0, 0) # JOHN
 		# self.gbl.addWidget(self.wimnum, 0, 0) # JOHN
@@ -2702,14 +2717,14 @@
 
 		'''List as alternate mechanism for selecting image number(s)'''
 
-		self.wimlist = QtGui.QListWidget()
+		self.wimlist = QtWidgets.QListWidget()
 
 		# self.gbl.addWidget(self.wimlist, 1, 0) # JOHN
 
 		self.gbl.addWidget(self.wimlist, 2, 0) # Jesus
 
 		'''Actual header contents'''
-		self.wheadtree = QtGui.QTreeWidget()
+		self.wheadtree = QtWidgets.QTreeWidget()
 
 		# self.wheadtree.setColumnCount(2) #
 		self.wheadtree.setHeaderLabels(["Item", "Value"])
@@ -2721,7 +2736,7 @@
 
 		'''Lower region has buttons for actions'''
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -2737,19 +2752,19 @@
 			self.hbl2.setColumnStretch(i, 2)
 	
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
 		# These just clean up the layout a bit
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		# self.hbl2.addWidget(self.wbutxx, 0, 6) # JOHN
 		self.hbl2.addWidget(self.wbutxx, 1, 6) # Jesus
 
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 
 		# self.hbl2.addWidget(self.wbutyy, 1, 6) # JOHN
@@ -2758,8 +2773,8 @@
 		# self.gbl.addLayout(self.hbl2, 2, 0, 1, 2) # JOHN
 		self.gbl.addLayout(self.hbl2, 3, 0, 1, 2) # Jesus
 
-		QtCore.QObject.connect(self.wimnum, QtCore.SIGNAL("valueChanged(int)"), self.imNumChange)
-		QtCore.QObject.connect(self.wimlist, QtCore.SIGNAL("itemSelectionChanged()"), self.imSelChange)
+		self.wimnum.valueChanged[int].connect(self.imNumChange)
+		self.wimlist.itemSelectionChanged.connect(self.imSelChange)
 #		QtCore.QObject.connect(self.wbutedit, QtCore.SIGNAL('clicked(bool)'), self.buttonEdit)
 		self.view2d = []
 		self.view3d = []
@@ -2781,7 +2796,7 @@
 		event.accept()
 
 		# self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 	def hideEvent(self, event) :
 		"""If this pane is no longer visible close any child views"""
@@ -2877,19 +2892,19 @@
 
 		if isinstance(trg, dict) :
 			for k in sorted(trg.keys()) :
-				itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), str(trg[k])))))
+				itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), str(trg[k])))))
 				if isinstance(trg[k], list) or isinstance(trg[k], tuple) or isinstance(trg[k], set) or isinstance(trg[k], dict) :
 					self.addTreeItem(trg[k], itms[-1])
 		elif isinstance(trg, list) or isinstance(trg, tuple) or isinstance(trg, set) :
 			for k in trg :
 				if isinstance(k, list) or isinstance(k, tuple) or isinstance(k, set) or isinstance(k, dict) :
-					try : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((k.__class__.__name__, ""))))
-					except : itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList(("??", ""))))
+					try : itms.append(QtWidgets.QTreeWidgetItem(QStringList((k.__class__.__name__, ""))))
+					except : itms.append(QtWidgets.QTreeWidgetItem(QStringList(("??", ""))))
 					self.addTreeItem(k, itms[-1])
 				else :
-					itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(k), ""))))
+					itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(k), ""))))
 		else :
-			itms.append(QtGui.QTreeWidgetItem(QtCore.QStringList((str(trg), ""))))
+			itms.append(QtWidgets.QTreeWidgetItem(QStringList((str(trg), ""))))
 
 		if parent == None :
 			self.wheadtree.addTopLevelItems(itms)
@@ -2898,14 +2913,14 @@
 
 #---------------------------------------------------------------------------
 
-class EMInfoWin(QtGui.QWidget) :
+class EMInfoWin(QtWidgets.QWidget) :
 	"""The info window"""
 
 	def __init__(self, parent = None) :
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		self.target = None
-		self.stack = QtGui.QStackedLayout(self)
+		self.stack = QtWidgets.QStackedLayout(self)
 
 		# We add one instance of 'infoPane' parent class to represent nothing
 
@@ -2933,23 +2948,24 @@
 			# If we got here, then we need to make a new instance of the appropriate pane
 
 			if cls == None : print("No class ! (%s)"%str(ftype))
+			winclosed = QtCore.pyqtSignal()
 			pane = cls()
 			i = self.stack.addWidget(pane)		# add the new pane and get its index
 			pane.display(target)
 			self.stack.setCurrentIndex(i)		# put the new pane on top
 
 	def closeEvent(self, event) :
-		QtGui.QWidget.closeEvent(self, event)
-		self.emit(QtCore.SIGNAL("winclosed()"))
+		QtWidgets.QWidget.closeEvent(self, event)
+		self.winclosed.emit()
 
-class SortSelTree(QtGui.QTreeView) :
+class SortSelTree(QtWidgets.QTreeView) :
 	"""This is a subclass of QtGui.QTreeView. It is almost identical but implements selection processing with sorting.
 	The correct way of doing this in QT4.2 is to use a QSortFilterProxy object, but that won't work properly in this case."""
 
 	def __init__(self, parent = None) :
-		QtGui.QTreeView.__init__(self, parent)
+		QtWidgets.QTreeView.__init__(self, parent)
 		self.header().setClickable(True)
-		self.connect(self.header(), QtCore.SIGNAL("sectionClicked(int)"), self.colclick)
+		self.header().sectionClicked[int].connect(self.colclick)
 		self.scol = -1
 		self.sdir = 1
 
@@ -2985,28 +3001,31 @@
 
 		# then do the actual sort
 
-		QtGui.QTreeView.sortByColumn(self, col, ascend)
+		QtWidgets.QTreeView.sortByColumn(self, col, ascend)
 
 		# then set a new selection list
 
 		sel = self.model().findSelected()
 		if len(sel) == 0 :return
 
-		qis = QtGui.QItemSelection()
+		qis = QtCore.QItemSelection()
 		for i in sel : qis.select(i, i)
-		self.selectionModel().select(qis, QtGui.QItemSelectionModel.ClearAndSelect|QtGui.QItemSelectionModel.Rows)
+		self.selectionModel().select(qis, QtCore.QItemSelectionModel.ClearAndSelect|QtCore.QItemSelectionModel.Rows)
 
 #		for i in sel : self.selectionModel().select(i, QtGui.QItemSelectionModel.ClearAndSelect)
 #		self.update()
 
 #---------------------------------------------------------------------------
 
-class EMBrowserWidget(QtGui.QWidget) :
+class EMBrowserWidget(QtWidgets.QWidget) :
 	"""This widget is a file browser for EMAN2. In addition to being a regular file browser, it supports:
 	- getting information about recognized data types
 	- embedding BDB: databases into the observed filesystem
 	- remote database access (EMEN2)*
 	"""
+	ok = QtCore.pyqtSignal()
+	cancel = QtCore.pyqtSignal()
+	module_closed = QtCore.pyqtSignal()
 
 	def __init__(self, parent = None, withmodal = False, multiselect = False, startpath = ".", setsmode = None) :
 		"""withmodal - if specified will have ok/cancel buttons, and provide a mechanism for a return value (not truly modal)
@@ -3022,7 +3041,7 @@
 		import emscene3d
 		import emdataitem3d
 
-		QtGui.QWidget.__init__(self, parent)
+		QtWidgets.QWidget.__init__(self, parent)
 
 		self.setWindowTitle("e2display.py Browser") # Jesus
 
@@ -3034,35 +3053,35 @@
 		self.multiselect = multiselect
 
 		self.resize(780, 580)
-		self.gbl = QtGui.QGridLayout(self)
+		self.gbl = QtWidgets.QGridLayout(self)
 
 		# Top Toolbar area
 
-		self.wtoolhbl = QtGui.QHBoxLayout()
+		self.wtoolhbl = QtWidgets.QHBoxLayout()
 		self.wtoolhbl.setContentsMargins(0, 0, 0, 0)
 
-		self.wbutback = QtGui.QPushButton(QString(QChar(0x2190)))
+		self.wbutback = QtWidgets.QPushButton(QString(QChar(0x2190)))
 		self.wbutback.setMaximumWidth(36)
 		self.wbutback.setEnabled(False)
 		self.wtoolhbl.addWidget(self.wbutback, 0)
 
-		self.wbutfwd = QtGui.QPushButton(QString(QChar(0x2192)))
+		self.wbutfwd = QtWidgets.QPushButton(QString(QChar(0x2192)))
 		self.wbutfwd.setMaximumWidth(36)
 		self.wbutfwd.setEnabled(False)
 		self.wtoolhbl.addWidget(self.wbutfwd, 0)
 
 		# Text line for showing (or editing) full path
 
-		self.lpath = QtGui.QLabel("  Path:")
+		self.lpath = QtWidgets.QLabel("  Path:")
 		self.wtoolhbl.addWidget(self.lpath)
 
-		self.wpath = QtGui.QLineEdit()
+		self.wpath = QtWidgets.QLineEdit()
 		self.wtoolhbl.addWidget(self.wpath, 5)
 
 		# self.wspacet1 = QtGui.QSpacerItem(100, 10, QtGui.QSizePolicy.MinimumExpanding)
 		# self.wtoolhbl.addSpacerItem(self.wspacet1)
 
-		self.wbutinfo = QtGui.QPushButton("Info")
+		self.wbutinfo = QtWidgets.QPushButton("Info")
 		self.wbutinfo.setCheckable(True)
 		self.wtoolhbl.addWidget(self.wbutinfo, 1)
 
@@ -3070,25 +3089,25 @@
 
 		# 2nd Top Toolbar area
 
-		self.wtoolhbl2 = QtGui.QHBoxLayout()
+		self.wtoolhbl2 = QtWidgets.QHBoxLayout()
 		self.wtoolhbl2.setContentsMargins(0, 0, 0, 0)
 
-		self.wbutup = QtGui.QPushButton(QString(QChar(0x2191)))
+		self.wbutup = QtWidgets.QPushButton(QString(QChar(0x2191)))
 		self.wbutup.setMaximumWidth(36)
 		self.wtoolhbl2.addWidget(self.wbutup, 0)
 
-		self.wbutrefresh = QtGui.QPushButton(QString(QChar(0x21ba)))
+		self.wbutrefresh = QtWidgets.QPushButton(QString(QChar(0x21ba)))
 		self.wbutrefresh.setMaximumWidth(36)
 		self.wtoolhbl2.addWidget(self.wbutrefresh, 0)
 
 		# Text line for showing (or editing) full path
 
-		self.lfilter = QtGui.QLabel("Filter:")
+		self.lfilter = QtWidgets.QLabel("Filter:")
 		self.wtoolhbl2.addWidget(self.lfilter)
 
-		self.wfilter = QtGui.QComboBox()
+		self.wfilter = QtWidgets.QComboBox()
 		self.wfilter.setEditable(True)
-		self.wfilter.setInsertPolicy(QtGui.QComboBox.InsertAtBottom)
+		self.wfilter.setInsertPolicy(QtWidgets.QComboBox.InsertAtBottom)
 		self.wfilter.addItem("")
 		self.wfilter.addItem("(.(?!_ctf))*$")
 		self.wfilter.addItem(".*\.img")
@@ -3104,7 +3123,7 @@
 		# self.wspacet1 = QtGui.QSpacerItem(100, 10, QtGui.QSizePolicy.MinimumExpanding)
 		# self.wtoolhbl.addSpacerItem(self.wspacet1)
 
-		self.selectall = QtGui.QPushButton("Sel All")
+		self.selectall = QtWidgets.QPushButton("Sel All")
 		self.wtoolhbl2.addWidget(self.selectall, 1)
 		self.selectall.setEnabled(withmodal)
 
@@ -3113,11 +3132,11 @@
 		### Central verticalregion has bookmarks and tree
 		# Bookmarks implemented with a toolbar in a frame
 
-		self.wbookmarkfr = QtGui.QFrame()
-		self.wbookmarkfr.setFrameStyle(QtGui.QFrame.StyledPanel|QtGui.QFrame.Raised)
-		self.wbmfrbl = QtGui.QVBoxLayout(self.wbookmarkfr)
+		self.wbookmarkfr = QtWidgets.QFrame()
+		self.wbookmarkfr.setFrameStyle(QtWidgets.QFrame.StyledPanel|QtWidgets.QFrame.Raised)
+		self.wbmfrbl = QtWidgets.QVBoxLayout(self.wbookmarkfr)
 
-		self.wbookmarks = QtGui.QToolBar()
+		self.wbookmarks = QtWidgets.QToolBar()
 		# self.wbookmarks.setAutoFillBackground(True)
 		# self.wbookmarks.setBackgroundRole(QtGui.QPalette.Dark)
 		self.wbookmarks.setOrientation(2)
@@ -3146,7 +3165,7 @@
 
 		# Lower region has buttons for actions
 
-		self.hbl2 = QtGui.QGridLayout()
+		self.hbl2 = QtWidgets.QGridLayout()
 
 		self.wbutmisc = []
 
@@ -3159,16 +3178,16 @@
 			self.hbl2.setColumnStretch(i, 2)
 	
 			for j in range(2) :
-				self.wbutmisc.append(QtGui.QPushButton(""))
+				self.wbutmisc.append(QtWidgets.QPushButton(""))
 				self.hbl2.addWidget(self.wbutmisc[-1], j, i)
 				self.wbutmisc[-1].hide()
 #				self.wbutmisc[-1].setEnabled(False)
-				QtCore.QObject.connect(self.wbutmisc[-1], QtCore.SIGNAL('clicked(bool)'), lambda x, v = i*2+j :self.buttonMisc(v))
+				self.wbutmisc[-1].clicked[bool].connect(lambda x, v = i*2+j :self.buttonMisc(v))
 
-		self.wbutxx = QtGui.QLabel("")
+		self.wbutxx = QtWidgets.QLabel("")
 		self.wbutxx.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutxx, 0, 6)
-		self.wbutyy = QtGui.QLabel("")
+		self.wbutyy = QtWidgets.QLabel("")
 		self.wbutyy.setMaximumHeight(12)
 		self.hbl2.addWidget(self.wbutyy, 1, 6)
 
@@ -3178,34 +3197,34 @@
 #			self.wspace1 = QtGui.QSpacerItem(100, 10, QtGui.QSizePolicy.MinimumExpanding)
 #			self.hbl2.addSpacerItem(self.wspace1)
 
-			self.wbutcancel = QtGui.QPushButton("Cancel")
+			self.wbutcancel = QtWidgets.QPushButton("Cancel")
 			self.hbl2.addWidget(self.wbutcancel, 1, 7)
 
-			self.wbutok = QtGui.QPushButton("OK")
+			self.wbutok = QtWidgets.QPushButton("OK")
 			self.hbl2.addWidget(self.wbutok, 1, 8)
 
 			self.hbl2.setColumnStretch(6, 1)
 			self.hbl2.setColumnStretch(7, 1)
 			self.hbl2.setColumnStretch(8, 1)
 
-			QtCore.QObject.connect(self.wbutcancel, QtCore.SIGNAL('clicked(bool)'), self.buttonCancel)
-			QtCore.QObject.connect(self.wbutok, QtCore.SIGNAL('clicked(bool)'), self.buttonOk)
+			self.wbutcancel.clicked[bool].connect(self.buttonCancel)
+			self.wbutok.clicked[bool].connect(self.buttonOk)
 
 		self.gbl.addLayout(self.hbl2, 4, 1)
 
-		QtCore.QObject.connect(self.wbutback, QtCore.SIGNAL('clicked(bool)'), self.buttonBack)
-		QtCore.QObject.connect(self.wbutfwd, QtCore.SIGNAL('clicked(bool)'), self.buttonFwd)
-		QtCore.QObject.connect(self.wbutup, QtCore.SIGNAL('clicked(bool)'), self.buttonUp)
-		QtCore.QObject.connect(self.wbutrefresh, QtCore.SIGNAL('clicked(bool)'), self.buttonRefresh)
-		QtCore.QObject.connect(self.wbutinfo, QtCore.SIGNAL('clicked(bool)'), self.buttonInfo)
-		QtCore.QObject.connect(self.selectall, QtCore.SIGNAL('clicked(bool)'), self.selectAll)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('clicked(const QModelIndex)'), self.itemSel)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('activated(const QModelIndex)'), self.itemActivate)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('doubleClicked(const QModelIndex)'), self.itemDoubleClick)
-		QtCore.QObject.connect(self.wtree, QtCore.SIGNAL('expanded(const QModelIndex)'), self.itemExpand)
-		QtCore.QObject.connect(self.wpath, QtCore.SIGNAL('returnPressed()'), self.editPath)
-		QtCore.QObject.connect(self.wbookmarks, QtCore.SIGNAL('actionTriggered(QAction*)'), self.bookmarkPress)
-		QtCore.QObject.connect(self.wfilter, QtCore.SIGNAL('currentIndexChanged(int)'), self.editFilter)
+		self.wbutback.clicked[bool].connect(self.buttonBack)
+		self.wbutfwd.clicked[bool].connect(self.buttonFwd)
+		self.wbutup.clicked[bool].connect(self.buttonUp)
+		self.wbutrefresh.clicked[bool].connect(self.buttonRefresh)
+		self.wbutinfo.clicked[bool].connect(self.buttonInfo)
+		self.selectall.clicked[bool].connect(self.selectAll)
+		self.wtree.clicked[QModelIndex].connect(self.itemSel)
+		self.wtree.activated[QModelIndex].connect(self.itemActivate)
+		self.wtree.doubleClicked[QModelIndex].connect(self.itemDoubleClick)
+		self.wtree.expanded[QModelIndex].connect(self.itemExpand)
+		self.wpath.returnPressed.connect(self.editPath)
+		self.wbookmarks.actionTriggered[QAction].connect(self.bookmarkPress)
+		self.wfilter.currentIndexChanged[int].connect(self.editFilter)
 
 		self.setsmode = setsmode	# The sets mode is used when selecting bad particles
 		self.curmodel = None	# The current data model displayed in the tree
@@ -3229,7 +3248,7 @@
 		# These items are used to do gradually filling in of file details for better interactivity
 
 		self.updtimer = QTimer()		# This causes the actual display updates, which can't be done from a python thread
-		QtCore.QObject.connect(self.updtimer, QtCore.SIGNAL('timeout()'), self.updateDetailsDisplay)
+		self.updtimer.timeout.connect(self.updateDetailsDisplay)
 		self.updthreadexit = False		# when set, this triggers the update thread to exit
 		self.updthread = threading.Thread(target = self.updateDetails)	# The actual thread
 		self.updlist = []				# List of QModelIndex items in need of updating
@@ -3248,12 +3267,12 @@
 	def busy(self) :
 		"""display a busy cursor"""
 
-		QtGui.qApp.setOverrideCursor(Qt.BusyCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.BusyCursor)
 
 	def notbusy(self) :
 		"""normal arrow cursor"""
 
-		QtGui.qApp.setOverrideCursor(Qt.ArrowCursor)
+		QtWidgets.QApplication.setOverrideCursor(Qt.ArrowCursor)
 
 	def updateDetails(self) :
 		"""This is spawned as a thread to gradually fill in file details in the background"""
@@ -3433,14 +3452,14 @@
 		qism = self.wtree.selectionModel().selectedRows()
 		self.result = [i.internalPointer().path().replace(os.getcwd(), ".") for i in qism]
 		self.updtimer.stop()
-		self.emit(QtCore.SIGNAL("ok")) # this signal is important when e2ctf is being used by a program running its own eve
+		self.ok.emit()
 
 	def buttonCancel(self, tog) :
 		"""When the Cancel button is pressed, a signal is emitted, but getResult should not be called."""
 
 		self.result = []
 		self.updtimer.stop()
-		self.emit(QtCore.SIGNAL("cancel")) # this signal is important when e2ctf is being used by a program running its own eve
+		self.cancel.emit()
 		self.close()
 
 	def selectAll(self) :
@@ -3501,7 +3520,7 @@
 			if len(qism) == 1 :
 				self.infowin.set_target(qism[0].internalPointer(), self.curft)
 			else : self.infowin.set_target(None, None)
-			QtCore.QObject.connect(self.infowin, QtCore.SIGNAL('winclosed()'), self.infowinClosed)
+			self.infowin.winclosed.connect(self.infowinClosed)
 		else :
 			if self.infowin != None :
 				self.infowin.hide()
@@ -3600,7 +3619,7 @@
 			"3. *.txt *.tiff  - find all text files or tiff files\n" + \
 			"4. *             - find all files"
 
-			QtGui.QMessageBox.warning(None, "Info", hlp)
+			QtWidgets.QMessageBox.warning(None, "Info", hlp)
 		else :
 			try :
 				flt = re.compile(filt)
@@ -3672,7 +3691,7 @@
 		event.accept()
 		self.updtimer.stop()
 		# self.app().close_specific(self)
-		self.emit(QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 # This is just for testing, of course
 
@@ -3684,8 +3703,8 @@
 if __name__ == '__main__' :
 	em_app = EMApp()
 	window = EMBrowserWidget(withmodal = True, multiselect = True)
-	QtCore.QObject.connect(window, QtCore.SIGNAL("ok"), test_result)
-	QtCore.QObject.connect(window, QtCore.SIGNAL("cancel"), test_result)
+	window.ok.connect(test_result)
+	window.cancel.connect(test_result)
 
 	window.show()
 	ret = em_app.exec_()
--- /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emboxerbase.py	2017-10-21 18:33:45.000000000 -0500
+++ /Volumes/Mac HD/data/Files/eclipse_workspace/workspace_work/eman2/libpyEM/qtgui/emboxerbase_PyQt5.py	2017-10-21 18:33:47.000000000 -0500
@@ -176,9 +176,9 @@
 		'''
 		connects the signals of the main 2D window to the slots of this object
 		'''
-		from PyQt4 import QtCore
-		QtCore.QObject.connect(self.thumbs_window(),QtCore.SIGNAL("mx_mouseup"),self.thumb_image_selected)
-		QtCore.QObject.connect(self.thumbs_window(),QtCore.SIGNAL("module_closed"),self.module_closed)
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
+		self.thumbs_window().mx_mouseup.connect(self.thumb_image_selected)
+		self.thumbs_window().module_closed.connect(self.module_closed)
 
 	def thumb_image_selected(self,event,lc):
 		if lc == None: return
@@ -572,15 +572,15 @@
 
 	def get_widget(self):
 		if self.widget == None:
-			from PyQt4 import QtCore, QtGui, Qt
-			self.widget = QtGui.QWidget()
-			vbl = QtGui.QVBoxLayout(self.widget)
-			vbl.setMargin(0)
+			from PyQt5 import Qt, QtCore, QtGui, QtWebKitWidgets, QtWidgets
+			self.widget = QtWidgets.QWidget()
+			vbl = QtWidgets.QVBoxLayout(self.widget)
+			vbl.setContentsMargins(0, 0, 0, 0)
 			vbl.setSpacing(6)
 			vbl.setObjectName("vbl")
 
-			hbl = QtGui.QHBoxLayout()
-			hbl.addWidget(QtGui.QLabel("Erase Radius:"))
+			hbl = QtWidgets.QHBoxLayout()
+			hbl.addWidget(QtWidgets.QLabel("Erase Radius:"))
 			from valslider import ValSlider
 			self.erase_rad_edit = ValSlider(None,(0.0,1000.0),"")
 			self.erase_rad_edit.setValue(int(self.erase_radius))
@@ -588,13 +588,13 @@
 			hbl.addWidget(self.erase_rad_edit)
 
 
-			self.unerase = QtGui.QCheckBox("Unerase")
+			self.unerase = QtWidgets.QCheckBox("Unerase")
 			self.unerase.setChecked(False)
 
 			vbl.addLayout(hbl)
 			vbl.addWidget(self.unerase)
-			QtCore.QObject.connect(self.erase_rad_edit,QtCore.SIGNAL("sliderReleased"),self.new_erase_radius)
-			QtCore.QObject.connect(self.unerase,QtCore.SIGNAL("clicked(bool)"),self.unerase_checked)
+			self.erase_rad_edit.sliderReleased.connect(self.new_erase_radius)
+			self.unerase.clicked[bool].connect(self.unerase_checked)
 
 		return self.widget
 
@@ -613,22 +613,22 @@
 
 	def get_widget(self):
 		if self.widget == None:
-			from PyQt4 import QtCore, QtGui, Qt
-			self.widget = QtGui.QWidget()
-			vbl = QtGui.QGridLayout(self.widget)
-			vbl.setMargin(0)
+			from PyQt5 import Qt, QtCore, QtGui, QtWebKitWidgets, QtWidgets
+			self.widget = QtWidgets.QWidget()
+			vbl = QtWidgets.QGridLayout(self.widget)
+			vbl.setContentsMargins(0, 0, 0, 0)
 			vbl.setSpacing(10)
 			vbl.setObjectName("vbl")
-			self.auto_center_checkbox = QtGui.QCheckBox("Auto-center")
-			self.clear=QtGui.QPushButton("Clear")
-			self.clearfrom = QtGui.QLineEdit(str(-1))
+			self.auto_center_checkbox = QtWidgets.QCheckBox("Auto-center")
+			self.clear=QtWidgets.QPushButton("Clear")
+			self.clearfrom = QtWidgets.QLineEdit(str(-1))
 			vbl.addWidget(self.auto_center_checkbox,1,0)
 			vbl.addWidget(self.clear,2,0)
-			vbl.addWidget(QtGui.QLabel("Keep range #:"),3,0)
+			vbl.addWidget(QtWidgets.QLabel("Keep range #:"),3,0)
 			vbl.addWidget(self.clearfrom,3,1)
 			
 
-			QtCore.QObject.connect(self.clear, QtCore.SIGNAL("clicked(bool)"), self.clear_clicked)
+			self.clear.clicked[bool].connect(self.clear_clicked)
 		return self.widget
 
 	def clear_clicked(self,val):
@@ -656,7 +656,7 @@
 	def unique_name(self): return "Erase"
 
 	def icon(self):
-		from PyQt4 import QtGui
+		from PyQt5 import QtGui, QtWebKitWidgets, QtWidgets
 		return QtGui.QIcon(get_image_directory() + "boxer_erase.png")
 
 	def get_widget(self):
@@ -694,7 +694,7 @@
 		self.panel_object.set_erase_radius(v)
 
 	def mouse_wheel(self,event):
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if event.modifiers()&Qt.ShiftModifier:
 			from emshape import EMShape
 			self.adjust_erase_rad(event.delta())
@@ -763,7 +763,7 @@
 
 
 	def icon(self):
-		from PyQt4 import QtGui
+		from PyQt5 import QtGui, QtWebKitWidgets, QtWidgets
 		return QtGui.QIcon(get_image_directory() + "white_box.png")
 
 
@@ -781,7 +781,7 @@
 	def mouse_down(self,event) :
 		m = self.get_2d_window().scr_to_img((event.x(),event.y()))
 		box_num = self.target().detect_box_collision(m)
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if box_num == -1:
 			if event.modifiers()&Qt.ShiftModifier : return # the user tried to delete nothing
 			if self.get_2d_window().list_data!=None:
@@ -807,7 +807,7 @@
 
 	def mouse_drag(self,event) :
 		m=self.get_2d_window().scr_to_img((event.x(),event.y()))
-		from PyQt4.QtCore import Qt
+		from PyQt5.QtCore import Qt
 		if event.modifiers()&Qt.ShiftModifier:
 			box_num = self.target().detect_box_collision(m)
 			if ( box_num != -1):
@@ -960,14 +960,14 @@
 		'''
 		connects the signals of the main 2D window to the slots of this object
 		'''
-		from PyQt4 import QtCore
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("mousedown"),self.mouse_down)
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("mousedrag"),self.mouse_drag)
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("mouseup")  ,self.mouse_up  )
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("keypress"),self.key_press)
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("mousewheel"),self.mouse_wheel)
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("mousemove"),self.mouse_move)
-		QtCore.QObject.connect(self.main_2d_window,QtCore.SIGNAL("module_closed"),self.module_closed)
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
+		self.main_2d_window.mousedown.connect(self.mouse_down)
+		self.main_2d_window.mousedrag.connect(self.mouse_drag)
+		self.main_2d_window.mouseup.connect(self.mouse_up)
+		self.main_2d_window.keypress.connect(self.key_press)
+		self.main_2d_window.mousewheel.connect(self.mouse_wheel)
+		self.main_2d_window.mousemove.connect(self.mouse_move)
+		self.main_2d_window.module_closed.connect(self.module_closed)
 
 	def boxes_erased(self,rm_boxes):
 		'''
@@ -1080,12 +1080,12 @@
 		'''
 		connects the signals of the main 2D window to the slots of this object
 		'''
-		from PyQt4 import QtCore
-		QtCore.QObject.connect(self.particle_window,QtCore.SIGNAL("mx_image_selected"),self.box_selected)
-		QtCore.QObject.connect(self.particle_window,QtCore.SIGNAL("mx_mousedrag"),self.box_moved)
-		QtCore.QObject.connect(self.particle_window,QtCore.SIGNAL("mx_mouseup"),self.box_released)
-		QtCore.QObject.connect(self.particle_window,QtCore.SIGNAL("mx_boxdeleted"),self.box_image_deleted)
-		QtCore.QObject.connect(self.particle_window,QtCore.SIGNAL("module_closed"),self.module_closed)
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
+		self.particle_window.mx_image_selected.connect(self.box_selected)
+		self.particle_window.mx_mousedrag.connect(self.box_moved)
+		self.particle_window.mx_mouseup.connect(self.box_released)
+		self.particle_window.mx_boxdeleted.connect(self.box_image_deleted)
+		self.particle_window.module_closed.connect(self.module_closed)
 
 	def box_selected(self,event,lc):
 		if self.mouse_handler == None: return
@@ -1120,7 +1120,7 @@
 	def box_released(self,event,lc):
 		if lc == None or lc[0] == None: return
 
-		if event.modifiers()&PyQt4.QtCore.Qt.ShiftModifier:
+		if event.modifiers()&PyQt5.QtCore.Qt.ShiftModifier:
 			self.particle_window.remove_particle_image(lc[0],event,True)
 			self.particle_window.force_display_update()
 			return
@@ -1735,8 +1735,8 @@
 		self.box_list.reset_shapes()
 		self.full_box_update()
 
-import PyQt4
-class EMBoxerModule(EMBoxerModuleVitals, PyQt4.QtCore.QObject):
+import PyQt5
+class EMBoxerModule(EMBoxerModuleVitals, PyQt5.QtCore.QObject):
 	'''
 	The EMBoxerModule is like a coordinator. It has 4 widgets: 1 inspector, 1 2D window viewer, and 2 particle
 	stack viewers (one for viewing boxed particles, one for viewing thumbnails).
@@ -1744,13 +1744,15 @@
 	that would otherwise not necessary interact. Overall the interactions can be complicated and this class is an
 	attempt to correctly granulate the overall design and the complexity of the classes involved.
 	'''
+	module_closed = PyQt5.QtCore.pyqtSignal()
+
 	def __init__(self,file_names=[],box_size=128):
 		'''
 		@file_name the name of a file on disk
 		@exception RuntimeError raised if the file does not exist
 		'''
 		EMBoxerModuleVitals.__init__(self, file_names=file_names, box_size=box_size)
-		PyQt4.QtCore.QObject.__init__(self)
+		PyQt5.QtCore.QObject.__init__(self)
 
 		self.signal_slot_handlers = {} # this is a dictionary, keys are (somewhat random) names, values are event handlers such as Main2DWindowEventHandler. This dict has the only reference to the event handlers
 		self.tools = {} # this is just to keep track of all the tools that have been added
@@ -1930,7 +1932,7 @@
 		if self.particles_window != None:
 			E2saveappwin("e2boxer","particles",self.particles_window.qt_parent)
 			self.particles_window.close()
-		self.emit(PyQt4.QtCore.SIGNAL("module_closed"))
+		self.module_closed.emit()
 
 	def run_output_dialog(self):
 		if self.current_tool=='Gauss':
@@ -1939,9 +1941,9 @@
 			return
 		from emsprworkflow import E2BoxerProgramOutputTask
 		if self.output_task != None: return
-		from PyQt4 import QtCore
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
 		self.output_task = EMBoxerWriteOutputTask(self.file_names, dfl_boxsize=self.box_size, current_tool=self.current_tool)
-		QtCore.QObject.connect(self.output_task.emitter(),QtCore.SIGNAL("task_idle"),self.on_output_task_idle)
+		self.output_task.emitter().task_idle.connect(self.on_output_task_idle)
 		self.output_task.run_form()
 
 	def on_output_task_idle(self):
@@ -1951,7 +1953,7 @@
 		if len(self.file_names) == 0: raise RuntimeError("Will not make a thumbs window if the number of images is zero")
 
 		if self.thumbs_window == None:
-			from PyQt4 import QtCore
+			from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
 			get_application().setOverrideCursor(QtCore.Qt.BusyCursor)
 
 
@@ -2092,7 +2094,7 @@
 	# 	self.main_2d_window.updateGL()
 
 	def set_current_file(self,file_name):
-		from PyQt4 import QtCore
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
 		get_application().setOverrideCursor(QtCore.Qt.BusyCursor)
 
 		if not file_exists(file_name): raise RuntimeError("The file %s does not exist" %file_name)
@@ -2162,6 +2164,8 @@
 from emapplication import error
 class EMBoxerWriteOutputTask(WorkFlowTask):
 	"""Use this form for writing boxed particles and/or coordinate files to disk."""
+	task_idle = QtCore.pyqtSignal()
+
 	def __init__(self,file_names=[],output_formats=["hdf","spi","img","bdb"],dfl_boxsize=128, current_tool=None):
 		WorkFlowTask.__init__(self)
 		self.window_title = "Write Particle Output"
@@ -2290,8 +2294,8 @@
 		if len(coord_output_names) > 0:
 			self.write_output(params["filenames"],coord_output_names,EMBoxList.write_coordinates,params["output_boxsize"],"Writing Coordinates")
 
-		from PyQt4 import QtCore
-		self.emit(QtCore.SIGNAL("task_idle"))
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
+		self.task_idle.emit()
 		self.form.close()
 		self.form = None
 		#self.write_db_entries(params)
@@ -2358,8 +2362,8 @@
 			output.append(base_name(name)+ '.box')
 	return output
 
-from PyQt4 import QtGui
-class EMBoxerInspector(QtGui.QWidget):
+from PyQt5 import QtGui, QtWebKitWidgets, QtWidgets
+class EMBoxerInspector(QtWidgets.QWidget):
 
 	PTCL_SHAPE_MAP = {}
 	PTCL_SHAPE_MAP["none"] = "hidden"
@@ -2369,39 +2373,39 @@
 	PTCL_SHAPE_MAP["circle with marker"] = "rcirclepoint"
 
 	def __init__(self,target) :
-		from PyQt4 import QtCore, QtGui
+		from PyQt5 import QtCore, QtGui, QtWebKitWidgets, QtWidgets
 		self.busy = True
 		self.tool_dynamic_vbl = None # this will be used to dynamic add widgets as the buttons are changed
 		self.dynamic_box_button_widget = None # this will be used to dynamic add widgets as the buttons are changed
 		self.ptcl_display_dict = None # this will be a dict mapping the names in the
-		QtGui.QWidget.__init__(self,None)
+		QtWidgets.QWidget.__init__(self,None)
 		self.setWindowIcon(QtGui.QIcon(get_image_directory() +"green_boxes.png"))
 		self.setWindowTitle("e2boxer")
 		self.target=weakref.ref(target)
 
-		self.vbl = QtGui.QVBoxLayout(self)
-		self.vbl.setMargin(0)
+		self.vbl = QtWidgets.QVBoxLayout(self)
+		self.vbl.setContentsMargins(0, 0, 0, 0)
 		self.vbl.setSpacing(6)
 		self.vbl.setObjectName("vbl")
 
-		self.tab_widget = QtGui.QTabWidget()
+		self.tab_widget = QtWidgets.QTabWidget()
 		self.tab_widget.addTab(self.get_main_tab(),"Main")
 		self.tab_widget.addTab(self.get_display_tab(),"Display")
 		self.vbl.addWidget(self.tab_widget)
 
-		self.gen_output_but=QtGui.QPushButton("Write output")
+		self.gen_output_but=QtWidgets.QPushButton("Write output")
 		self.vbl.addWidget(self.gen_output_but)
 
-		self.done_but=QtGui.QPushButton("Done")
+		self.done_but=QtWidgets.QPushButton("Done")
 		self.vbl.addWidget(self.done_but)
 
-		self.status_bar = QtGui.QStatusBar()
+		self.status_bar = QtWidgets.QStatusBar()
 		self.vbl.addWidget(self.status_bar)
 		self.status_bar.showMessage("Ready",10000)
 
-		self.connect(self.status_bar,QtCore.SIGNAL("messageChanged(const QString&)"),self.on_status_msg_change)
-		self.connect(self.done_but,QtCore.SIGNAL("clicked(bool)"),self.on_done)
-		self.connect(self.gen_output_but,QtCore.SIGNAL("clicked(bool)"),self.write_output_clicked)
+		self.status_bar.messageChanged['QString'].connect(self.on_status_msg_change)
+		self.done_but.clicked[bool].connect(self.on_done)
+		self.gen_output_but.clicked[bool].connect(self.write_output_clicked)
 		self.busy = False
 
 	def on_status_msg_change(self,s):
@@ -2425,33 +2429,33 @@
 		self.target().run_output_dialog()
 
 	def get_display_tab(self):
-		from PyQt4 import QtCore, QtGui, Qt
-		widget = QtGui.QWidget()
-		vbl =  QtGui.QVBoxLayout(widget)
+		from PyQt5 import Qt, QtCore, QtGui, QtWebKitWidgets, QtWidgets
+		widget = QtWidgets.QWidget()
+		vbl =  QtWidgets.QVBoxLayout(widget)
 
 		#  Insert the plot widget
-		viewhbl = QtGui.QVBoxLayout()
+		viewhbl = QtWidgets.QVBoxLayout()
 
-		self.viewboxes = QtGui.QCheckBox("Particle Window")
+		self.viewboxes = QtWidgets.QCheckBox("Particle Window")
 		self.viewboxes.setChecked(True)
-		self.viewimage = QtGui.QCheckBox("2D Image Window")
+		self.viewimage = QtWidgets.QCheckBox("2D Image Window")
 		self.viewimage.setChecked(True)
 
 		viewhbl.addWidget(self.viewboxes)
 		viewhbl.addWidget(self.viewimage)
 
 		if self.target().has_thumbs():
-			self.viewthumbs = QtGui.QCheckBox("Thumbnails Window")
+			self.viewthumbs = QtWidgets.QCheckBox("Thumbnails Window")
 			self.viewthumbs.setChecked(True)
 			viewhbl.addWidget(self.viewthumbs)
 
-		viewmanagement = QtGui.QGroupBox("Displayed Windows")
+		viewmanagement = QtWidgets.QGroupBox("Displayed Windows")
 		viewmanagement.setLayout(viewhbl)
 		vbl.addWidget(viewmanagement)
 
 
-		viewhbl2 = QtGui.QHBoxLayout()
-		self.boxformats = QtGui.QComboBox(self)
+		viewhbl2 = QtWidgets.QHBoxLayout()
+		self.boxformats = QtWidgets.QComboBox(self)
 		for val in EMBoxerInspector.PTCL_SHAPE_MAP.keys():
 			self.boxformats.addItem(val)
 
@@ -2468,17 +2472,17 @@
 			raise RuntimeError("Unknown ptcl display shape %s" %val)
 
 
-		displayboxes = QtGui.QGroupBox("Displayed Boxes")
+		displayboxes = QtWidgets.QGroupBox("Displayed Boxes")
 		displayboxes.setLayout(viewhbl2)
 		vbl.addWidget(displayboxes)
 
 
-		self.connect(self.viewboxes,QtCore.SIGNAL("clicked(bool)"),self.view_particles_clicked)
-		self.connect(self.viewimage,QtCore.SIGNAL("clicked(bool)"),self.view_2d_window_clicked)
+		self.viewboxes.clicked[bool].connect(self.view_particles_clicked)
+		self.viewimage.clicked[bool].connect(self.view_2d_window_clicked)
 		if self.target().has_thumbs():
-			self.connect(self.viewthumbs,QtCore.SIGNAL("clicked(bool)"),self.view_thumbs_clicked)
+			self.viewthumbs.clicked[bool].connect(self.view_thumbs_clicked)
 
-		QtCore.QObject.connect(self.boxformats, QtCore.SIGNAL("currentIndexChanged(QString)"), self.box_format_changed)
+		self.boxformats.currentIndexChanged['QString'].connect(self.box_format_changed)
 
 		return widget
 	def view_particles_clicked(self,val):
@@ -2515,21 +2519,21 @@
 
 
 	def get_main_tab(self):
-		from PyQt4 import QtCore, QtGui, Qt
-		widget = QtGui.QWidget()
-		vbl = QtGui.QVBoxLayout(widget)
-		vbl.setMargin(0)
+		from PyQt5 import Qt, QtCore, QtGui, QtWebKitWidgets, QtWidgets
+		widget = QtWidgets.QWidget()
+		vbl = QtWidgets.QVBoxLayout(widget)
+		vbl.setContentsMargins(0, 0, 0, 0)
 		vbl.setSpacing(6)
 
-		box_size_hbl=QtGui.QHBoxLayout()
-		box_size_hbl.setMargin(0)
+		box_size_hbl=QtWidgets.QHBoxLayout()
+		box_size_hbl.setContentsMargins(0, 0, 0, 0)
 		box_size_hbl.setSpacing(2)
 
-		self.box_size_label = QtGui.QLabel("Box Size:",self)
+		self.box_size_label = QtWidgets.QLabel("Box Size:",self)
 		box_size_hbl.addWidget(self.box_size_label)
 		self.pos_int_validator = QtGui.QIntValidator(self)
 		self.pos_int_validator.setBottom(1)
-		self.box_size = QtGui.QLineEdit(str(self.target().get_box_size()),self)
+		self.box_size = QtWidgets.QLineEdit(str(self.target().get_box_size()),self)
 		self.box_size.setValidator(self.pos_int_validator)
 		box_size_hbl.addWidget(self.box_size)
 
@@ -2539,20 +2543,20 @@
 
 		self.add_bottom_buttons(vbl)
 
-		self.connect(self.box_size,QtCore.SIGNAL("editingFinished()"),self.new_box_size)
+		self.box_size.editingFinished.connect(self.new_box_size)
 		return widget
 
 	def add_bottom_buttons(self,layout):
-		from PyQt4 import QtCore, QtGui, Qt
-		hbl_t=QtGui.QHBoxLayout()
+		from PyQt5 import Qt, QtCore, QtGui, QtWebKitWidgets, QtWidgets
+		hbl_t=QtWidgets.QHBoxLayout()
 
-		hbl_q=QtGui.QHBoxLayout()
-		self.quality=QtGui.QLabel("Image Quality:")
+		hbl_q=QtWidgets.QHBoxLayout()
+		self.quality=QtWidgets.QLabel("Image Quality:")
 		qual_tt = "Assign a quality number to the image. This acts as metadata for your convenience and is displayed in eman2 forms when possible."
 		self.quality.setToolTip(qual_tt)
 		hbl_q.addWidget(self.quality)
 
-		self.image_qualities = QtGui.QComboBox()
+		self.image_qualities = QtWidgets.QComboBox()
 		for i in range(10):
 			self.image_qualities.addItem(str(i))
 		self.image_qualities.setCurrentIndex(2)
@@ -2560,7 +2564,7 @@
 		hbl_q.addWidget(self.image_qualities)
 		layout.addLayout(hbl_q)
 
-		QtCore.QObject.connect(self.image_qualities, QtCore.SIGNAL("currentIndexChanged(QString)"), self.image_quality_changed)
+		self.image_qualities.currentIndexChanged['QString'].connect(self.image_quality_changed)
 
 	def image_quality_changed(self,val):
 		if self.busy: return
@@ -2577,25 +2581,25 @@
 		self.busy = False
 
 	def add_boxing_button_group(self,layout):
-		from PyQt4 import QtCore, QtGui, Qt
+		from PyQt5 import Qt, QtCore, QtGui, QtWebKitWidgets, QtWidgets
 
-		self.tool_button_group_box = QtGui.QGroupBox("Tools")
-		self.tool_button_group_box_vbl = QtGui.QVBoxLayout(self.tool_button_group_box)
-		self.tool_dynamic_vbl = QtGui.QVBoxLayout()
-
-		hbl = QtGui.QHBoxLayout()
-		current_tool_label = QtGui.QLabel("Current Boxing Tool:")
-		self.current_tool_combobox = QtGui.QComboBox()
+		self.tool_button_group_box = QtWidgets.QGroupBox("Tools")
+		self.tool_button_group_box_vbl = QtWidgets.QVBoxLayout(self.tool_button_group_box)
+		self.tool_dynamic_vbl = QtWidgets.QVBoxLayout()
+
+		hbl = QtWidgets.QHBoxLayout()
+		current_tool_label = QtWidgets.QLabel("Current Boxing Tool:")
+		self.current_tool_combobox = QtWidgets.QComboBox()
 		hbl.addWidget(current_tool_label)
 		hbl.addWidget(self.current_tool_combobox)
 
-		self.tools_stacked_widget = QtGui.QStackedWidget()
+		self.tools_stacked_widget = QtWidgets.QStackedWidget()
 		self.tool_dynamic_vbl.addLayout(hbl)
 		self.tool_dynamic_vbl.addWidget(self.tools_stacked_widget)
 		self.tool_button_group_box_vbl.addLayout(self.tool_dynamic_vbl,1)
 		layout.addWidget(self.tool_button_group_box,0,)
 
-		QtCore.QObject.connect(self.current_tool_combobox, QtCore.SIGNAL("activated(int)"), self.current_tool_combobox_changed)
+		self.current_tool_combobox.activated[int].connect(self.current_tool_combobox_changed)
 
 	def add_mouse_tool(self,mouse_tool,):
 #		icon = mouse_tool.icon()
@@ -2636,7 +2640,7 @@
 		if self.target(): self.target().set_box_size(box_size)
 
 	def keyPressEvent(self,event):
-		from PyQt4 import QtCore
+		from PyQt5 import QtCore, QtWebKitWidgets, QtWidgets
 		if event.key() == QtCore.Qt.Key_F1:
 			try:
 				import webbrowser
@@ -2644,13 +2648,13 @@
 				return
 			except: pass
 
-			try: from PyQt4 import QtWebKit
+			try: from PyQt5 import QtWebKit
 			except: return
 			try:
 				try:
 					test = self.browser
 				except:
-					self.browser = QtWebKit.QWebView()
+					self.browser = QtWebKitWidgets.QWebView()
 					self.browser.load(QtCore.QUrl("http://blake.bcm.edu/emanwiki/e2boxer"))
 					self.browser.resize(800,800)
 
